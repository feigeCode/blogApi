/*
SQLyog Ultimate v12.08 (64 bit)
MySQL - 5.7.27-log : Database - myblog
*********************************************************************
*/

/*!40101 SET NAMES utf8 */;

/*!40101 SET SQL_MODE=''*/;

/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;
CREATE DATABASE /*!32312 IF NOT EXISTS*/`myblog` /*!40100 DEFAULT CHARACTER SET utf8 */;

USE `myblog`;

/*Table structure for table `admin` */

DROP TABLE IF EXISTS `admin`;

CREATE TABLE `admin` (
  `id` int(11) NOT NULL,
  `admin_name` varchar(15) NOT NULL,
  `password` varchar(18) NOT NULL,
  `email` varchar(20) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `admin_name` (`admin_name`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Data for the table `admin` */

insert  into `admin`(`id`,`admin_name`,`password`,`email`) values (1,'admin','123456','123456');

/*Table structure for table `blog` */

DROP TABLE IF EXISTS `blog`;

CREATE TABLE `blog` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `type_name` varchar(20) DEFAULT NULL,
  `title` varchar(20) NOT NULL,
  `content` text NOT NULL,
  `create_time` datetime NOT NULL,
  `change_time` datetime NOT NULL,
  `author` varchar(15) DEFAULT NULL,
  `view` int(11) NOT NULL DEFAULT '0',
  PRIMARY KEY (`id`),
  KEY `typeName` (`type_name`),
  KEY `author` (`author`),
  CONSTRAINT `author` FOREIGN KEY (`author`) REFERENCES `user` (`username`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `typeName` FOREIGN KEY (`type_name`) REFERENCES `type` (`type_name`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=18 DEFAULT CHARSET=utf8;

/*Data for the table `blog` */

insert  into `blog`(`id`,`type_name`,`title`,`content`,`create_time`,`change_time`,`author`,`view`) values (1,'springboot','springboot入门','springb自动装配','2020-02-23 13:43:36','2020-02-23 19:06:48','admin',0),(2,'mybatis','配置','得到的','2020-02-23 18:05:36','2020-03-12 22:39:47','admin',3),(4,'springMVC','mybatis-plus','##飞哥','2020-02-23 18:10:09','2020-02-25 14:42:23','admin',111),(5,'springboot','人','嗯嗯','2020-02-23 19:07:20','2020-02-23 19:07:20','admin',2),(6,'mybatis','mybatis入门','<h2>1、Mybatis简介</h2>\r\n<p><img src=\"https://blog.kuangstudy.com/usr/uploads/2019/10/1296229149.png\" referrerpolicy=\"no-referrer\" alt=\"1567007421329.png\"></p>\r\n<h3>什么是MyBatis</h3>\r\n<ul>\r\n<li>MyBatis 是一款优秀的<strong>持久层框架</strong></li>\r\n<li>MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集的过程</li>\r\n<li>MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 实体类 【Plain Old Java Objects,普通的 Java对象】映射成数据库中的记录。</li>\r\n<li>MyBatis 本是apache的一个开源项目ibatis, 2010年这个项目由apache 迁移到了google code，并且改名为MyBatis 。</li>\r\n<li>2013年11月迁移到<strong>Github</strong> .</li>\r\n<li>Mybatis官方文档 : <a href=\'http://www.mybatis.org/mybatis-3/zh/index.html\' target=\'_blank\' class=\'url\'>http://www.mybatis.org/mybatis-3/zh/index.html</a></li>\r\n<li>GitHub : <a href=\'https://github.com/mybatis/mybatis-3\' target=\'_blank\' class=\'url\'>https://github.com/mybatis/mybatis-3</a></li>\r\n\r\n</ul>\r\n<h3>持久化</h3>\r\n<ul>\r\n<li><p><strong>持久化是将程序数据在持久状态和瞬时状态间转换的机制。</strong></p>\r\n<ul>\r\n<li>即把数据（如内存中的对象）保存到可永久保存的存储设备中（如磁盘）。持久化的主要应用是将内存中的对象存储在数据库中，或者存储在磁盘文件中、XML数据文件中等等。</li>\r\n<li>JDBC就是一种持久化机制。文件IO也是一种持久化机制。</li>\r\n<li>在生活中 : 将鲜肉冷藏，吃的时候再解冻的方法也是。将水果做成罐头的方法也是。</li>\r\n\r\n</ul>\r\n</li>\r\n<li><p><strong>为什么需要持久化服务呢？那是由于内存本身的缺陷引起的</strong></p>\r\n<ul>\r\n<li>内存断电后数据会丢失，但有一些对象是无论如何都不能丢失的，比如银行账号等，遗憾的是，人们还无法保证内存永不掉电。</li>\r\n<li>内存过于昂贵，与硬盘、光盘等外存相比，内存的价格要高2~3个数量级，而且维持成本也高，至少需要一直供电吧。所以即使对象不需要永久保存，也会因为内存的容量限制不能一直呆在内存中，需要持久化来缓存到外存。</li>\r\n\r\n</ul>\r\n</li>\r\n\r\n</ul>\r\n<h3>持久层</h3>\r\n<ul>\r\n<li><p>什么是持久层？</p>\r\n<ul>\r\n<li>完成持久化工作的代码块 . ----&gt; dao层 【DAO (Data Access Object) 数据访问对象】</li>\r\n<li>大多数情况下特别是企业级应用，数据持久化往往也就意味着将内存中的数据保存到磁盘上加以固化，而持久化的实现过程则大多通过各种<strong>关系数据库</strong>来完成。</li>\r\n<li>不过这里有一个字需要特别强调，也就是所谓的“层”。对于应用系统而言，数据持久功能大多是必不可少的组成部分。也就是说，我们的系统中，已经天然的具备了“持久层”概念？也许是，但也许实际情况并非如此。之所以要独立出一个“持久层”的概念,而不是“持久模块”，“持久单元”，也就意味着，我们的系统架构中，应该有一个相对独立的逻辑层面，专著于数据持久化逻辑的实现.</li>\r\n<li>与系统其他部分相对而言，这个层面应该具有一个较为清晰和严格的逻辑边界。 【说白了就是用来操作数据库存在的！】</li>\r\n\r\n</ul>\r\n</li>\r\n\r\n</ul>\r\n<h3>为什么需要Mybatis</h3>\r\n<ul>\r\n<li><p>Mybatis就是帮助程序猿将数据存入数据库中 , 和从数据库中取数据 .</p>\r\n</li>\r\n<li><p>传统的jdbc操作 , 有很多重复代码块 .比如 : 数据取出时的封装 , 数据库的建立连接等等... , 通过框架可以减少重复代码,提高开发效率 .</p>\r\n</li>\r\n<li><p>MyBatis 是一个半自动化的<strong>ORM框架 (Object Relationship Mapping) --&gt;对象关系映射</strong></p>\r\n</li>\r\n<li><p>所有的事情，不用Mybatis依旧可以做到，只是用了它，所有实现会更加简单！<strong>技术没有高低之分，只有使用这个技术的人有高低之别</strong></p>\r\n</li>\r\n<li><p>MyBatis的优点</p>\r\n<ul>\r\n<li>简单易学：本身就很小且简单。没有任何第三方依赖，最简单安装只要两个jar文件+配置几个sql映射文件就可以了，易于学习，易于使用，通过文档和源代码，可以比较完全的掌握它的设计思路和实现。</li>\r\n<li>灵活：mybatis不会对应用程序或者数据库的现有设计强加任何影响。 sql写在xml里，便于统一管理和优化。通过sql语句可以满足操作数据库的所有需求。</li>\r\n<li>解除sql与程序代码的耦合：通过提供DAO层，将业务逻辑和数据访问逻辑分离，使系统的设计更清晰，更易维护，更易单元测试。sql和代码的分离，提高了可维护性。</li>\r\n<li>提供xml标签，支持编写动态sql。</li>\r\n<li>.......</li>\r\n\r\n</ul>\r\n</li>\r\n<li><p>最重要的一点，使用的人多！公司需要！</p>\r\n</li>\r\n<li><p>环境说明：</p>\r\n<ul>\r\n<li>jdk 8 +</li>\r\n<li>MySQL 5.7.19</li>\r\n<li>maven-3.6.0</li>\r\n<li>IDEA</li>\r\n\r\n</ul>\r\n<p>学习前需要掌握：</p>\r\n<ul>\r\n<li>JDBC</li>\r\n<li>MySQL</li>\r\n<li>Java 基础</li>\r\n<li>Maven</li>\r\n<li>Junit</li>\r\n\r\n</ul>\r\n</li>\r\n\r\n</ul>\r\n<h2>2、mybatis crud（实现增删改查）</h2>\r\n<h4>1.1、创建一个maven项目</h4>\r\n<p>		导入依赖</p>\r\n<pre><code class=\'language-xml\' lang=\'xml\'>&lt;dependencies&gt;\r\n    &lt;!--mysql驱动--&gt;\r\n    &lt;dependency&gt;\r\n        &lt;groupId&gt;mysql&lt;/groupId&gt;\r\n        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;\r\n        &lt;version&gt;5.1.47&lt;/version&gt;\r\n    &lt;/dependency&gt;\r\n    &lt;!--mybatis支持--&gt;\r\n    &lt;dependency&gt;\r\n        &lt;groupId&gt;org.mybatis&lt;/groupId&gt;\r\n        &lt;artifactId&gt;mybatis&lt;/artifactId&gt;\r\n        &lt;version&gt;3.5.2&lt;/version&gt;\r\n    &lt;/dependency&gt;\r\n    &lt;!--junit支持--&gt;\r\n    &lt;dependency&gt;\r\n        &lt;groupId&gt;junit&lt;/groupId&gt;\r\n        &lt;artifactId&gt;junit&lt;/artifactId&gt;\r\n        &lt;version&gt;4.12&lt;/version&gt;\r\n    &lt;/dependency&gt;\r\n&lt;/dependencies&gt;\r\n</code></pre>\r\n<p>注意点 : pom文件的设置中需要设置资源过滤 , 否则会有资源文件打包不成功问题，导致项目无法运行；</p>\r\n<pre><code class=\'language-xml\' lang=\'xml\'>&lt;build&gt;\r\n    &lt;resources&gt;\r\n        &lt;resource&gt;\r\n            &lt;directory&gt;src/main/java&lt;/directory&gt;\r\n            &lt;includes&gt;\r\n                &lt;include&gt;**/*.properties&lt;/include&gt;\r\n                &lt;include&gt;**/*.xml&lt;/include&gt;\r\n            &lt;/includes&gt;\r\n            &lt;filtering&gt;true&lt;/filtering&gt;\r\n        &lt;/resource&gt;\r\n    &lt;/resources&gt;\r\n&lt;/build&gt;\r\n</code></pre>\r\n<p>&nbsp;</p>\r\n<h4>1.2、创建数据库和表</h4>\r\n<pre><code class=\'language-sql\' lang=\'sql\'>CREATE DATABASE mybatis CHARACTER SET utf8;\r\nCREATE TABLE USER(\r\n	id INT PRIMARY KEY,\r\n	username VARCHAR(15) NOT NULL,\r\n	pwd VARCHAR(20) NOT NULL\r\n)\r\nINSERT INTO USER VALUES(2018143114,&#39;张三&#39;,&#39;123456&#39;),(2018143115,&#39;李四&#39;,&#39;1234567&#39;),(2018143116,&#39;王五&#39;,&#39;147258&#39;);\r\nSELECT * FROM USER;\r\n</code></pre>\r\n<h4>1.3、编写mybatis配置文件</h4>\r\n<p>在resource里新建一个mybatis-config.xml文件</p>\r\n<pre><code class=\'language-xml\' lang=\'xml\'>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;\r\n&lt;!DOCTYPE configuration\r\n        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;\r\n        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;\r\n&lt;configuration&gt;\r\n    &lt;environments default=&quot;development&quot;&gt;\r\n        &lt;environment id=&quot;development&quot;&gt;\r\n            &lt;transactionManager type=&quot;JDBC&quot;/&gt;\r\n            &lt;dataSource type=&quot;POOLED&quot;&gt;\r\n                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;\r\n                &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;amp;useUnicode=true&amp;amp;characterEncoding=utf8&quot;/&gt;\r\n                &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;\r\n                &lt;property name=&quot;password&quot; value=&quot;hufei169357&quot;/&gt;\r\n            &lt;/dataSource&gt;\r\n        &lt;/environment&gt;\r\n    &lt;/environments&gt;\r\n    &lt;mappers&gt;\r\n        &lt;mapper resource=&quot;com/feige/dao/userMapper.xml&quot;/&gt;\r\n    &lt;/mappers&gt;\r\n&lt;/configuration&gt;\r\n</code></pre>\r\n<h4>1.4、新建一个工具类用来获取SqlSession对象</h4>\r\n<pre><code class=\'language-java\' lang=\'java\'>package com.feige.utils;\r\n\r\nimport org.apache.ibatis.io.Resources;\r\nimport org.apache.ibatis.session.SqlSession;\r\nimport org.apache.ibatis.session.SqlSessionFactory;\r\nimport org.apache.ibatis.session.SqlSessionFactoryBuilder;\r\n\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\n//sqlSessionFactory-sqlSession\r\npublic class MybatisUtils {\r\n    private static SqlSessionFactory sqlSessionFactory;\r\n    static {\r\n        try {\r\n            //使用mybatis第一步：获取sqlSessionFactory对象\r\n            String resource = &quot;mybatis-config.xml&quot;;\r\n            InputStream inputStream = Resources.getResourceAsStream(resource);\r\n            sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n    //既然有了sqlSessionFactory，顾名思义，我们就可以从中获得sqlSession的实例\r\n    public static SqlSession getSqlSessioon(){\r\n        return sqlSessionFactory.openSession();\r\n    }\r\n}\r\n\r\n</code></pre>\r\n<p>&nbsp;</p>\r\n<h4>1.5、编写一个pojo（实体类）</h4>\r\n<pre><code class=\'language-java\' lang=\'java\'>package com.feige.pojo;\r\n\r\npublic class User {\r\n    private int id;\r\n    private String username;\r\n    private String pwd;\r\n\r\n    public User() {\r\n    }\r\n\r\n    public User(int id, String username, String pwd) {\r\n        this.id = id;\r\n        this.username = username;\r\n        this.pwd = pwd;\r\n    }\r\n\r\n    public int getId() {\r\n        return id;\r\n    }\r\n\r\n    public void setId(int id) {\r\n        this.id = id;\r\n    }\r\n\r\n    public String getUsername() {\r\n        return username;\r\n    }\r\n\r\n    public void setUsername(String username) {\r\n        this.username = username;\r\n    }\r\n\r\n    public String getPwd() {\r\n        return pwd;\r\n    }\r\n\r\n    public void setPwd(String pwd) {\r\n        this.pwd = pwd;\r\n    }\r\n    @Override\r\n    public String toString() {\r\n        return &quot;User{&quot; +\r\n                &quot;id=&quot; + id +\r\n                &quot;, username=&#39;&quot; + username + &#39;\\&#39;&#39; +\r\n                &quot;, pwd=&#39;&quot; + pwd + &#39;\\&#39;&#39; +\r\n                &#39;}&#39;;\r\n    }\r\n}\r\n\r\n</code></pre>\r\n<h4>1.6、新建一个userMapper接口</h4>\r\n<pre><code class=\'language-java\' lang=\'java\'>package com.feige.dao;\r\n\r\nimport com.feige.pojo.User;\r\n\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\npublic interface UserMapper {\r\n    //查询全部用户\r\n    List&lt;User&gt; getAllUser();\r\n    //通过一个id查询一个用户\r\n    User getUserById(int id);\r\n    //通过id修改一个用户\r\n    int updateUserById(Map map);\r\n    //通过id删除一个用户\r\n    int deleteUserById(int id);\r\n    //插入一条数据\r\n    int insertUser(User user);\r\n}\r\n\r\n</code></pre>\r\n<h4>1.7、新建一个userMapper.xml文件</h4>\r\n<pre><code class=\'language-xml\' lang=\'xml\'>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;\r\n&lt;!DOCTYPE mapper\r\n        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;\r\n        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;\r\n&lt;mapper namespace=&quot;com.feige.dao.UserMapper&quot;&gt;\r\n    &lt;!--每个语句要对应相应的标签select对应&lt;select&gt; delete 对应&lt;delete&gt; update 对应&lt;update&gt; insert 对应&lt;insert&gt;--&gt;\r\n    &lt;select id=&quot;getAllUser&quot; resultType=&quot;com.feige.pojo.User&quot;&gt;\r\n        select * from user\r\n    &lt;/select&gt;\r\n    &lt;select id=&quot;getUserById&quot; resultType=&quot;com.feige.pojo.User&quot; parameterType=&quot;int&quot;&gt;\r\n        select * from user where id=#{id}\r\n    &lt;/select&gt;\r\n    &lt;update id=&quot;updateUserById&quot; parameterType=&quot;map&quot;&gt;\r\n        update user set pwd=#{pwd} where id=#{id}\r\n    &lt;/update&gt;\r\n    &lt;delete id=&quot;deleteUserById&quot; parameterType=&quot;int&quot;&gt;\r\n        delete from user where id=#{id}\r\n    &lt;/delete&gt;\r\n    &lt;insert id=&quot;insertUser&quot; parameterType=&quot;com.feige.pojo.User&quot;&gt;\r\n        insert into user values (#{id},#{username},#{pwd})\r\n    &lt;/insert&gt;\r\n&lt;/mapper&gt;\r\n</code></pre>\r\n<h4>1.8、测试代码</h4>\r\n<pre><code class=\'language-java\' lang=\'java\'>package com.feige.mybatisTest;\r\n\r\nimport com.feige.dao.UserMapper;\r\nimport com.feige.pojo.User;\r\nimport com.feige.utils.MybatisUtils;\r\nimport org.apache.ibatis.session.SqlSession;\r\nimport org.junit.Test;\r\n\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\npublic class MybatisTest {\r\n    @Test\r\n    public void mybatisTest1(){\r\n        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();\r\n        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);\r\n        List&lt;User&gt; allUser = mapper.getAllUser();\r\n        for (User user : allUser) {\r\n            System.out.println(user);\r\n        }\r\n        sqlSessioon.close();\r\n\r\n    }\r\n    @Test\r\n    public void mybatisTest2(){\r\n        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();\r\n        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);\r\n        User userById = mapper.getUserById(2018143114);\r\n        System.out.println(userById);\r\n        sqlSessioon.close();\r\n\r\n    }\r\n    @Test\r\n    public void mybatisTest3() {\r\n        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();\r\n        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);\r\n        //使用万能map传参\r\n        Map&lt;String,Object&gt; map = new HashMap&lt;String, Object&gt;();\r\n        map.put(&quot;pwd&quot;,2018143114);\r\n        map.put(&quot;id&quot;,2018143114);\r\n\r\n        int i = mapper.updateUserById(map);\r\n        if (i &gt; 0) {\r\n            System.out.println(&quot;修改成功！&quot;+i);\r\n        }\r\n        //增删改需要提交事务\r\n        sqlSessioon.commit();\r\n\r\n        sqlSessioon.close();\r\n\r\n    }\r\n    @Test\r\n    public void mybatisTest4(){\r\n        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();\r\n        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);\r\n        int i = mapper.deleteUserById(2018143117);\r\n        if (i &gt; 0) {\r\n            System.out.println(&quot;删除成功！&quot;+i);\r\n        }\r\n        sqlSessioon.commit();\r\n        sqlSessioon.close();\r\n\r\n    }\r\n    @Test\r\n    public void mybatisTest5(){\r\n        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();\r\n        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);\r\n        User user = new User(2018143117, &quot;杨帆东&quot;, &quot;2018143117&quot;);\r\n        int i = mapper.insertUser(user);\r\n        if (i &gt; 0) {\r\n            System.out.println(&quot;插入成功！&quot;+i);\r\n        }\r\n        sqlSessioon.commit();\r\n        sqlSessioon.close();\r\n\r\n    }\r\n}\r\n\r\n</code></pre>\r\n<p>&nbsp;</p>\r\n<p>		</p>','2020-02-23 19:15:45','2020-02-23 19:15:50','admin',0),(7,'mybatis','mybatis啊','作者','2020-02-23 19:27:18','2020-02-23 19:27:18','admin',1),(8,'springboot','aaa','[TOC]\r\n                            #### Disabled options\r\n\r\n                            - TeX (Based on KaTeX);\r\n                            - Emoji;\r\n                            - Task lists;\r\n                            - HTML tags decode;\r\n                            - Flowchart and Sequence Diagram;\r\n                            #### Editor.md directory\r\n\r\n                                editor.md/\r\n                                        lib/\r\n                                        css/\r\n                                        scss/\r\n                                        tests/\r\n                                        fonts/\r\n                                        images/\r\n                                        plugins/\r\n                                        examples/\r\n                                        languages/\r\n                                        editormd.js\r\n                                        ...\r\n\r\n                            ```html\r\n                            <!-- English -->\r\n                            <script src=\"../dist/js/languages/en.js\"></script>\r\n\r\n                            <!-- 繁體中文 -->\r\n                            <script src=\"../dist/js/languages/zh-tw.js\"></script>\r\n                            ```\r\n                        ','2020-02-24 19:39:36','2020-02-25 14:38:07','admin',1),(9,'mybatis','bbb','[TOC]\r\n\r\n                            #### Disabled options\r\n\r\n                            - TeX (Based on KaTeX);\r\n                            - Emoji;\r\n                            - Task lists;\r\n                            - HTML tags decode;\r\n                            - Flowchart and Sequence Diagram;\r\n\r\n                            #### Editor.md directory\r\n\r\n                                editor.md/\r\n                                        lib/\r\n                                        css/\r\n                                        scss/\r\n                                        tests/\r\n                                        fonts/\r\n                                        images/\r\n                                        plugins/\r\n                                        examples/\r\n                                        languages/\r\n                                        editormd.js\r\n                                        ...\r\n\r\n                            ```html\r\n                            <!-- English -->\r\n                            <script src=\"../dist/js/languages/en.js\"></script>\r\n\r\n                            <!-- 繁體中文 -->\r\n                            <script src=\"../dist/js/languages/zh-tw.js\"></script>\r\n                            ```\r\n                        ','2020-02-24 19:44:09','2020-02-24 19:44:09','admin',1),(10,'springboot','飞哥','#大哥的Markdown','2020-02-25 14:43:28','2020-02-25 14:43:28','admin',1),(11,'mybatis','大哥','#飞哥的博客后台管理系统','2020-02-25 14:49:26','2020-02-25 14:49:26','admin',1),(12,'mybatis','56','##等待','2020-02-25 14:50:53','2020-02-25 14:50:53','admin',5),(13,'mybatis','ssm1整合','# ssm整合\r\n\r\n## 1、数据库环境\r\n\r\n创建一个存放书籍数据的数据库表\r\n\r\n```sql\r\nCREATE DATABASE `ssmbuild`;\r\n\r\nUSE `ssmbuild`;\r\n\r\nDROP TABLE IF EXISTS `books`;\r\n\r\nCREATE TABLE `books` (\r\n  `bookId` INT PRIMARY KEY COMMENT \'书id\',\r\n  `bookName` VARCHAR(100) NOT NULL COMMENT \'书名\',\r\n  `bookCounts` INT(11) NOT NULL COMMENT \'数量\',\r\n  ``ssmbuild``ssmbuild`` VARCHAR(200) NOT NULL COMMENT \'描述\'\r\n) ENGINE=INNODB DEFAULT CHARSET=utf8\r\n\r\nINSERT  INTO `books`(`bookId`,`bookName`,`bookCounts`,`detail`)VALUES \r\n(1,\'Java\',1,\'从入门到放弃\'),\r\n(2,\'MySQL\',10,\'从删库到跑路\'),\r\n(3,\'Linux\',5,\'从进门到进牢\');\r\n\r\nSELECT * FROM books\r\n```\r\n\r\n## 2、基本环境搭建\r\n\r\n1. 新建一Maven项目！ ssmbuild ， 添加web的支持\r\n\r\n   ![image-20200128134359317](.\\ssm整合.assets\\image-20200128134359317.png)\r\n\r\n2. 导入相关的pom依赖！\r\n\r\n   ```xml\r\n   <dependencies>\r\n       <!--Junit-->\r\n       <dependency>\r\n           <groupId>junit</groupId>\r\n           <artifactId>junit</artifactId>\r\n           <version>4.12</version>\r\n       </dependency>\r\n       <!--数据库驱动-->\r\n       <dependency>\r\n           <groupId>mysql</groupId>\r\n           <artifactId>mysql-connector-java</artifactId>\r\n           <version>5.1.47</version>\r\n       </dependency>\r\n       <!-- 数据库连接池 -->\r\n       <dependency>\r\n           <groupId>com.mchange</groupId>\r\n           <artifactId>c3p0</artifactId>\r\n           <version>0.9.5.2</version>\r\n       </dependency>\r\n   \r\n       <!--Servlet - JSP -->\r\n       <dependency>\r\n           <groupId>javax.servlet</groupId>\r\n           <artifactId>servlet-api</artifactId>\r\n           <version>2.5</version>\r\n       </dependency>\r\n       <dependency>\r\n           <groupId>javax.servlet.jsp</groupId>\r\n           <artifactId>jsp-api</artifactId>\r\n           <version>2.2</version>\r\n       </dependency>\r\n       <dependency>\r\n           <groupId>javax.servlet</groupId>\r\n           <artifactId>jstl</artifactId>\r\n           <version>1.2</version>\r\n       </dependency>\r\n   \r\n       <!--Mybatis-->\r\n       <dependency>\r\n           <groupId>org.mybatis</groupId>\r\n           <artifactId>mybatis</artifactId>\r\n           <version>3.5.2</version>\r\n       </dependency>\r\n       <dependency>\r\n           <groupId>org.mybatis</groupId>\r\n           <artifactId>mybatis-spring</artifactId>\r\n           <version>2.0.2</version>\r\n       </dependency>\r\n   \r\n       <!--Spring-->\r\n       <dependency>\r\n           <groupId>org.springframework</groupId>\r\n           <artifactId>spring-webmvc</artifactId>\r\n           <version>5.1.9.RELEASE</version>\r\n       </dependency>\r\n       <dependency>\r\n           <groupId>org.springframework</groupId>\r\n           <artifactId>spring-jdbc</artifactId>\r\n           <version>5.1.9.RELEASE</version>\r\n       </dependency>\r\n       <!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->\r\n       <dependency>\r\n           <groupId>org.projectlombok</groupId>\r\n           <artifactId>lombok</artifactId>\r\n           <version>1.16.10</version>\r\n       </dependency>\r\n   </dependencies>\r\n   ```\r\n\r\n3. Maven资源过滤设置\r\n\r\n   ```xml\r\n   <build>\r\n       <resources>\r\n           <resource>\r\n               <directory>src/main/java</directory>\r\n               <includes>\r\n                   <include>**/*.properties</include>\r\n                   <include>**/*.xml</include>\r\n               </includes>\r\n               <filtering>false</filtering>\r\n           </resource>\r\n           <resource>\r\n               <directory>src/main/resources</directory>\r\n               <includes>\r\n                   <include>**/*.properties</include>\r\n                   <include>**/*.xml</include>\r\n               </includes>\r\n               <filtering>false</filtering>\r\n           </resource>\r\n       </resources>\r\n   </build>\r\n   ```\r\n\r\n4. 建立基本结构和配置框架！\r\n\r\n   - com.feige.pojo\r\n\r\n   - com.feige.dao\r\n\r\n   - com.feige.service\r\n\r\n   - com.feige.controller\r\n\r\n     在resources目录下创建\r\n\r\n   - mybatis-config.xml\r\n\r\n     ```xml\r\n     <?xml version=\"1.0\" encoding=\"UTF-8\" ?>\r\n     <!DOCTYPE configuration\r\n             PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\r\n             \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\r\n     <configuration>\r\n     \r\n     </configuration>\r\n     ```\r\n\r\n   - applicationContext.xml\r\n\r\n     ```xml\r\n     <?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n     <beans xmlns=\"http://www.springframework.org/schema/beans\"\r\n            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n            xsi:schemaLocation=\"http://www.springframework.org/schema/beans\r\n             http://www.springframework.org/schema/beans/spring-beans.xsd\">\r\n     \r\n     </beans>\r\n     ```\r\n\r\n## 3、Mybatis层编写\r\n\r\n1. 数据库配置文件 **database.properties**\r\n\r\n   ```properties\r\n   jdbc.driver=com.mysql.jdbc.Driver\r\n   jdbc.url=jdbc:mysql://localhost:3306/ssmbuild?useSSL=true&useUnicode=true&characterEncoding=utf8\r\n   jdbc.username=root\r\n   jdbc.password=hufei169357\r\n   ```\r\n\r\n2. IDEA关联数据库\r\n\r\n3. 编写MyBatis的核心配置文件\r\n\r\n   ```xml\r\n   <?xml version=\"1.0\" encoding=\"UTF-8\" ?>\r\n   <!DOCTYPE configuration\r\n           PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\r\n           \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\r\n   <configuration>\r\n       \r\n       <typeAliases>\r\n           <package name=\"com.feige.pojo\"/>\r\n       </typeAliases>\r\n       <mappers>\r\n           <mapper resource=\"com/feige/dao/BookMapper.xml\"/>\r\n       </mappers>\r\n   \r\n   </configuration>\r\n   ```\r\n\r\n4. 编写数据库对应的实体类 com.feige.pojo.Books\r\n   使用lombok插件！\r\n\r\n   ```java\r\n   package com.kuang.pojo;\r\n   \r\n   import lombok.AllArgsConstructor;\r\n   import lombok.Data;\r\n   import lombok.NoArgsConstructor;\r\n   \r\n   @Data\r\n   @AllArgsConstructor\r\n   @NoArgsConstructor\r\n   public class Books {\r\n       \r\n       private int bookId;\r\n       private String bookName;\r\n       private int bookCounts;\r\n       private String detail;\r\n       \r\n   }\r\n   ```\r\n\r\n5. 编写Dao层的 Mapper接口！\r\n\r\n   ```java\r\n   package com.kuang.dao;\r\n   \r\n   import com.kuang.pojo.Books;\r\n   import java.util.List;\r\n   \r\n   public interface BookMapper {\r\n   \r\n       //增加一个Book\r\n       int addBook(Books book);\r\n   \r\n       //根据id删除一个Book\r\n       int deleteBookById(int id);\r\n   \r\n       //更新Book\r\n       int updateBook(Books books);\r\n   \r\n       //根据id查询,返回一个Book\r\n       Books queryBookById(int id);\r\n   \r\n       //查询全部Book,返回list集合\r\n       List<Books> queryAllBook();\r\n   \r\n   }\r\n   ```\r\n\r\n6. 编写接口对应的 Mapper.xml 文件。需要导入MyBatis的包；\r\n\r\n   ```xml\r\n   <?xml version=\"1.0\" encoding=\"UTF-8\" ?>\r\n   <!DOCTYPE mapper\r\n           PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\r\n           \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\r\n   \r\n   <mapper namespace=\"com.feige.dao.BooksMapper\">\r\n   \r\n       <!--增加一个Book-->\r\n       <insert id=\"addBook\" parameterType=\"Books\">\r\n           insert into books(bookName,bookCounts,detail)\r\n           values (#{bookName}, #{bookCounts}, #{detail})\r\n       </insert>\r\n   \r\n       <!--根据id删除一个Book-->\r\n       <delete id=\"deleteBookById\" parameterType=\"int\">\r\n           delete from books where bookId=#{bookId}\r\n       </delete>\r\n   \r\n       <!--更新Book-->\r\n       <update id=\"updateBook\" parameterType=\"Books\">\r\n           update books\r\n           set bookName = #{bookName},bookCounts = #{bookCounts},detail = #{detail}\r\n           where bookId = #{bookId}\r\n       </update>\r\n   \r\n       <!--根据id查询,返回一个Book-->\r\n       <select id=\"queryBookById\" resultType=\"Books\">\r\n           select * from books\r\n           where bookID = #{bookId}\r\n       </select>\r\n   \r\n       <!--查询全部Book-->\r\n       <select id=\"queryAllBook\" resultType=\"com.feige.pojo.Books\">\r\n           SELECT * from books\r\n       </select>\r\n   \r\n   </mapper>\r\n   ```\r\n\r\n7. 编写Service层的接口和实现类\r\n   接口：\r\n\r\n   ```java\r\n   package com.feige.service;\r\n   \r\n   import com.feige.pojo.Books;\r\n   \r\n   import java.util.List;\r\n   \r\n   //BookService:底下需要去实现,调用dao层\r\n   public interface BookService {\r\n       //增加一个Book\r\n       int addBook(Books book);\r\n       //根据id删除一个Book\r\n       int deleteBookById(int id);\r\n       //更新Book\r\n       int updateBook(Books books);\r\n       //根据id查询,返回一个Book\r\n       Books queryBookById(int id);\r\n       //查询全部Book,返回list集合\r\n       List<Books> queryAllBook();\r\n   }\r\n   ```\r\n\r\n实现类：\r\n\r\n```java\r\npackage com.feige.service;\r\n\r\nimport com.feige.dao.BookMapper;\r\nimport com.feige.pojo.Books;\r\nimport java.util.List;\r\n\r\npublic class BookServiceImpl implements BookService {\r\n\r\n    //调用dao层的操作，设置一个set接口，方便Spring管理\r\n    private BookMapper bookMapper;\r\n\r\n    public void setBookMapper(BookMapper bookMapper) {\r\n        this.bookMapper = bookMapper;\r\n    }\r\n    \r\n    public int addBook(Books book) {\r\n        return bookMapper.addBook(book);\r\n    }\r\n    \r\n    public int deleteBookById(int id) {\r\n        return bookMapper.deleteBookById(id);\r\n    }\r\n    \r\n    public int updateBook(Books books) {\r\n        return bookMapper.updateBook(books);\r\n    }\r\n    \r\n    public Books queryBookById(int id) {\r\n        return bookMapper.queryBookById(id);\r\n    }\r\n    \r\n    public List<Books> queryAllBook() {\r\n        return bookMapper.queryAllBook();\r\n    }\r\n}\r\n```\r\n\r\n**OK，到此，底层需求操作编写完毕！**\r\n\r\n## 4、Spring层\r\n\r\n1. 配置**Spring整合MyBatis**，我们这里数据源使用c3p0连接池；\r\n\r\n2. 我们去编写Spring整合Mybatis的相关的配置文件； spring-dao.xml\r\n\r\n   ```xml\r\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n   <beans xmlns=\"http://www.springframework.org/schema/beans\"\r\n          xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n          xmlns:context=\"http://www.springframework.org/schema/context\"\r\n          xsi:schemaLocation=\"http://www.springframework.org/schema/beans\r\n   http://www.springframework.org/schema/beans/spring-beans.xsd\r\n   http://www.springframework.org/schema/context\r\n   https://www.springframework.org/schema/context/spring-context.xsd\">\r\n   \r\n       <!-- 配置整合mybatis -->\r\n       <!-- 1.关联数据库文件 -->\r\n       <context:property-placeholder location=\"classpath:database.properties\"/>\r\n   \r\n       <!-- 2.数据库连接池 -->\r\n       <!--数据库连接池\r\n   dbcp  半自动化操作  不能自动连接\r\n   c3p0  自动化操作（自动的加载配置文件 并且设置到对象里面）\r\n       -->\r\n       <bean id=\"dataSource\" class=\"com.mchange.v2.c3p0.ComboPooledDataSource\">\r\n   <!-- 配置连接池属性 -->\r\n   <property name=\"driverClass\" value=\"${jdbc.driver}\"/>\r\n   <property name=\"jdbcUrl\" value=\"${jdbc.url}\"/>\r\n   <property name=\"user\" value=\"${jdbc.username}\"/>\r\n   <property name=\"password\" value=\"${jdbc.password}\"/>\r\n   \r\n   <!-- c3p0连接池的私有属性 -->\r\n   <property name=\"maxPoolSize\" value=\"30\"/>\r\n   <property name=\"minPoolSize\" value=\"10\"/>\r\n   <!-- 关闭连接后不自动commit -->\r\n   <property name=\"autoCommitOnClose\" value=\"false\"/>\r\n   <!-- 获取连接超时时间 -->\r\n   <property name=\"checkoutTimeout\" value=\"10000\"/>\r\n   <!-- 当获取连接失败重试次数 -->\r\n   <property name=\"acquireRetryAttempts\" value=\"2\"/>\r\n       </bean>\r\n   \r\n       <!-- 3.配置SqlSessionFactory对象 -->\r\n       <bean id=\"sqlSessionFactory\" class=\"org.mybatis.spring.SqlSessionFactoryBean\">\r\n   <!-- 注入数据库连接池 -->\r\n   <property name=\"dataSource\" ref=\"dataSource\"/>\r\n   <!-- 配置MyBaties全局配置文件:mybatis-config.xml -->\r\n   <property name=\"configLocation\" value=\"classpath:mybatis-config.xml\"/>\r\n       </bean>\r\n   \r\n       <!-- 4.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 -->\r\n       <!--解释 ： https://www.cnblogs.com/jpfss/p/7799806.html-->\r\n       <bean class=\"org.mybatis.spring.mapper.MapperScannerConfigurer\">\r\n   <!-- 注入sqlSessionFactory -->\r\n   <property name=\"sqlSessionFactoryBeanName\" value=\"sqlSessionFactory\"/>\r\n   <!-- 给出需要扫描Dao接口包 -->\r\n   <property name=\"basePackage\" value=\"com.feige.dao\"/>\r\n       </bean>\r\n   \r\n   </beans>\r\n   ```\r\n\r\n3. **Spring整合service层**\r\n\r\n   ```xml\r\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n   <beans xmlns=\"http://www.springframework.org/schema/beans\"\r\n          xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n          xmlns:context=\"http://www.springframework.org/schema/context\"\r\n          xsi:schemaLocation=\"http://www.springframework.org/schema/beans\r\n       http://www.springframework.org/schema/beans/spring-beans.xsd\r\n       http://www.springframework.org/schema/context\r\n       http://www.springframework.org/schema/context/spring-context.xsd\">\r\n   \r\n       <!-- 扫描service相关的bean -->\r\n       <context:component-scan base-package=\"com.kuang.service\" />\r\n   \r\n       <!--BookServiceImpl注入到IOC容器中-->\r\n       <bean id=\"BookServiceImpl\" class=\"com.kuang.service.BookServiceImpl\">\r\n   <property name=\"bookMapper\" ref=\"bookMapper\"/>\r\n       </bean>\r\n   \r\n       <!-- 配置事务管理器 -->\r\n       <bean id=\"transactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\r\n   <!-- 注入数据库连接池 -->\r\n   <property name=\"dataSource\" ref=\"dataSource\" />\r\n       </bean>\r\n   \r\n   </beans>\r\n   ```\r\n\r\nSpring层搞定！再次理解一下，Spring就是一个大杂烩，一个容器！对吧！\r\n\r\n## 5、SpringMVC层\r\n\r\n1. **web.xml**\r\n\r\n   ```xml\r\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n   <web-app xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\"\r\n            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n            xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd\"\r\n            version=\"4.0\">\r\n   \r\n       <!--DispatcherServlet-->\r\n       <servlet>\r\n           <servlet-name>DispatcherServlet</servlet-name>\r\n           <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\r\n           <init-param>\r\n               <param-name>contextConfigLocation</param-name>\r\n               <param-value>classpath:applicationContext.xml</param-value>\r\n           </init-param>\r\n           <load-on-startup>1</load-on-startup>\r\n       </servlet>\r\n       <servlet-mapping>\r\n           <servlet-name>DispatcherServlet</servlet-name>\r\n           <url-pattern>/</url-pattern>\r\n       </servlet-mapping>\r\n   \r\n       <!--encodingFilter-->\r\n       <filter>\r\n           <filter-name>encodingFilter</filter-name>\r\n           <filter-class>\r\n               org.springframework.web.filter.CharacterEncodingFilter\r\n           </filter-class>\r\n           <init-param>\r\n               <param-name>encoding</param-name>\r\n               <param-value>utf-8</param-value>\r\n           </init-param>\r\n       </filter>\r\n       <filter-mapping>\r\n           <filter-name>encodingFilter</filter-name>\r\n           <url-pattern>/*</url-pattern>\r\n       </filter-mapping>\r\n       \r\n       <!--Session过期时间-->\r\n       <session-config>\r\n           <session-timeout>15</session-timeout>\r\n       </session-config>\r\n       \r\n   </web-app>\r\n   ```\r\n\r\n2. **spring-mvc.xml**\r\n\r\n   ```xml\r\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n   <beans xmlns=\"http://www.springframework.org/schema/beans\"\r\n          xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n          xmlns:context=\"http://www.springframework.org/schema/context\"\r\n          xmlns:mvc=\"http://www.springframework.org/schema/mvc\"\r\n          xsi:schemaLocation=\"http://www.springframework.org/schema/beans\r\n       http://www.springframework.org/schema/beans/spring-beans.xsd\r\n       http://www.springframework.org/schema/context\r\n       http://www.springframework.org/schema/context/spring-context.xsd\r\n       http://www.springframework.org/schema/mvc\r\n       https://www.springframework.org/schema/mvc/spring-mvc.xsd\">\r\n   \r\n       <!-- 配置SpringMVC -->\r\n       <!-- 1.开启SpringMVC注解驱动 -->\r\n       <mvc:annotation-driven>\r\n           <mvc:message-converters register-defaults=\"true\">\r\n               <bean class=\"org.springframework.http.converter.StringHttpMessageConverter\">\r\n                   <constructor-arg value=\"UTF-8\"/>\r\n               </bean>\r\n               <bean class=\"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter\">\r\n                   <property name=\"objectMapper\">\r\n                       <bean class=\"org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean\">\r\n                           <property name=\"failOnEmptyBeans\" value=\"false\"/>\r\n                       </bean>\r\n                   </property>\r\n               </bean>\r\n           </mvc:message-converters>\r\n       </mvc:annotation-driven>\r\n       <!--解决跨域问题-->\r\n       <mvc:cors>\r\n       <mvc:mapping path=\"/**\"\r\n                    allowed-origins=\"http://127.0.0.1:8090,http://localhost:8090\"\r\n                    allowed-methods=\"POST,GET, OPTIONS,DELETE,PUT\"\r\n                    allowed-headers=\"Content-Type,ContentType,Access-Control-Allow-Headers, Authorization, X-Requested-With\"\r\n                    allow-credentials=\"true\"/>\r\n       </mvc:cors>\r\n       <!-- 2.静态资源默认servlet配置-->\r\n       <mvc:default-servlet-handler/>\r\n   \r\n       <!-- 3.配置jsp 显示ViewResolver视图解析器 -->\r\n       <bean class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\">\r\n           <property name=\"viewClass\" value=\"org.springframework.web.servlet.view.JstlView\" />\r\n           <property name=\"prefix\" value=\"/WEB-INF/jsp/\" />\r\n           <property name=\"suffix\" value=\".jsp\" />\r\n       </bean>\r\n   \r\n       <!-- 4.扫描web相关的bean -->\r\n       <context:component-scan base-package=\"com.feige.controller\" />\r\n   \r\n   </beans>\r\n   ```\r\n\r\n3. **Spring配置整合文件，applicationContext.xml**\r\n\r\n   ```xml\r\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n   <beans xmlns=\"http://www.springframework.org/schema/beans\"\r\n          xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n          xsi:schemaLocation=\"http://www.springframework.org/schema/beans\r\n           http://www.springframework.org/schema/beans/spring-beans.xsd\">\r\n   \r\n       <import resource=\"spring-dao.xml\"/>\r\n       <import resource=\"spring-service.xml\"/>\r\n       <import resource=\"spring-mvc.xml\"/>\r\n       \r\n   </beans>\r\n   ```\r\n\r\n**配置文件，暂时结束！Controller 和 视图层编写**\r\n\r\n1. BookController 类编写 ， 方法一：查询全部书籍\r\n\r\n   ```java\r\n   @Controller\r\n   @RequestMapping(\"/book\")\r\n   public class BookController {\r\n   \r\n       @Autowired\r\n       @Qualifier(\"BookServiceImpl\")\r\n       private BookService bookService;\r\n   \r\n       @RequestMapping(\"/allBook\")\r\n       public String list(Model model) {\r\n           List<Books> list = bookService.queryAllBook();\r\n           model.addAttribute(\"list\", list);\r\n           return \"allBook\";\r\n       }\r\n   }\r\n   ```\r\n\r\n2. 编写首页 **index.jsp**\r\n\r\n   ```html\r\n   <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\" %>\r\n   <!DOCTYPE HTML>\r\n   <html>\r\n   <head>\r\n       <title>首页</title>\r\n       <style type=\"text/css\">\r\n           a {\r\n               text-decoration: none;\r\n               color: black;\r\n               font-size: 18px;\r\n           }\r\n           h3 {\r\n               width: 180px;\r\n               height: 38px;\r\n               margin: 100px auto;\r\n               text-align: center;\r\n               line-height: 38px;\r\n               background: deepskyblue;\r\n               border-radius: 4px;\r\n           }\r\n       </style>\r\n   </head>\r\n   <body>\r\n   \r\n   <h3>\r\n       <a href=\"${pageContext.request.contextPath}/book/allBook\">点击进入列表页</a>\r\n   </h3>\r\n   </body>\r\n   </html>\r\n   ```\r\n\r\n3. 书籍列表页面 **allbook.jsp**\r\n\r\n   ```jsp\r\n   <%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %>\r\n   <%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" %>\r\n   <html>\r\n   <head>\r\n       <title>书籍列表</title>\r\n       <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n       <!-- 引入 Bootstrap -->\r\n       <link href=\"https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\r\n   </head>\r\n   <body>\r\n   \r\n   <div class=\"container\">\r\n   \r\n       <div class=\"row clearfix\">\r\n           <div class=\"col-md-12 column\">\r\n               <div class=\"page-header\">\r\n                   <h1>\r\n                       <small>书籍列表 —— 显示所有书籍</small>\r\n                   </h1>\r\n               </div>\r\n           </div>\r\n       </div>\r\n   \r\n       <div class=\"row\">\r\n           <div class=\"col-md-4 column\">\r\n               <a class=\"btn btn-primary\" href=\"${pageContext.request.contextPath}/book/toAddBook\">新增</a>\r\n           </div>\r\n       </div>\r\n   \r\n       <div class=\"row clearfix\">\r\n           <div class=\"col-md-12 column\">\r\n               <table class=\"table table-hover table-striped\">\r\n                   <thead>\r\n                   <tr>\r\n                       <th>书籍编号</th>\r\n                       <th>书籍名字</th>\r\n                       <th>书籍数量</th>\r\n                       <th>书籍详情</th>\r\n                       <th>操作</th>\r\n                   </tr>\r\n                   </thead>\r\n   \r\n                   <tbody>\r\n                   <c:forEach var=\"book\" items=\"${requestScope.get(\'list\')}\">\r\n                       <tr>\r\n                           <td>${book.getBookId()}</td>\r\n                           <td>${book.getBookName()}</td>\r\n                           <td>${book.getBookCounts()}</td>\r\n                           <td>${book.getDetail()}</td>\r\n                           <td>\r\n                               <a href=\"${pageContext.request.contextPath}/book/toUpdateBook?id=${book.getBookId()}\">更改</a> |\r\n                               <a href=\"${pageContext.request.contextPath}/book/del/${book.getBookId()}\">删除</a>\r\n                           </td>\r\n                       </tr>\r\n                   </c:forEach>\r\n                   </tbody>\r\n               </table>\r\n           </div>\r\n       </div>\r\n   </div>\r\n   ```\r\n\r\n4. BookController 类编写 ， 方法二：添加书籍\r\n\r\n   ```java\r\n   @RequestMapping(\"/toAddBook\")\r\n   public String toAddPaper() {\r\n       return \"addBook\";\r\n   }\r\n   \r\n   @RequestMapping(\"/addBook\")\r\n   public String addPaper(Books books) {\r\n       System.out.println(books);\r\n       bookService.addBook(books);\r\n       return \"redirect:/book/allBook\";\r\n   }\r\n   ```\r\n\r\n5. 添加书籍页面：**addBook.jsp**\r\n\r\n   ```jsp\r\n   <%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %>\r\n   <%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" %>\r\n   \r\n   <html>\r\n   <head>\r\n       <title>新增书籍</title>\r\n       <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n       <!-- 引入 Bootstrap -->\r\n       <link href=\"https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\r\n   </head>\r\n   <body>\r\n   <div class=\"container\">\r\n   \r\n       <div class=\"row clearfix\">\r\n           <div class=\"col-md-12 column\">\r\n               <div class=\"page-header\">\r\n                   <h1>\r\n                       <small>新增书籍</small>\r\n                   </h1>\r\n               </div>\r\n           </div>\r\n       </div>\r\n       <form action=\"${pageContext.request.contextPath}/book/addBook\" method=\"post\">\r\n           书籍名称：<input type=\"text\" name=\"bookName\"><br><br><br>\r\n           书籍数量：<input type=\"text\" name=\"bookCounts\"><br><br><br>\r\n           书籍详情：<input type=\"text\" name=\"detail\"><br><br><br>\r\n           <input type=\"submit\" value=\"添加\">\r\n       </form>\r\n   \r\n   </div>\r\n   ```\r\n\r\n6. BookController 类编写 ， 方法三：修改书籍\r\n\r\n   ```java\r\n   @RequestMapping(\"/toUpdateBook\")\r\n   public String toUpdateBook(Model model, int id) {\r\n       Books books = bookService.queryBookById(id);\r\n       System.out.println(books);\r\n       model.addAttribute(\"book\",books );\r\n       return \"updateBook\";\r\n   }\r\n   \r\n   @RequestMapping(\"/updateBook\")\r\n   public String updateBook(Model model, Books book) {\r\n       bookService.updateBook(book);\r\n       Books books = bookService.queryBookById(book.getBookID());\r\n       model.addAttribute(\"books\", books);\r\n       return \"redirect:/book/allBook\";\r\n   }\r\n   ```\r\n\r\n7. 修改书籍页面 **updateBook.jsp**\r\n\r\n   ```jsp\r\n   <%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %>\r\n   <%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" %>\r\n   <html>\r\n   <head>\r\n       <title>修改信息</title>\r\n       <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n       <!-- 引入 Bootstrap -->\r\n       <link href=\"https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\r\n   </head>\r\n   <body>\r\n   <div class=\"container\">\r\n   \r\n       <div class=\"row clearfix\">\r\n           <div class=\"col-md-12 column\">\r\n               <div class=\"page-header\">\r\n                   <h1>\r\n                       <small>修改信息</small>\r\n                   </h1>\r\n               </div>\r\n           </div>\r\n       </div>\r\n   \r\n       <form action=\"${pageContext.request.contextPath}/book/updateBook\" method=\"post\">\r\n           <input type=\"hidden\" name=\"bookID\" value=\"${book.getBookId()}\"/>\r\n           书籍名称：<input type=\"text\" name=\"bookName\" value=\"${book.getBookName()}\"/>\r\n           书籍数量：<input type=\"text\" name=\"bookCounts\" value=\"${book.getBookCounts()}\"/>\r\n           书籍详情：<input type=\"text\" name=\"detail\" value=\"${book.getDetail() }\"/>\r\n           <input type=\"submit\" value=\"提交\"/>\r\n       </form>\r\n   \r\n   </div>\r\n   ```\r\n\r\n8. BookController 类编写 ， 方法四：删除书籍\r\n\r\n   ```java\r\n   @RequestMapping(\"/del/{bookId}\")\r\n   public String deleteBook(@PathVariable(\"bookId\") int id) {\r\n       bookService.deleteBookById(id);\r\n       return \"redirect:/book/allBook\";\r\n   }\r\n   ```\r\n\r\n**配置Tomcat，进行运行！**\r\n\r\n到目前为止，这个SSM项目整合已经完全的OK了，可以直接运行进行测试！这个练习十分的重要，大家需要保证，不看任何东西，自己也可以完整的实现出来！\r\n\r\n## **6、项目结构图**\r\n\r\n![1570186854191.png](https://blog.kuangstudy.com/usr/uploads/2019/10/1086489242.png)\r\n\r\n![1570186868239.png](https://blog.kuangstudy.com/usr/uploads/2019/10/2326667495.png)\r\n\r\n## 7、错误排查\r\n\r\n### 1、访问出现404，排查步骤：**\r\n\r\n1. 查看控制台输出，看一下是不是缺少了什么jar包。\r\n\r\n2. 如果jar包存在，显示无法输出，就在IDEA的项目发布中，添加lib依赖！\r\n\r\n   步骤：点击项目结构----->Artifacts----->点击自己的项目(ssm:war exploded)--->(点击工具栏的第一个)在WEB-INF目录下新建一个lib包----->选中lib------>点击工具栏的第三个然后选中第一个---->把里面的包全部选中点击ok---->点击Apply再ok\r\n\r\n   ![image-20200128125126368](E:\\Java资料\\ssm整合.assets\\image-20200128125126368.png)\r\n\r\n   ![image-20200128125237179](E:\\Java资料\\ssm整合.assets\\image-20200128125237179.png)\r\n\r\n3. 重启Tomcat 即可解决！\r\n\r\n### 2、其他错误\r\n\r\n#### 1、bean不存在\r\n\r\n​	步骤：\r\n\r\n​		查看bean注入是否成功 \r\n\r\n​		junit单元测试，看我们的代码是否能够查询出来\r\n\r\n​		问题不在底层，是我们spring出了问题\r\n\r\n​		springMVC整合时没有调用到service层的bean\r\n\r\n​			applicationContext.xml没有注册bean\r\n\r\n​			web.xml也绑定过配置文件要绑定大的applicationContext.xml\r\n\r\n​			\r\n\r\n## 8、小结及展望\r\n\r\n这个是同学们的第一个SSM整合案例，一定要烂熟于心！\r\n\r\nSSM框架的重要程度是不言而喻的，学到这里，大家已经可以进行基本网站的单独开发。但是这只是增删改查的基本操作。可以说学到这里，大家才算是真正的步入了后台开发的门。也就是能找一个后台相关工作的底线。\r\n\r\n或许很多人，工作就做这些事情，但是对于个人的提高来说，还远远不够！','2020-03-01 23:06:53','2020-03-23 11:38:47',NULL,10),(17,'springboot','','ss','2020-02-23 19:07:20','2020-03-19 16:07:13','admin',11);

/*Table structure for table `comments` */

DROP TABLE IF EXISTS `comments`;

CREATE TABLE `comments` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `blog_id` int(11) DEFAULT NULL,
  `content` text NOT NULL,
  `parent_id` int(11) DEFAULT NULL,
  `good` int(11) DEFAULT NULL,
  `create_time` datetime NOT NULL,
  `user_id` int(11) DEFAULT NULL,
  `replier` varchar(15) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `blog` (`blog_id`),
  KEY `user` (`user_id`),
  KEY `parent` (`parent_id`),
  CONSTRAINT `blog` FOREIGN KEY (`blog_id`) REFERENCES `blog` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `parent` FOREIGN KEY (`parent_id`) REFERENCES `comments` (`id`) ON DELETE CASCADE ON UPDATE NO ACTION,
  CONSTRAINT `user` FOREIGN KEY (`user_id`) REFERENCES `user` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=53 DEFAULT CHARSET=utf8;

/*Data for the table `comments` */

insert  into `comments`(`id`,`blog_id`,`content`,`parent_id`,`good`,`create_time`,`user_id`,`replier`) values (1,1,'aaaaa',NULL,22,'2020-02-23 20:04:34',1,NULL),(2,1,'hhh',1,122,'2020-02-23 20:05:59',2,'feige'),(3,1,'xx',2,122,'2020-02-23 20:06:56',3,'dage'),(4,1,'cc',1,122,'2020-02-23 20:17:34',1,'feige'),(5,1,'vv',2,122,'2020-02-23 20:18:31',3,'dage'),(6,1,'aa',NULL,222,'2020-02-23 22:22:08',1,NULL),(7,1,'feige',3,6222,'2020-02-23 22:22:57',3,'dd'),(8,1,'dage',2,6222,'2020-02-23 22:23:39',1,'dage'),(11,1,'adddddddddddddddddd',6,222,'2020-02-26 01:24:43',2,'hufeige'),(12,1,'hufeigegege',NULL,0,'2020-02-26 01:54:47',2,NULL),(13,1,'aaaaaa',12,0,'2020-02-26 01:55:11',2,'dage'),(14,1,'qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq',NULL,0,'2020-02-26 02:12:44',3,NULL),(15,1,'dffffffffffffffffffffffffffffff',14,0,'2020-02-26 02:13:13',3,'dd'),(16,1,'qqqq',NULL,0,'2020-02-26 13:24:26',4,NULL),(17,1,'sssss',NULL,0,'2020-02-26 13:24:37',4,NULL),(18,1,'ssss',NULL,0,'2020-02-26 13:24:53',5,NULL),(19,1,'ssssxxx',NULL,0,'2020-02-26 13:24:57',5,NULL),(20,1,'ssssxxxxxx',NULL,0,'2020-02-26 13:25:00',5,NULL),(21,1,'ssssxxxxxxxxxxx',NULL,0,'2020-02-26 13:25:03',5,NULL),(22,1,'swswww',NULL,0,'2020-02-26 13:25:08',5,NULL),(23,1,'aaaaaaaaaaaaaaaaaaaa',21,0,'2020-02-26 13:26:14',5,'sss'),(24,1,'hahahahaah',NULL,0,'2020-02-26 17:25:46',5,NULL),(25,1,'feigefeige',22,0,'2020-02-26 17:26:09',5,'sss'),(26,13,'好好',NULL,0,'2020-03-05 16:42:35',5,NULL),(27,13,'谢了',26,0,'2020-03-05 16:42:56',5,'sss'),(28,13,'谢了',26,0,'2020-03-05 16:43:03',5,'sss'),(29,13,'太好了',NULL,0,'2020-03-05 16:45:13',5,NULL),(30,13,'谢谢',29,0,'2020-03-05 16:45:43',5,'sss'),(31,13,'不用谢',29,0,'2020-03-05 16:47:01',5,'sss'),(32,13,'<p>feige</p>',NULL,0,'2020-03-05 17:33:26',5,NULL),(33,13,'啦啦啦啦',NULL,0,'2020-06-26 10:47:58',5,NULL),(34,13,'啦啦啦啦',NULL,0,'2020-06-26 10:47:58',5,NULL),(35,13,'rr',NULL,0,'2020-06-26 12:13:33',5,NULL),(36,13,'ddd',NULL,0,'2020-06-26 12:24:00',5,NULL),(37,13,'ddd',26,0,'2020-06-26 12:25:40',5,'sss'),(38,13,'sssss',NULL,0,'2020-06-26 12:32:10',5,NULL),(39,13,'ddd',NULL,0,'2020-06-26 12:33:05',5,NULL),(40,13,'ddd',NULL,0,'2020-06-26 12:34:07',5,NULL),(41,13,'dddddd',NULL,0,'2020-06-26 12:34:29',5,NULL),(42,13,'lll',NULL,0,'2020-06-26 12:46:18',5,NULL),(43,13,'sss',NULL,0,'2020-06-26 12:47:51',5,NULL),(44,13,'ss',NULL,0,'2020-06-26 12:50:25',5,NULL),(45,13,'ssssddd',NULL,0,'2020-06-26 12:51:59',5,NULL),(46,13,'ssssdfdfd',NULL,0,'2020-06-26 12:52:35',5,NULL),(47,13,'hahahah',NULL,0,'2020-06-26 16:39:09',5,NULL),(49,13,'浏览',NULL,0,'2020-06-27 13:28:24',5,NULL),(50,13,'哈哈哈',NULL,0,'2020-06-27 13:31:11',5,NULL),(51,13,'呵呵',NULL,0,'2020-06-27 13:32:09',5,NULL),(52,13,'dsdsdfs',NULL,0,'2020-06-27 15:14:14',1,NULL);

/*Table structure for table `informations` */

DROP TABLE IF EXISTS `informations`;

CREATE TABLE `informations` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(20) NOT NULL,
  `content` text NOT NULL,
  `create_time` datetime NOT NULL,
  `user_id` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Data for the table `informations` */

/*Table structure for table `permission` */

DROP TABLE IF EXISTS `permission`;

CREATE TABLE `permission` (
  `uid` int(11) NOT NULL,
  `rid` int(11) NOT NULL,
  PRIMARY KEY (`uid`,`rid`),
  KEY `r_rid` (`rid`) USING BTREE,
  CONSTRAINT `a_uid` FOREIGN KEY (`uid`) REFERENCES `user` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `r_rid` FOREIGN KEY (`rid`) REFERENCES `role` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Data for the table `permission` */

insert  into `permission`(`uid`,`rid`) values (1,1),(1,2),(1,3);

/*Table structure for table `posts` */

DROP TABLE IF EXISTS `posts`;

CREATE TABLE `posts` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `content` text NOT NULL,
  `create_time` datetime NOT NULL,
  `user_id` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Data for the table `posts` */

/*Table structure for table `replys` */

DROP TABLE IF EXISTS `replys`;

CREATE TABLE `replys` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `post_id` int(11) DEFAULT NULL,
  `content` text NOT NULL,
  `reply_time` datetime NOT NULL,
  `user_id` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Data for the table `replys` */

/*Table structure for table `role` */

DROP TABLE IF EXISTS `role`;

CREATE TABLE `role` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `role_name` varchar(15) NOT NULL,
  `permission` varchar(50) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;

/*Data for the table `role` */

insert  into `role`(`id`,`role_name`,`permission`) values (1,'user','user:select'),(2,'admin','admin:add'),(3,'update','admin:update'),(4,'a','a');

/*Table structure for table `type` */

DROP TABLE IF EXISTS `type`;

CREATE TABLE `type` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `type_name` varchar(15) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `type_name` (`type_name`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;

/*Data for the table `type` */

insert  into `type`(`id`,`type_name`) values (3,'mybatis'),(2,'spring'),(1,'springboot'),(4,'springMVC');

/*Table structure for table `user` */

DROP TABLE IF EXISTS `user`;

CREATE TABLE `user` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `head_photo` varchar(100) DEFAULT NULL,
  `username` varchar(10) NOT NULL,
  `email` varchar(20) NOT NULL,
  `password` varchar(18) NOT NULL,
  `sex` tinyint(1) NOT NULL DEFAULT '1',
  `register_time` datetime NOT NULL,
  `hobby` varchar(40) DEFAULT NULL,
  `self_introduce` varchar(100) DEFAULT NULL,
  `other` varchar(200) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `username` (`username`)
) ENGINE=InnoDB AUTO_INCREMENT=22 DEFAULT CHARSET=utf8;

/*Data for the table `user` */

insert  into `user`(`id`,`head_photo`,`username`,`email`,`password`,`sex`,`register_time`,`hobby`,`self_introduce`,`other`) values (1,'https://dss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=1616927866,2567945831&fm=26&gp=0.jpg','feige','111','123456',1,'2020-02-22 15:51:01','等待','得到的','语言'),(2,'https://dss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=1616927866,2567945831&fm=26&gp=0.jpg','dage','345','123456784',0,'2020-02-22 15:58:01','f','d','a'),(3,'https://dss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=1616927866,2567945831&fm=26&gp=0.jpg','dd','方法','方法',1,'2020-02-22 15:59:39','分','分','分'),(4,'https://dss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=1616927866,2567945831&fm=26&gp=0.jpg','1','1','1',1,'2020-02-22 16:58:06','a','a','a'),(5,'https://dss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=1616927866,2567945831&fm=26&gp=0.jpg','sss','ss','ss',1,'2020-02-22 16:02:48','ss','sss','sss'),(7,'https://dss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=1616927866,2567945831&fm=26&gp=0.jpg','t','t','t',1,'2020-02-22 16:05:35','t','t','t'),(8,'https://dss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=1616927866,2567945831&fm=26&gp=0.jpg','b','b','b',0,'2020-02-22 16:06:27','b','b','b'),(9,'https://dss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=1616927866,2567945831&fm=26&gp=0.jpg','f','f','f',0,'2020-02-22 16:07:25','f','f','f'),(10,'https://dss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=1616927866,2567945831&fm=26&gp=0.jpg','g','gg','g',1,'2020-02-22 16:09:48','g','g','g'),(11,'https://dss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=1616927866,2567945831&fm=26&gp=0.jpg','i','i','i',1,'2020-02-22 16:10:50','i','i','i'),(12,'https://dss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=1616927866,2567945831&fm=26&gp=0.jpg','s','s','s',1,'2020-02-22 16:12:51','s','s','s'),(13,'https://dss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=1616927866,2567945831&fm=26&gp=0.jpg','m','m','m',1,'2020-02-22 16:13:51','m','m','m'),(14,'https://dss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=1616927866,2567945831&fm=26&gp=0.jpg','p','p','p',1,'2020-02-22 16:15:18','p','p','p'),(15,'https://dss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=1616927866,2567945831&fm=26&gp=0.jpg','cc','c','c',0,'2020-02-22 16:23:25','c','c','c'),(16,'https://dss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=1616927866,2567945831&fm=26&gp=0.jpg','z','z','z',1,'2020-02-22 16:24:10','','',''),(17,'https://dss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=1616927866,2567945831&fm=26&gp=0.jpg','v','v','v',1,'2020-02-22 16:25:25','','',''),(18,'https://dss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=1616927866,2567945831&fm=26&gp=0.jpg','c','c','c',1,'2020-02-22 16:26:13','','',''),(20,'https://dss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=1616927866,2567945831&fm=26&gp=0.jpg','飞哥','x','x',1,'2020-03-18 22:48:47','x','x','x'),(21,'https://dss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=1616927866,2567945831&fm=26&gp=0.jpg','admin','qqqq','qqq',0,'2020-03-19 15:36:58','qqq','qq','qqq');

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;
