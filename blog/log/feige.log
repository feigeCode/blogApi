[DEBUG][20-03-22][druid.sql.Connection]{conn-10001} connected
[DEBUG][20-03-22][druid.sql.Connection]{conn-10002} connected
[DEBUG][20-03-22][druid.sql.Connection]{conn-10003} connected
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} connected
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} connected
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} created. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog
         
            limit ?,?
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} Parameters : [0, 10]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} executed. 21.867092 millis. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog
         
            limit ?,?
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Header: [id, type_name, title, content, create_time, change_time, author, view]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [1, springboot, springboot入门, springb自动装配, 2020-02-23 21:43:36.0, 2020-02-24 03:06:48.0, admin, 0]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [2, mybatis, 配置, 得到的, 2020-02-24 02:05:36.0, 2020-03-13 06:39:47.0, admin, 3]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [4, springMVC, mybatis-plus, ##飞哥, 2020-02-24 02:10:09.0, 2020-02-25 22:42:23.0, admin, 111]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [5, springboot, 人, 嗯嗯, 2020-02-24 03:07:20.0, 2020-02-24 03:07:20.0, admin, 2]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [6, mybatis, mybatis入门, <h2>1、Mybatis简介</h2>
<p><img src="https://blog.kuangstudy.com/usr/uploads/2019/10/1296229149.png" referrerpolicy="no-referrer" alt="1567007421329.png"></p>
<h3>什么是MyBatis</h3>
<ul>
<li>MyBatis 是一款优秀的<strong>持久层框架</strong></li>
<li>MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集的过程</li>
<li>MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 实体类 【Plain Old Java Objects,普通的 Java对象】映射成数据库中的记录。</li>
<li>MyBatis 本是apache的一个开源项目ibatis, 2010年这个项目由apache 迁移到了google code，并且改名为MyBatis 。</li>
<li>2013年11月迁移到<strong>Github</strong> .</li>
<li>Mybatis官方文档 : <a href='http://www.mybatis.org/mybatis-3/zh/index.html' target='_blank' class='url'>http://www.mybatis.org/mybatis-3/zh/index.html</a></li>
<li>GitHub : <a href='https://github.com/mybatis/mybatis-3' target='_blank' class='url'>https://github.com/mybatis/mybatis-3</a></li>

</ul>
<h3>持久化</h3>
<ul>
<li><p><strong>持久化是将程序数据在持久状态和瞬时状态间转换的机制。</strong></p>
<ul>
<li>即把数据（如内存中的对象）保存到可永久保存的存储设备中（如磁盘）。持久化的主要应用是将内存中的对象存储在数据库中，或者存储在磁盘文件中、XML数据文件中等等。</li>
<li>JDBC就是一种持久化机制。文件IO也是一种持久化机制。</li>
<li>在生活中 : 将鲜肉冷藏，吃的时候再解冻的方法也是。将水果做成罐头的方法也是。</li>

</ul>
</li>
<li><p><strong>为什么需要持久化服务呢？那是由于内存本身的缺陷引起的</strong></p>
<ul>
<li>内存断电后数据会丢失，但有一些对象是无论如何都不能丢失的，比如银行账号等，遗憾的是，人们还无法保证内存永不掉电。</li>
<li>内存过于昂贵，与硬盘、光盘等外存相比，内存的价格要高2~3个数量级，而且维持成本也高，至少需要一直供电吧。所以即使对象不需要永久保存，也会因为内存的容量限制不能一直呆在内存中，需要持久化来缓存到外存。</li>

</ul>
</li>

</ul>
<h3>持久层</h3>
<ul>
<li><p>什么是持久层？</p>
<ul>
<li>完成持久化工作的代码块 . ----&gt; dao层 【DAO (Data Access Object) 数据访问对象】</li>
<li>大多数情况下特别是企业级应用，数据持久化往往也就意味着将内存中的数据保存到磁盘上加以固化，而持久化的实现过程则大多通过各种<strong>关系数据库</strong>来完成。</li>
<li>不过这里有一个字需要特别强调，也就是所谓的“层”。对于应用系统而言，数据持久功能大多是必不可少的组成部分。也就是说，我们的系统中，已经天然的具备了“持久层”概念？也许是，但也许实际情况并非如此。之所以要独立出一个“持久层”的概念,而不是“持久模块”，“持久单元”，也就意味着，我们的系统架构中，应该有一个相对独立的逻辑层面，专著于数据持久化逻辑的实现.</li>
<li>与系统其他部分相对而言，这个层面应该具有一个较为清晰和严格的逻辑边界。 【说白了就是用来操作数据库存在的！】</li>

</ul>
</li>

</ul>
<h3>为什么需要Mybatis</h3>
<ul>
<li><p>Mybatis就是帮助程序猿将数据存入数据库中 , 和从数据库中取数据 .</p>
</li>
<li><p>传统的jdbc操作 , 有很多重复代码块 .比如 : 数据取出时的封装 , 数据库的建立连接等等... , 通过框架可以减少重复代码,提高开发效率 .</p>
</li>
<li><p>MyBatis 是一个半自动化的<strong>ORM框架 (Object Relationship Mapping) --&gt;对象关系映射</strong></p>
</li>
<li><p>所有的事情，不用Mybatis依旧可以做到，只是用了它，所有实现会更加简单！<strong>技术没有高低之分，只有使用这个技术的人有高低之别</strong></p>
</li>
<li><p>MyBatis的优点</p>
<ul>
<li>简单易学：本身就很小且简单。没有任何第三方依赖，最简单安装只要两个jar文件+配置几个sql映射文件就可以了，易于学习，易于使用，通过文档和源代码，可以比较完全的掌握它的设计思路和实现。</li>
<li>灵活：mybatis不会对应用程序或者数据库的现有设计强加任何影响。 sql写在xml里，便于统一管理和优化。通过sql语句可以满足操作数据库的所有需求。</li>
<li>解除sql与程序代码的耦合：通过提供DAO层，将业务逻辑和数据访问逻辑分离，使系统的设计更清晰，更易维护，更易单元测试。sql和代码的分离，提高了可维护性。</li>
<li>提供xml标签，支持编写动态sql。</li>
<li>.......</li>

</ul>
</li>
<li><p>最重要的一点，使用的人多！公司需要！</p>
</li>
<li><p>环境说明：</p>
<ul>
<li>jdk 8 +</li>
<li>MySQL 5.7.19</li>
<li>maven-3.6.0</li>
<li>IDEA</li>

</ul>
<p>学习前需要掌握：</p>
<ul>
<li>JDBC</li>
<li>MySQL</li>
<li>Java 基础</li>
<li>Maven</li>
<li>Junit</li>

</ul>
</li>

</ul>
<h2>2、mybatis crud（实现增删改查）</h2>
<h4>1.1、创建一个maven项目</h4>
<p>		导入依赖</p>
<pre><code class='language-xml' lang='xml'>&lt;dependencies&gt;
    &lt;!--mysql驱动--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;mysql&lt;/groupId&gt;
        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
        &lt;version&gt;5.1.47&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;!--mybatis支持--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.mybatis&lt;/groupId&gt;
        &lt;artifactId&gt;mybatis&lt;/artifactId&gt;
        &lt;version&gt;3.5.2&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;!--junit支持--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;junit&lt;/groupId&gt;
        &lt;artifactId&gt;junit&lt;/artifactId&gt;
        &lt;version&gt;4.12&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
</code></pre>
<p>注意点 : pom文件的设置中需要设置资源过滤 , 否则会有资源文件打包不成功问题，导致项目无法运行；</p>
<pre><code class='language-xml' lang='xml'>&lt;build&gt;
    &lt;resources&gt;
        &lt;resource&gt;
            &lt;directory&gt;src/main/java&lt;/directory&gt;
            &lt;includes&gt;
                &lt;include&gt;**/*.properties&lt;/include&gt;
                &lt;include&gt;**/*.xml&lt;/include&gt;
            &lt;/includes&gt;
            &lt;filtering&gt;true&lt;/filtering&gt;
        &lt;/resource&gt;
    &lt;/resources&gt;
&lt;/build&gt;
</code></pre>
<p>&nbsp;</p>
<h4>1.2、创建数据库和表</h4>
<pre><code class='language-sql' lang='sql'>CREATE DATABASE mybatis CHARACTER SET utf8;
CREATE TABLE USER(
	id INT PRIMARY KEY,
	username VARCHAR(15) NOT NULL,
	pwd VARCHAR(20) NOT NULL
)
INSERT INTO USER VALUES(2018143114,&#39;张三&#39;,&#39;123456&#39;),(2018143115,&#39;李四&#39;,&#39;1234567&#39;),(2018143116,&#39;王五&#39;,&#39;147258&#39;);
SELECT * FROM USER;
</code></pre>
<h4>1.3、编写mybatis配置文件</h4>
<p>在resource里新建一个mybatis-config.xml文件</p>
<pre><code class='language-xml' lang='xml'>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE configuration
        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;
&lt;configuration&gt;
    &lt;environments default=&quot;development&quot;&gt;
        &lt;environment id=&quot;development&quot;&gt;
            &lt;transactionManager type=&quot;JDBC&quot;/&gt;
            &lt;dataSource type=&quot;POOLED&quot;&gt;
                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;
                &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;amp;useUnicode=true&amp;amp;characterEncoding=utf8&quot;/&gt;
                &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;
                &lt;property name=&quot;password&quot; value=&quot;hufei169357&quot;/&gt;
            &lt;/dataSource&gt;
        &lt;/environment&gt;
    &lt;/environments&gt;
    &lt;mappers&gt;
        &lt;mapper resource=&quot;com/feige/dao/userMapper.xml&quot;/&gt;
    &lt;/mappers&gt;
&lt;/configuration&gt;
</code></pre>
<h4>1.4、新建一个工具类用来获取SqlSession对象</h4>
<pre><code class='language-java' lang='java'>package com.feige.utils;

import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import java.io.IOException;
import java.io.InputStream;
//sqlSessionFactory-sqlSession
public class MybatisUtils {
    private static SqlSessionFactory sqlSessionFactory;
    static {
        try {
            //使用mybatis第一步：获取sqlSessionFactory对象
            String resource = &quot;mybatis-config.xml&quot;;
            InputStream inputStream = Resources.getResourceAsStream(resource);
            sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    //既然有了sqlSessionFactory，顾名思义，我们就可以从中获得sqlSession的实例
    public static SqlSession getSqlSessioon(){
        return sqlSessionFactory.openSession();
    }
}

</code></pre>
<p>&nbsp;</p>
<h4>1.5、编写一个pojo（实体类）</h4>
<pre><code class='language-java' lang='java'>package com.feige.pojo;

public class User {
    private int id;
    private String username;
    private String pwd;

    public User() {
    }

    public User(int id, String username, String pwd) {
        this.id = id;
        this.username = username;
        this.pwd = pwd;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getPwd() {
        return pwd;
    }

    public void setPwd(String pwd) {
        this.pwd = pwd;
    }
    @Override
    public String toString() {
        return &quot;User{&quot; +
                &quot;id=&quot; + id +
                &quot;, username=&#39;&quot; + username + &#39;\&#39;&#39; +
                &quot;, pwd=&#39;&quot; + pwd + &#39;\&#39;&#39; +
                &#39;}&#39;;
    }
}

</code></pre>
<h4>1.6、新建一个userMapper接口</h4>
<pre><code class='language-java' lang='java'>package com.feige.dao;

import com.feige.pojo.User;

import java.util.List;
import java.util.Map;

public interface UserMapper {
    //查询全部用户
    List&lt;User&gt; getAllUser();
    //通过一个id查询一个用户
    User getUserById(int id);
    //通过id修改一个用户
    int updateUserById(Map map);
    //通过id删除一个用户
    int deleteUserById(int id);
    //插入一条数据
    int insertUser(User user);
}

</code></pre>
<h4>1.7、新建一个userMapper.xml文件</h4>
<pre><code class='language-xml' lang='xml'>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE mapper
        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;com.feige.dao.UserMapper&quot;&gt;
    &lt;!--每个语句要对应相应的标签select对应&lt;select&gt; delete 对应&lt;delete&gt; update 对应&lt;update&gt; insert 对应&lt;insert&gt;--&gt;
    &lt;select id=&quot;getAllUser&quot; resultType=&quot;com.feige.pojo.User&quot;&gt;
        select * from user
    &lt;/select&gt;
    &lt;select id=&quot;getUserById&quot; resultType=&quot;com.feige.pojo.User&quot; parameterType=&quot;int&quot;&gt;
        select * from user where id=#{id}
    &lt;/select&gt;
    &lt;update id=&quot;updateUserById&quot; parameterType=&quot;map&quot;&gt;
        update user set pwd=#{pwd} where id=#{id}
    &lt;/update&gt;
    &lt;delete id=&quot;deleteUserById&quot; parameterType=&quot;int&quot;&gt;
        delete from user where id=#{id}
    &lt;/delete&gt;
    &lt;insert id=&quot;insertUser&quot; parameterType=&quot;com.feige.pojo.User&quot;&gt;
        insert into user values (#{id},#{username},#{pwd})
    &lt;/insert&gt;
&lt;/mapper&gt;
</code></pre>
<h4>1.8、测试代码</h4>
<pre><code class='language-java' lang='java'>package com.feige.mybatisTest;

import com.feige.dao.UserMapper;
import com.feige.pojo.User;
import com.feige.utils.MybatisUtils;
import org.apache.ibatis.session.SqlSession;
import org.junit.Test;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MybatisTest {
    @Test
    public void mybatisTest1(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        List&lt;User&gt; allUser = mapper.getAllUser();
        for (User user : allUser) {
            System.out.println(user);
        }
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest2(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        User userById = mapper.getUserById(2018143114);
        System.out.println(userById);
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest3() {
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        //使用万能map传参
        Map&lt;String,Object&gt; map = new HashMap&lt;String, Object&gt;();
        map.put(&quot;pwd&quot;,2018143114);
        map.put(&quot;id&quot;,2018143114);

        int i = mapper.updateUserById(map);
        if (i &gt; 0) {
            System.out.println(&quot;修改成功！&quot;+i);
        }
        //增删改需要提交事务
        sqlSessioon.commit();

        sqlSessioon.close();

    }
    @Test
    public void mybatisTest4(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        int i = mapper.deleteUserById(2018143117);
        if (i &gt; 0) {
            System.out.println(&quot;删除成功！&quot;+i);
        }
        sqlSessioon.commit();
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest5(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        User user = new User(2018143117, &quot;杨帆东&quot;, &quot;2018143117&quot;);
        int i = mapper.insertUser(user);
        if (i &gt; 0) {
            System.out.println(&quot;插入成功！&quot;+i);
        }
        sqlSessioon.commit();
        sqlSessioon.close();

    }
}

</code></pre>
<p>&nbsp;</p>
<p>		</p>, 2020-02-24 03:15:45.0, 2020-02-24 03:15:50.0, admin, 0]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [7, mybatis, mybatis啊, 作者, 2020-02-24 03:27:18.0, 2020-02-24 03:27:18.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [8, springboot, aaa, [TOC]
                            #### Disabled options

                            - TeX (Based on KaTeX);
                            - Emoji;
                            - Task lists;
                            - HTML tags decode;
                            - Flowchart and Sequence Diagram;
                            #### Editor.md directory

                                editor.md/
                                        lib/
                                        css/
                                        scss/
                                        tests/
                                        fonts/
                                        images/
                                        plugins/
                                        examples/
                                        languages/
                                        editormd.js
                                        ...

                            ```html
                            <!-- English -->
                            <script src="../dist/js/languages/en.js"></script>

                            <!-- 繁體中文 -->
                            <script src="../dist/js/languages/zh-tw.js"></script>
                            ```
                        , 2020-02-25 03:39:36.0, 2020-02-25 22:38:07.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [9, mybatis, bbb, [TOC]

                            #### Disabled options

                            - TeX (Based on KaTeX);
                            - Emoji;
                            - Task lists;
                            - HTML tags decode;
                            - Flowchart and Sequence Diagram;

                            #### Editor.md directory

                                editor.md/
                                        lib/
                                        css/
                                        scss/
                                        tests/
                                        fonts/
                                        images/
                                        plugins/
                                        examples/
                                        languages/
                                        editormd.js
                                        ...

                            ```html
                            <!-- English -->
                            <script src="../dist/js/languages/en.js"></script>

                            <!-- 繁體中文 -->
                            <script src="../dist/js/languages/zh-tw.js"></script>
                            ```
                        , 2020-02-25 03:44:09.0, 2020-02-25 03:44:09.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [10, springboot, 飞哥, #大哥的Markdown, 2020-02-25 22:43:28.0, 2020-02-25 22:43:28.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [11, mybatis, 大哥, #飞哥的博客后台管理系统, 2020-02-25 22:49:26.0, 2020-02-25 22:49:26.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} created. select count(*) from `blog`
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} Parameters : []
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} Types : []
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} executed. 0.980888 millis. select count(*) from `blog`
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50001} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50001} Header: [count(*)]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50001} Result: [13]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50001} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} Parameters : [0, 10]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} executed. 1.146665 millis. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog
         
            limit ?,?
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50002} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50002} Header: [id, type_name, title, content, create_time, change_time, author, view]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50002} Result: [1, springboot, springboot入门, springb自动装配, 2020-02-23 21:43:36.0, 2020-02-24 03:06:48.0, admin, 0]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50002} Result: [2, mybatis, 配置, 得到的, 2020-02-24 02:05:36.0, 2020-03-13 06:39:47.0, admin, 3]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50002} Result: [4, springMVC, mybatis-plus, ##飞哥, 2020-02-24 02:10:09.0, 2020-02-25 22:42:23.0, admin, 111]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50002} Result: [5, springboot, 人, 嗯嗯, 2020-02-24 03:07:20.0, 2020-02-24 03:07:20.0, admin, 2]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50002} Result: [6, mybatis, mybatis入门, <h2>1、Mybatis简介</h2>
<p><img src="https://blog.kuangstudy.com/usr/uploads/2019/10/1296229149.png" referrerpolicy="no-referrer" alt="1567007421329.png"></p>
<h3>什么是MyBatis</h3>
<ul>
<li>MyBatis 是一款优秀的<strong>持久层框架</strong></li>
<li>MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集的过程</li>
<li>MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 实体类 【Plain Old Java Objects,普通的 Java对象】映射成数据库中的记录。</li>
<li>MyBatis 本是apache的一个开源项目ibatis, 2010年这个项目由apache 迁移到了google code，并且改名为MyBatis 。</li>
<li>2013年11月迁移到<strong>Github</strong> .</li>
<li>Mybatis官方文档 : <a href='http://www.mybatis.org/mybatis-3/zh/index.html' target='_blank' class='url'>http://www.mybatis.org/mybatis-3/zh/index.html</a></li>
<li>GitHub : <a href='https://github.com/mybatis/mybatis-3' target='_blank' class='url'>https://github.com/mybatis/mybatis-3</a></li>

</ul>
<h3>持久化</h3>
<ul>
<li><p><strong>持久化是将程序数据在持久状态和瞬时状态间转换的机制。</strong></p>
<ul>
<li>即把数据（如内存中的对象）保存到可永久保存的存储设备中（如磁盘）。持久化的主要应用是将内存中的对象存储在数据库中，或者存储在磁盘文件中、XML数据文件中等等。</li>
<li>JDBC就是一种持久化机制。文件IO也是一种持久化机制。</li>
<li>在生活中 : 将鲜肉冷藏，吃的时候再解冻的方法也是。将水果做成罐头的方法也是。</li>

</ul>
</li>
<li><p><strong>为什么需要持久化服务呢？那是由于内存本身的缺陷引起的</strong></p>
<ul>
<li>内存断电后数据会丢失，但有一些对象是无论如何都不能丢失的，比如银行账号等，遗憾的是，人们还无法保证内存永不掉电。</li>
<li>内存过于昂贵，与硬盘、光盘等外存相比，内存的价格要高2~3个数量级，而且维持成本也高，至少需要一直供电吧。所以即使对象不需要永久保存，也会因为内存的容量限制不能一直呆在内存中，需要持久化来缓存到外存。</li>

</ul>
</li>

</ul>
<h3>持久层</h3>
<ul>
<li><p>什么是持久层？</p>
<ul>
<li>完成持久化工作的代码块 . ----&gt; dao层 【DAO (Data Access Object) 数据访问对象】</li>
<li>大多数情况下特别是企业级应用，数据持久化往往也就意味着将内存中的数据保存到磁盘上加以固化，而持久化的实现过程则大多通过各种<strong>关系数据库</strong>来完成。</li>
<li>不过这里有一个字需要特别强调，也就是所谓的“层”。对于应用系统而言，数据持久功能大多是必不可少的组成部分。也就是说，我们的系统中，已经天然的具备了“持久层”概念？也许是，但也许实际情况并非如此。之所以要独立出一个“持久层”的概念,而不是“持久模块”，“持久单元”，也就意味着，我们的系统架构中，应该有一个相对独立的逻辑层面，专著于数据持久化逻辑的实现.</li>
<li>与系统其他部分相对而言，这个层面应该具有一个较为清晰和严格的逻辑边界。 【说白了就是用来操作数据库存在的！】</li>

</ul>
</li>

</ul>
<h3>为什么需要Mybatis</h3>
<ul>
<li><p>Mybatis就是帮助程序猿将数据存入数据库中 , 和从数据库中取数据 .</p>
</li>
<li><p>传统的jdbc操作 , 有很多重复代码块 .比如 : 数据取出时的封装 , 数据库的建立连接等等... , 通过框架可以减少重复代码,提高开发效率 .</p>
</li>
<li><p>MyBatis 是一个半自动化的<strong>ORM框架 (Object Relationship Mapping) --&gt;对象关系映射</strong></p>
</li>
<li><p>所有的事情，不用Mybatis依旧可以做到，只是用了它，所有实现会更加简单！<strong>技术没有高低之分，只有使用这个技术的人有高低之别</strong></p>
</li>
<li><p>MyBatis的优点</p>
<ul>
<li>简单易学：本身就很小且简单。没有任何第三方依赖，最简单安装只要两个jar文件+配置几个sql映射文件就可以了，易于学习，易于使用，通过文档和源代码，可以比较完全的掌握它的设计思路和实现。</li>
<li>灵活：mybatis不会对应用程序或者数据库的现有设计强加任何影响。 sql写在xml里，便于统一管理和优化。通过sql语句可以满足操作数据库的所有需求。</li>
<li>解除sql与程序代码的耦合：通过提供DAO层，将业务逻辑和数据访问逻辑分离，使系统的设计更清晰，更易维护，更易单元测试。sql和代码的分离，提高了可维护性。</li>
<li>提供xml标签，支持编写动态sql。</li>
<li>.......</li>

</ul>
</li>
<li><p>最重要的一点，使用的人多！公司需要！</p>
</li>
<li><p>环境说明：</p>
<ul>
<li>jdk 8 +</li>
<li>MySQL 5.7.19</li>
<li>maven-3.6.0</li>
<li>IDEA</li>

</ul>
<p>学习前需要掌握：</p>
<ul>
<li>JDBC</li>
<li>MySQL</li>
<li>Java 基础</li>
<li>Maven</li>
<li>Junit</li>

</ul>
</li>

</ul>
<h2>2、mybatis crud（实现增删改查）</h2>
<h4>1.1、创建一个maven项目</h4>
<p>		导入依赖</p>
<pre><code class='language-xml' lang='xml'>&lt;dependencies&gt;
    &lt;!--mysql驱动--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;mysql&lt;/groupId&gt;
        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
        &lt;version&gt;5.1.47&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;!--mybatis支持--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.mybatis&lt;/groupId&gt;
        &lt;artifactId&gt;mybatis&lt;/artifactId&gt;
        &lt;version&gt;3.5.2&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;!--junit支持--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;junit&lt;/groupId&gt;
        &lt;artifactId&gt;junit&lt;/artifactId&gt;
        &lt;version&gt;4.12&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
</code></pre>
<p>注意点 : pom文件的设置中需要设置资源过滤 , 否则会有资源文件打包不成功问题，导致项目无法运行；</p>
<pre><code class='language-xml' lang='xml'>&lt;build&gt;
    &lt;resources&gt;
        &lt;resource&gt;
            &lt;directory&gt;src/main/java&lt;/directory&gt;
            &lt;includes&gt;
                &lt;include&gt;**/*.properties&lt;/include&gt;
                &lt;include&gt;**/*.xml&lt;/include&gt;
            &lt;/includes&gt;
            &lt;filtering&gt;true&lt;/filtering&gt;
        &lt;/resource&gt;
    &lt;/resources&gt;
&lt;/build&gt;
</code></pre>
<p>&nbsp;</p>
<h4>1.2、创建数据库和表</h4>
<pre><code class='language-sql' lang='sql'>CREATE DATABASE mybatis CHARACTER SET utf8;
CREATE TABLE USER(
	id INT PRIMARY KEY,
	username VARCHAR(15) NOT NULL,
	pwd VARCHAR(20) NOT NULL
)
INSERT INTO USER VALUES(2018143114,&#39;张三&#39;,&#39;123456&#39;),(2018143115,&#39;李四&#39;,&#39;1234567&#39;),(2018143116,&#39;王五&#39;,&#39;147258&#39;);
SELECT * FROM USER;
</code></pre>
<h4>1.3、编写mybatis配置文件</h4>
<p>在resource里新建一个mybatis-config.xml文件</p>
<pre><code class='language-xml' lang='xml'>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE configuration
        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;
&lt;configuration&gt;
    &lt;environments default=&quot;development&quot;&gt;
        &lt;environment id=&quot;development&quot;&gt;
            &lt;transactionManager type=&quot;JDBC&quot;/&gt;
            &lt;dataSource type=&quot;POOLED&quot;&gt;
                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;
                &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;amp;useUnicode=true&amp;amp;characterEncoding=utf8&quot;/&gt;
                &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;
                &lt;property name=&quot;password&quot; value=&quot;hufei169357&quot;/&gt;
            &lt;/dataSource&gt;
        &lt;/environment&gt;
    &lt;/environments&gt;
    &lt;mappers&gt;
        &lt;mapper resource=&quot;com/feige/dao/userMapper.xml&quot;/&gt;
    &lt;/mappers&gt;
&lt;/configuration&gt;
</code></pre>
<h4>1.4、新建一个工具类用来获取SqlSession对象</h4>
<pre><code class='language-java' lang='java'>package com.feige.utils;

import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import java.io.IOException;
import java.io.InputStream;
//sqlSessionFactory-sqlSession
public class MybatisUtils {
    private static SqlSessionFactory sqlSessionFactory;
    static {
        try {
            //使用mybatis第一步：获取sqlSessionFactory对象
            String resource = &quot;mybatis-config.xml&quot;;
            InputStream inputStream = Resources.getResourceAsStream(resource);
            sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    //既然有了sqlSessionFactory，顾名思义，我们就可以从中获得sqlSession的实例
    public static SqlSession getSqlSessioon(){
        return sqlSessionFactory.openSession();
    }
}

</code></pre>
<p>&nbsp;</p>
<h4>1.5、编写一个pojo（实体类）</h4>
<pre><code class='language-java' lang='java'>package com.feige.pojo;

public class User {
    private int id;
    private String username;
    private String pwd;

    public User() {
    }

    public User(int id, String username, String pwd) {
        this.id = id;
        this.username = username;
        this.pwd = pwd;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getPwd() {
        return pwd;
    }

    public void setPwd(String pwd) {
        this.pwd = pwd;
    }
    @Override
    public String toString() {
        return &quot;User{&quot; +
                &quot;id=&quot; + id +
                &quot;, username=&#39;&quot; + username + &#39;\&#39;&#39; +
                &quot;, pwd=&#39;&quot; + pwd + &#39;\&#39;&#39; +
                &#39;}&#39;;
    }
}

</code></pre>
<h4>1.6、新建一个userMapper接口</h4>
<pre><code class='language-java' lang='java'>package com.feige.dao;

import com.feige.pojo.User;

import java.util.List;
import java.util.Map;

public interface UserMapper {
    //查询全部用户
    List&lt;User&gt; getAllUser();
    //通过一个id查询一个用户
    User getUserById(int id);
    //通过id修改一个用户
    int updateUserById(Map map);
    //通过id删除一个用户
    int deleteUserById(int id);
    //插入一条数据
    int insertUser(User user);
}

</code></pre>
<h4>1.7、新建一个userMapper.xml文件</h4>
<pre><code class='language-xml' lang='xml'>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE mapper
        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;com.feige.dao.UserMapper&quot;&gt;
    &lt;!--每个语句要对应相应的标签select对应&lt;select&gt; delete 对应&lt;delete&gt; update 对应&lt;update&gt; insert 对应&lt;insert&gt;--&gt;
    &lt;select id=&quot;getAllUser&quot; resultType=&quot;com.feige.pojo.User&quot;&gt;
        select * from user
    &lt;/select&gt;
    &lt;select id=&quot;getUserById&quot; resultType=&quot;com.feige.pojo.User&quot; parameterType=&quot;int&quot;&gt;
        select * from user where id=#{id}
    &lt;/select&gt;
    &lt;update id=&quot;updateUserById&quot; parameterType=&quot;map&quot;&gt;
        update user set pwd=#{pwd} where id=#{id}
    &lt;/update&gt;
    &lt;delete id=&quot;deleteUserById&quot; parameterType=&quot;int&quot;&gt;
        delete from user where id=#{id}
    &lt;/delete&gt;
    &lt;insert id=&quot;insertUser&quot; parameterType=&quot;com.feige.pojo.User&quot;&gt;
        insert into user values (#{id},#{username},#{pwd})
    &lt;/insert&gt;
&lt;/mapper&gt;
</code></pre>
<h4>1.8、测试代码</h4>
<pre><code class='language-java' lang='java'>package com.feige.mybatisTest;

import com.feige.dao.UserMapper;
import com.feige.pojo.User;
import com.feige.utils.MybatisUtils;
import org.apache.ibatis.session.SqlSession;
import org.junit.Test;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MybatisTest {
    @Test
    public void mybatisTest1(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        List&lt;User&gt; allUser = mapper.getAllUser();
        for (User user : allUser) {
            System.out.println(user);
        }
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest2(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        User userById = mapper.getUserById(2018143114);
        System.out.println(userById);
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest3() {
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        //使用万能map传参
        Map&lt;String,Object&gt; map = new HashMap&lt;String, Object&gt;();
        map.put(&quot;pwd&quot;,2018143114);
        map.put(&quot;id&quot;,2018143114);

        int i = mapper.updateUserById(map);
        if (i &gt; 0) {
            System.out.println(&quot;修改成功！&quot;+i);
        }
        //增删改需要提交事务
        sqlSessioon.commit();

        sqlSessioon.close();

    }
    @Test
    public void mybatisTest4(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        int i = mapper.deleteUserById(2018143117);
        if (i &gt; 0) {
            System.out.println(&quot;删除成功！&quot;+i);
        }
        sqlSessioon.commit();
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest5(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        User user = new User(2018143117, &quot;杨帆东&quot;, &quot;2018143117&quot;);
        int i = mapper.insertUser(user);
        if (i &gt; 0) {
            System.out.println(&quot;插入成功！&quot;+i);
        }
        sqlSessioon.commit();
        sqlSessioon.close();

    }
}

</code></pre>
<p>&nbsp;</p>
<p>		</p>, 2020-02-24 03:15:45.0, 2020-02-24 03:15:50.0, admin, 0]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50002} Result: [7, mybatis, mybatis啊, 作者, 2020-02-24 03:27:18.0, 2020-02-24 03:27:18.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50002} Result: [8, springboot, aaa, [TOC]
                            #### Disabled options

                            - TeX (Based on KaTeX);
                            - Emoji;
                            - Task lists;
                            - HTML tags decode;
                            - Flowchart and Sequence Diagram;
                            #### Editor.md directory

                                editor.md/
                                        lib/
                                        css/
                                        scss/
                                        tests/
                                        fonts/
                                        images/
                                        plugins/
                                        examples/
                                        languages/
                                        editormd.js
                                        ...

                            ```html
                            <!-- English -->
                            <script src="../dist/js/languages/en.js"></script>

                            <!-- 繁體中文 -->
                            <script src="../dist/js/languages/zh-tw.js"></script>
                            ```
                        , 2020-02-25 03:39:36.0, 2020-02-25 22:38:07.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50002} Result: [9, mybatis, bbb, [TOC]

                            #### Disabled options

                            - TeX (Based on KaTeX);
                            - Emoji;
                            - Task lists;
                            - HTML tags decode;
                            - Flowchart and Sequence Diagram;

                            #### Editor.md directory

                                editor.md/
                                        lib/
                                        css/
                                        scss/
                                        tests/
                                        fonts/
                                        images/
                                        plugins/
                                        examples/
                                        languages/
                                        editormd.js
                                        ...

                            ```html
                            <!-- English -->
                            <script src="../dist/js/languages/en.js"></script>

                            <!-- 繁體中文 -->
                            <script src="../dist/js/languages/zh-tw.js"></script>
                            ```
                        , 2020-02-25 03:44:09.0, 2020-02-25 03:44:09.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50002} Result: [10, springboot, 飞哥, #大哥的Markdown, 2020-02-25 22:43:28.0, 2020-02-25 22:43:28.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50002} Result: [11, mybatis, 大哥, #飞哥的博客后台管理系统, 2020-02-25 22:49:26.0, 2020-02-25 22:49:26.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50002} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} Parameters : []
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} Types : []
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} executed. 0.873777 millis. select count(*) from `blog`
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50003} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50003} Header: [count(*)]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50003} Result: [13]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50003} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} Parameters : [0, 10]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} executed. 1.034666 millis. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog
         
            limit ?,?
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50004} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50004} Header: [id, type_name, title, content, create_time, change_time, author, view]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50004} Result: [1, springboot, springboot入门, springb自动装配, 2020-02-23 21:43:36.0, 2020-02-24 03:06:48.0, admin, 0]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50004} Result: [2, mybatis, 配置, 得到的, 2020-02-24 02:05:36.0, 2020-03-13 06:39:47.0, admin, 3]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50004} Result: [4, springMVC, mybatis-plus, ##飞哥, 2020-02-24 02:10:09.0, 2020-02-25 22:42:23.0, admin, 111]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50004} Result: [5, springboot, 人, 嗯嗯, 2020-02-24 03:07:20.0, 2020-02-24 03:07:20.0, admin, 2]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50004} Result: [6, mybatis, mybatis入门, <h2>1、Mybatis简介</h2>
<p><img src="https://blog.kuangstudy.com/usr/uploads/2019/10/1296229149.png" referrerpolicy="no-referrer" alt="1567007421329.png"></p>
<h3>什么是MyBatis</h3>
<ul>
<li>MyBatis 是一款优秀的<strong>持久层框架</strong></li>
<li>MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集的过程</li>
<li>MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 实体类 【Plain Old Java Objects,普通的 Java对象】映射成数据库中的记录。</li>
<li>MyBatis 本是apache的一个开源项目ibatis, 2010年这个项目由apache 迁移到了google code，并且改名为MyBatis 。</li>
<li>2013年11月迁移到<strong>Github</strong> .</li>
<li>Mybatis官方文档 : <a href='http://www.mybatis.org/mybatis-3/zh/index.html' target='_blank' class='url'>http://www.mybatis.org/mybatis-3/zh/index.html</a></li>
<li>GitHub : <a href='https://github.com/mybatis/mybatis-3' target='_blank' class='url'>https://github.com/mybatis/mybatis-3</a></li>

</ul>
<h3>持久化</h3>
<ul>
<li><p><strong>持久化是将程序数据在持久状态和瞬时状态间转换的机制。</strong></p>
<ul>
<li>即把数据（如内存中的对象）保存到可永久保存的存储设备中（如磁盘）。持久化的主要应用是将内存中的对象存储在数据库中，或者存储在磁盘文件中、XML数据文件中等等。</li>
<li>JDBC就是一种持久化机制。文件IO也是一种持久化机制。</li>
<li>在生活中 : 将鲜肉冷藏，吃的时候再解冻的方法也是。将水果做成罐头的方法也是。</li>

</ul>
</li>
<li><p><strong>为什么需要持久化服务呢？那是由于内存本身的缺陷引起的</strong></p>
<ul>
<li>内存断电后数据会丢失，但有一些对象是无论如何都不能丢失的，比如银行账号等，遗憾的是，人们还无法保证内存永不掉电。</li>
<li>内存过于昂贵，与硬盘、光盘等外存相比，内存的价格要高2~3个数量级，而且维持成本也高，至少需要一直供电吧。所以即使对象不需要永久保存，也会因为内存的容量限制不能一直呆在内存中，需要持久化来缓存到外存。</li>

</ul>
</li>

</ul>
<h3>持久层</h3>
<ul>
<li><p>什么是持久层？</p>
<ul>
<li>完成持久化工作的代码块 . ----&gt; dao层 【DAO (Data Access Object) 数据访问对象】</li>
<li>大多数情况下特别是企业级应用，数据持久化往往也就意味着将内存中的数据保存到磁盘上加以固化，而持久化的实现过程则大多通过各种<strong>关系数据库</strong>来完成。</li>
<li>不过这里有一个字需要特别强调，也就是所谓的“层”。对于应用系统而言，数据持久功能大多是必不可少的组成部分。也就是说，我们的系统中，已经天然的具备了“持久层”概念？也许是，但也许实际情况并非如此。之所以要独立出一个“持久层”的概念,而不是“持久模块”，“持久单元”，也就意味着，我们的系统架构中，应该有一个相对独立的逻辑层面，专著于数据持久化逻辑的实现.</li>
<li>与系统其他部分相对而言，这个层面应该具有一个较为清晰和严格的逻辑边界。 【说白了就是用来操作数据库存在的！】</li>

</ul>
</li>

</ul>
<h3>为什么需要Mybatis</h3>
<ul>
<li><p>Mybatis就是帮助程序猿将数据存入数据库中 , 和从数据库中取数据 .</p>
</li>
<li><p>传统的jdbc操作 , 有很多重复代码块 .比如 : 数据取出时的封装 , 数据库的建立连接等等... , 通过框架可以减少重复代码,提高开发效率 .</p>
</li>
<li><p>MyBatis 是一个半自动化的<strong>ORM框架 (Object Relationship Mapping) --&gt;对象关系映射</strong></p>
</li>
<li><p>所有的事情，不用Mybatis依旧可以做到，只是用了它，所有实现会更加简单！<strong>技术没有高低之分，只有使用这个技术的人有高低之别</strong></p>
</li>
<li><p>MyBatis的优点</p>
<ul>
<li>简单易学：本身就很小且简单。没有任何第三方依赖，最简单安装只要两个jar文件+配置几个sql映射文件就可以了，易于学习，易于使用，通过文档和源代码，可以比较完全的掌握它的设计思路和实现。</li>
<li>灵活：mybatis不会对应用程序或者数据库的现有设计强加任何影响。 sql写在xml里，便于统一管理和优化。通过sql语句可以满足操作数据库的所有需求。</li>
<li>解除sql与程序代码的耦合：通过提供DAO层，将业务逻辑和数据访问逻辑分离，使系统的设计更清晰，更易维护，更易单元测试。sql和代码的分离，提高了可维护性。</li>
<li>提供xml标签，支持编写动态sql。</li>
<li>.......</li>

</ul>
</li>
<li><p>最重要的一点，使用的人多！公司需要！</p>
</li>
<li><p>环境说明：</p>
<ul>
<li>jdk 8 +</li>
<li>MySQL 5.7.19</li>
<li>maven-3.6.0</li>
<li>IDEA</li>

</ul>
<p>学习前需要掌握：</p>
<ul>
<li>JDBC</li>
<li>MySQL</li>
<li>Java 基础</li>
<li>Maven</li>
<li>Junit</li>

</ul>
</li>

</ul>
<h2>2、mybatis crud（实现增删改查）</h2>
<h4>1.1、创建一个maven项目</h4>
<p>		导入依赖</p>
<pre><code class='language-xml' lang='xml'>&lt;dependencies&gt;
    &lt;!--mysql驱动--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;mysql&lt;/groupId&gt;
        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
        &lt;version&gt;5.1.47&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;!--mybatis支持--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.mybatis&lt;/groupId&gt;
        &lt;artifactId&gt;mybatis&lt;/artifactId&gt;
        &lt;version&gt;3.5.2&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;!--junit支持--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;junit&lt;/groupId&gt;
        &lt;artifactId&gt;junit&lt;/artifactId&gt;
        &lt;version&gt;4.12&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
</code></pre>
<p>注意点 : pom文件的设置中需要设置资源过滤 , 否则会有资源文件打包不成功问题，导致项目无法运行；</p>
<pre><code class='language-xml' lang='xml'>&lt;build&gt;
    &lt;resources&gt;
        &lt;resource&gt;
            &lt;directory&gt;src/main/java&lt;/directory&gt;
            &lt;includes&gt;
                &lt;include&gt;**/*.properties&lt;/include&gt;
                &lt;include&gt;**/*.xml&lt;/include&gt;
            &lt;/includes&gt;
            &lt;filtering&gt;true&lt;/filtering&gt;
        &lt;/resource&gt;
    &lt;/resources&gt;
&lt;/build&gt;
</code></pre>
<p>&nbsp;</p>
<h4>1.2、创建数据库和表</h4>
<pre><code class='language-sql' lang='sql'>CREATE DATABASE mybatis CHARACTER SET utf8;
CREATE TABLE USER(
	id INT PRIMARY KEY,
	username VARCHAR(15) NOT NULL,
	pwd VARCHAR(20) NOT NULL
)
INSERT INTO USER VALUES(2018143114,&#39;张三&#39;,&#39;123456&#39;),(2018143115,&#39;李四&#39;,&#39;1234567&#39;),(2018143116,&#39;王五&#39;,&#39;147258&#39;);
SELECT * FROM USER;
</code></pre>
<h4>1.3、编写mybatis配置文件</h4>
<p>在resource里新建一个mybatis-config.xml文件</p>
<pre><code class='language-xml' lang='xml'>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE configuration
        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;
&lt;configuration&gt;
    &lt;environments default=&quot;development&quot;&gt;
        &lt;environment id=&quot;development&quot;&gt;
            &lt;transactionManager type=&quot;JDBC&quot;/&gt;
            &lt;dataSource type=&quot;POOLED&quot;&gt;
                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;
                &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;amp;useUnicode=true&amp;amp;characterEncoding=utf8&quot;/&gt;
                &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;
                &lt;property name=&quot;password&quot; value=&quot;hufei169357&quot;/&gt;
            &lt;/dataSource&gt;
        &lt;/environment&gt;
    &lt;/environments&gt;
    &lt;mappers&gt;
        &lt;mapper resource=&quot;com/feige/dao/userMapper.xml&quot;/&gt;
    &lt;/mappers&gt;
&lt;/configuration&gt;
</code></pre>
<h4>1.4、新建一个工具类用来获取SqlSession对象</h4>
<pre><code class='language-java' lang='java'>package com.feige.utils;

import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import java.io.IOException;
import java.io.InputStream;
//sqlSessionFactory-sqlSession
public class MybatisUtils {
    private static SqlSessionFactory sqlSessionFactory;
    static {
        try {
            //使用mybatis第一步：获取sqlSessionFactory对象
            String resource = &quot;mybatis-config.xml&quot;;
            InputStream inputStream = Resources.getResourceAsStream(resource);
            sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    //既然有了sqlSessionFactory，顾名思义，我们就可以从中获得sqlSession的实例
    public static SqlSession getSqlSessioon(){
        return sqlSessionFactory.openSession();
    }
}

</code></pre>
<p>&nbsp;</p>
<h4>1.5、编写一个pojo（实体类）</h4>
<pre><code class='language-java' lang='java'>package com.feige.pojo;

public class User {
    private int id;
    private String username;
    private String pwd;

    public User() {
    }

    public User(int id, String username, String pwd) {
        this.id = id;
        this.username = username;
        this.pwd = pwd;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getPwd() {
        return pwd;
    }

    public void setPwd(String pwd) {
        this.pwd = pwd;
    }
    @Override
    public String toString() {
        return &quot;User{&quot; +
                &quot;id=&quot; + id +
                &quot;, username=&#39;&quot; + username + &#39;\&#39;&#39; +
                &quot;, pwd=&#39;&quot; + pwd + &#39;\&#39;&#39; +
                &#39;}&#39;;
    }
}

</code></pre>
<h4>1.6、新建一个userMapper接口</h4>
<pre><code class='language-java' lang='java'>package com.feige.dao;

import com.feige.pojo.User;

import java.util.List;
import java.util.Map;

public interface UserMapper {
    //查询全部用户
    List&lt;User&gt; getAllUser();
    //通过一个id查询一个用户
    User getUserById(int id);
    //通过id修改一个用户
    int updateUserById(Map map);
    //通过id删除一个用户
    int deleteUserById(int id);
    //插入一条数据
    int insertUser(User user);
}

</code></pre>
<h4>1.7、新建一个userMapper.xml文件</h4>
<pre><code class='language-xml' lang='xml'>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE mapper
        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;com.feige.dao.UserMapper&quot;&gt;
    &lt;!--每个语句要对应相应的标签select对应&lt;select&gt; delete 对应&lt;delete&gt; update 对应&lt;update&gt; insert 对应&lt;insert&gt;--&gt;
    &lt;select id=&quot;getAllUser&quot; resultType=&quot;com.feige.pojo.User&quot;&gt;
        select * from user
    &lt;/select&gt;
    &lt;select id=&quot;getUserById&quot; resultType=&quot;com.feige.pojo.User&quot; parameterType=&quot;int&quot;&gt;
        select * from user where id=#{id}
    &lt;/select&gt;
    &lt;update id=&quot;updateUserById&quot; parameterType=&quot;map&quot;&gt;
        update user set pwd=#{pwd} where id=#{id}
    &lt;/update&gt;
    &lt;delete id=&quot;deleteUserById&quot; parameterType=&quot;int&quot;&gt;
        delete from user where id=#{id}
    &lt;/delete&gt;
    &lt;insert id=&quot;insertUser&quot; parameterType=&quot;com.feige.pojo.User&quot;&gt;
        insert into user values (#{id},#{username},#{pwd})
    &lt;/insert&gt;
&lt;/mapper&gt;
</code></pre>
<h4>1.8、测试代码</h4>
<pre><code class='language-java' lang='java'>package com.feige.mybatisTest;

import com.feige.dao.UserMapper;
import com.feige.pojo.User;
import com.feige.utils.MybatisUtils;
import org.apache.ibatis.session.SqlSession;
import org.junit.Test;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MybatisTest {
    @Test
    public void mybatisTest1(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        List&lt;User&gt; allUser = mapper.getAllUser();
        for (User user : allUser) {
            System.out.println(user);
        }
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest2(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        User userById = mapper.getUserById(2018143114);
        System.out.println(userById);
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest3() {
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        //使用万能map传参
        Map&lt;String,Object&gt; map = new HashMap&lt;String, Object&gt;();
        map.put(&quot;pwd&quot;,2018143114);
        map.put(&quot;id&quot;,2018143114);

        int i = mapper.updateUserById(map);
        if (i &gt; 0) {
            System.out.println(&quot;修改成功！&quot;+i);
        }
        //增删改需要提交事务
        sqlSessioon.commit();

        sqlSessioon.close();

    }
    @Test
    public void mybatisTest4(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        int i = mapper.deleteUserById(2018143117);
        if (i &gt; 0) {
            System.out.println(&quot;删除成功！&quot;+i);
        }
        sqlSessioon.commit();
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest5(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        User user = new User(2018143117, &quot;杨帆东&quot;, &quot;2018143117&quot;);
        int i = mapper.insertUser(user);
        if (i &gt; 0) {
            System.out.println(&quot;插入成功！&quot;+i);
        }
        sqlSessioon.commit();
        sqlSessioon.close();

    }
}

</code></pre>
<p>&nbsp;</p>
<p>		</p>, 2020-02-24 03:15:45.0, 2020-02-24 03:15:50.0, admin, 0]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50004} Result: [7, mybatis, mybatis啊, 作者, 2020-02-24 03:27:18.0, 2020-02-24 03:27:18.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50004} Result: [8, springboot, aaa, [TOC]
                            #### Disabled options

                            - TeX (Based on KaTeX);
                            - Emoji;
                            - Task lists;
                            - HTML tags decode;
                            - Flowchart and Sequence Diagram;
                            #### Editor.md directory

                                editor.md/
                                        lib/
                                        css/
                                        scss/
                                        tests/
                                        fonts/
                                        images/
                                        plugins/
                                        examples/
                                        languages/
                                        editormd.js
                                        ...

                            ```html
                            <!-- English -->
                            <script src="../dist/js/languages/en.js"></script>

                            <!-- 繁體中文 -->
                            <script src="../dist/js/languages/zh-tw.js"></script>
                            ```
                        , 2020-02-25 03:39:36.0, 2020-02-25 22:38:07.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50004} Result: [9, mybatis, bbb, [TOC]

                            #### Disabled options

                            - TeX (Based on KaTeX);
                            - Emoji;
                            - Task lists;
                            - HTML tags decode;
                            - Flowchart and Sequence Diagram;

                            #### Editor.md directory

                                editor.md/
                                        lib/
                                        css/
                                        scss/
                                        tests/
                                        fonts/
                                        images/
                                        plugins/
                                        examples/
                                        languages/
                                        editormd.js
                                        ...

                            ```html
                            <!-- English -->
                            <script src="../dist/js/languages/en.js"></script>

                            <!-- 繁體中文 -->
                            <script src="../dist/js/languages/zh-tw.js"></script>
                            ```
                        , 2020-02-25 03:44:09.0, 2020-02-25 03:44:09.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50004} Result: [10, springboot, 飞哥, #大哥的Markdown, 2020-02-25 22:43:28.0, 2020-02-25 22:43:28.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50004} Result: [11, mybatis, 大哥, #飞哥的博客后台管理系统, 2020-02-25 22:49:26.0, 2020-02-25 22:49:26.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50004} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} Parameters : []
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} Types : []
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} executed. 0.830666 millis. select count(*) from `blog`
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50005} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50005} Header: [count(*)]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50005} Result: [13]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50005} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} Parameters : [0, 10]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} executed. 1.516888 millis. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog
         
            limit ?,?
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50006} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50006} Header: [id, type_name, title, content, create_time, change_time, author, view]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50006} Result: [1, springboot, springboot入门, springb自动装配, 2020-02-23 21:43:36.0, 2020-02-24 03:06:48.0, admin, 0]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50006} Result: [2, mybatis, 配置, 得到的, 2020-02-24 02:05:36.0, 2020-03-13 06:39:47.0, admin, 3]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50006} Result: [4, springMVC, mybatis-plus, ##飞哥, 2020-02-24 02:10:09.0, 2020-02-25 22:42:23.0, admin, 111]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50006} Result: [5, springboot, 人, 嗯嗯, 2020-02-24 03:07:20.0, 2020-02-24 03:07:20.0, admin, 2]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50006} Result: [6, mybatis, mybatis入门, <h2>1、Mybatis简介</h2>
<p><img src="https://blog.kuangstudy.com/usr/uploads/2019/10/1296229149.png" referrerpolicy="no-referrer" alt="1567007421329.png"></p>
<h3>什么是MyBatis</h3>
<ul>
<li>MyBatis 是一款优秀的<strong>持久层框架</strong></li>
<li>MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集的过程</li>
<li>MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 实体类 【Plain Old Java Objects,普通的 Java对象】映射成数据库中的记录。</li>
<li>MyBatis 本是apache的一个开源项目ibatis, 2010年这个项目由apache 迁移到了google code，并且改名为MyBatis 。</li>
<li>2013年11月迁移到<strong>Github</strong> .</li>
<li>Mybatis官方文档 : <a href='http://www.mybatis.org/mybatis-3/zh/index.html' target='_blank' class='url'>http://www.mybatis.org/mybatis-3/zh/index.html</a></li>
<li>GitHub : <a href='https://github.com/mybatis/mybatis-3' target='_blank' class='url'>https://github.com/mybatis/mybatis-3</a></li>

</ul>
<h3>持久化</h3>
<ul>
<li><p><strong>持久化是将程序数据在持久状态和瞬时状态间转换的机制。</strong></p>
<ul>
<li>即把数据（如内存中的对象）保存到可永久保存的存储设备中（如磁盘）。持久化的主要应用是将内存中的对象存储在数据库中，或者存储在磁盘文件中、XML数据文件中等等。</li>
<li>JDBC就是一种持久化机制。文件IO也是一种持久化机制。</li>
<li>在生活中 : 将鲜肉冷藏，吃的时候再解冻的方法也是。将水果做成罐头的方法也是。</li>

</ul>
</li>
<li><p><strong>为什么需要持久化服务呢？那是由于内存本身的缺陷引起的</strong></p>
<ul>
<li>内存断电后数据会丢失，但有一些对象是无论如何都不能丢失的，比如银行账号等，遗憾的是，人们还无法保证内存永不掉电。</li>
<li>内存过于昂贵，与硬盘、光盘等外存相比，内存的价格要高2~3个数量级，而且维持成本也高，至少需要一直供电吧。所以即使对象不需要永久保存，也会因为内存的容量限制不能一直呆在内存中，需要持久化来缓存到外存。</li>

</ul>
</li>

</ul>
<h3>持久层</h3>
<ul>
<li><p>什么是持久层？</p>
<ul>
<li>完成持久化工作的代码块 . ----&gt; dao层 【DAO (Data Access Object) 数据访问对象】</li>
<li>大多数情况下特别是企业级应用，数据持久化往往也就意味着将内存中的数据保存到磁盘上加以固化，而持久化的实现过程则大多通过各种<strong>关系数据库</strong>来完成。</li>
<li>不过这里有一个字需要特别强调，也就是所谓的“层”。对于应用系统而言，数据持久功能大多是必不可少的组成部分。也就是说，我们的系统中，已经天然的具备了“持久层”概念？也许是，但也许实际情况并非如此。之所以要独立出一个“持久层”的概念,而不是“持久模块”，“持久单元”，也就意味着，我们的系统架构中，应该有一个相对独立的逻辑层面，专著于数据持久化逻辑的实现.</li>
<li>与系统其他部分相对而言，这个层面应该具有一个较为清晰和严格的逻辑边界。 【说白了就是用来操作数据库存在的！】</li>

</ul>
</li>

</ul>
<h3>为什么需要Mybatis</h3>
<ul>
<li><p>Mybatis就是帮助程序猿将数据存入数据库中 , 和从数据库中取数据 .</p>
</li>
<li><p>传统的jdbc操作 , 有很多重复代码块 .比如 : 数据取出时的封装 , 数据库的建立连接等等... , 通过框架可以减少重复代码,提高开发效率 .</p>
</li>
<li><p>MyBatis 是一个半自动化的<strong>ORM框架 (Object Relationship Mapping) --&gt;对象关系映射</strong></p>
</li>
<li><p>所有的事情，不用Mybatis依旧可以做到，只是用了它，所有实现会更加简单！<strong>技术没有高低之分，只有使用这个技术的人有高低之别</strong></p>
</li>
<li><p>MyBatis的优点</p>
<ul>
<li>简单易学：本身就很小且简单。没有任何第三方依赖，最简单安装只要两个jar文件+配置几个sql映射文件就可以了，易于学习，易于使用，通过文档和源代码，可以比较完全的掌握它的设计思路和实现。</li>
<li>灵活：mybatis不会对应用程序或者数据库的现有设计强加任何影响。 sql写在xml里，便于统一管理和优化。通过sql语句可以满足操作数据库的所有需求。</li>
<li>解除sql与程序代码的耦合：通过提供DAO层，将业务逻辑和数据访问逻辑分离，使系统的设计更清晰，更易维护，更易单元测试。sql和代码的分离，提高了可维护性。</li>
<li>提供xml标签，支持编写动态sql。</li>
<li>.......</li>

</ul>
</li>
<li><p>最重要的一点，使用的人多！公司需要！</p>
</li>
<li><p>环境说明：</p>
<ul>
<li>jdk 8 +</li>
<li>MySQL 5.7.19</li>
<li>maven-3.6.0</li>
<li>IDEA</li>

</ul>
<p>学习前需要掌握：</p>
<ul>
<li>JDBC</li>
<li>MySQL</li>
<li>Java 基础</li>
<li>Maven</li>
<li>Junit</li>

</ul>
</li>

</ul>
<h2>2、mybatis crud（实现增删改查）</h2>
<h4>1.1、创建一个maven项目</h4>
<p>		导入依赖</p>
<pre><code class='language-xml' lang='xml'>&lt;dependencies&gt;
    &lt;!--mysql驱动--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;mysql&lt;/groupId&gt;
        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
        &lt;version&gt;5.1.47&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;!--mybatis支持--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.mybatis&lt;/groupId&gt;
        &lt;artifactId&gt;mybatis&lt;/artifactId&gt;
        &lt;version&gt;3.5.2&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;!--junit支持--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;junit&lt;/groupId&gt;
        &lt;artifactId&gt;junit&lt;/artifactId&gt;
        &lt;version&gt;4.12&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
</code></pre>
<p>注意点 : pom文件的设置中需要设置资源过滤 , 否则会有资源文件打包不成功问题，导致项目无法运行；</p>
<pre><code class='language-xml' lang='xml'>&lt;build&gt;
    &lt;resources&gt;
        &lt;resource&gt;
            &lt;directory&gt;src/main/java&lt;/directory&gt;
            &lt;includes&gt;
                &lt;include&gt;**/*.properties&lt;/include&gt;
                &lt;include&gt;**/*.xml&lt;/include&gt;
            &lt;/includes&gt;
            &lt;filtering&gt;true&lt;/filtering&gt;
        &lt;/resource&gt;
    &lt;/resources&gt;
&lt;/build&gt;
</code></pre>
<p>&nbsp;</p>
<h4>1.2、创建数据库和表</h4>
<pre><code class='language-sql' lang='sql'>CREATE DATABASE mybatis CHARACTER SET utf8;
CREATE TABLE USER(
	id INT PRIMARY KEY,
	username VARCHAR(15) NOT NULL,
	pwd VARCHAR(20) NOT NULL
)
INSERT INTO USER VALUES(2018143114,&#39;张三&#39;,&#39;123456&#39;),(2018143115,&#39;李四&#39;,&#39;1234567&#39;),(2018143116,&#39;王五&#39;,&#39;147258&#39;);
SELECT * FROM USER;
</code></pre>
<h4>1.3、编写mybatis配置文件</h4>
<p>在resource里新建一个mybatis-config.xml文件</p>
<pre><code class='language-xml' lang='xml'>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE configuration
        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;
&lt;configuration&gt;
    &lt;environments default=&quot;development&quot;&gt;
        &lt;environment id=&quot;development&quot;&gt;
            &lt;transactionManager type=&quot;JDBC&quot;/&gt;
            &lt;dataSource type=&quot;POOLED&quot;&gt;
                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;
                &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;amp;useUnicode=true&amp;amp;characterEncoding=utf8&quot;/&gt;
                &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;
                &lt;property name=&quot;password&quot; value=&quot;hufei169357&quot;/&gt;
            &lt;/dataSource&gt;
        &lt;/environment&gt;
    &lt;/environments&gt;
    &lt;mappers&gt;
        &lt;mapper resource=&quot;com/feige/dao/userMapper.xml&quot;/&gt;
    &lt;/mappers&gt;
&lt;/configuration&gt;
</code></pre>
<h4>1.4、新建一个工具类用来获取SqlSession对象</h4>
<pre><code class='language-java' lang='java'>package com.feige.utils;

import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import java.io.IOException;
import java.io.InputStream;
//sqlSessionFactory-sqlSession
public class MybatisUtils {
    private static SqlSessionFactory sqlSessionFactory;
    static {
        try {
            //使用mybatis第一步：获取sqlSessionFactory对象
            String resource = &quot;mybatis-config.xml&quot;;
            InputStream inputStream = Resources.getResourceAsStream(resource);
            sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    //既然有了sqlSessionFactory，顾名思义，我们就可以从中获得sqlSession的实例
    public static SqlSession getSqlSessioon(){
        return sqlSessionFactory.openSession();
    }
}

</code></pre>
<p>&nbsp;</p>
<h4>1.5、编写一个pojo（实体类）</h4>
<pre><code class='language-java' lang='java'>package com.feige.pojo;

public class User {
    private int id;
    private String username;
    private String pwd;

    public User() {
    }

    public User(int id, String username, String pwd) {
        this.id = id;
        this.username = username;
        this.pwd = pwd;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getPwd() {
        return pwd;
    }

    public void setPwd(String pwd) {
        this.pwd = pwd;
    }
    @Override
    public String toString() {
        return &quot;User{&quot; +
                &quot;id=&quot; + id +
                &quot;, username=&#39;&quot; + username + &#39;\&#39;&#39; +
                &quot;, pwd=&#39;&quot; + pwd + &#39;\&#39;&#39; +
                &#39;}&#39;;
    }
}

</code></pre>
<h4>1.6、新建一个userMapper接口</h4>
<pre><code class='language-java' lang='java'>package com.feige.dao;

import com.feige.pojo.User;

import java.util.List;
import java.util.Map;

public interface UserMapper {
    //查询全部用户
    List&lt;User&gt; getAllUser();
    //通过一个id查询一个用户
    User getUserById(int id);
    //通过id修改一个用户
    int updateUserById(Map map);
    //通过id删除一个用户
    int deleteUserById(int id);
    //插入一条数据
    int insertUser(User user);
}

</code></pre>
<h4>1.7、新建一个userMapper.xml文件</h4>
<pre><code class='language-xml' lang='xml'>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE mapper
        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;com.feige.dao.UserMapper&quot;&gt;
    &lt;!--每个语句要对应相应的标签select对应&lt;select&gt; delete 对应&lt;delete&gt; update 对应&lt;update&gt; insert 对应&lt;insert&gt;--&gt;
    &lt;select id=&quot;getAllUser&quot; resultType=&quot;com.feige.pojo.User&quot;&gt;
        select * from user
    &lt;/select&gt;
    &lt;select id=&quot;getUserById&quot; resultType=&quot;com.feige.pojo.User&quot; parameterType=&quot;int&quot;&gt;
        select * from user where id=#{id}
    &lt;/select&gt;
    &lt;update id=&quot;updateUserById&quot; parameterType=&quot;map&quot;&gt;
        update user set pwd=#{pwd} where id=#{id}
    &lt;/update&gt;
    &lt;delete id=&quot;deleteUserById&quot; parameterType=&quot;int&quot;&gt;
        delete from user where id=#{id}
    &lt;/delete&gt;
    &lt;insert id=&quot;insertUser&quot; parameterType=&quot;com.feige.pojo.User&quot;&gt;
        insert into user values (#{id},#{username},#{pwd})
    &lt;/insert&gt;
&lt;/mapper&gt;
</code></pre>
<h4>1.8、测试代码</h4>
<pre><code class='language-java' lang='java'>package com.feige.mybatisTest;

import com.feige.dao.UserMapper;
import com.feige.pojo.User;
import com.feige.utils.MybatisUtils;
import org.apache.ibatis.session.SqlSession;
import org.junit.Test;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MybatisTest {
    @Test
    public void mybatisTest1(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        List&lt;User&gt; allUser = mapper.getAllUser();
        for (User user : allUser) {
            System.out.println(user);
        }
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest2(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        User userById = mapper.getUserById(2018143114);
        System.out.println(userById);
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest3() {
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        //使用万能map传参
        Map&lt;String,Object&gt; map = new HashMap&lt;String, Object&gt;();
        map.put(&quot;pwd&quot;,2018143114);
        map.put(&quot;id&quot;,2018143114);

        int i = mapper.updateUserById(map);
        if (i &gt; 0) {
            System.out.println(&quot;修改成功！&quot;+i);
        }
        //增删改需要提交事务
        sqlSessioon.commit();

        sqlSessioon.close();

    }
    @Test
    public void mybatisTest4(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        int i = mapper.deleteUserById(2018143117);
        if (i &gt; 0) {
            System.out.println(&quot;删除成功！&quot;+i);
        }
        sqlSessioon.commit();
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest5(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        User user = new User(2018143117, &quot;杨帆东&quot;, &quot;2018143117&quot;);
        int i = mapper.insertUser(user);
        if (i &gt; 0) {
            System.out.println(&quot;插入成功！&quot;+i);
        }
        sqlSessioon.commit();
        sqlSessioon.close();

    }
}

</code></pre>
<p>&nbsp;</p>
<p>		</p>, 2020-02-24 03:15:45.0, 2020-02-24 03:15:50.0, admin, 0]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50006} Result: [7, mybatis, mybatis啊, 作者, 2020-02-24 03:27:18.0, 2020-02-24 03:27:18.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50006} Result: [8, springboot, aaa, [TOC]
                            #### Disabled options

                            - TeX (Based on KaTeX);
                            - Emoji;
                            - Task lists;
                            - HTML tags decode;
                            - Flowchart and Sequence Diagram;
                            #### Editor.md directory

                                editor.md/
                                        lib/
                                        css/
                                        scss/
                                        tests/
                                        fonts/
                                        images/
                                        plugins/
                                        examples/
                                        languages/
                                        editormd.js
                                        ...

                            ```html
                            <!-- English -->
                            <script src="../dist/js/languages/en.js"></script>

                            <!-- 繁體中文 -->
                            <script src="../dist/js/languages/zh-tw.js"></script>
                            ```
                        , 2020-02-25 03:39:36.0, 2020-02-25 22:38:07.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50006} Result: [9, mybatis, bbb, [TOC]

                            #### Disabled options

                            - TeX (Based on KaTeX);
                            - Emoji;
                            - Task lists;
                            - HTML tags decode;
                            - Flowchart and Sequence Diagram;

                            #### Editor.md directory

                                editor.md/
                                        lib/
                                        css/
                                        scss/
                                        tests/
                                        fonts/
                                        images/
                                        plugins/
                                        examples/
                                        languages/
                                        editormd.js
                                        ...

                            ```html
                            <!-- English -->
                            <script src="../dist/js/languages/en.js"></script>

                            <!-- 繁體中文 -->
                            <script src="../dist/js/languages/zh-tw.js"></script>
                            ```
                        , 2020-02-25 03:44:09.0, 2020-02-25 03:44:09.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50006} Result: [10, springboot, 飞哥, #大哥的Markdown, 2020-02-25 22:43:28.0, 2020-02-25 22:43:28.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50006} Result: [11, mybatis, 大哥, #飞哥的博客后台管理系统, 2020-02-25 22:49:26.0, 2020-02-25 22:49:26.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50006} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} Parameters : []
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} Types : []
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} executed. 2.421776 millis. select count(*) from `blog`
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50007} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50007} Header: [count(*)]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50007} Result: [13]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50007} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} Parameters : [0, 10]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} executed. 0.790222 millis. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog
         
            limit ?,?
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50008} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50008} Header: [id, type_name, title, content, create_time, change_time, author, view]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50008} Result: [1, springboot, springboot入门, springb自动装配, 2020-02-23 21:43:36.0, 2020-02-24 03:06:48.0, admin, 0]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50008} Result: [2, mybatis, 配置, 得到的, 2020-02-24 02:05:36.0, 2020-03-13 06:39:47.0, admin, 3]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50008} Result: [4, springMVC, mybatis-plus, ##飞哥, 2020-02-24 02:10:09.0, 2020-02-25 22:42:23.0, admin, 111]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50008} Result: [5, springboot, 人, 嗯嗯, 2020-02-24 03:07:20.0, 2020-02-24 03:07:20.0, admin, 2]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50008} Result: [6, mybatis, mybatis入门, <h2>1、Mybatis简介</h2>
<p><img src="https://blog.kuangstudy.com/usr/uploads/2019/10/1296229149.png" referrerpolicy="no-referrer" alt="1567007421329.png"></p>
<h3>什么是MyBatis</h3>
<ul>
<li>MyBatis 是一款优秀的<strong>持久层框架</strong></li>
<li>MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集的过程</li>
<li>MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 实体类 【Plain Old Java Objects,普通的 Java对象】映射成数据库中的记录。</li>
<li>MyBatis 本是apache的一个开源项目ibatis, 2010年这个项目由apache 迁移到了google code，并且改名为MyBatis 。</li>
<li>2013年11月迁移到<strong>Github</strong> .</li>
<li>Mybatis官方文档 : <a href='http://www.mybatis.org/mybatis-3/zh/index.html' target='_blank' class='url'>http://www.mybatis.org/mybatis-3/zh/index.html</a></li>
<li>GitHub : <a href='https://github.com/mybatis/mybatis-3' target='_blank' class='url'>https://github.com/mybatis/mybatis-3</a></li>

</ul>
<h3>持久化</h3>
<ul>
<li><p><strong>持久化是将程序数据在持久状态和瞬时状态间转换的机制。</strong></p>
<ul>
<li>即把数据（如内存中的对象）保存到可永久保存的存储设备中（如磁盘）。持久化的主要应用是将内存中的对象存储在数据库中，或者存储在磁盘文件中、XML数据文件中等等。</li>
<li>JDBC就是一种持久化机制。文件IO也是一种持久化机制。</li>
<li>在生活中 : 将鲜肉冷藏，吃的时候再解冻的方法也是。将水果做成罐头的方法也是。</li>

</ul>
</li>
<li><p><strong>为什么需要持久化服务呢？那是由于内存本身的缺陷引起的</strong></p>
<ul>
<li>内存断电后数据会丢失，但有一些对象是无论如何都不能丢失的，比如银行账号等，遗憾的是，人们还无法保证内存永不掉电。</li>
<li>内存过于昂贵，与硬盘、光盘等外存相比，内存的价格要高2~3个数量级，而且维持成本也高，至少需要一直供电吧。所以即使对象不需要永久保存，也会因为内存的容量限制不能一直呆在内存中，需要持久化来缓存到外存。</li>

</ul>
</li>

</ul>
<h3>持久层</h3>
<ul>
<li><p>什么是持久层？</p>
<ul>
<li>完成持久化工作的代码块 . ----&gt; dao层 【DAO (Data Access Object) 数据访问对象】</li>
<li>大多数情况下特别是企业级应用，数据持久化往往也就意味着将内存中的数据保存到磁盘上加以固化，而持久化的实现过程则大多通过各种<strong>关系数据库</strong>来完成。</li>
<li>不过这里有一个字需要特别强调，也就是所谓的“层”。对于应用系统而言，数据持久功能大多是必不可少的组成部分。也就是说，我们的系统中，已经天然的具备了“持久层”概念？也许是，但也许实际情况并非如此。之所以要独立出一个“持久层”的概念,而不是“持久模块”，“持久单元”，也就意味着，我们的系统架构中，应该有一个相对独立的逻辑层面，专著于数据持久化逻辑的实现.</li>
<li>与系统其他部分相对而言，这个层面应该具有一个较为清晰和严格的逻辑边界。 【说白了就是用来操作数据库存在的！】</li>

</ul>
</li>

</ul>
<h3>为什么需要Mybatis</h3>
<ul>
<li><p>Mybatis就是帮助程序猿将数据存入数据库中 , 和从数据库中取数据 .</p>
</li>
<li><p>传统的jdbc操作 , 有很多重复代码块 .比如 : 数据取出时的封装 , 数据库的建立连接等等... , 通过框架可以减少重复代码,提高开发效率 .</p>
</li>
<li><p>MyBatis 是一个半自动化的<strong>ORM框架 (Object Relationship Mapping) --&gt;对象关系映射</strong></p>
</li>
<li><p>所有的事情，不用Mybatis依旧可以做到，只是用了它，所有实现会更加简单！<strong>技术没有高低之分，只有使用这个技术的人有高低之别</strong></p>
</li>
<li><p>MyBatis的优点</p>
<ul>
<li>简单易学：本身就很小且简单。没有任何第三方依赖，最简单安装只要两个jar文件+配置几个sql映射文件就可以了，易于学习，易于使用，通过文档和源代码，可以比较完全的掌握它的设计思路和实现。</li>
<li>灵活：mybatis不会对应用程序或者数据库的现有设计强加任何影响。 sql写在xml里，便于统一管理和优化。通过sql语句可以满足操作数据库的所有需求。</li>
<li>解除sql与程序代码的耦合：通过提供DAO层，将业务逻辑和数据访问逻辑分离，使系统的设计更清晰，更易维护，更易单元测试。sql和代码的分离，提高了可维护性。</li>
<li>提供xml标签，支持编写动态sql。</li>
<li>.......</li>

</ul>
</li>
<li><p>最重要的一点，使用的人多！公司需要！</p>
</li>
<li><p>环境说明：</p>
<ul>
<li>jdk 8 +</li>
<li>MySQL 5.7.19</li>
<li>maven-3.6.0</li>
<li>IDEA</li>

</ul>
<p>学习前需要掌握：</p>
<ul>
<li>JDBC</li>
<li>MySQL</li>
<li>Java 基础</li>
<li>Maven</li>
<li>Junit</li>

</ul>
</li>

</ul>
<h2>2、mybatis crud（实现增删改查）</h2>
<h4>1.1、创建一个maven项目</h4>
<p>		导入依赖</p>
<pre><code class='language-xml' lang='xml'>&lt;dependencies&gt;
    &lt;!--mysql驱动--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;mysql&lt;/groupId&gt;
        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
        &lt;version&gt;5.1.47&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;!--mybatis支持--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.mybatis&lt;/groupId&gt;
        &lt;artifactId&gt;mybatis&lt;/artifactId&gt;
        &lt;version&gt;3.5.2&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;!--junit支持--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;junit&lt;/groupId&gt;
        &lt;artifactId&gt;junit&lt;/artifactId&gt;
        &lt;version&gt;4.12&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
</code></pre>
<p>注意点 : pom文件的设置中需要设置资源过滤 , 否则会有资源文件打包不成功问题，导致项目无法运行；</p>
<pre><code class='language-xml' lang='xml'>&lt;build&gt;
    &lt;resources&gt;
        &lt;resource&gt;
            &lt;directory&gt;src/main/java&lt;/directory&gt;
            &lt;includes&gt;
                &lt;include&gt;**/*.properties&lt;/include&gt;
                &lt;include&gt;**/*.xml&lt;/include&gt;
            &lt;/includes&gt;
            &lt;filtering&gt;true&lt;/filtering&gt;
        &lt;/resource&gt;
    &lt;/resources&gt;
&lt;/build&gt;
</code></pre>
<p>&nbsp;</p>
<h4>1.2、创建数据库和表</h4>
<pre><code class='language-sql' lang='sql'>CREATE DATABASE mybatis CHARACTER SET utf8;
CREATE TABLE USER(
	id INT PRIMARY KEY,
	username VARCHAR(15) NOT NULL,
	pwd VARCHAR(20) NOT NULL
)
INSERT INTO USER VALUES(2018143114,&#39;张三&#39;,&#39;123456&#39;),(2018143115,&#39;李四&#39;,&#39;1234567&#39;),(2018143116,&#39;王五&#39;,&#39;147258&#39;);
SELECT * FROM USER;
</code></pre>
<h4>1.3、编写mybatis配置文件</h4>
<p>在resource里新建一个mybatis-config.xml文件</p>
<pre><code class='language-xml' lang='xml'>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE configuration
        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;
&lt;configuration&gt;
    &lt;environments default=&quot;development&quot;&gt;
        &lt;environment id=&quot;development&quot;&gt;
            &lt;transactionManager type=&quot;JDBC&quot;/&gt;
            &lt;dataSource type=&quot;POOLED&quot;&gt;
                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;
                &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;amp;useUnicode=true&amp;amp;characterEncoding=utf8&quot;/&gt;
                &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;
                &lt;property name=&quot;password&quot; value=&quot;hufei169357&quot;/&gt;
            &lt;/dataSource&gt;
        &lt;/environment&gt;
    &lt;/environments&gt;
    &lt;mappers&gt;
        &lt;mapper resource=&quot;com/feige/dao/userMapper.xml&quot;/&gt;
    &lt;/mappers&gt;
&lt;/configuration&gt;
</code></pre>
<h4>1.4、新建一个工具类用来获取SqlSession对象</h4>
<pre><code class='language-java' lang='java'>package com.feige.utils;

import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import java.io.IOException;
import java.io.InputStream;
//sqlSessionFactory-sqlSession
public class MybatisUtils {
    private static SqlSessionFactory sqlSessionFactory;
    static {
        try {
            //使用mybatis第一步：获取sqlSessionFactory对象
            String resource = &quot;mybatis-config.xml&quot;;
            InputStream inputStream = Resources.getResourceAsStream(resource);
            sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    //既然有了sqlSessionFactory，顾名思义，我们就可以从中获得sqlSession的实例
    public static SqlSession getSqlSessioon(){
        return sqlSessionFactory.openSession();
    }
}

</code></pre>
<p>&nbsp;</p>
<h4>1.5、编写一个pojo（实体类）</h4>
<pre><code class='language-java' lang='java'>package com.feige.pojo;

public class User {
    private int id;
    private String username;
    private String pwd;

    public User() {
    }

    public User(int id, String username, String pwd) {
        this.id = id;
        this.username = username;
        this.pwd = pwd;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getPwd() {
        return pwd;
    }

    public void setPwd(String pwd) {
        this.pwd = pwd;
    }
    @Override
    public String toString() {
        return &quot;User{&quot; +
                &quot;id=&quot; + id +
                &quot;, username=&#39;&quot; + username + &#39;\&#39;&#39; +
                &quot;, pwd=&#39;&quot; + pwd + &#39;\&#39;&#39; +
                &#39;}&#39;;
    }
}

</code></pre>
<h4>1.6、新建一个userMapper接口</h4>
<pre><code class='language-java' lang='java'>package com.feige.dao;

import com.feige.pojo.User;

import java.util.List;
import java.util.Map;

public interface UserMapper {
    //查询全部用户
    List&lt;User&gt; getAllUser();
    //通过一个id查询一个用户
    User getUserById(int id);
    //通过id修改一个用户
    int updateUserById(Map map);
    //通过id删除一个用户
    int deleteUserById(int id);
    //插入一条数据
    int insertUser(User user);
}

</code></pre>
<h4>1.7、新建一个userMapper.xml文件</h4>
<pre><code class='language-xml' lang='xml'>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE mapper
        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;com.feige.dao.UserMapper&quot;&gt;
    &lt;!--每个语句要对应相应的标签select对应&lt;select&gt; delete 对应&lt;delete&gt; update 对应&lt;update&gt; insert 对应&lt;insert&gt;--&gt;
    &lt;select id=&quot;getAllUser&quot; resultType=&quot;com.feige.pojo.User&quot;&gt;
        select * from user
    &lt;/select&gt;
    &lt;select id=&quot;getUserById&quot; resultType=&quot;com.feige.pojo.User&quot; parameterType=&quot;int&quot;&gt;
        select * from user where id=#{id}
    &lt;/select&gt;
    &lt;update id=&quot;updateUserById&quot; parameterType=&quot;map&quot;&gt;
        update user set pwd=#{pwd} where id=#{id}
    &lt;/update&gt;
    &lt;delete id=&quot;deleteUserById&quot; parameterType=&quot;int&quot;&gt;
        delete from user where id=#{id}
    &lt;/delete&gt;
    &lt;insert id=&quot;insertUser&quot; parameterType=&quot;com.feige.pojo.User&quot;&gt;
        insert into user values (#{id},#{username},#{pwd})
    &lt;/insert&gt;
&lt;/mapper&gt;
</code></pre>
<h4>1.8、测试代码</h4>
<pre><code class='language-java' lang='java'>package com.feige.mybatisTest;

import com.feige.dao.UserMapper;
import com.feige.pojo.User;
import com.feige.utils.MybatisUtils;
import org.apache.ibatis.session.SqlSession;
import org.junit.Test;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MybatisTest {
    @Test
    public void mybatisTest1(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        List&lt;User&gt; allUser = mapper.getAllUser();
        for (User user : allUser) {
            System.out.println(user);
        }
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest2(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        User userById = mapper.getUserById(2018143114);
        System.out.println(userById);
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest3() {
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        //使用万能map传参
        Map&lt;String,Object&gt; map = new HashMap&lt;String, Object&gt;();
        map.put(&quot;pwd&quot;,2018143114);
        map.put(&quot;id&quot;,2018143114);

        int i = mapper.updateUserById(map);
        if (i &gt; 0) {
            System.out.println(&quot;修改成功！&quot;+i);
        }
        //增删改需要提交事务
        sqlSessioon.commit();

        sqlSessioon.close();

    }
    @Test
    public void mybatisTest4(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        int i = mapper.deleteUserById(2018143117);
        if (i &gt; 0) {
            System.out.println(&quot;删除成功！&quot;+i);
        }
        sqlSessioon.commit();
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest5(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        User user = new User(2018143117, &quot;杨帆东&quot;, &quot;2018143117&quot;);
        int i = mapper.insertUser(user);
        if (i &gt; 0) {
            System.out.println(&quot;插入成功！&quot;+i);
        }
        sqlSessioon.commit();
        sqlSessioon.close();

    }
}

</code></pre>
<p>&nbsp;</p>
<p>		</p>, 2020-02-24 03:15:45.0, 2020-02-24 03:15:50.0, admin, 0]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50008} Result: [7, mybatis, mybatis啊, 作者, 2020-02-24 03:27:18.0, 2020-02-24 03:27:18.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50008} Result: [8, springboot, aaa, [TOC]
                            #### Disabled options

                            - TeX (Based on KaTeX);
                            - Emoji;
                            - Task lists;
                            - HTML tags decode;
                            - Flowchart and Sequence Diagram;
                            #### Editor.md directory

                                editor.md/
                                        lib/
                                        css/
                                        scss/
                                        tests/
                                        fonts/
                                        images/
                                        plugins/
                                        examples/
                                        languages/
                                        editormd.js
                                        ...

                            ```html
                            <!-- English -->
                            <script src="../dist/js/languages/en.js"></script>

                            <!-- 繁體中文 -->
                            <script src="../dist/js/languages/zh-tw.js"></script>
                            ```
                        , 2020-02-25 03:39:36.0, 2020-02-25 22:38:07.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50008} Result: [9, mybatis, bbb, [TOC]

                            #### Disabled options

                            - TeX (Based on KaTeX);
                            - Emoji;
                            - Task lists;
                            - HTML tags decode;
                            - Flowchart and Sequence Diagram;

                            #### Editor.md directory

                                editor.md/
                                        lib/
                                        css/
                                        scss/
                                        tests/
                                        fonts/
                                        images/
                                        plugins/
                                        examples/
                                        languages/
                                        editormd.js
                                        ...

                            ```html
                            <!-- English -->
                            <script src="../dist/js/languages/en.js"></script>

                            <!-- 繁體中文 -->
                            <script src="../dist/js/languages/zh-tw.js"></script>
                            ```
                        , 2020-02-25 03:44:09.0, 2020-02-25 03:44:09.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50008} Result: [10, springboot, 飞哥, #大哥的Markdown, 2020-02-25 22:43:28.0, 2020-02-25 22:43:28.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50008} Result: [11, mybatis, 大哥, #飞哥的博客后台管理系统, 2020-02-25 22:49:26.0, 2020-02-25 22:49:26.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50008} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} Parameters : []
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} Types : []
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} executed. 1.062666 millis. select count(*) from `blog`
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50009} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50009} Header: [count(*)]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50009} Result: [13]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50009} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} Parameters : [0, 10]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} executed. 1.273776 millis. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog
         
            limit ?,?
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50010} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50010} Header: [id, type_name, title, content, create_time, change_time, author, view]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50010} Result: [1, springboot, springboot入门, springb自动装配, 2020-02-23 21:43:36.0, 2020-02-24 03:06:48.0, admin, 0]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50010} Result: [2, mybatis, 配置, 得到的, 2020-02-24 02:05:36.0, 2020-03-13 06:39:47.0, admin, 3]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50010} Result: [4, springMVC, mybatis-plus, ##飞哥, 2020-02-24 02:10:09.0, 2020-02-25 22:42:23.0, admin, 111]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50010} Result: [5, springboot, 人, 嗯嗯, 2020-02-24 03:07:20.0, 2020-02-24 03:07:20.0, admin, 2]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50010} Result: [6, mybatis, mybatis入门, <h2>1、Mybatis简介</h2>
<p><img src="https://blog.kuangstudy.com/usr/uploads/2019/10/1296229149.png" referrerpolicy="no-referrer" alt="1567007421329.png"></p>
<h3>什么是MyBatis</h3>
<ul>
<li>MyBatis 是一款优秀的<strong>持久层框架</strong></li>
<li>MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集的过程</li>
<li>MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 实体类 【Plain Old Java Objects,普通的 Java对象】映射成数据库中的记录。</li>
<li>MyBatis 本是apache的一个开源项目ibatis, 2010年这个项目由apache 迁移到了google code，并且改名为MyBatis 。</li>
<li>2013年11月迁移到<strong>Github</strong> .</li>
<li>Mybatis官方文档 : <a href='http://www.mybatis.org/mybatis-3/zh/index.html' target='_blank' class='url'>http://www.mybatis.org/mybatis-3/zh/index.html</a></li>
<li>GitHub : <a href='https://github.com/mybatis/mybatis-3' target='_blank' class='url'>https://github.com/mybatis/mybatis-3</a></li>

</ul>
<h3>持久化</h3>
<ul>
<li><p><strong>持久化是将程序数据在持久状态和瞬时状态间转换的机制。</strong></p>
<ul>
<li>即把数据（如内存中的对象）保存到可永久保存的存储设备中（如磁盘）。持久化的主要应用是将内存中的对象存储在数据库中，或者存储在磁盘文件中、XML数据文件中等等。</li>
<li>JDBC就是一种持久化机制。文件IO也是一种持久化机制。</li>
<li>在生活中 : 将鲜肉冷藏，吃的时候再解冻的方法也是。将水果做成罐头的方法也是。</li>

</ul>
</li>
<li><p><strong>为什么需要持久化服务呢？那是由于内存本身的缺陷引起的</strong></p>
<ul>
<li>内存断电后数据会丢失，但有一些对象是无论如何都不能丢失的，比如银行账号等，遗憾的是，人们还无法保证内存永不掉电。</li>
<li>内存过于昂贵，与硬盘、光盘等外存相比，内存的价格要高2~3个数量级，而且维持成本也高，至少需要一直供电吧。所以即使对象不需要永久保存，也会因为内存的容量限制不能一直呆在内存中，需要持久化来缓存到外存。</li>

</ul>
</li>

</ul>
<h3>持久层</h3>
<ul>
<li><p>什么是持久层？</p>
<ul>
<li>完成持久化工作的代码块 . ----&gt; dao层 【DAO (Data Access Object) 数据访问对象】</li>
<li>大多数情况下特别是企业级应用，数据持久化往往也就意味着将内存中的数据保存到磁盘上加以固化，而持久化的实现过程则大多通过各种<strong>关系数据库</strong>来完成。</li>
<li>不过这里有一个字需要特别强调，也就是所谓的“层”。对于应用系统而言，数据持久功能大多是必不可少的组成部分。也就是说，我们的系统中，已经天然的具备了“持久层”概念？也许是，但也许实际情况并非如此。之所以要独立出一个“持久层”的概念,而不是“持久模块”，“持久单元”，也就意味着，我们的系统架构中，应该有一个相对独立的逻辑层面，专著于数据持久化逻辑的实现.</li>
<li>与系统其他部分相对而言，这个层面应该具有一个较为清晰和严格的逻辑边界。 【说白了就是用来操作数据库存在的！】</li>

</ul>
</li>

</ul>
<h3>为什么需要Mybatis</h3>
<ul>
<li><p>Mybatis就是帮助程序猿将数据存入数据库中 , 和从数据库中取数据 .</p>
</li>
<li><p>传统的jdbc操作 , 有很多重复代码块 .比如 : 数据取出时的封装 , 数据库的建立连接等等... , 通过框架可以减少重复代码,提高开发效率 .</p>
</li>
<li><p>MyBatis 是一个半自动化的<strong>ORM框架 (Object Relationship Mapping) --&gt;对象关系映射</strong></p>
</li>
<li><p>所有的事情，不用Mybatis依旧可以做到，只是用了它，所有实现会更加简单！<strong>技术没有高低之分，只有使用这个技术的人有高低之别</strong></p>
</li>
<li><p>MyBatis的优点</p>
<ul>
<li>简单易学：本身就很小且简单。没有任何第三方依赖，最简单安装只要两个jar文件+配置几个sql映射文件就可以了，易于学习，易于使用，通过文档和源代码，可以比较完全的掌握它的设计思路和实现。</li>
<li>灵活：mybatis不会对应用程序或者数据库的现有设计强加任何影响。 sql写在xml里，便于统一管理和优化。通过sql语句可以满足操作数据库的所有需求。</li>
<li>解除sql与程序代码的耦合：通过提供DAO层，将业务逻辑和数据访问逻辑分离，使系统的设计更清晰，更易维护，更易单元测试。sql和代码的分离，提高了可维护性。</li>
<li>提供xml标签，支持编写动态sql。</li>
<li>.......</li>

</ul>
</li>
<li><p>最重要的一点，使用的人多！公司需要！</p>
</li>
<li><p>环境说明：</p>
<ul>
<li>jdk 8 +</li>
<li>MySQL 5.7.19</li>
<li>maven-3.6.0</li>
<li>IDEA</li>

</ul>
<p>学习前需要掌握：</p>
<ul>
<li>JDBC</li>
<li>MySQL</li>
<li>Java 基础</li>
<li>Maven</li>
<li>Junit</li>

</ul>
</li>

</ul>
<h2>2、mybatis crud（实现增删改查）</h2>
<h4>1.1、创建一个maven项目</h4>
<p>		导入依赖</p>
<pre><code class='language-xml' lang='xml'>&lt;dependencies&gt;
    &lt;!--mysql驱动--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;mysql&lt;/groupId&gt;
        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
        &lt;version&gt;5.1.47&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;!--mybatis支持--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.mybatis&lt;/groupId&gt;
        &lt;artifactId&gt;mybatis&lt;/artifactId&gt;
        &lt;version&gt;3.5.2&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;!--junit支持--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;junit&lt;/groupId&gt;
        &lt;artifactId&gt;junit&lt;/artifactId&gt;
        &lt;version&gt;4.12&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
</code></pre>
<p>注意点 : pom文件的设置中需要设置资源过滤 , 否则会有资源文件打包不成功问题，导致项目无法运行；</p>
<pre><code class='language-xml' lang='xml'>&lt;build&gt;
    &lt;resources&gt;
        &lt;resource&gt;
            &lt;directory&gt;src/main/java&lt;/directory&gt;
            &lt;includes&gt;
                &lt;include&gt;**/*.properties&lt;/include&gt;
                &lt;include&gt;**/*.xml&lt;/include&gt;
            &lt;/includes&gt;
            &lt;filtering&gt;true&lt;/filtering&gt;
        &lt;/resource&gt;
    &lt;/resources&gt;
&lt;/build&gt;
</code></pre>
<p>&nbsp;</p>
<h4>1.2、创建数据库和表</h4>
<pre><code class='language-sql' lang='sql'>CREATE DATABASE mybatis CHARACTER SET utf8;
CREATE TABLE USER(
	id INT PRIMARY KEY,
	username VARCHAR(15) NOT NULL,
	pwd VARCHAR(20) NOT NULL
)
INSERT INTO USER VALUES(2018143114,&#39;张三&#39;,&#39;123456&#39;),(2018143115,&#39;李四&#39;,&#39;1234567&#39;),(2018143116,&#39;王五&#39;,&#39;147258&#39;);
SELECT * FROM USER;
</code></pre>
<h4>1.3、编写mybatis配置文件</h4>
<p>在resource里新建一个mybatis-config.xml文件</p>
<pre><code class='language-xml' lang='xml'>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE configuration
        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;
&lt;configuration&gt;
    &lt;environments default=&quot;development&quot;&gt;
        &lt;environment id=&quot;development&quot;&gt;
            &lt;transactionManager type=&quot;JDBC&quot;/&gt;
            &lt;dataSource type=&quot;POOLED&quot;&gt;
                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;
                &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;amp;useUnicode=true&amp;amp;characterEncoding=utf8&quot;/&gt;
                &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;
                &lt;property name=&quot;password&quot; value=&quot;hufei169357&quot;/&gt;
            &lt;/dataSource&gt;
        &lt;/environment&gt;
    &lt;/environments&gt;
    &lt;mappers&gt;
        &lt;mapper resource=&quot;com/feige/dao/userMapper.xml&quot;/&gt;
    &lt;/mappers&gt;
&lt;/configuration&gt;
</code></pre>
<h4>1.4、新建一个工具类用来获取SqlSession对象</h4>
<pre><code class='language-java' lang='java'>package com.feige.utils;

import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import java.io.IOException;
import java.io.InputStream;
//sqlSessionFactory-sqlSession
public class MybatisUtils {
    private static SqlSessionFactory sqlSessionFactory;
    static {
        try {
            //使用mybatis第一步：获取sqlSessionFactory对象
            String resource = &quot;mybatis-config.xml&quot;;
            InputStream inputStream = Resources.getResourceAsStream(resource);
            sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    //既然有了sqlSessionFactory，顾名思义，我们就可以从中获得sqlSession的实例
    public static SqlSession getSqlSessioon(){
        return sqlSessionFactory.openSession();
    }
}

</code></pre>
<p>&nbsp;</p>
<h4>1.5、编写一个pojo（实体类）</h4>
<pre><code class='language-java' lang='java'>package com.feige.pojo;

public class User {
    private int id;
    private String username;
    private String pwd;

    public User() {
    }

    public User(int id, String username, String pwd) {
        this.id = id;
        this.username = username;
        this.pwd = pwd;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getPwd() {
        return pwd;
    }

    public void setPwd(String pwd) {
        this.pwd = pwd;
    }
    @Override
    public String toString() {
        return &quot;User{&quot; +
                &quot;id=&quot; + id +
                &quot;, username=&#39;&quot; + username + &#39;\&#39;&#39; +
                &quot;, pwd=&#39;&quot; + pwd + &#39;\&#39;&#39; +
                &#39;}&#39;;
    }
}

</code></pre>
<h4>1.6、新建一个userMapper接口</h4>
<pre><code class='language-java' lang='java'>package com.feige.dao;

import com.feige.pojo.User;

import java.util.List;
import java.util.Map;

public interface UserMapper {
    //查询全部用户
    List&lt;User&gt; getAllUser();
    //通过一个id查询一个用户
    User getUserById(int id);
    //通过id修改一个用户
    int updateUserById(Map map);
    //通过id删除一个用户
    int deleteUserById(int id);
    //插入一条数据
    int insertUser(User user);
}

</code></pre>
<h4>1.7、新建一个userMapper.xml文件</h4>
<pre><code class='language-xml' lang='xml'>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE mapper
        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;com.feige.dao.UserMapper&quot;&gt;
    &lt;!--每个语句要对应相应的标签select对应&lt;select&gt; delete 对应&lt;delete&gt; update 对应&lt;update&gt; insert 对应&lt;insert&gt;--&gt;
    &lt;select id=&quot;getAllUser&quot; resultType=&quot;com.feige.pojo.User&quot;&gt;
        select * from user
    &lt;/select&gt;
    &lt;select id=&quot;getUserById&quot; resultType=&quot;com.feige.pojo.User&quot; parameterType=&quot;int&quot;&gt;
        select * from user where id=#{id}
    &lt;/select&gt;
    &lt;update id=&quot;updateUserById&quot; parameterType=&quot;map&quot;&gt;
        update user set pwd=#{pwd} where id=#{id}
    &lt;/update&gt;
    &lt;delete id=&quot;deleteUserById&quot; parameterType=&quot;int&quot;&gt;
        delete from user where id=#{id}
    &lt;/delete&gt;
    &lt;insert id=&quot;insertUser&quot; parameterType=&quot;com.feige.pojo.User&quot;&gt;
        insert into user values (#{id},#{username},#{pwd})
    &lt;/insert&gt;
&lt;/mapper&gt;
</code></pre>
<h4>1.8、测试代码</h4>
<pre><code class='language-java' lang='java'>package com.feige.mybatisTest;

import com.feige.dao.UserMapper;
import com.feige.pojo.User;
import com.feige.utils.MybatisUtils;
import org.apache.ibatis.session.SqlSession;
import org.junit.Test;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MybatisTest {
    @Test
    public void mybatisTest1(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        List&lt;User&gt; allUser = mapper.getAllUser();
        for (User user : allUser) {
            System.out.println(user);
        }
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest2(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        User userById = mapper.getUserById(2018143114);
        System.out.println(userById);
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest3() {
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        //使用万能map传参
        Map&lt;String,Object&gt; map = new HashMap&lt;String, Object&gt;();
        map.put(&quot;pwd&quot;,2018143114);
        map.put(&quot;id&quot;,2018143114);

        int i = mapper.updateUserById(map);
        if (i &gt; 0) {
            System.out.println(&quot;修改成功！&quot;+i);
        }
        //增删改需要提交事务
        sqlSessioon.commit();

        sqlSessioon.close();

    }
    @Test
    public void mybatisTest4(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        int i = mapper.deleteUserById(2018143117);
        if (i &gt; 0) {
            System.out.println(&quot;删除成功！&quot;+i);
        }
        sqlSessioon.commit();
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest5(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        User user = new User(2018143117, &quot;杨帆东&quot;, &quot;2018143117&quot;);
        int i = mapper.insertUser(user);
        if (i &gt; 0) {
            System.out.println(&quot;插入成功！&quot;+i);
        }
        sqlSessioon.commit();
        sqlSessioon.close();

    }
}

</code></pre>
<p>&nbsp;</p>
<p>		</p>, 2020-02-24 03:15:45.0, 2020-02-24 03:15:50.0, admin, 0]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50010} Result: [7, mybatis, mybatis啊, 作者, 2020-02-24 03:27:18.0, 2020-02-24 03:27:18.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50010} Result: [8, springboot, aaa, [TOC]
                            #### Disabled options

                            - TeX (Based on KaTeX);
                            - Emoji;
                            - Task lists;
                            - HTML tags decode;
                            - Flowchart and Sequence Diagram;
                            #### Editor.md directory

                                editor.md/
                                        lib/
                                        css/
                                        scss/
                                        tests/
                                        fonts/
                                        images/
                                        plugins/
                                        examples/
                                        languages/
                                        editormd.js
                                        ...

                            ```html
                            <!-- English -->
                            <script src="../dist/js/languages/en.js"></script>

                            <!-- 繁體中文 -->
                            <script src="../dist/js/languages/zh-tw.js"></script>
                            ```
                        , 2020-02-25 03:39:36.0, 2020-02-25 22:38:07.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50010} Result: [9, mybatis, bbb, [TOC]

                            #### Disabled options

                            - TeX (Based on KaTeX);
                            - Emoji;
                            - Task lists;
                            - HTML tags decode;
                            - Flowchart and Sequence Diagram;

                            #### Editor.md directory

                                editor.md/
                                        lib/
                                        css/
                                        scss/
                                        tests/
                                        fonts/
                                        images/
                                        plugins/
                                        examples/
                                        languages/
                                        editormd.js
                                        ...

                            ```html
                            <!-- English -->
                            <script src="../dist/js/languages/en.js"></script>

                            <!-- 繁體中文 -->
                            <script src="../dist/js/languages/zh-tw.js"></script>
                            ```
                        , 2020-02-25 03:44:09.0, 2020-02-25 03:44:09.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50010} Result: [10, springboot, 飞哥, #大哥的Markdown, 2020-02-25 22:43:28.0, 2020-02-25 22:43:28.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50010} Result: [11, mybatis, 大哥, #飞哥的博客后台管理系统, 2020-02-25 22:49:26.0, 2020-02-25 22:49:26.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50010} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} Parameters : []
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} Types : []
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} executed. 0.545777 millis. select count(*) from `blog`
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50011} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50011} Header: [count(*)]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50011} Result: [13]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50011} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} Parameters : [0, 10]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} executed. 0.826221 millis. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog
         
            limit ?,?
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50012} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50012} Header: [id, type_name, title, content, create_time, change_time, author, view]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50012} Result: [1, springboot, springboot入门, springb自动装配, 2020-02-23 21:43:36.0, 2020-02-24 03:06:48.0, admin, 0]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50012} Result: [2, mybatis, 配置, 得到的, 2020-02-24 02:05:36.0, 2020-03-13 06:39:47.0, admin, 3]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50012} Result: [4, springMVC, mybatis-plus, ##飞哥, 2020-02-24 02:10:09.0, 2020-02-25 22:42:23.0, admin, 111]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50012} Result: [5, springboot, 人, 嗯嗯, 2020-02-24 03:07:20.0, 2020-02-24 03:07:20.0, admin, 2]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50012} Result: [6, mybatis, mybatis入门, <h2>1、Mybatis简介</h2>
<p><img src="https://blog.kuangstudy.com/usr/uploads/2019/10/1296229149.png" referrerpolicy="no-referrer" alt="1567007421329.png"></p>
<h3>什么是MyBatis</h3>
<ul>
<li>MyBatis 是一款优秀的<strong>持久层框架</strong></li>
<li>MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集的过程</li>
<li>MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 实体类 【Plain Old Java Objects,普通的 Java对象】映射成数据库中的记录。</li>
<li>MyBatis 本是apache的一个开源项目ibatis, 2010年这个项目由apache 迁移到了google code，并且改名为MyBatis 。</li>
<li>2013年11月迁移到<strong>Github</strong> .</li>
<li>Mybatis官方文档 : <a href='http://www.mybatis.org/mybatis-3/zh/index.html' target='_blank' class='url'>http://www.mybatis.org/mybatis-3/zh/index.html</a></li>
<li>GitHub : <a href='https://github.com/mybatis/mybatis-3' target='_blank' class='url'>https://github.com/mybatis/mybatis-3</a></li>

</ul>
<h3>持久化</h3>
<ul>
<li><p><strong>持久化是将程序数据在持久状态和瞬时状态间转换的机制。</strong></p>
<ul>
<li>即把数据（如内存中的对象）保存到可永久保存的存储设备中（如磁盘）。持久化的主要应用是将内存中的对象存储在数据库中，或者存储在磁盘文件中、XML数据文件中等等。</li>
<li>JDBC就是一种持久化机制。文件IO也是一种持久化机制。</li>
<li>在生活中 : 将鲜肉冷藏，吃的时候再解冻的方法也是。将水果做成罐头的方法也是。</li>

</ul>
</li>
<li><p><strong>为什么需要持久化服务呢？那是由于内存本身的缺陷引起的</strong></p>
<ul>
<li>内存断电后数据会丢失，但有一些对象是无论如何都不能丢失的，比如银行账号等，遗憾的是，人们还无法保证内存永不掉电。</li>
<li>内存过于昂贵，与硬盘、光盘等外存相比，内存的价格要高2~3个数量级，而且维持成本也高，至少需要一直供电吧。所以即使对象不需要永久保存，也会因为内存的容量限制不能一直呆在内存中，需要持久化来缓存到外存。</li>

</ul>
</li>

</ul>
<h3>持久层</h3>
<ul>
<li><p>什么是持久层？</p>
<ul>
<li>完成持久化工作的代码块 . ----&gt; dao层 【DAO (Data Access Object) 数据访问对象】</li>
<li>大多数情况下特别是企业级应用，数据持久化往往也就意味着将内存中的数据保存到磁盘上加以固化，而持久化的实现过程则大多通过各种<strong>关系数据库</strong>来完成。</li>
<li>不过这里有一个字需要特别强调，也就是所谓的“层”。对于应用系统而言，数据持久功能大多是必不可少的组成部分。也就是说，我们的系统中，已经天然的具备了“持久层”概念？也许是，但也许实际情况并非如此。之所以要独立出一个“持久层”的概念,而不是“持久模块”，“持久单元”，也就意味着，我们的系统架构中，应该有一个相对独立的逻辑层面，专著于数据持久化逻辑的实现.</li>
<li>与系统其他部分相对而言，这个层面应该具有一个较为清晰和严格的逻辑边界。 【说白了就是用来操作数据库存在的！】</li>

</ul>
</li>

</ul>
<h3>为什么需要Mybatis</h3>
<ul>
<li><p>Mybatis就是帮助程序猿将数据存入数据库中 , 和从数据库中取数据 .</p>
</li>
<li><p>传统的jdbc操作 , 有很多重复代码块 .比如 : 数据取出时的封装 , 数据库的建立连接等等... , 通过框架可以减少重复代码,提高开发效率 .</p>
</li>
<li><p>MyBatis 是一个半自动化的<strong>ORM框架 (Object Relationship Mapping) --&gt;对象关系映射</strong></p>
</li>
<li><p>所有的事情，不用Mybatis依旧可以做到，只是用了它，所有实现会更加简单！<strong>技术没有高低之分，只有使用这个技术的人有高低之别</strong></p>
</li>
<li><p>MyBatis的优点</p>
<ul>
<li>简单易学：本身就很小且简单。没有任何第三方依赖，最简单安装只要两个jar文件+配置几个sql映射文件就可以了，易于学习，易于使用，通过文档和源代码，可以比较完全的掌握它的设计思路和实现。</li>
<li>灵活：mybatis不会对应用程序或者数据库的现有设计强加任何影响。 sql写在xml里，便于统一管理和优化。通过sql语句可以满足操作数据库的所有需求。</li>
<li>解除sql与程序代码的耦合：通过提供DAO层，将业务逻辑和数据访问逻辑分离，使系统的设计更清晰，更易维护，更易单元测试。sql和代码的分离，提高了可维护性。</li>
<li>提供xml标签，支持编写动态sql。</li>
<li>.......</li>

</ul>
</li>
<li><p>最重要的一点，使用的人多！公司需要！</p>
</li>
<li><p>环境说明：</p>
<ul>
<li>jdk 8 +</li>
<li>MySQL 5.7.19</li>
<li>maven-3.6.0</li>
<li>IDEA</li>

</ul>
<p>学习前需要掌握：</p>
<ul>
<li>JDBC</li>
<li>MySQL</li>
<li>Java 基础</li>
<li>Maven</li>
<li>Junit</li>

</ul>
</li>

</ul>
<h2>2、mybatis crud（实现增删改查）</h2>
<h4>1.1、创建一个maven项目</h4>
<p>		导入依赖</p>
<pre><code class='language-xml' lang='xml'>&lt;dependencies&gt;
    &lt;!--mysql驱动--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;mysql&lt;/groupId&gt;
        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
        &lt;version&gt;5.1.47&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;!--mybatis支持--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.mybatis&lt;/groupId&gt;
        &lt;artifactId&gt;mybatis&lt;/artifactId&gt;
        &lt;version&gt;3.5.2&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;!--junit支持--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;junit&lt;/groupId&gt;
        &lt;artifactId&gt;junit&lt;/artifactId&gt;
        &lt;version&gt;4.12&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
</code></pre>
<p>注意点 : pom文件的设置中需要设置资源过滤 , 否则会有资源文件打包不成功问题，导致项目无法运行；</p>
<pre><code class='language-xml' lang='xml'>&lt;build&gt;
    &lt;resources&gt;
        &lt;resource&gt;
            &lt;directory&gt;src/main/java&lt;/directory&gt;
            &lt;includes&gt;
                &lt;include&gt;**/*.properties&lt;/include&gt;
                &lt;include&gt;**/*.xml&lt;/include&gt;
            &lt;/includes&gt;
            &lt;filtering&gt;true&lt;/filtering&gt;
        &lt;/resource&gt;
    &lt;/resources&gt;
&lt;/build&gt;
</code></pre>
<p>&nbsp;</p>
<h4>1.2、创建数据库和表</h4>
<pre><code class='language-sql' lang='sql'>CREATE DATABASE mybatis CHARACTER SET utf8;
CREATE TABLE USER(
	id INT PRIMARY KEY,
	username VARCHAR(15) NOT NULL,
	pwd VARCHAR(20) NOT NULL
)
INSERT INTO USER VALUES(2018143114,&#39;张三&#39;,&#39;123456&#39;),(2018143115,&#39;李四&#39;,&#39;1234567&#39;),(2018143116,&#39;王五&#39;,&#39;147258&#39;);
SELECT * FROM USER;
</code></pre>
<h4>1.3、编写mybatis配置文件</h4>
<p>在resource里新建一个mybatis-config.xml文件</p>
<pre><code class='language-xml' lang='xml'>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE configuration
        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;
&lt;configuration&gt;
    &lt;environments default=&quot;development&quot;&gt;
        &lt;environment id=&quot;development&quot;&gt;
            &lt;transactionManager type=&quot;JDBC&quot;/&gt;
            &lt;dataSource type=&quot;POOLED&quot;&gt;
                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;
                &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;amp;useUnicode=true&amp;amp;characterEncoding=utf8&quot;/&gt;
                &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;
                &lt;property name=&quot;password&quot; value=&quot;hufei169357&quot;/&gt;
            &lt;/dataSource&gt;
        &lt;/environment&gt;
    &lt;/environments&gt;
    &lt;mappers&gt;
        &lt;mapper resource=&quot;com/feige/dao/userMapper.xml&quot;/&gt;
    &lt;/mappers&gt;
&lt;/configuration&gt;
</code></pre>
<h4>1.4、新建一个工具类用来获取SqlSession对象</h4>
<pre><code class='language-java' lang='java'>package com.feige.utils;

import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import java.io.IOException;
import java.io.InputStream;
//sqlSessionFactory-sqlSession
public class MybatisUtils {
    private static SqlSessionFactory sqlSessionFactory;
    static {
        try {
            //使用mybatis第一步：获取sqlSessionFactory对象
            String resource = &quot;mybatis-config.xml&quot;;
            InputStream inputStream = Resources.getResourceAsStream(resource);
            sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    //既然有了sqlSessionFactory，顾名思义，我们就可以从中获得sqlSession的实例
    public static SqlSession getSqlSessioon(){
        return sqlSessionFactory.openSession();
    }
}

</code></pre>
<p>&nbsp;</p>
<h4>1.5、编写一个pojo（实体类）</h4>
<pre><code class='language-java' lang='java'>package com.feige.pojo;

public class User {
    private int id;
    private String username;
    private String pwd;

    public User() {
    }

    public User(int id, String username, String pwd) {
        this.id = id;
        this.username = username;
        this.pwd = pwd;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getPwd() {
        return pwd;
    }

    public void setPwd(String pwd) {
        this.pwd = pwd;
    }
    @Override
    public String toString() {
        return &quot;User{&quot; +
                &quot;id=&quot; + id +
                &quot;, username=&#39;&quot; + username + &#39;\&#39;&#39; +
                &quot;, pwd=&#39;&quot; + pwd + &#39;\&#39;&#39; +
                &#39;}&#39;;
    }
}

</code></pre>
<h4>1.6、新建一个userMapper接口</h4>
<pre><code class='language-java' lang='java'>package com.feige.dao;

import com.feige.pojo.User;

import java.util.List;
import java.util.Map;

public interface UserMapper {
    //查询全部用户
    List&lt;User&gt; getAllUser();
    //通过一个id查询一个用户
    User getUserById(int id);
    //通过id修改一个用户
    int updateUserById(Map map);
    //通过id删除一个用户
    int deleteUserById(int id);
    //插入一条数据
    int insertUser(User user);
}

</code></pre>
<h4>1.7、新建一个userMapper.xml文件</h4>
<pre><code class='language-xml' lang='xml'>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE mapper
        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;com.feige.dao.UserMapper&quot;&gt;
    &lt;!--每个语句要对应相应的标签select对应&lt;select&gt; delete 对应&lt;delete&gt; update 对应&lt;update&gt; insert 对应&lt;insert&gt;--&gt;
    &lt;select id=&quot;getAllUser&quot; resultType=&quot;com.feige.pojo.User&quot;&gt;
        select * from user
    &lt;/select&gt;
    &lt;select id=&quot;getUserById&quot; resultType=&quot;com.feige.pojo.User&quot; parameterType=&quot;int&quot;&gt;
        select * from user where id=#{id}
    &lt;/select&gt;
    &lt;update id=&quot;updateUserById&quot; parameterType=&quot;map&quot;&gt;
        update user set pwd=#{pwd} where id=#{id}
    &lt;/update&gt;
    &lt;delete id=&quot;deleteUserById&quot; parameterType=&quot;int&quot;&gt;
        delete from user where id=#{id}
    &lt;/delete&gt;
    &lt;insert id=&quot;insertUser&quot; parameterType=&quot;com.feige.pojo.User&quot;&gt;
        insert into user values (#{id},#{username},#{pwd})
    &lt;/insert&gt;
&lt;/mapper&gt;
</code></pre>
<h4>1.8、测试代码</h4>
<pre><code class='language-java' lang='java'>package com.feige.mybatisTest;

import com.feige.dao.UserMapper;
import com.feige.pojo.User;
import com.feige.utils.MybatisUtils;
import org.apache.ibatis.session.SqlSession;
import org.junit.Test;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MybatisTest {
    @Test
    public void mybatisTest1(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        List&lt;User&gt; allUser = mapper.getAllUser();
        for (User user : allUser) {
            System.out.println(user);
        }
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest2(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        User userById = mapper.getUserById(2018143114);
        System.out.println(userById);
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest3() {
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        //使用万能map传参
        Map&lt;String,Object&gt; map = new HashMap&lt;String, Object&gt;();
        map.put(&quot;pwd&quot;,2018143114);
        map.put(&quot;id&quot;,2018143114);

        int i = mapper.updateUserById(map);
        if (i &gt; 0) {
            System.out.println(&quot;修改成功！&quot;+i);
        }
        //增删改需要提交事务
        sqlSessioon.commit();

        sqlSessioon.close();

    }
    @Test
    public void mybatisTest4(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        int i = mapper.deleteUserById(2018143117);
        if (i &gt; 0) {
            System.out.println(&quot;删除成功！&quot;+i);
        }
        sqlSessioon.commit();
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest5(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        User user = new User(2018143117, &quot;杨帆东&quot;, &quot;2018143117&quot;);
        int i = mapper.insertUser(user);
        if (i &gt; 0) {
            System.out.println(&quot;插入成功！&quot;+i);
        }
        sqlSessioon.commit();
        sqlSessioon.close();

    }
}

</code></pre>
<p>&nbsp;</p>
<p>		</p>, 2020-02-24 03:15:45.0, 2020-02-24 03:15:50.0, admin, 0]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50012} Result: [7, mybatis, mybatis啊, 作者, 2020-02-24 03:27:18.0, 2020-02-24 03:27:18.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50012} Result: [8, springboot, aaa, [TOC]
                            #### Disabled options

                            - TeX (Based on KaTeX);
                            - Emoji;
                            - Task lists;
                            - HTML tags decode;
                            - Flowchart and Sequence Diagram;
                            #### Editor.md directory

                                editor.md/
                                        lib/
                                        css/
                                        scss/
                                        tests/
                                        fonts/
                                        images/
                                        plugins/
                                        examples/
                                        languages/
                                        editormd.js
                                        ...

                            ```html
                            <!-- English -->
                            <script src="../dist/js/languages/en.js"></script>

                            <!-- 繁體中文 -->
                            <script src="../dist/js/languages/zh-tw.js"></script>
                            ```
                        , 2020-02-25 03:39:36.0, 2020-02-25 22:38:07.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50012} Result: [9, mybatis, bbb, [TOC]

                            #### Disabled options

                            - TeX (Based on KaTeX);
                            - Emoji;
                            - Task lists;
                            - HTML tags decode;
                            - Flowchart and Sequence Diagram;

                            #### Editor.md directory

                                editor.md/
                                        lib/
                                        css/
                                        scss/
                                        tests/
                                        fonts/
                                        images/
                                        plugins/
                                        examples/
                                        languages/
                                        editormd.js
                                        ...

                            ```html
                            <!-- English -->
                            <script src="../dist/js/languages/en.js"></script>

                            <!-- 繁體中文 -->
                            <script src="../dist/js/languages/zh-tw.js"></script>
                            ```
                        , 2020-02-25 03:44:09.0, 2020-02-25 03:44:09.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50012} Result: [10, springboot, 飞哥, #大哥的Markdown, 2020-02-25 22:43:28.0, 2020-02-25 22:43:28.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50012} Result: [11, mybatis, 大哥, #飞哥的博客后台管理系统, 2020-02-25 22:49:26.0, 2020-02-25 22:49:26.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50012} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} Parameters : []
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} Types : []
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} executed. 0.446222 millis. select count(*) from `blog`
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50013} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50013} Header: [count(*)]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50013} Result: [13]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50013} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} Parameters : [0, 10]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} executed. 1.19911 millis. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog
         
            limit ?,?
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50014} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50014} Header: [id, type_name, title, content, create_time, change_time, author, view]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50014} Result: [1, springboot, springboot入门, springb自动装配, 2020-02-23 21:43:36.0, 2020-02-24 03:06:48.0, admin, 0]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50014} Result: [2, mybatis, 配置, 得到的, 2020-02-24 02:05:36.0, 2020-03-13 06:39:47.0, admin, 3]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50014} Result: [4, springMVC, mybatis-plus, ##飞哥, 2020-02-24 02:10:09.0, 2020-02-25 22:42:23.0, admin, 111]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50014} Result: [5, springboot, 人, 嗯嗯, 2020-02-24 03:07:20.0, 2020-02-24 03:07:20.0, admin, 2]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50014} Result: [6, mybatis, mybatis入门, <h2>1、Mybatis简介</h2>
<p><img src="https://blog.kuangstudy.com/usr/uploads/2019/10/1296229149.png" referrerpolicy="no-referrer" alt="1567007421329.png"></p>
<h3>什么是MyBatis</h3>
<ul>
<li>MyBatis 是一款优秀的<strong>持久层框架</strong></li>
<li>MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集的过程</li>
<li>MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 实体类 【Plain Old Java Objects,普通的 Java对象】映射成数据库中的记录。</li>
<li>MyBatis 本是apache的一个开源项目ibatis, 2010年这个项目由apache 迁移到了google code，并且改名为MyBatis 。</li>
<li>2013年11月迁移到<strong>Github</strong> .</li>
<li>Mybatis官方文档 : <a href='http://www.mybatis.org/mybatis-3/zh/index.html' target='_blank' class='url'>http://www.mybatis.org/mybatis-3/zh/index.html</a></li>
<li>GitHub : <a href='https://github.com/mybatis/mybatis-3' target='_blank' class='url'>https://github.com/mybatis/mybatis-3</a></li>

</ul>
<h3>持久化</h3>
<ul>
<li><p><strong>持久化是将程序数据在持久状态和瞬时状态间转换的机制。</strong></p>
<ul>
<li>即把数据（如内存中的对象）保存到可永久保存的存储设备中（如磁盘）。持久化的主要应用是将内存中的对象存储在数据库中，或者存储在磁盘文件中、XML数据文件中等等。</li>
<li>JDBC就是一种持久化机制。文件IO也是一种持久化机制。</li>
<li>在生活中 : 将鲜肉冷藏，吃的时候再解冻的方法也是。将水果做成罐头的方法也是。</li>

</ul>
</li>
<li><p><strong>为什么需要持久化服务呢？那是由于内存本身的缺陷引起的</strong></p>
<ul>
<li>内存断电后数据会丢失，但有一些对象是无论如何都不能丢失的，比如银行账号等，遗憾的是，人们还无法保证内存永不掉电。</li>
<li>内存过于昂贵，与硬盘、光盘等外存相比，内存的价格要高2~3个数量级，而且维持成本也高，至少需要一直供电吧。所以即使对象不需要永久保存，也会因为内存的容量限制不能一直呆在内存中，需要持久化来缓存到外存。</li>

</ul>
</li>

</ul>
<h3>持久层</h3>
<ul>
<li><p>什么是持久层？</p>
<ul>
<li>完成持久化工作的代码块 . ----&gt; dao层 【DAO (Data Access Object) 数据访问对象】</li>
<li>大多数情况下特别是企业级应用，数据持久化往往也就意味着将内存中的数据保存到磁盘上加以固化，而持久化的实现过程则大多通过各种<strong>关系数据库</strong>来完成。</li>
<li>不过这里有一个字需要特别强调，也就是所谓的“层”。对于应用系统而言，数据持久功能大多是必不可少的组成部分。也就是说，我们的系统中，已经天然的具备了“持久层”概念？也许是，但也许实际情况并非如此。之所以要独立出一个“持久层”的概念,而不是“持久模块”，“持久单元”，也就意味着，我们的系统架构中，应该有一个相对独立的逻辑层面，专著于数据持久化逻辑的实现.</li>
<li>与系统其他部分相对而言，这个层面应该具有一个较为清晰和严格的逻辑边界。 【说白了就是用来操作数据库存在的！】</li>

</ul>
</li>

</ul>
<h3>为什么需要Mybatis</h3>
<ul>
<li><p>Mybatis就是帮助程序猿将数据存入数据库中 , 和从数据库中取数据 .</p>
</li>
<li><p>传统的jdbc操作 , 有很多重复代码块 .比如 : 数据取出时的封装 , 数据库的建立连接等等... , 通过框架可以减少重复代码,提高开发效率 .</p>
</li>
<li><p>MyBatis 是一个半自动化的<strong>ORM框架 (Object Relationship Mapping) --&gt;对象关系映射</strong></p>
</li>
<li><p>所有的事情，不用Mybatis依旧可以做到，只是用了它，所有实现会更加简单！<strong>技术没有高低之分，只有使用这个技术的人有高低之别</strong></p>
</li>
<li><p>MyBatis的优点</p>
<ul>
<li>简单易学：本身就很小且简单。没有任何第三方依赖，最简单安装只要两个jar文件+配置几个sql映射文件就可以了，易于学习，易于使用，通过文档和源代码，可以比较完全的掌握它的设计思路和实现。</li>
<li>灵活：mybatis不会对应用程序或者数据库的现有设计强加任何影响。 sql写在xml里，便于统一管理和优化。通过sql语句可以满足操作数据库的所有需求。</li>
<li>解除sql与程序代码的耦合：通过提供DAO层，将业务逻辑和数据访问逻辑分离，使系统的设计更清晰，更易维护，更易单元测试。sql和代码的分离，提高了可维护性。</li>
<li>提供xml标签，支持编写动态sql。</li>
<li>.......</li>

</ul>
</li>
<li><p>最重要的一点，使用的人多！公司需要！</p>
</li>
<li><p>环境说明：</p>
<ul>
<li>jdk 8 +</li>
<li>MySQL 5.7.19</li>
<li>maven-3.6.0</li>
<li>IDEA</li>

</ul>
<p>学习前需要掌握：</p>
<ul>
<li>JDBC</li>
<li>MySQL</li>
<li>Java 基础</li>
<li>Maven</li>
<li>Junit</li>

</ul>
</li>

</ul>
<h2>2、mybatis crud（实现增删改查）</h2>
<h4>1.1、创建一个maven项目</h4>
<p>		导入依赖</p>
<pre><code class='language-xml' lang='xml'>&lt;dependencies&gt;
    &lt;!--mysql驱动--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;mysql&lt;/groupId&gt;
        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
        &lt;version&gt;5.1.47&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;!--mybatis支持--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.mybatis&lt;/groupId&gt;
        &lt;artifactId&gt;mybatis&lt;/artifactId&gt;
        &lt;version&gt;3.5.2&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;!--junit支持--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;junit&lt;/groupId&gt;
        &lt;artifactId&gt;junit&lt;/artifactId&gt;
        &lt;version&gt;4.12&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
</code></pre>
<p>注意点 : pom文件的设置中需要设置资源过滤 , 否则会有资源文件打包不成功问题，导致项目无法运行；</p>
<pre><code class='language-xml' lang='xml'>&lt;build&gt;
    &lt;resources&gt;
        &lt;resource&gt;
            &lt;directory&gt;src/main/java&lt;/directory&gt;
            &lt;includes&gt;
                &lt;include&gt;**/*.properties&lt;/include&gt;
                &lt;include&gt;**/*.xml&lt;/include&gt;
            &lt;/includes&gt;
            &lt;filtering&gt;true&lt;/filtering&gt;
        &lt;/resource&gt;
    &lt;/resources&gt;
&lt;/build&gt;
</code></pre>
<p>&nbsp;</p>
<h4>1.2、创建数据库和表</h4>
<pre><code class='language-sql' lang='sql'>CREATE DATABASE mybatis CHARACTER SET utf8;
CREATE TABLE USER(
	id INT PRIMARY KEY,
	username VARCHAR(15) NOT NULL,
	pwd VARCHAR(20) NOT NULL
)
INSERT INTO USER VALUES(2018143114,&#39;张三&#39;,&#39;123456&#39;),(2018143115,&#39;李四&#39;,&#39;1234567&#39;),(2018143116,&#39;王五&#39;,&#39;147258&#39;);
SELECT * FROM USER;
</code></pre>
<h4>1.3、编写mybatis配置文件</h4>
<p>在resource里新建一个mybatis-config.xml文件</p>
<pre><code class='language-xml' lang='xml'>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE configuration
        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;
&lt;configuration&gt;
    &lt;environments default=&quot;development&quot;&gt;
        &lt;environment id=&quot;development&quot;&gt;
            &lt;transactionManager type=&quot;JDBC&quot;/&gt;
            &lt;dataSource type=&quot;POOLED&quot;&gt;
                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;
                &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;amp;useUnicode=true&amp;amp;characterEncoding=utf8&quot;/&gt;
                &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;
                &lt;property name=&quot;password&quot; value=&quot;hufei169357&quot;/&gt;
            &lt;/dataSource&gt;
        &lt;/environment&gt;
    &lt;/environments&gt;
    &lt;mappers&gt;
        &lt;mapper resource=&quot;com/feige/dao/userMapper.xml&quot;/&gt;
    &lt;/mappers&gt;
&lt;/configuration&gt;
</code></pre>
<h4>1.4、新建一个工具类用来获取SqlSession对象</h4>
<pre><code class='language-java' lang='java'>package com.feige.utils;

import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import java.io.IOException;
import java.io.InputStream;
//sqlSessionFactory-sqlSession
public class MybatisUtils {
    private static SqlSessionFactory sqlSessionFactory;
    static {
        try {
            //使用mybatis第一步：获取sqlSessionFactory对象
            String resource = &quot;mybatis-config.xml&quot;;
            InputStream inputStream = Resources.getResourceAsStream(resource);
            sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    //既然有了sqlSessionFactory，顾名思义，我们就可以从中获得sqlSession的实例
    public static SqlSession getSqlSessioon(){
        return sqlSessionFactory.openSession();
    }
}

</code></pre>
<p>&nbsp;</p>
<h4>1.5、编写一个pojo（实体类）</h4>
<pre><code class='language-java' lang='java'>package com.feige.pojo;

public class User {
    private int id;
    private String username;
    private String pwd;

    public User() {
    }

    public User(int id, String username, String pwd) {
        this.id = id;
        this.username = username;
        this.pwd = pwd;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getPwd() {
        return pwd;
    }

    public void setPwd(String pwd) {
        this.pwd = pwd;
    }
    @Override
    public String toString() {
        return &quot;User{&quot; +
                &quot;id=&quot; + id +
                &quot;, username=&#39;&quot; + username + &#39;\&#39;&#39; +
                &quot;, pwd=&#39;&quot; + pwd + &#39;\&#39;&#39; +
                &#39;}&#39;;
    }
}

</code></pre>
<h4>1.6、新建一个userMapper接口</h4>
<pre><code class='language-java' lang='java'>package com.feige.dao;

import com.feige.pojo.User;

import java.util.List;
import java.util.Map;

public interface UserMapper {
    //查询全部用户
    List&lt;User&gt; getAllUser();
    //通过一个id查询一个用户
    User getUserById(int id);
    //通过id修改一个用户
    int updateUserById(Map map);
    //通过id删除一个用户
    int deleteUserById(int id);
    //插入一条数据
    int insertUser(User user);
}

</code></pre>
<h4>1.7、新建一个userMapper.xml文件</h4>
<pre><code class='language-xml' lang='xml'>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE mapper
        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;com.feige.dao.UserMapper&quot;&gt;
    &lt;!--每个语句要对应相应的标签select对应&lt;select&gt; delete 对应&lt;delete&gt; update 对应&lt;update&gt; insert 对应&lt;insert&gt;--&gt;
    &lt;select id=&quot;getAllUser&quot; resultType=&quot;com.feige.pojo.User&quot;&gt;
        select * from user
    &lt;/select&gt;
    &lt;select id=&quot;getUserById&quot; resultType=&quot;com.feige.pojo.User&quot; parameterType=&quot;int&quot;&gt;
        select * from user where id=#{id}
    &lt;/select&gt;
    &lt;update id=&quot;updateUserById&quot; parameterType=&quot;map&quot;&gt;
        update user set pwd=#{pwd} where id=#{id}
    &lt;/update&gt;
    &lt;delete id=&quot;deleteUserById&quot; parameterType=&quot;int&quot;&gt;
        delete from user where id=#{id}
    &lt;/delete&gt;
    &lt;insert id=&quot;insertUser&quot; parameterType=&quot;com.feige.pojo.User&quot;&gt;
        insert into user values (#{id},#{username},#{pwd})
    &lt;/insert&gt;
&lt;/mapper&gt;
</code></pre>
<h4>1.8、测试代码</h4>
<pre><code class='language-java' lang='java'>package com.feige.mybatisTest;

import com.feige.dao.UserMapper;
import com.feige.pojo.User;
import com.feige.utils.MybatisUtils;
import org.apache.ibatis.session.SqlSession;
import org.junit.Test;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MybatisTest {
    @Test
    public void mybatisTest1(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        List&lt;User&gt; allUser = mapper.getAllUser();
        for (User user : allUser) {
            System.out.println(user);
        }
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest2(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        User userById = mapper.getUserById(2018143114);
        System.out.println(userById);
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest3() {
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        //使用万能map传参
        Map&lt;String,Object&gt; map = new HashMap&lt;String, Object&gt;();
        map.put(&quot;pwd&quot;,2018143114);
        map.put(&quot;id&quot;,2018143114);

        int i = mapper.updateUserById(map);
        if (i &gt; 0) {
            System.out.println(&quot;修改成功！&quot;+i);
        }
        //增删改需要提交事务
        sqlSessioon.commit();

        sqlSessioon.close();

    }
    @Test
    public void mybatisTest4(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        int i = mapper.deleteUserById(2018143117);
        if (i &gt; 0) {
            System.out.println(&quot;删除成功！&quot;+i);
        }
        sqlSessioon.commit();
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest5(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        User user = new User(2018143117, &quot;杨帆东&quot;, &quot;2018143117&quot;);
        int i = mapper.insertUser(user);
        if (i &gt; 0) {
            System.out.println(&quot;插入成功！&quot;+i);
        }
        sqlSessioon.commit();
        sqlSessioon.close();

    }
}

</code></pre>
<p>&nbsp;</p>
<p>		</p>, 2020-02-24 03:15:45.0, 2020-02-24 03:15:50.0, admin, 0]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50014} Result: [7, mybatis, mybatis啊, 作者, 2020-02-24 03:27:18.0, 2020-02-24 03:27:18.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50014} Result: [8, springboot, aaa, [TOC]
                            #### Disabled options

                            - TeX (Based on KaTeX);
                            - Emoji;
                            - Task lists;
                            - HTML tags decode;
                            - Flowchart and Sequence Diagram;
                            #### Editor.md directory

                                editor.md/
                                        lib/
                                        css/
                                        scss/
                                        tests/
                                        fonts/
                                        images/
                                        plugins/
                                        examples/
                                        languages/
                                        editormd.js
                                        ...

                            ```html
                            <!-- English -->
                            <script src="../dist/js/languages/en.js"></script>

                            <!-- 繁體中文 -->
                            <script src="../dist/js/languages/zh-tw.js"></script>
                            ```
                        , 2020-02-25 03:39:36.0, 2020-02-25 22:38:07.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50014} Result: [9, mybatis, bbb, [TOC]

                            #### Disabled options

                            - TeX (Based on KaTeX);
                            - Emoji;
                            - Task lists;
                            - HTML tags decode;
                            - Flowchart and Sequence Diagram;

                            #### Editor.md directory

                                editor.md/
                                        lib/
                                        css/
                                        scss/
                                        tests/
                                        fonts/
                                        images/
                                        plugins/
                                        examples/
                                        languages/
                                        editormd.js
                                        ...

                            ```html
                            <!-- English -->
                            <script src="../dist/js/languages/en.js"></script>

                            <!-- 繁體中文 -->
                            <script src="../dist/js/languages/zh-tw.js"></script>
                            ```
                        , 2020-02-25 03:44:09.0, 2020-02-25 03:44:09.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50014} Result: [10, springboot, 飞哥, #大哥的Markdown, 2020-02-25 22:43:28.0, 2020-02-25 22:43:28.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50014} Result: [11, mybatis, 大哥, #飞哥的博客后台管理系统, 2020-02-25 22:49:26.0, 2020-02-25 22:49:26.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50014} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} Parameters : []
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} Types : []
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} executed. 1.676888 millis. select count(*) from `blog`
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50015} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50015} Header: [count(*)]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50015} Result: [13]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50015} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} Parameters : [0, 10]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} executed. 0.719999 millis. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog
         
            limit ?,?
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50016} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50016} Header: [id, type_name, title, content, create_time, change_time, author, view]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50016} Result: [1, springboot, springboot入门, springb自动装配, 2020-02-23 21:43:36.0, 2020-02-24 03:06:48.0, admin, 0]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50016} Result: [2, mybatis, 配置, 得到的, 2020-02-24 02:05:36.0, 2020-03-13 06:39:47.0, admin, 3]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50016} Result: [4, springMVC, mybatis-plus, ##飞哥, 2020-02-24 02:10:09.0, 2020-02-25 22:42:23.0, admin, 111]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50016} Result: [5, springboot, 人, 嗯嗯, 2020-02-24 03:07:20.0, 2020-02-24 03:07:20.0, admin, 2]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50016} Result: [6, mybatis, mybatis入门, <h2>1、Mybatis简介</h2>
<p><img src="https://blog.kuangstudy.com/usr/uploads/2019/10/1296229149.png" referrerpolicy="no-referrer" alt="1567007421329.png"></p>
<h3>什么是MyBatis</h3>
<ul>
<li>MyBatis 是一款优秀的<strong>持久层框架</strong></li>
<li>MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集的过程</li>
<li>MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 实体类 【Plain Old Java Objects,普通的 Java对象】映射成数据库中的记录。</li>
<li>MyBatis 本是apache的一个开源项目ibatis, 2010年这个项目由apache 迁移到了google code，并且改名为MyBatis 。</li>
<li>2013年11月迁移到<strong>Github</strong> .</li>
<li>Mybatis官方文档 : <a href='http://www.mybatis.org/mybatis-3/zh/index.html' target='_blank' class='url'>http://www.mybatis.org/mybatis-3/zh/index.html</a></li>
<li>GitHub : <a href='https://github.com/mybatis/mybatis-3' target='_blank' class='url'>https://github.com/mybatis/mybatis-3</a></li>

</ul>
<h3>持久化</h3>
<ul>
<li><p><strong>持久化是将程序数据在持久状态和瞬时状态间转换的机制。</strong></p>
<ul>
<li>即把数据（如内存中的对象）保存到可永久保存的存储设备中（如磁盘）。持久化的主要应用是将内存中的对象存储在数据库中，或者存储在磁盘文件中、XML数据文件中等等。</li>
<li>JDBC就是一种持久化机制。文件IO也是一种持久化机制。</li>
<li>在生活中 : 将鲜肉冷藏，吃的时候再解冻的方法也是。将水果做成罐头的方法也是。</li>

</ul>
</li>
<li><p><strong>为什么需要持久化服务呢？那是由于内存本身的缺陷引起的</strong></p>
<ul>
<li>内存断电后数据会丢失，但有一些对象是无论如何都不能丢失的，比如银行账号等，遗憾的是，人们还无法保证内存永不掉电。</li>
<li>内存过于昂贵，与硬盘、光盘等外存相比，内存的价格要高2~3个数量级，而且维持成本也高，至少需要一直供电吧。所以即使对象不需要永久保存，也会因为内存的容量限制不能一直呆在内存中，需要持久化来缓存到外存。</li>

</ul>
</li>

</ul>
<h3>持久层</h3>
<ul>
<li><p>什么是持久层？</p>
<ul>
<li>完成持久化工作的代码块 . ----&gt; dao层 【DAO (Data Access Object) 数据访问对象】</li>
<li>大多数情况下特别是企业级应用，数据持久化往往也就意味着将内存中的数据保存到磁盘上加以固化，而持久化的实现过程则大多通过各种<strong>关系数据库</strong>来完成。</li>
<li>不过这里有一个字需要特别强调，也就是所谓的“层”。对于应用系统而言，数据持久功能大多是必不可少的组成部分。也就是说，我们的系统中，已经天然的具备了“持久层”概念？也许是，但也许实际情况并非如此。之所以要独立出一个“持久层”的概念,而不是“持久模块”，“持久单元”，也就意味着，我们的系统架构中，应该有一个相对独立的逻辑层面，专著于数据持久化逻辑的实现.</li>
<li>与系统其他部分相对而言，这个层面应该具有一个较为清晰和严格的逻辑边界。 【说白了就是用来操作数据库存在的！】</li>

</ul>
</li>

</ul>
<h3>为什么需要Mybatis</h3>
<ul>
<li><p>Mybatis就是帮助程序猿将数据存入数据库中 , 和从数据库中取数据 .</p>
</li>
<li><p>传统的jdbc操作 , 有很多重复代码块 .比如 : 数据取出时的封装 , 数据库的建立连接等等... , 通过框架可以减少重复代码,提高开发效率 .</p>
</li>
<li><p>MyBatis 是一个半自动化的<strong>ORM框架 (Object Relationship Mapping) --&gt;对象关系映射</strong></p>
</li>
<li><p>所有的事情，不用Mybatis依旧可以做到，只是用了它，所有实现会更加简单！<strong>技术没有高低之分，只有使用这个技术的人有高低之别</strong></p>
</li>
<li><p>MyBatis的优点</p>
<ul>
<li>简单易学：本身就很小且简单。没有任何第三方依赖，最简单安装只要两个jar文件+配置几个sql映射文件就可以了，易于学习，易于使用，通过文档和源代码，可以比较完全的掌握它的设计思路和实现。</li>
<li>灵活：mybatis不会对应用程序或者数据库的现有设计强加任何影响。 sql写在xml里，便于统一管理和优化。通过sql语句可以满足操作数据库的所有需求。</li>
<li>解除sql与程序代码的耦合：通过提供DAO层，将业务逻辑和数据访问逻辑分离，使系统的设计更清晰，更易维护，更易单元测试。sql和代码的分离，提高了可维护性。</li>
<li>提供xml标签，支持编写动态sql。</li>
<li>.......</li>

</ul>
</li>
<li><p>最重要的一点，使用的人多！公司需要！</p>
</li>
<li><p>环境说明：</p>
<ul>
<li>jdk 8 +</li>
<li>MySQL 5.7.19</li>
<li>maven-3.6.0</li>
<li>IDEA</li>

</ul>
<p>学习前需要掌握：</p>
<ul>
<li>JDBC</li>
<li>MySQL</li>
<li>Java 基础</li>
<li>Maven</li>
<li>Junit</li>

</ul>
</li>

</ul>
<h2>2、mybatis crud（实现增删改查）</h2>
<h4>1.1、创建一个maven项目</h4>
<p>		导入依赖</p>
<pre><code class='language-xml' lang='xml'>&lt;dependencies&gt;
    &lt;!--mysql驱动--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;mysql&lt;/groupId&gt;
        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
        &lt;version&gt;5.1.47&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;!--mybatis支持--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.mybatis&lt;/groupId&gt;
        &lt;artifactId&gt;mybatis&lt;/artifactId&gt;
        &lt;version&gt;3.5.2&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;!--junit支持--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;junit&lt;/groupId&gt;
        &lt;artifactId&gt;junit&lt;/artifactId&gt;
        &lt;version&gt;4.12&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
</code></pre>
<p>注意点 : pom文件的设置中需要设置资源过滤 , 否则会有资源文件打包不成功问题，导致项目无法运行；</p>
<pre><code class='language-xml' lang='xml'>&lt;build&gt;
    &lt;resources&gt;
        &lt;resource&gt;
            &lt;directory&gt;src/main/java&lt;/directory&gt;
            &lt;includes&gt;
                &lt;include&gt;**/*.properties&lt;/include&gt;
                &lt;include&gt;**/*.xml&lt;/include&gt;
            &lt;/includes&gt;
            &lt;filtering&gt;true&lt;/filtering&gt;
        &lt;/resource&gt;
    &lt;/resources&gt;
&lt;/build&gt;
</code></pre>
<p>&nbsp;</p>
<h4>1.2、创建数据库和表</h4>
<pre><code class='language-sql' lang='sql'>CREATE DATABASE mybatis CHARACTER SET utf8;
CREATE TABLE USER(
	id INT PRIMARY KEY,
	username VARCHAR(15) NOT NULL,
	pwd VARCHAR(20) NOT NULL
)
INSERT INTO USER VALUES(2018143114,&#39;张三&#39;,&#39;123456&#39;),(2018143115,&#39;李四&#39;,&#39;1234567&#39;),(2018143116,&#39;王五&#39;,&#39;147258&#39;);
SELECT * FROM USER;
</code></pre>
<h4>1.3、编写mybatis配置文件</h4>
<p>在resource里新建一个mybatis-config.xml文件</p>
<pre><code class='language-xml' lang='xml'>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE configuration
        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;
&lt;configuration&gt;
    &lt;environments default=&quot;development&quot;&gt;
        &lt;environment id=&quot;development&quot;&gt;
            &lt;transactionManager type=&quot;JDBC&quot;/&gt;
            &lt;dataSource type=&quot;POOLED&quot;&gt;
                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;
                &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;amp;useUnicode=true&amp;amp;characterEncoding=utf8&quot;/&gt;
                &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;
                &lt;property name=&quot;password&quot; value=&quot;hufei169357&quot;/&gt;
            &lt;/dataSource&gt;
        &lt;/environment&gt;
    &lt;/environments&gt;
    &lt;mappers&gt;
        &lt;mapper resource=&quot;com/feige/dao/userMapper.xml&quot;/&gt;
    &lt;/mappers&gt;
&lt;/configuration&gt;
</code></pre>
<h4>1.4、新建一个工具类用来获取SqlSession对象</h4>
<pre><code class='language-java' lang='java'>package com.feige.utils;

import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import java.io.IOException;
import java.io.InputStream;
//sqlSessionFactory-sqlSession
public class MybatisUtils {
    private static SqlSessionFactory sqlSessionFactory;
    static {
        try {
            //使用mybatis第一步：获取sqlSessionFactory对象
            String resource = &quot;mybatis-config.xml&quot;;
            InputStream inputStream = Resources.getResourceAsStream(resource);
            sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    //既然有了sqlSessionFactory，顾名思义，我们就可以从中获得sqlSession的实例
    public static SqlSession getSqlSessioon(){
        return sqlSessionFactory.openSession();
    }
}

</code></pre>
<p>&nbsp;</p>
<h4>1.5、编写一个pojo（实体类）</h4>
<pre><code class='language-java' lang='java'>package com.feige.pojo;

public class User {
    private int id;
    private String username;
    private String pwd;

    public User() {
    }

    public User(int id, String username, String pwd) {
        this.id = id;
        this.username = username;
        this.pwd = pwd;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getPwd() {
        return pwd;
    }

    public void setPwd(String pwd) {
        this.pwd = pwd;
    }
    @Override
    public String toString() {
        return &quot;User{&quot; +
                &quot;id=&quot; + id +
                &quot;, username=&#39;&quot; + username + &#39;\&#39;&#39; +
                &quot;, pwd=&#39;&quot; + pwd + &#39;\&#39;&#39; +
                &#39;}&#39;;
    }
}

</code></pre>
<h4>1.6、新建一个userMapper接口</h4>
<pre><code class='language-java' lang='java'>package com.feige.dao;

import com.feige.pojo.User;

import java.util.List;
import java.util.Map;

public interface UserMapper {
    //查询全部用户
    List&lt;User&gt; getAllUser();
    //通过一个id查询一个用户
    User getUserById(int id);
    //通过id修改一个用户
    int updateUserById(Map map);
    //通过id删除一个用户
    int deleteUserById(int id);
    //插入一条数据
    int insertUser(User user);
}

</code></pre>
<h4>1.7、新建一个userMapper.xml文件</h4>
<pre><code class='language-xml' lang='xml'>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE mapper
        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;com.feige.dao.UserMapper&quot;&gt;
    &lt;!--每个语句要对应相应的标签select对应&lt;select&gt; delete 对应&lt;delete&gt; update 对应&lt;update&gt; insert 对应&lt;insert&gt;--&gt;
    &lt;select id=&quot;getAllUser&quot; resultType=&quot;com.feige.pojo.User&quot;&gt;
        select * from user
    &lt;/select&gt;
    &lt;select id=&quot;getUserById&quot; resultType=&quot;com.feige.pojo.User&quot; parameterType=&quot;int&quot;&gt;
        select * from user where id=#{id}
    &lt;/select&gt;
    &lt;update id=&quot;updateUserById&quot; parameterType=&quot;map&quot;&gt;
        update user set pwd=#{pwd} where id=#{id}
    &lt;/update&gt;
    &lt;delete id=&quot;deleteUserById&quot; parameterType=&quot;int&quot;&gt;
        delete from user where id=#{id}
    &lt;/delete&gt;
    &lt;insert id=&quot;insertUser&quot; parameterType=&quot;com.feige.pojo.User&quot;&gt;
        insert into user values (#{id},#{username},#{pwd})
    &lt;/insert&gt;
&lt;/mapper&gt;
</code></pre>
<h4>1.8、测试代码</h4>
<pre><code class='language-java' lang='java'>package com.feige.mybatisTest;

import com.feige.dao.UserMapper;
import com.feige.pojo.User;
import com.feige.utils.MybatisUtils;
import org.apache.ibatis.session.SqlSession;
import org.junit.Test;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MybatisTest {
    @Test
    public void mybatisTest1(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        List&lt;User&gt; allUser = mapper.getAllUser();
        for (User user : allUser) {
            System.out.println(user);
        }
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest2(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        User userById = mapper.getUserById(2018143114);
        System.out.println(userById);
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest3() {
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        //使用万能map传参
        Map&lt;String,Object&gt; map = new HashMap&lt;String, Object&gt;();
        map.put(&quot;pwd&quot;,2018143114);
        map.put(&quot;id&quot;,2018143114);

        int i = mapper.updateUserById(map);
        if (i &gt; 0) {
            System.out.println(&quot;修改成功！&quot;+i);
        }
        //增删改需要提交事务
        sqlSessioon.commit();

        sqlSessioon.close();

    }
    @Test
    public void mybatisTest4(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        int i = mapper.deleteUserById(2018143117);
        if (i &gt; 0) {
            System.out.println(&quot;删除成功！&quot;+i);
        }
        sqlSessioon.commit();
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest5(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        User user = new User(2018143117, &quot;杨帆东&quot;, &quot;2018143117&quot;);
        int i = mapper.insertUser(user);
        if (i &gt; 0) {
            System.out.println(&quot;插入成功！&quot;+i);
        }
        sqlSessioon.commit();
        sqlSessioon.close();

    }
}

</code></pre>
<p>&nbsp;</p>
<p>		</p>, 2020-02-24 03:15:45.0, 2020-02-24 03:15:50.0, admin, 0]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50016} Result: [7, mybatis, mybatis啊, 作者, 2020-02-24 03:27:18.0, 2020-02-24 03:27:18.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50016} Result: [8, springboot, aaa, [TOC]
                            #### Disabled options

                            - TeX (Based on KaTeX);
                            - Emoji;
                            - Task lists;
                            - HTML tags decode;
                            - Flowchart and Sequence Diagram;
                            #### Editor.md directory

                                editor.md/
                                        lib/
                                        css/
                                        scss/
                                        tests/
                                        fonts/
                                        images/
                                        plugins/
                                        examples/
                                        languages/
                                        editormd.js
                                        ...

                            ```html
                            <!-- English -->
                            <script src="../dist/js/languages/en.js"></script>

                            <!-- 繁體中文 -->
                            <script src="../dist/js/languages/zh-tw.js"></script>
                            ```
                        , 2020-02-25 03:39:36.0, 2020-02-25 22:38:07.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50016} Result: [9, mybatis, bbb, [TOC]

                            #### Disabled options

                            - TeX (Based on KaTeX);
                            - Emoji;
                            - Task lists;
                            - HTML tags decode;
                            - Flowchart and Sequence Diagram;

                            #### Editor.md directory

                                editor.md/
                                        lib/
                                        css/
                                        scss/
                                        tests/
                                        fonts/
                                        images/
                                        plugins/
                                        examples/
                                        languages/
                                        editormd.js
                                        ...

                            ```html
                            <!-- English -->
                            <script src="../dist/js/languages/en.js"></script>

                            <!-- 繁體中文 -->
                            <script src="../dist/js/languages/zh-tw.js"></script>
                            ```
                        , 2020-02-25 03:44:09.0, 2020-02-25 03:44:09.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50016} Result: [10, springboot, 飞哥, #大哥的Markdown, 2020-02-25 22:43:28.0, 2020-02-25 22:43:28.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50016} Result: [11, mybatis, 大哥, #飞哥的博客后台管理系统, 2020-02-25 22:49:26.0, 2020-02-25 22:49:26.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50016} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} Parameters : []
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} Types : []
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} executed. 0.490666 millis. select count(*) from `blog`
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50017} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50017} Header: [count(*)]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50017} Result: [13]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50017} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} Parameters : [0, 10]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} executed. 1.366221 millis. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog
         
            limit ?,?
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50018} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50018} Header: [id, type_name, title, content, create_time, change_time, author, view]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50018} Result: [1, springboot, springboot入门, springb自动装配, 2020-02-23 21:43:36.0, 2020-02-24 03:06:48.0, admin, 0]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50018} Result: [2, mybatis, 配置, 得到的, 2020-02-24 02:05:36.0, 2020-03-13 06:39:47.0, admin, 3]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50018} Result: [4, springMVC, mybatis-plus, ##飞哥, 2020-02-24 02:10:09.0, 2020-02-25 22:42:23.0, admin, 111]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50018} Result: [5, springboot, 人, 嗯嗯, 2020-02-24 03:07:20.0, 2020-02-24 03:07:20.0, admin, 2]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50018} Result: [6, mybatis, mybatis入门, <h2>1、Mybatis简介</h2>
<p><img src="https://blog.kuangstudy.com/usr/uploads/2019/10/1296229149.png" referrerpolicy="no-referrer" alt="1567007421329.png"></p>
<h3>什么是MyBatis</h3>
<ul>
<li>MyBatis 是一款优秀的<strong>持久层框架</strong></li>
<li>MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集的过程</li>
<li>MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 实体类 【Plain Old Java Objects,普通的 Java对象】映射成数据库中的记录。</li>
<li>MyBatis 本是apache的一个开源项目ibatis, 2010年这个项目由apache 迁移到了google code，并且改名为MyBatis 。</li>
<li>2013年11月迁移到<strong>Github</strong> .</li>
<li>Mybatis官方文档 : <a href='http://www.mybatis.org/mybatis-3/zh/index.html' target='_blank' class='url'>http://www.mybatis.org/mybatis-3/zh/index.html</a></li>
<li>GitHub : <a href='https://github.com/mybatis/mybatis-3' target='_blank' class='url'>https://github.com/mybatis/mybatis-3</a></li>

</ul>
<h3>持久化</h3>
<ul>
<li><p><strong>持久化是将程序数据在持久状态和瞬时状态间转换的机制。</strong></p>
<ul>
<li>即把数据（如内存中的对象）保存到可永久保存的存储设备中（如磁盘）。持久化的主要应用是将内存中的对象存储在数据库中，或者存储在磁盘文件中、XML数据文件中等等。</li>
<li>JDBC就是一种持久化机制。文件IO也是一种持久化机制。</li>
<li>在生活中 : 将鲜肉冷藏，吃的时候再解冻的方法也是。将水果做成罐头的方法也是。</li>

</ul>
</li>
<li><p><strong>为什么需要持久化服务呢？那是由于内存本身的缺陷引起的</strong></p>
<ul>
<li>内存断电后数据会丢失，但有一些对象是无论如何都不能丢失的，比如银行账号等，遗憾的是，人们还无法保证内存永不掉电。</li>
<li>内存过于昂贵，与硬盘、光盘等外存相比，内存的价格要高2~3个数量级，而且维持成本也高，至少需要一直供电吧。所以即使对象不需要永久保存，也会因为内存的容量限制不能一直呆在内存中，需要持久化来缓存到外存。</li>

</ul>
</li>

</ul>
<h3>持久层</h3>
<ul>
<li><p>什么是持久层？</p>
<ul>
<li>完成持久化工作的代码块 . ----&gt; dao层 【DAO (Data Access Object) 数据访问对象】</li>
<li>大多数情况下特别是企业级应用，数据持久化往往也就意味着将内存中的数据保存到磁盘上加以固化，而持久化的实现过程则大多通过各种<strong>关系数据库</strong>来完成。</li>
<li>不过这里有一个字需要特别强调，也就是所谓的“层”。对于应用系统而言，数据持久功能大多是必不可少的组成部分。也就是说，我们的系统中，已经天然的具备了“持久层”概念？也许是，但也许实际情况并非如此。之所以要独立出一个“持久层”的概念,而不是“持久模块”，“持久单元”，也就意味着，我们的系统架构中，应该有一个相对独立的逻辑层面，专著于数据持久化逻辑的实现.</li>
<li>与系统其他部分相对而言，这个层面应该具有一个较为清晰和严格的逻辑边界。 【说白了就是用来操作数据库存在的！】</li>

</ul>
</li>

</ul>
<h3>为什么需要Mybatis</h3>
<ul>
<li><p>Mybatis就是帮助程序猿将数据存入数据库中 , 和从数据库中取数据 .</p>
</li>
<li><p>传统的jdbc操作 , 有很多重复代码块 .比如 : 数据取出时的封装 , 数据库的建立连接等等... , 通过框架可以减少重复代码,提高开发效率 .</p>
</li>
<li><p>MyBatis 是一个半自动化的<strong>ORM框架 (Object Relationship Mapping) --&gt;对象关系映射</strong></p>
</li>
<li><p>所有的事情，不用Mybatis依旧可以做到，只是用了它，所有实现会更加简单！<strong>技术没有高低之分，只有使用这个技术的人有高低之别</strong></p>
</li>
<li><p>MyBatis的优点</p>
<ul>
<li>简单易学：本身就很小且简单。没有任何第三方依赖，最简单安装只要两个jar文件+配置几个sql映射文件就可以了，易于学习，易于使用，通过文档和源代码，可以比较完全的掌握它的设计思路和实现。</li>
<li>灵活：mybatis不会对应用程序或者数据库的现有设计强加任何影响。 sql写在xml里，便于统一管理和优化。通过sql语句可以满足操作数据库的所有需求。</li>
<li>解除sql与程序代码的耦合：通过提供DAO层，将业务逻辑和数据访问逻辑分离，使系统的设计更清晰，更易维护，更易单元测试。sql和代码的分离，提高了可维护性。</li>
<li>提供xml标签，支持编写动态sql。</li>
<li>.......</li>

</ul>
</li>
<li><p>最重要的一点，使用的人多！公司需要！</p>
</li>
<li><p>环境说明：</p>
<ul>
<li>jdk 8 +</li>
<li>MySQL 5.7.19</li>
<li>maven-3.6.0</li>
<li>IDEA</li>

</ul>
<p>学习前需要掌握：</p>
<ul>
<li>JDBC</li>
<li>MySQL</li>
<li>Java 基础</li>
<li>Maven</li>
<li>Junit</li>

</ul>
</li>

</ul>
<h2>2、mybatis crud（实现增删改查）</h2>
<h4>1.1、创建一个maven项目</h4>
<p>		导入依赖</p>
<pre><code class='language-xml' lang='xml'>&lt;dependencies&gt;
    &lt;!--mysql驱动--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;mysql&lt;/groupId&gt;
        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
        &lt;version&gt;5.1.47&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;!--mybatis支持--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.mybatis&lt;/groupId&gt;
        &lt;artifactId&gt;mybatis&lt;/artifactId&gt;
        &lt;version&gt;3.5.2&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;!--junit支持--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;junit&lt;/groupId&gt;
        &lt;artifactId&gt;junit&lt;/artifactId&gt;
        &lt;version&gt;4.12&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
</code></pre>
<p>注意点 : pom文件的设置中需要设置资源过滤 , 否则会有资源文件打包不成功问题，导致项目无法运行；</p>
<pre><code class='language-xml' lang='xml'>&lt;build&gt;
    &lt;resources&gt;
        &lt;resource&gt;
            &lt;directory&gt;src/main/java&lt;/directory&gt;
            &lt;includes&gt;
                &lt;include&gt;**/*.properties&lt;/include&gt;
                &lt;include&gt;**/*.xml&lt;/include&gt;
            &lt;/includes&gt;
            &lt;filtering&gt;true&lt;/filtering&gt;
        &lt;/resource&gt;
    &lt;/resources&gt;
&lt;/build&gt;
</code></pre>
<p>&nbsp;</p>
<h4>1.2、创建数据库和表</h4>
<pre><code class='language-sql' lang='sql'>CREATE DATABASE mybatis CHARACTER SET utf8;
CREATE TABLE USER(
	id INT PRIMARY KEY,
	username VARCHAR(15) NOT NULL,
	pwd VARCHAR(20) NOT NULL
)
INSERT INTO USER VALUES(2018143114,&#39;张三&#39;,&#39;123456&#39;),(2018143115,&#39;李四&#39;,&#39;1234567&#39;),(2018143116,&#39;王五&#39;,&#39;147258&#39;);
SELECT * FROM USER;
</code></pre>
<h4>1.3、编写mybatis配置文件</h4>
<p>在resource里新建一个mybatis-config.xml文件</p>
<pre><code class='language-xml' lang='xml'>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE configuration
        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;
&lt;configuration&gt;
    &lt;environments default=&quot;development&quot;&gt;
        &lt;environment id=&quot;development&quot;&gt;
            &lt;transactionManager type=&quot;JDBC&quot;/&gt;
            &lt;dataSource type=&quot;POOLED&quot;&gt;
                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;
                &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;amp;useUnicode=true&amp;amp;characterEncoding=utf8&quot;/&gt;
                &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;
                &lt;property name=&quot;password&quot; value=&quot;hufei169357&quot;/&gt;
            &lt;/dataSource&gt;
        &lt;/environment&gt;
    &lt;/environments&gt;
    &lt;mappers&gt;
        &lt;mapper resource=&quot;com/feige/dao/userMapper.xml&quot;/&gt;
    &lt;/mappers&gt;
&lt;/configuration&gt;
</code></pre>
<h4>1.4、新建一个工具类用来获取SqlSession对象</h4>
<pre><code class='language-java' lang='java'>package com.feige.utils;

import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import java.io.IOException;
import java.io.InputStream;
//sqlSessionFactory-sqlSession
public class MybatisUtils {
    private static SqlSessionFactory sqlSessionFactory;
    static {
        try {
            //使用mybatis第一步：获取sqlSessionFactory对象
            String resource = &quot;mybatis-config.xml&quot;;
            InputStream inputStream = Resources.getResourceAsStream(resource);
            sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    //既然有了sqlSessionFactory，顾名思义，我们就可以从中获得sqlSession的实例
    public static SqlSession getSqlSessioon(){
        return sqlSessionFactory.openSession();
    }
}

</code></pre>
<p>&nbsp;</p>
<h4>1.5、编写一个pojo（实体类）</h4>
<pre><code class='language-java' lang='java'>package com.feige.pojo;

public class User {
    private int id;
    private String username;
    private String pwd;

    public User() {
    }

    public User(int id, String username, String pwd) {
        this.id = id;
        this.username = username;
        this.pwd = pwd;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getPwd() {
        return pwd;
    }

    public void setPwd(String pwd) {
        this.pwd = pwd;
    }
    @Override
    public String toString() {
        return &quot;User{&quot; +
                &quot;id=&quot; + id +
                &quot;, username=&#39;&quot; + username + &#39;\&#39;&#39; +
                &quot;, pwd=&#39;&quot; + pwd + &#39;\&#39;&#39; +
                &#39;}&#39;;
    }
}

</code></pre>
<h4>1.6、新建一个userMapper接口</h4>
<pre><code class='language-java' lang='java'>package com.feige.dao;

import com.feige.pojo.User;

import java.util.List;
import java.util.Map;

public interface UserMapper {
    //查询全部用户
    List&lt;User&gt; getAllUser();
    //通过一个id查询一个用户
    User getUserById(int id);
    //通过id修改一个用户
    int updateUserById(Map map);
    //通过id删除一个用户
    int deleteUserById(int id);
    //插入一条数据
    int insertUser(User user);
}

</code></pre>
<h4>1.7、新建一个userMapper.xml文件</h4>
<pre><code class='language-xml' lang='xml'>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE mapper
        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;com.feige.dao.UserMapper&quot;&gt;
    &lt;!--每个语句要对应相应的标签select对应&lt;select&gt; delete 对应&lt;delete&gt; update 对应&lt;update&gt; insert 对应&lt;insert&gt;--&gt;
    &lt;select id=&quot;getAllUser&quot; resultType=&quot;com.feige.pojo.User&quot;&gt;
        select * from user
    &lt;/select&gt;
    &lt;select id=&quot;getUserById&quot; resultType=&quot;com.feige.pojo.User&quot; parameterType=&quot;int&quot;&gt;
        select * from user where id=#{id}
    &lt;/select&gt;
    &lt;update id=&quot;updateUserById&quot; parameterType=&quot;map&quot;&gt;
        update user set pwd=#{pwd} where id=#{id}
    &lt;/update&gt;
    &lt;delete id=&quot;deleteUserById&quot; parameterType=&quot;int&quot;&gt;
        delete from user where id=#{id}
    &lt;/delete&gt;
    &lt;insert id=&quot;insertUser&quot; parameterType=&quot;com.feige.pojo.User&quot;&gt;
        insert into user values (#{id},#{username},#{pwd})
    &lt;/insert&gt;
&lt;/mapper&gt;
</code></pre>
<h4>1.8、测试代码</h4>
<pre><code class='language-java' lang='java'>package com.feige.mybatisTest;

import com.feige.dao.UserMapper;
import com.feige.pojo.User;
import com.feige.utils.MybatisUtils;
import org.apache.ibatis.session.SqlSession;
import org.junit.Test;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MybatisTest {
    @Test
    public void mybatisTest1(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        List&lt;User&gt; allUser = mapper.getAllUser();
        for (User user : allUser) {
            System.out.println(user);
        }
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest2(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        User userById = mapper.getUserById(2018143114);
        System.out.println(userById);
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest3() {
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        //使用万能map传参
        Map&lt;String,Object&gt; map = new HashMap&lt;String, Object&gt;();
        map.put(&quot;pwd&quot;,2018143114);
        map.put(&quot;id&quot;,2018143114);

        int i = mapper.updateUserById(map);
        if (i &gt; 0) {
            System.out.println(&quot;修改成功！&quot;+i);
        }
        //增删改需要提交事务
        sqlSessioon.commit();

        sqlSessioon.close();

    }
    @Test
    public void mybatisTest4(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        int i = mapper.deleteUserById(2018143117);
        if (i &gt; 0) {
            System.out.println(&quot;删除成功！&quot;+i);
        }
        sqlSessioon.commit();
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest5(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        User user = new User(2018143117, &quot;杨帆东&quot;, &quot;2018143117&quot;);
        int i = mapper.insertUser(user);
        if (i &gt; 0) {
            System.out.println(&quot;插入成功！&quot;+i);
        }
        sqlSessioon.commit();
        sqlSessioon.close();

    }
}

</code></pre>
<p>&nbsp;</p>
<p>		</p>, 2020-02-24 03:15:45.0, 2020-02-24 03:15:50.0, admin, 0]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50018} Result: [7, mybatis, mybatis啊, 作者, 2020-02-24 03:27:18.0, 2020-02-24 03:27:18.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50018} Result: [8, springboot, aaa, [TOC]
                            #### Disabled options

                            - TeX (Based on KaTeX);
                            - Emoji;
                            - Task lists;
                            - HTML tags decode;
                            - Flowchart and Sequence Diagram;
                            #### Editor.md directory

                                editor.md/
                                        lib/
                                        css/
                                        scss/
                                        tests/
                                        fonts/
                                        images/
                                        plugins/
                                        examples/
                                        languages/
                                        editormd.js
                                        ...

                            ```html
                            <!-- English -->
                            <script src="../dist/js/languages/en.js"></script>

                            <!-- 繁體中文 -->
                            <script src="../dist/js/languages/zh-tw.js"></script>
                            ```
                        , 2020-02-25 03:39:36.0, 2020-02-25 22:38:07.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50018} Result: [9, mybatis, bbb, [TOC]

                            #### Disabled options

                            - TeX (Based on KaTeX);
                            - Emoji;
                            - Task lists;
                            - HTML tags decode;
                            - Flowchart and Sequence Diagram;

                            #### Editor.md directory

                                editor.md/
                                        lib/
                                        css/
                                        scss/
                                        tests/
                                        fonts/
                                        images/
                                        plugins/
                                        examples/
                                        languages/
                                        editormd.js
                                        ...

                            ```html
                            <!-- English -->
                            <script src="../dist/js/languages/en.js"></script>

                            <!-- 繁體中文 -->
                            <script src="../dist/js/languages/zh-tw.js"></script>
                            ```
                        , 2020-02-25 03:44:09.0, 2020-02-25 03:44:09.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50018} Result: [10, springboot, 飞哥, #大哥的Markdown, 2020-02-25 22:43:28.0, 2020-02-25 22:43:28.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50018} Result: [11, mybatis, 大哥, #飞哥的博客后台管理系统, 2020-02-25 22:49:26.0, 2020-02-25 22:49:26.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50018} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} Parameters : []
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} Types : []
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} executed. 1.063555 millis. select count(*) from `blog`
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50019} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50019} Header: [count(*)]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50019} Result: [13]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50019} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} Parameters : [0, 10]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} executed. 2.871997 millis. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog
         
            limit ?,?
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50020} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50020} Header: [id, type_name, title, content, create_time, change_time, author, view]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50020} Result: [1, springboot, springboot入门, springb自动装配, 2020-02-23 21:43:36.0, 2020-02-24 03:06:48.0, admin, 0]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50020} Result: [2, mybatis, 配置, 得到的, 2020-02-24 02:05:36.0, 2020-03-13 06:39:47.0, admin, 3]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50020} Result: [4, springMVC, mybatis-plus, ##飞哥, 2020-02-24 02:10:09.0, 2020-02-25 22:42:23.0, admin, 111]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50020} Result: [5, springboot, 人, 嗯嗯, 2020-02-24 03:07:20.0, 2020-02-24 03:07:20.0, admin, 2]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50020} Result: [6, mybatis, mybatis入门, <h2>1、Mybatis简介</h2>
<p><img src="https://blog.kuangstudy.com/usr/uploads/2019/10/1296229149.png" referrerpolicy="no-referrer" alt="1567007421329.png"></p>
<h3>什么是MyBatis</h3>
<ul>
<li>MyBatis 是一款优秀的<strong>持久层框架</strong></li>
<li>MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集的过程</li>
<li>MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 实体类 【Plain Old Java Objects,普通的 Java对象】映射成数据库中的记录。</li>
<li>MyBatis 本是apache的一个开源项目ibatis, 2010年这个项目由apache 迁移到了google code，并且改名为MyBatis 。</li>
<li>2013年11月迁移到<strong>Github</strong> .</li>
<li>Mybatis官方文档 : <a href='http://www.mybatis.org/mybatis-3/zh/index.html' target='_blank' class='url'>http://www.mybatis.org/mybatis-3/zh/index.html</a></li>
<li>GitHub : <a href='https://github.com/mybatis/mybatis-3' target='_blank' class='url'>https://github.com/mybatis/mybatis-3</a></li>

</ul>
<h3>持久化</h3>
<ul>
<li><p><strong>持久化是将程序数据在持久状态和瞬时状态间转换的机制。</strong></p>
<ul>
<li>即把数据（如内存中的对象）保存到可永久保存的存储设备中（如磁盘）。持久化的主要应用是将内存中的对象存储在数据库中，或者存储在磁盘文件中、XML数据文件中等等。</li>
<li>JDBC就是一种持久化机制。文件IO也是一种持久化机制。</li>
<li>在生活中 : 将鲜肉冷藏，吃的时候再解冻的方法也是。将水果做成罐头的方法也是。</li>

</ul>
</li>
<li><p><strong>为什么需要持久化服务呢？那是由于内存本身的缺陷引起的</strong></p>
<ul>
<li>内存断电后数据会丢失，但有一些对象是无论如何都不能丢失的，比如银行账号等，遗憾的是，人们还无法保证内存永不掉电。</li>
<li>内存过于昂贵，与硬盘、光盘等外存相比，内存的价格要高2~3个数量级，而且维持成本也高，至少需要一直供电吧。所以即使对象不需要永久保存，也会因为内存的容量限制不能一直呆在内存中，需要持久化来缓存到外存。</li>

</ul>
</li>

</ul>
<h3>持久层</h3>
<ul>
<li><p>什么是持久层？</p>
<ul>
<li>完成持久化工作的代码块 . ----&gt; dao层 【DAO (Data Access Object) 数据访问对象】</li>
<li>大多数情况下特别是企业级应用，数据持久化往往也就意味着将内存中的数据保存到磁盘上加以固化，而持久化的实现过程则大多通过各种<strong>关系数据库</strong>来完成。</li>
<li>不过这里有一个字需要特别强调，也就是所谓的“层”。对于应用系统而言，数据持久功能大多是必不可少的组成部分。也就是说，我们的系统中，已经天然的具备了“持久层”概念？也许是，但也许实际情况并非如此。之所以要独立出一个“持久层”的概念,而不是“持久模块”，“持久单元”，也就意味着，我们的系统架构中，应该有一个相对独立的逻辑层面，专著于数据持久化逻辑的实现.</li>
<li>与系统其他部分相对而言，这个层面应该具有一个较为清晰和严格的逻辑边界。 【说白了就是用来操作数据库存在的！】</li>

</ul>
</li>

</ul>
<h3>为什么需要Mybatis</h3>
<ul>
<li><p>Mybatis就是帮助程序猿将数据存入数据库中 , 和从数据库中取数据 .</p>
</li>
<li><p>传统的jdbc操作 , 有很多重复代码块 .比如 : 数据取出时的封装 , 数据库的建立连接等等... , 通过框架可以减少重复代码,提高开发效率 .</p>
</li>
<li><p>MyBatis 是一个半自动化的<strong>ORM框架 (Object Relationship Mapping) --&gt;对象关系映射</strong></p>
</li>
<li><p>所有的事情，不用Mybatis依旧可以做到，只是用了它，所有实现会更加简单！<strong>技术没有高低之分，只有使用这个技术的人有高低之别</strong></p>
</li>
<li><p>MyBatis的优点</p>
<ul>
<li>简单易学：本身就很小且简单。没有任何第三方依赖，最简单安装只要两个jar文件+配置几个sql映射文件就可以了，易于学习，易于使用，通过文档和源代码，可以比较完全的掌握它的设计思路和实现。</li>
<li>灵活：mybatis不会对应用程序或者数据库的现有设计强加任何影响。 sql写在xml里，便于统一管理和优化。通过sql语句可以满足操作数据库的所有需求。</li>
<li>解除sql与程序代码的耦合：通过提供DAO层，将业务逻辑和数据访问逻辑分离，使系统的设计更清晰，更易维护，更易单元测试。sql和代码的分离，提高了可维护性。</li>
<li>提供xml标签，支持编写动态sql。</li>
<li>.......</li>

</ul>
</li>
<li><p>最重要的一点，使用的人多！公司需要！</p>
</li>
<li><p>环境说明：</p>
<ul>
<li>jdk 8 +</li>
<li>MySQL 5.7.19</li>
<li>maven-3.6.0</li>
<li>IDEA</li>

</ul>
<p>学习前需要掌握：</p>
<ul>
<li>JDBC</li>
<li>MySQL</li>
<li>Java 基础</li>
<li>Maven</li>
<li>Junit</li>

</ul>
</li>

</ul>
<h2>2、mybatis crud（实现增删改查）</h2>
<h4>1.1、创建一个maven项目</h4>
<p>		导入依赖</p>
<pre><code class='language-xml' lang='xml'>&lt;dependencies&gt;
    &lt;!--mysql驱动--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;mysql&lt;/groupId&gt;
        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
        &lt;version&gt;5.1.47&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;!--mybatis支持--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.mybatis&lt;/groupId&gt;
        &lt;artifactId&gt;mybatis&lt;/artifactId&gt;
        &lt;version&gt;3.5.2&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;!--junit支持--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;junit&lt;/groupId&gt;
        &lt;artifactId&gt;junit&lt;/artifactId&gt;
        &lt;version&gt;4.12&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
</code></pre>
<p>注意点 : pom文件的设置中需要设置资源过滤 , 否则会有资源文件打包不成功问题，导致项目无法运行；</p>
<pre><code class='language-xml' lang='xml'>&lt;build&gt;
    &lt;resources&gt;
        &lt;resource&gt;
            &lt;directory&gt;src/main/java&lt;/directory&gt;
            &lt;includes&gt;
                &lt;include&gt;**/*.properties&lt;/include&gt;
                &lt;include&gt;**/*.xml&lt;/include&gt;
            &lt;/includes&gt;
            &lt;filtering&gt;true&lt;/filtering&gt;
        &lt;/resource&gt;
    &lt;/resources&gt;
&lt;/build&gt;
</code></pre>
<p>&nbsp;</p>
<h4>1.2、创建数据库和表</h4>
<pre><code class='language-sql' lang='sql'>CREATE DATABASE mybatis CHARACTER SET utf8;
CREATE TABLE USER(
	id INT PRIMARY KEY,
	username VARCHAR(15) NOT NULL,
	pwd VARCHAR(20) NOT NULL
)
INSERT INTO USER VALUES(2018143114,&#39;张三&#39;,&#39;123456&#39;),(2018143115,&#39;李四&#39;,&#39;1234567&#39;),(2018143116,&#39;王五&#39;,&#39;147258&#39;);
SELECT * FROM USER;
</code></pre>
<h4>1.3、编写mybatis配置文件</h4>
<p>在resource里新建一个mybatis-config.xml文件</p>
<pre><code class='language-xml' lang='xml'>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE configuration
        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;
&lt;configuration&gt;
    &lt;environments default=&quot;development&quot;&gt;
        &lt;environment id=&quot;development&quot;&gt;
            &lt;transactionManager type=&quot;JDBC&quot;/&gt;
            &lt;dataSource type=&quot;POOLED&quot;&gt;
                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;
                &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;amp;useUnicode=true&amp;amp;characterEncoding=utf8&quot;/&gt;
                &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;
                &lt;property name=&quot;password&quot; value=&quot;hufei169357&quot;/&gt;
            &lt;/dataSource&gt;
        &lt;/environment&gt;
    &lt;/environments&gt;
    &lt;mappers&gt;
        &lt;mapper resource=&quot;com/feige/dao/userMapper.xml&quot;/&gt;
    &lt;/mappers&gt;
&lt;/configuration&gt;
</code></pre>
<h4>1.4、新建一个工具类用来获取SqlSession对象</h4>
<pre><code class='language-java' lang='java'>package com.feige.utils;

import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import java.io.IOException;
import java.io.InputStream;
//sqlSessionFactory-sqlSession
public class MybatisUtils {
    private static SqlSessionFactory sqlSessionFactory;
    static {
        try {
            //使用mybatis第一步：获取sqlSessionFactory对象
            String resource = &quot;mybatis-config.xml&quot;;
            InputStream inputStream = Resources.getResourceAsStream(resource);
            sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    //既然有了sqlSessionFactory，顾名思义，我们就可以从中获得sqlSession的实例
    public static SqlSession getSqlSessioon(){
        return sqlSessionFactory.openSession();
    }
}

</code></pre>
<p>&nbsp;</p>
<h4>1.5、编写一个pojo（实体类）</h4>
<pre><code class='language-java' lang='java'>package com.feige.pojo;

public class User {
    private int id;
    private String username;
    private String pwd;

    public User() {
    }

    public User(int id, String username, String pwd) {
        this.id = id;
        this.username = username;
        this.pwd = pwd;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getPwd() {
        return pwd;
    }

    public void setPwd(String pwd) {
        this.pwd = pwd;
    }
    @Override
    public String toString() {
        return &quot;User{&quot; +
                &quot;id=&quot; + id +
                &quot;, username=&#39;&quot; + username + &#39;\&#39;&#39; +
                &quot;, pwd=&#39;&quot; + pwd + &#39;\&#39;&#39; +
                &#39;}&#39;;
    }
}

</code></pre>
<h4>1.6、新建一个userMapper接口</h4>
<pre><code class='language-java' lang='java'>package com.feige.dao;

import com.feige.pojo.User;

import java.util.List;
import java.util.Map;

public interface UserMapper {
    //查询全部用户
    List&lt;User&gt; getAllUser();
    //通过一个id查询一个用户
    User getUserById(int id);
    //通过id修改一个用户
    int updateUserById(Map map);
    //通过id删除一个用户
    int deleteUserById(int id);
    //插入一条数据
    int insertUser(User user);
}

</code></pre>
<h4>1.7、新建一个userMapper.xml文件</h4>
<pre><code class='language-xml' lang='xml'>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE mapper
        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;com.feige.dao.UserMapper&quot;&gt;
    &lt;!--每个语句要对应相应的标签select对应&lt;select&gt; delete 对应&lt;delete&gt; update 对应&lt;update&gt; insert 对应&lt;insert&gt;--&gt;
    &lt;select id=&quot;getAllUser&quot; resultType=&quot;com.feige.pojo.User&quot;&gt;
        select * from user
    &lt;/select&gt;
    &lt;select id=&quot;getUserById&quot; resultType=&quot;com.feige.pojo.User&quot; parameterType=&quot;int&quot;&gt;
        select * from user where id=#{id}
    &lt;/select&gt;
    &lt;update id=&quot;updateUserById&quot; parameterType=&quot;map&quot;&gt;
        update user set pwd=#{pwd} where id=#{id}
    &lt;/update&gt;
    &lt;delete id=&quot;deleteUserById&quot; parameterType=&quot;int&quot;&gt;
        delete from user where id=#{id}
    &lt;/delete&gt;
    &lt;insert id=&quot;insertUser&quot; parameterType=&quot;com.feige.pojo.User&quot;&gt;
        insert into user values (#{id},#{username},#{pwd})
    &lt;/insert&gt;
&lt;/mapper&gt;
</code></pre>
<h4>1.8、测试代码</h4>
<pre><code class='language-java' lang='java'>package com.feige.mybatisTest;

import com.feige.dao.UserMapper;
import com.feige.pojo.User;
import com.feige.utils.MybatisUtils;
import org.apache.ibatis.session.SqlSession;
import org.junit.Test;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MybatisTest {
    @Test
    public void mybatisTest1(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        List&lt;User&gt; allUser = mapper.getAllUser();
        for (User user : allUser) {
            System.out.println(user);
        }
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest2(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        User userById = mapper.getUserById(2018143114);
        System.out.println(userById);
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest3() {
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        //使用万能map传参
        Map&lt;String,Object&gt; map = new HashMap&lt;String, Object&gt;();
        map.put(&quot;pwd&quot;,2018143114);
        map.put(&quot;id&quot;,2018143114);

        int i = mapper.updateUserById(map);
        if (i &gt; 0) {
            System.out.println(&quot;修改成功！&quot;+i);
        }
        //增删改需要提交事务
        sqlSessioon.commit();

        sqlSessioon.close();

    }
    @Test
    public void mybatisTest4(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        int i = mapper.deleteUserById(2018143117);
        if (i &gt; 0) {
            System.out.println(&quot;删除成功！&quot;+i);
        }
        sqlSessioon.commit();
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest5(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        User user = new User(2018143117, &quot;杨帆东&quot;, &quot;2018143117&quot;);
        int i = mapper.insertUser(user);
        if (i &gt; 0) {
            System.out.println(&quot;插入成功！&quot;+i);
        }
        sqlSessioon.commit();
        sqlSessioon.close();

    }
}

</code></pre>
<p>&nbsp;</p>
<p>		</p>, 2020-02-24 03:15:45.0, 2020-02-24 03:15:50.0, admin, 0]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50020} Result: [7, mybatis, mybatis啊, 作者, 2020-02-24 03:27:18.0, 2020-02-24 03:27:18.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50020} Result: [8, springboot, aaa, [TOC]
                            #### Disabled options

                            - TeX (Based on KaTeX);
                            - Emoji;
                            - Task lists;
                            - HTML tags decode;
                            - Flowchart and Sequence Diagram;
                            #### Editor.md directory

                                editor.md/
                                        lib/
                                        css/
                                        scss/
                                        tests/
                                        fonts/
                                        images/
                                        plugins/
                                        examples/
                                        languages/
                                        editormd.js
                                        ...

                            ```html
                            <!-- English -->
                            <script src="../dist/js/languages/en.js"></script>

                            <!-- 繁體中文 -->
                            <script src="../dist/js/languages/zh-tw.js"></script>
                            ```
                        , 2020-02-25 03:39:36.0, 2020-02-25 22:38:07.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50020} Result: [9, mybatis, bbb, [TOC]

                            #### Disabled options

                            - TeX (Based on KaTeX);
                            - Emoji;
                            - Task lists;
                            - HTML tags decode;
                            - Flowchart and Sequence Diagram;

                            #### Editor.md directory

                                editor.md/
                                        lib/
                                        css/
                                        scss/
                                        tests/
                                        fonts/
                                        images/
                                        plugins/
                                        examples/
                                        languages/
                                        editormd.js
                                        ...

                            ```html
                            <!-- English -->
                            <script src="../dist/js/languages/en.js"></script>

                            <!-- 繁體中文 -->
                            <script src="../dist/js/languages/zh-tw.js"></script>
                            ```
                        , 2020-02-25 03:44:09.0, 2020-02-25 03:44:09.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50020} Result: [10, springboot, 飞哥, #大哥的Markdown, 2020-02-25 22:43:28.0, 2020-02-25 22:43:28.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50020} Result: [11, mybatis, 大哥, #飞哥的博客后台管理系统, 2020-02-25 22:49:26.0, 2020-02-25 22:49:26.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50020} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} Parameters : []
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} Types : []
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} executed. 0.757777 millis. select count(*) from `blog`
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50021} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50021} Header: [count(*)]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50021} Result: [13]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50021} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} Parameters : [0, 10]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} executed. 1.354221 millis. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog
         
            limit ?,?
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50022} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50022} Header: [id, type_name, title, content, create_time, change_time, author, view]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50022} Result: [1, springboot, springboot入门, springb自动装配, 2020-02-23 21:43:36.0, 2020-02-24 03:06:48.0, admin, 0]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50022} Result: [2, mybatis, 配置, 得到的, 2020-02-24 02:05:36.0, 2020-03-13 06:39:47.0, admin, 3]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50022} Result: [4, springMVC, mybatis-plus, ##飞哥, 2020-02-24 02:10:09.0, 2020-02-25 22:42:23.0, admin, 111]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50022} Result: [5, springboot, 人, 嗯嗯, 2020-02-24 03:07:20.0, 2020-02-24 03:07:20.0, admin, 2]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50022} Result: [6, mybatis, mybatis入门, <h2>1、Mybatis简介</h2>
<p><img src="https://blog.kuangstudy.com/usr/uploads/2019/10/1296229149.png" referrerpolicy="no-referrer" alt="1567007421329.png"></p>
<h3>什么是MyBatis</h3>
<ul>
<li>MyBatis 是一款优秀的<strong>持久层框架</strong></li>
<li>MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集的过程</li>
<li>MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 实体类 【Plain Old Java Objects,普通的 Java对象】映射成数据库中的记录。</li>
<li>MyBatis 本是apache的一个开源项目ibatis, 2010年这个项目由apache 迁移到了google code，并且改名为MyBatis 。</li>
<li>2013年11月迁移到<strong>Github</strong> .</li>
<li>Mybatis官方文档 : <a href='http://www.mybatis.org/mybatis-3/zh/index.html' target='_blank' class='url'>http://www.mybatis.org/mybatis-3/zh/index.html</a></li>
<li>GitHub : <a href='https://github.com/mybatis/mybatis-3' target='_blank' class='url'>https://github.com/mybatis/mybatis-3</a></li>

</ul>
<h3>持久化</h3>
<ul>
<li><p><strong>持久化是将程序数据在持久状态和瞬时状态间转换的机制。</strong></p>
<ul>
<li>即把数据（如内存中的对象）保存到可永久保存的存储设备中（如磁盘）。持久化的主要应用是将内存中的对象存储在数据库中，或者存储在磁盘文件中、XML数据文件中等等。</li>
<li>JDBC就是一种持久化机制。文件IO也是一种持久化机制。</li>
<li>在生活中 : 将鲜肉冷藏，吃的时候再解冻的方法也是。将水果做成罐头的方法也是。</li>

</ul>
</li>
<li><p><strong>为什么需要持久化服务呢？那是由于内存本身的缺陷引起的</strong></p>
<ul>
<li>内存断电后数据会丢失，但有一些对象是无论如何都不能丢失的，比如银行账号等，遗憾的是，人们还无法保证内存永不掉电。</li>
<li>内存过于昂贵，与硬盘、光盘等外存相比，内存的价格要高2~3个数量级，而且维持成本也高，至少需要一直供电吧。所以即使对象不需要永久保存，也会因为内存的容量限制不能一直呆在内存中，需要持久化来缓存到外存。</li>

</ul>
</li>

</ul>
<h3>持久层</h3>
<ul>
<li><p>什么是持久层？</p>
<ul>
<li>完成持久化工作的代码块 . ----&gt; dao层 【DAO (Data Access Object) 数据访问对象】</li>
<li>大多数情况下特别是企业级应用，数据持久化往往也就意味着将内存中的数据保存到磁盘上加以固化，而持久化的实现过程则大多通过各种<strong>关系数据库</strong>来完成。</li>
<li>不过这里有一个字需要特别强调，也就是所谓的“层”。对于应用系统而言，数据持久功能大多是必不可少的组成部分。也就是说，我们的系统中，已经天然的具备了“持久层”概念？也许是，但也许实际情况并非如此。之所以要独立出一个“持久层”的概念,而不是“持久模块”，“持久单元”，也就意味着，我们的系统架构中，应该有一个相对独立的逻辑层面，专著于数据持久化逻辑的实现.</li>
<li>与系统其他部分相对而言，这个层面应该具有一个较为清晰和严格的逻辑边界。 【说白了就是用来操作数据库存在的！】</li>

</ul>
</li>

</ul>
<h3>为什么需要Mybatis</h3>
<ul>
<li><p>Mybatis就是帮助程序猿将数据存入数据库中 , 和从数据库中取数据 .</p>
</li>
<li><p>传统的jdbc操作 , 有很多重复代码块 .比如 : 数据取出时的封装 , 数据库的建立连接等等... , 通过框架可以减少重复代码,提高开发效率 .</p>
</li>
<li><p>MyBatis 是一个半自动化的<strong>ORM框架 (Object Relationship Mapping) --&gt;对象关系映射</strong></p>
</li>
<li><p>所有的事情，不用Mybatis依旧可以做到，只是用了它，所有实现会更加简单！<strong>技术没有高低之分，只有使用这个技术的人有高低之别</strong></p>
</li>
<li><p>MyBatis的优点</p>
<ul>
<li>简单易学：本身就很小且简单。没有任何第三方依赖，最简单安装只要两个jar文件+配置几个sql映射文件就可以了，易于学习，易于使用，通过文档和源代码，可以比较完全的掌握它的设计思路和实现。</li>
<li>灵活：mybatis不会对应用程序或者数据库的现有设计强加任何影响。 sql写在xml里，便于统一管理和优化。通过sql语句可以满足操作数据库的所有需求。</li>
<li>解除sql与程序代码的耦合：通过提供DAO层，将业务逻辑和数据访问逻辑分离，使系统的设计更清晰，更易维护，更易单元测试。sql和代码的分离，提高了可维护性。</li>
<li>提供xml标签，支持编写动态sql。</li>
<li>.......</li>

</ul>
</li>
<li><p>最重要的一点，使用的人多！公司需要！</p>
</li>
<li><p>环境说明：</p>
<ul>
<li>jdk 8 +</li>
<li>MySQL 5.7.19</li>
<li>maven-3.6.0</li>
<li>IDEA</li>

</ul>
<p>学习前需要掌握：</p>
<ul>
<li>JDBC</li>
<li>MySQL</li>
<li>Java 基础</li>
<li>Maven</li>
<li>Junit</li>

</ul>
</li>

</ul>
<h2>2、mybatis crud（实现增删改查）</h2>
<h4>1.1、创建一个maven项目</h4>
<p>		导入依赖</p>
<pre><code class='language-xml' lang='xml'>&lt;dependencies&gt;
    &lt;!--mysql驱动--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;mysql&lt;/groupId&gt;
        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
        &lt;version&gt;5.1.47&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;!--mybatis支持--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.mybatis&lt;/groupId&gt;
        &lt;artifactId&gt;mybatis&lt;/artifactId&gt;
        &lt;version&gt;3.5.2&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;!--junit支持--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;junit&lt;/groupId&gt;
        &lt;artifactId&gt;junit&lt;/artifactId&gt;
        &lt;version&gt;4.12&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
</code></pre>
<p>注意点 : pom文件的设置中需要设置资源过滤 , 否则会有资源文件打包不成功问题，导致项目无法运行；</p>
<pre><code class='language-xml' lang='xml'>&lt;build&gt;
    &lt;resources&gt;
        &lt;resource&gt;
            &lt;directory&gt;src/main/java&lt;/directory&gt;
            &lt;includes&gt;
                &lt;include&gt;**/*.properties&lt;/include&gt;
                &lt;include&gt;**/*.xml&lt;/include&gt;
            &lt;/includes&gt;
            &lt;filtering&gt;true&lt;/filtering&gt;
        &lt;/resource&gt;
    &lt;/resources&gt;
&lt;/build&gt;
</code></pre>
<p>&nbsp;</p>
<h4>1.2、创建数据库和表</h4>
<pre><code class='language-sql' lang='sql'>CREATE DATABASE mybatis CHARACTER SET utf8;
CREATE TABLE USER(
	id INT PRIMARY KEY,
	username VARCHAR(15) NOT NULL,
	pwd VARCHAR(20) NOT NULL
)
INSERT INTO USER VALUES(2018143114,&#39;张三&#39;,&#39;123456&#39;),(2018143115,&#39;李四&#39;,&#39;1234567&#39;),(2018143116,&#39;王五&#39;,&#39;147258&#39;);
SELECT * FROM USER;
</code></pre>
<h4>1.3、编写mybatis配置文件</h4>
<p>在resource里新建一个mybatis-config.xml文件</p>
<pre><code class='language-xml' lang='xml'>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE configuration
        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;
&lt;configuration&gt;
    &lt;environments default=&quot;development&quot;&gt;
        &lt;environment id=&quot;development&quot;&gt;
            &lt;transactionManager type=&quot;JDBC&quot;/&gt;
            &lt;dataSource type=&quot;POOLED&quot;&gt;
                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;
                &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;amp;useUnicode=true&amp;amp;characterEncoding=utf8&quot;/&gt;
                &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;
                &lt;property name=&quot;password&quot; value=&quot;hufei169357&quot;/&gt;
            &lt;/dataSource&gt;
        &lt;/environment&gt;
    &lt;/environments&gt;
    &lt;mappers&gt;
        &lt;mapper resource=&quot;com/feige/dao/userMapper.xml&quot;/&gt;
    &lt;/mappers&gt;
&lt;/configuration&gt;
</code></pre>
<h4>1.4、新建一个工具类用来获取SqlSession对象</h4>
<pre><code class='language-java' lang='java'>package com.feige.utils;

import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import java.io.IOException;
import java.io.InputStream;
//sqlSessionFactory-sqlSession
public class MybatisUtils {
    private static SqlSessionFactory sqlSessionFactory;
    static {
        try {
            //使用mybatis第一步：获取sqlSessionFactory对象
            String resource = &quot;mybatis-config.xml&quot;;
            InputStream inputStream = Resources.getResourceAsStream(resource);
            sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    //既然有了sqlSessionFactory，顾名思义，我们就可以从中获得sqlSession的实例
    public static SqlSession getSqlSessioon(){
        return sqlSessionFactory.openSession();
    }
}

</code></pre>
<p>&nbsp;</p>
<h4>1.5、编写一个pojo（实体类）</h4>
<pre><code class='language-java' lang='java'>package com.feige.pojo;

public class User {
    private int id;
    private String username;
    private String pwd;

    public User() {
    }

    public User(int id, String username, String pwd) {
        this.id = id;
        this.username = username;
        this.pwd = pwd;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getPwd() {
        return pwd;
    }

    public void setPwd(String pwd) {
        this.pwd = pwd;
    }
    @Override
    public String toString() {
        return &quot;User{&quot; +
                &quot;id=&quot; + id +
                &quot;, username=&#39;&quot; + username + &#39;\&#39;&#39; +
                &quot;, pwd=&#39;&quot; + pwd + &#39;\&#39;&#39; +
                &#39;}&#39;;
    }
}

</code></pre>
<h4>1.6、新建一个userMapper接口</h4>
<pre><code class='language-java' lang='java'>package com.feige.dao;

import com.feige.pojo.User;

import java.util.List;
import java.util.Map;

public interface UserMapper {
    //查询全部用户
    List&lt;User&gt; getAllUser();
    //通过一个id查询一个用户
    User getUserById(int id);
    //通过id修改一个用户
    int updateUserById(Map map);
    //通过id删除一个用户
    int deleteUserById(int id);
    //插入一条数据
    int insertUser(User user);
}

</code></pre>
<h4>1.7、新建一个userMapper.xml文件</h4>
<pre><code class='language-xml' lang='xml'>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE mapper
        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;com.feige.dao.UserMapper&quot;&gt;
    &lt;!--每个语句要对应相应的标签select对应&lt;select&gt; delete 对应&lt;delete&gt; update 对应&lt;update&gt; insert 对应&lt;insert&gt;--&gt;
    &lt;select id=&quot;getAllUser&quot; resultType=&quot;com.feige.pojo.User&quot;&gt;
        select * from user
    &lt;/select&gt;
    &lt;select id=&quot;getUserById&quot; resultType=&quot;com.feige.pojo.User&quot; parameterType=&quot;int&quot;&gt;
        select * from user where id=#{id}
    &lt;/select&gt;
    &lt;update id=&quot;updateUserById&quot; parameterType=&quot;map&quot;&gt;
        update user set pwd=#{pwd} where id=#{id}
    &lt;/update&gt;
    &lt;delete id=&quot;deleteUserById&quot; parameterType=&quot;int&quot;&gt;
        delete from user where id=#{id}
    &lt;/delete&gt;
    &lt;insert id=&quot;insertUser&quot; parameterType=&quot;com.feige.pojo.User&quot;&gt;
        insert into user values (#{id},#{username},#{pwd})
    &lt;/insert&gt;
&lt;/mapper&gt;
</code></pre>
<h4>1.8、测试代码</h4>
<pre><code class='language-java' lang='java'>package com.feige.mybatisTest;

import com.feige.dao.UserMapper;
import com.feige.pojo.User;
import com.feige.utils.MybatisUtils;
import org.apache.ibatis.session.SqlSession;
import org.junit.Test;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MybatisTest {
    @Test
    public void mybatisTest1(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        List&lt;User&gt; allUser = mapper.getAllUser();
        for (User user : allUser) {
            System.out.println(user);
        }
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest2(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        User userById = mapper.getUserById(2018143114);
        System.out.println(userById);
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest3() {
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        //使用万能map传参
        Map&lt;String,Object&gt; map = new HashMap&lt;String, Object&gt;();
        map.put(&quot;pwd&quot;,2018143114);
        map.put(&quot;id&quot;,2018143114);

        int i = mapper.updateUserById(map);
        if (i &gt; 0) {
            System.out.println(&quot;修改成功！&quot;+i);
        }
        //增删改需要提交事务
        sqlSessioon.commit();

        sqlSessioon.close();

    }
    @Test
    public void mybatisTest4(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        int i = mapper.deleteUserById(2018143117);
        if (i &gt; 0) {
            System.out.println(&quot;删除成功！&quot;+i);
        }
        sqlSessioon.commit();
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest5(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        User user = new User(2018143117, &quot;杨帆东&quot;, &quot;2018143117&quot;);
        int i = mapper.insertUser(user);
        if (i &gt; 0) {
            System.out.println(&quot;插入成功！&quot;+i);
        }
        sqlSessioon.commit();
        sqlSessioon.close();

    }
}

</code></pre>
<p>&nbsp;</p>
<p>		</p>, 2020-02-24 03:15:45.0, 2020-02-24 03:15:50.0, admin, 0]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50022} Result: [7, mybatis, mybatis啊, 作者, 2020-02-24 03:27:18.0, 2020-02-24 03:27:18.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50022} Result: [8, springboot, aaa, [TOC]
                            #### Disabled options

                            - TeX (Based on KaTeX);
                            - Emoji;
                            - Task lists;
                            - HTML tags decode;
                            - Flowchart and Sequence Diagram;
                            #### Editor.md directory

                                editor.md/
                                        lib/
                                        css/
                                        scss/
                                        tests/
                                        fonts/
                                        images/
                                        plugins/
                                        examples/
                                        languages/
                                        editormd.js
                                        ...

                            ```html
                            <!-- English -->
                            <script src="../dist/js/languages/en.js"></script>

                            <!-- 繁體中文 -->
                            <script src="../dist/js/languages/zh-tw.js"></script>
                            ```
                        , 2020-02-25 03:39:36.0, 2020-02-25 22:38:07.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50022} Result: [9, mybatis, bbb, [TOC]

                            #### Disabled options

                            - TeX (Based on KaTeX);
                            - Emoji;
                            - Task lists;
                            - HTML tags decode;
                            - Flowchart and Sequence Diagram;

                            #### Editor.md directory

                                editor.md/
                                        lib/
                                        css/
                                        scss/
                                        tests/
                                        fonts/
                                        images/
                                        plugins/
                                        examples/
                                        languages/
                                        editormd.js
                                        ...

                            ```html
                            <!-- English -->
                            <script src="../dist/js/languages/en.js"></script>

                            <!-- 繁體中文 -->
                            <script src="../dist/js/languages/zh-tw.js"></script>
                            ```
                        , 2020-02-25 03:44:09.0, 2020-02-25 03:44:09.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50022} Result: [10, springboot, 飞哥, #大哥的Markdown, 2020-02-25 22:43:28.0, 2020-02-25 22:43:28.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50022} Result: [11, mybatis, 大哥, #飞哥的博客后台管理系统, 2020-02-25 22:49:26.0, 2020-02-25 22:49:26.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50022} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} Parameters : []
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} Types : []
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} executed. 1.404888 millis. select count(*) from `blog`
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50023} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50023} Header: [count(*)]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50023} Result: [13]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50023} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} Parameters : [0, 10]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} executed. 0.9 millis. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog
         
            limit ?,?
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50024} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50024} Header: [id, type_name, title, content, create_time, change_time, author, view]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50024} Result: [1, springboot, springboot入门, springb自动装配, 2020-02-23 21:43:36.0, 2020-02-24 03:06:48.0, admin, 0]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50024} Result: [2, mybatis, 配置, 得到的, 2020-02-24 02:05:36.0, 2020-03-13 06:39:47.0, admin, 3]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50024} Result: [4, springMVC, mybatis-plus, ##飞哥, 2020-02-24 02:10:09.0, 2020-02-25 22:42:23.0, admin, 111]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50024} Result: [5, springboot, 人, 嗯嗯, 2020-02-24 03:07:20.0, 2020-02-24 03:07:20.0, admin, 2]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50024} Result: [6, mybatis, mybatis入门, <h2>1、Mybatis简介</h2>
<p><img src="https://blog.kuangstudy.com/usr/uploads/2019/10/1296229149.png" referrerpolicy="no-referrer" alt="1567007421329.png"></p>
<h3>什么是MyBatis</h3>
<ul>
<li>MyBatis 是一款优秀的<strong>持久层框架</strong></li>
<li>MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集的过程</li>
<li>MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 实体类 【Plain Old Java Objects,普通的 Java对象】映射成数据库中的记录。</li>
<li>MyBatis 本是apache的一个开源项目ibatis, 2010年这个项目由apache 迁移到了google code，并且改名为MyBatis 。</li>
<li>2013年11月迁移到<strong>Github</strong> .</li>
<li>Mybatis官方文档 : <a href='http://www.mybatis.org/mybatis-3/zh/index.html' target='_blank' class='url'>http://www.mybatis.org/mybatis-3/zh/index.html</a></li>
<li>GitHub : <a href='https://github.com/mybatis/mybatis-3' target='_blank' class='url'>https://github.com/mybatis/mybatis-3</a></li>

</ul>
<h3>持久化</h3>
<ul>
<li><p><strong>持久化是将程序数据在持久状态和瞬时状态间转换的机制。</strong></p>
<ul>
<li>即把数据（如内存中的对象）保存到可永久保存的存储设备中（如磁盘）。持久化的主要应用是将内存中的对象存储在数据库中，或者存储在磁盘文件中、XML数据文件中等等。</li>
<li>JDBC就是一种持久化机制。文件IO也是一种持久化机制。</li>
<li>在生活中 : 将鲜肉冷藏，吃的时候再解冻的方法也是。将水果做成罐头的方法也是。</li>

</ul>
</li>
<li><p><strong>为什么需要持久化服务呢？那是由于内存本身的缺陷引起的</strong></p>
<ul>
<li>内存断电后数据会丢失，但有一些对象是无论如何都不能丢失的，比如银行账号等，遗憾的是，人们还无法保证内存永不掉电。</li>
<li>内存过于昂贵，与硬盘、光盘等外存相比，内存的价格要高2~3个数量级，而且维持成本也高，至少需要一直供电吧。所以即使对象不需要永久保存，也会因为内存的容量限制不能一直呆在内存中，需要持久化来缓存到外存。</li>

</ul>
</li>

</ul>
<h3>持久层</h3>
<ul>
<li><p>什么是持久层？</p>
<ul>
<li>完成持久化工作的代码块 . ----&gt; dao层 【DAO (Data Access Object) 数据访问对象】</li>
<li>大多数情况下特别是企业级应用，数据持久化往往也就意味着将内存中的数据保存到磁盘上加以固化，而持久化的实现过程则大多通过各种<strong>关系数据库</strong>来完成。</li>
<li>不过这里有一个字需要特别强调，也就是所谓的“层”。对于应用系统而言，数据持久功能大多是必不可少的组成部分。也就是说，我们的系统中，已经天然的具备了“持久层”概念？也许是，但也许实际情况并非如此。之所以要独立出一个“持久层”的概念,而不是“持久模块”，“持久单元”，也就意味着，我们的系统架构中，应该有一个相对独立的逻辑层面，专著于数据持久化逻辑的实现.</li>
<li>与系统其他部分相对而言，这个层面应该具有一个较为清晰和严格的逻辑边界。 【说白了就是用来操作数据库存在的！】</li>

</ul>
</li>

</ul>
<h3>为什么需要Mybatis</h3>
<ul>
<li><p>Mybatis就是帮助程序猿将数据存入数据库中 , 和从数据库中取数据 .</p>
</li>
<li><p>传统的jdbc操作 , 有很多重复代码块 .比如 : 数据取出时的封装 , 数据库的建立连接等等... , 通过框架可以减少重复代码,提高开发效率 .</p>
</li>
<li><p>MyBatis 是一个半自动化的<strong>ORM框架 (Object Relationship Mapping) --&gt;对象关系映射</strong></p>
</li>
<li><p>所有的事情，不用Mybatis依旧可以做到，只是用了它，所有实现会更加简单！<strong>技术没有高低之分，只有使用这个技术的人有高低之别</strong></p>
</li>
<li><p>MyBatis的优点</p>
<ul>
<li>简单易学：本身就很小且简单。没有任何第三方依赖，最简单安装只要两个jar文件+配置几个sql映射文件就可以了，易于学习，易于使用，通过文档和源代码，可以比较完全的掌握它的设计思路和实现。</li>
<li>灵活：mybatis不会对应用程序或者数据库的现有设计强加任何影响。 sql写在xml里，便于统一管理和优化。通过sql语句可以满足操作数据库的所有需求。</li>
<li>解除sql与程序代码的耦合：通过提供DAO层，将业务逻辑和数据访问逻辑分离，使系统的设计更清晰，更易维护，更易单元测试。sql和代码的分离，提高了可维护性。</li>
<li>提供xml标签，支持编写动态sql。</li>
<li>.......</li>

</ul>
</li>
<li><p>最重要的一点，使用的人多！公司需要！</p>
</li>
<li><p>环境说明：</p>
<ul>
<li>jdk 8 +</li>
<li>MySQL 5.7.19</li>
<li>maven-3.6.0</li>
<li>IDEA</li>

</ul>
<p>学习前需要掌握：</p>
<ul>
<li>JDBC</li>
<li>MySQL</li>
<li>Java 基础</li>
<li>Maven</li>
<li>Junit</li>

</ul>
</li>

</ul>
<h2>2、mybatis crud（实现增删改查）</h2>
<h4>1.1、创建一个maven项目</h4>
<p>		导入依赖</p>
<pre><code class='language-xml' lang='xml'>&lt;dependencies&gt;
    &lt;!--mysql驱动--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;mysql&lt;/groupId&gt;
        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
        &lt;version&gt;5.1.47&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;!--mybatis支持--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.mybatis&lt;/groupId&gt;
        &lt;artifactId&gt;mybatis&lt;/artifactId&gt;
        &lt;version&gt;3.5.2&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;!--junit支持--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;junit&lt;/groupId&gt;
        &lt;artifactId&gt;junit&lt;/artifactId&gt;
        &lt;version&gt;4.12&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
</code></pre>
<p>注意点 : pom文件的设置中需要设置资源过滤 , 否则会有资源文件打包不成功问题，导致项目无法运行；</p>
<pre><code class='language-xml' lang='xml'>&lt;build&gt;
    &lt;resources&gt;
        &lt;resource&gt;
            &lt;directory&gt;src/main/java&lt;/directory&gt;
            &lt;includes&gt;
                &lt;include&gt;**/*.properties&lt;/include&gt;
                &lt;include&gt;**/*.xml&lt;/include&gt;
            &lt;/includes&gt;
            &lt;filtering&gt;true&lt;/filtering&gt;
        &lt;/resource&gt;
    &lt;/resources&gt;
&lt;/build&gt;
</code></pre>
<p>&nbsp;</p>
<h4>1.2、创建数据库和表</h4>
<pre><code class='language-sql' lang='sql'>CREATE DATABASE mybatis CHARACTER SET utf8;
CREATE TABLE USER(
	id INT PRIMARY KEY,
	username VARCHAR(15) NOT NULL,
	pwd VARCHAR(20) NOT NULL
)
INSERT INTO USER VALUES(2018143114,&#39;张三&#39;,&#39;123456&#39;),(2018143115,&#39;李四&#39;,&#39;1234567&#39;),(2018143116,&#39;王五&#39;,&#39;147258&#39;);
SELECT * FROM USER;
</code></pre>
<h4>1.3、编写mybatis配置文件</h4>
<p>在resource里新建一个mybatis-config.xml文件</p>
<pre><code class='language-xml' lang='xml'>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE configuration
        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;
&lt;configuration&gt;
    &lt;environments default=&quot;development&quot;&gt;
        &lt;environment id=&quot;development&quot;&gt;
            &lt;transactionManager type=&quot;JDBC&quot;/&gt;
            &lt;dataSource type=&quot;POOLED&quot;&gt;
                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;
                &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;amp;useUnicode=true&amp;amp;characterEncoding=utf8&quot;/&gt;
                &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;
                &lt;property name=&quot;password&quot; value=&quot;hufei169357&quot;/&gt;
            &lt;/dataSource&gt;
        &lt;/environment&gt;
    &lt;/environments&gt;
    &lt;mappers&gt;
        &lt;mapper resource=&quot;com/feige/dao/userMapper.xml&quot;/&gt;
    &lt;/mappers&gt;
&lt;/configuration&gt;
</code></pre>
<h4>1.4、新建一个工具类用来获取SqlSession对象</h4>
<pre><code class='language-java' lang='java'>package com.feige.utils;

import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import java.io.IOException;
import java.io.InputStream;
//sqlSessionFactory-sqlSession
public class MybatisUtils {
    private static SqlSessionFactory sqlSessionFactory;
    static {
        try {
            //使用mybatis第一步：获取sqlSessionFactory对象
            String resource = &quot;mybatis-config.xml&quot;;
            InputStream inputStream = Resources.getResourceAsStream(resource);
            sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    //既然有了sqlSessionFactory，顾名思义，我们就可以从中获得sqlSession的实例
    public static SqlSession getSqlSessioon(){
        return sqlSessionFactory.openSession();
    }
}

</code></pre>
<p>&nbsp;</p>
<h4>1.5、编写一个pojo（实体类）</h4>
<pre><code class='language-java' lang='java'>package com.feige.pojo;

public class User {
    private int id;
    private String username;
    private String pwd;

    public User() {
    }

    public User(int id, String username, String pwd) {
        this.id = id;
        this.username = username;
        this.pwd = pwd;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getPwd() {
        return pwd;
    }

    public void setPwd(String pwd) {
        this.pwd = pwd;
    }
    @Override
    public String toString() {
        return &quot;User{&quot; +
                &quot;id=&quot; + id +
                &quot;, username=&#39;&quot; + username + &#39;\&#39;&#39; +
                &quot;, pwd=&#39;&quot; + pwd + &#39;\&#39;&#39; +
                &#39;}&#39;;
    }
}

</code></pre>
<h4>1.6、新建一个userMapper接口</h4>
<pre><code class='language-java' lang='java'>package com.feige.dao;

import com.feige.pojo.User;

import java.util.List;
import java.util.Map;

public interface UserMapper {
    //查询全部用户
    List&lt;User&gt; getAllUser();
    //通过一个id查询一个用户
    User getUserById(int id);
    //通过id修改一个用户
    int updateUserById(Map map);
    //通过id删除一个用户
    int deleteUserById(int id);
    //插入一条数据
    int insertUser(User user);
}

</code></pre>
<h4>1.7、新建一个userMapper.xml文件</h4>
<pre><code class='language-xml' lang='xml'>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE mapper
        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;com.feige.dao.UserMapper&quot;&gt;
    &lt;!--每个语句要对应相应的标签select对应&lt;select&gt; delete 对应&lt;delete&gt; update 对应&lt;update&gt; insert 对应&lt;insert&gt;--&gt;
    &lt;select id=&quot;getAllUser&quot; resultType=&quot;com.feige.pojo.User&quot;&gt;
        select * from user
    &lt;/select&gt;
    &lt;select id=&quot;getUserById&quot; resultType=&quot;com.feige.pojo.User&quot; parameterType=&quot;int&quot;&gt;
        select * from user where id=#{id}
    &lt;/select&gt;
    &lt;update id=&quot;updateUserById&quot; parameterType=&quot;map&quot;&gt;
        update user set pwd=#{pwd} where id=#{id}
    &lt;/update&gt;
    &lt;delete id=&quot;deleteUserById&quot; parameterType=&quot;int&quot;&gt;
        delete from user where id=#{id}
    &lt;/delete&gt;
    &lt;insert id=&quot;insertUser&quot; parameterType=&quot;com.feige.pojo.User&quot;&gt;
        insert into user values (#{id},#{username},#{pwd})
    &lt;/insert&gt;
&lt;/mapper&gt;
</code></pre>
<h4>1.8、测试代码</h4>
<pre><code class='language-java' lang='java'>package com.feige.mybatisTest;

import com.feige.dao.UserMapper;
import com.feige.pojo.User;
import com.feige.utils.MybatisUtils;
import org.apache.ibatis.session.SqlSession;
import org.junit.Test;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MybatisTest {
    @Test
    public void mybatisTest1(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        List&lt;User&gt; allUser = mapper.getAllUser();
        for (User user : allUser) {
            System.out.println(user);
        }
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest2(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        User userById = mapper.getUserById(2018143114);
        System.out.println(userById);
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest3() {
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        //使用万能map传参
        Map&lt;String,Object&gt; map = new HashMap&lt;String, Object&gt;();
        map.put(&quot;pwd&quot;,2018143114);
        map.put(&quot;id&quot;,2018143114);

        int i = mapper.updateUserById(map);
        if (i &gt; 0) {
            System.out.println(&quot;修改成功！&quot;+i);
        }
        //增删改需要提交事务
        sqlSessioon.commit();

        sqlSessioon.close();

    }
    @Test
    public void mybatisTest4(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        int i = mapper.deleteUserById(2018143117);
        if (i &gt; 0) {
            System.out.println(&quot;删除成功！&quot;+i);
        }
        sqlSessioon.commit();
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest5(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        User user = new User(2018143117, &quot;杨帆东&quot;, &quot;2018143117&quot;);
        int i = mapper.insertUser(user);
        if (i &gt; 0) {
            System.out.println(&quot;插入成功！&quot;+i);
        }
        sqlSessioon.commit();
        sqlSessioon.close();

    }
}

</code></pre>
<p>&nbsp;</p>
<p>		</p>, 2020-02-24 03:15:45.0, 2020-02-24 03:15:50.0, admin, 0]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50024} Result: [7, mybatis, mybatis啊, 作者, 2020-02-24 03:27:18.0, 2020-02-24 03:27:18.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50024} Result: [8, springboot, aaa, [TOC]
                            #### Disabled options

                            - TeX (Based on KaTeX);
                            - Emoji;
                            - Task lists;
                            - HTML tags decode;
                            - Flowchart and Sequence Diagram;
                            #### Editor.md directory

                                editor.md/
                                        lib/
                                        css/
                                        scss/
                                        tests/
                                        fonts/
                                        images/
                                        plugins/
                                        examples/
                                        languages/
                                        editormd.js
                                        ...

                            ```html
                            <!-- English -->
                            <script src="../dist/js/languages/en.js"></script>

                            <!-- 繁體中文 -->
                            <script src="../dist/js/languages/zh-tw.js"></script>
                            ```
                        , 2020-02-25 03:39:36.0, 2020-02-25 22:38:07.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50024} Result: [9, mybatis, bbb, [TOC]

                            #### Disabled options

                            - TeX (Based on KaTeX);
                            - Emoji;
                            - Task lists;
                            - HTML tags decode;
                            - Flowchart and Sequence Diagram;

                            #### Editor.md directory

                                editor.md/
                                        lib/
                                        css/
                                        scss/
                                        tests/
                                        fonts/
                                        images/
                                        plugins/
                                        examples/
                                        languages/
                                        editormd.js
                                        ...

                            ```html
                            <!-- English -->
                            <script src="../dist/js/languages/en.js"></script>

                            <!-- 繁體中文 -->
                            <script src="../dist/js/languages/zh-tw.js"></script>
                            ```
                        , 2020-02-25 03:44:09.0, 2020-02-25 03:44:09.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50024} Result: [10, springboot, 飞哥, #大哥的Markdown, 2020-02-25 22:43:28.0, 2020-02-25 22:43:28.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50024} Result: [11, mybatis, 大哥, #飞哥的博客后台管理系统, 2020-02-25 22:49:26.0, 2020-02-25 22:49:26.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50024} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} Parameters : []
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} Types : []
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} executed. 0.905333 millis. select count(*) from `blog`
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50025} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50025} Header: [count(*)]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50025} Result: [13]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50025} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} Parameters : [0, 10]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} executed. 0.801777 millis. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog
         
            limit ?,?
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50026} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50026} Header: [id, type_name, title, content, create_time, change_time, author, view]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50026} Result: [1, springboot, springboot入门, springb自动装配, 2020-02-23 21:43:36.0, 2020-02-24 03:06:48.0, admin, 0]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50026} Result: [2, mybatis, 配置, 得到的, 2020-02-24 02:05:36.0, 2020-03-13 06:39:47.0, admin, 3]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50026} Result: [4, springMVC, mybatis-plus, ##飞哥, 2020-02-24 02:10:09.0, 2020-02-25 22:42:23.0, admin, 111]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50026} Result: [5, springboot, 人, 嗯嗯, 2020-02-24 03:07:20.0, 2020-02-24 03:07:20.0, admin, 2]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50026} Result: [6, mybatis, mybatis入门, <h2>1、Mybatis简介</h2>
<p><img src="https://blog.kuangstudy.com/usr/uploads/2019/10/1296229149.png" referrerpolicy="no-referrer" alt="1567007421329.png"></p>
<h3>什么是MyBatis</h3>
<ul>
<li>MyBatis 是一款优秀的<strong>持久层框架</strong></li>
<li>MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集的过程</li>
<li>MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 实体类 【Plain Old Java Objects,普通的 Java对象】映射成数据库中的记录。</li>
<li>MyBatis 本是apache的一个开源项目ibatis, 2010年这个项目由apache 迁移到了google code，并且改名为MyBatis 。</li>
<li>2013年11月迁移到<strong>Github</strong> .</li>
<li>Mybatis官方文档 : <a href='http://www.mybatis.org/mybatis-3/zh/index.html' target='_blank' class='url'>http://www.mybatis.org/mybatis-3/zh/index.html</a></li>
<li>GitHub : <a href='https://github.com/mybatis/mybatis-3' target='_blank' class='url'>https://github.com/mybatis/mybatis-3</a></li>

</ul>
<h3>持久化</h3>
<ul>
<li><p><strong>持久化是将程序数据在持久状态和瞬时状态间转换的机制。</strong></p>
<ul>
<li>即把数据（如内存中的对象）保存到可永久保存的存储设备中（如磁盘）。持久化的主要应用是将内存中的对象存储在数据库中，或者存储在磁盘文件中、XML数据文件中等等。</li>
<li>JDBC就是一种持久化机制。文件IO也是一种持久化机制。</li>
<li>在生活中 : 将鲜肉冷藏，吃的时候再解冻的方法也是。将水果做成罐头的方法也是。</li>

</ul>
</li>
<li><p><strong>为什么需要持久化服务呢？那是由于内存本身的缺陷引起的</strong></p>
<ul>
<li>内存断电后数据会丢失，但有一些对象是无论如何都不能丢失的，比如银行账号等，遗憾的是，人们还无法保证内存永不掉电。</li>
<li>内存过于昂贵，与硬盘、光盘等外存相比，内存的价格要高2~3个数量级，而且维持成本也高，至少需要一直供电吧。所以即使对象不需要永久保存，也会因为内存的容量限制不能一直呆在内存中，需要持久化来缓存到外存。</li>

</ul>
</li>

</ul>
<h3>持久层</h3>
<ul>
<li><p>什么是持久层？</p>
<ul>
<li>完成持久化工作的代码块 . ----&gt; dao层 【DAO (Data Access Object) 数据访问对象】</li>
<li>大多数情况下特别是企业级应用，数据持久化往往也就意味着将内存中的数据保存到磁盘上加以固化，而持久化的实现过程则大多通过各种<strong>关系数据库</strong>来完成。</li>
<li>不过这里有一个字需要特别强调，也就是所谓的“层”。对于应用系统而言，数据持久功能大多是必不可少的组成部分。也就是说，我们的系统中，已经天然的具备了“持久层”概念？也许是，但也许实际情况并非如此。之所以要独立出一个“持久层”的概念,而不是“持久模块”，“持久单元”，也就意味着，我们的系统架构中，应该有一个相对独立的逻辑层面，专著于数据持久化逻辑的实现.</li>
<li>与系统其他部分相对而言，这个层面应该具有一个较为清晰和严格的逻辑边界。 【说白了就是用来操作数据库存在的！】</li>

</ul>
</li>

</ul>
<h3>为什么需要Mybatis</h3>
<ul>
<li><p>Mybatis就是帮助程序猿将数据存入数据库中 , 和从数据库中取数据 .</p>
</li>
<li><p>传统的jdbc操作 , 有很多重复代码块 .比如 : 数据取出时的封装 , 数据库的建立连接等等... , 通过框架可以减少重复代码,提高开发效率 .</p>
</li>
<li><p>MyBatis 是一个半自动化的<strong>ORM框架 (Object Relationship Mapping) --&gt;对象关系映射</strong></p>
</li>
<li><p>所有的事情，不用Mybatis依旧可以做到，只是用了它，所有实现会更加简单！<strong>技术没有高低之分，只有使用这个技术的人有高低之别</strong></p>
</li>
<li><p>MyBatis的优点</p>
<ul>
<li>简单易学：本身就很小且简单。没有任何第三方依赖，最简单安装只要两个jar文件+配置几个sql映射文件就可以了，易于学习，易于使用，通过文档和源代码，可以比较完全的掌握它的设计思路和实现。</li>
<li>灵活：mybatis不会对应用程序或者数据库的现有设计强加任何影响。 sql写在xml里，便于统一管理和优化。通过sql语句可以满足操作数据库的所有需求。</li>
<li>解除sql与程序代码的耦合：通过提供DAO层，将业务逻辑和数据访问逻辑分离，使系统的设计更清晰，更易维护，更易单元测试。sql和代码的分离，提高了可维护性。</li>
<li>提供xml标签，支持编写动态sql。</li>
<li>.......</li>

</ul>
</li>
<li><p>最重要的一点，使用的人多！公司需要！</p>
</li>
<li><p>环境说明：</p>
<ul>
<li>jdk 8 +</li>
<li>MySQL 5.7.19</li>
<li>maven-3.6.0</li>
<li>IDEA</li>

</ul>
<p>学习前需要掌握：</p>
<ul>
<li>JDBC</li>
<li>MySQL</li>
<li>Java 基础</li>
<li>Maven</li>
<li>Junit</li>

</ul>
</li>

</ul>
<h2>2、mybatis crud（实现增删改查）</h2>
<h4>1.1、创建一个maven项目</h4>
<p>		导入依赖</p>
<pre><code class='language-xml' lang='xml'>&lt;dependencies&gt;
    &lt;!--mysql驱动--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;mysql&lt;/groupId&gt;
        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
        &lt;version&gt;5.1.47&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;!--mybatis支持--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.mybatis&lt;/groupId&gt;
        &lt;artifactId&gt;mybatis&lt;/artifactId&gt;
        &lt;version&gt;3.5.2&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;!--junit支持--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;junit&lt;/groupId&gt;
        &lt;artifactId&gt;junit&lt;/artifactId&gt;
        &lt;version&gt;4.12&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
</code></pre>
<p>注意点 : pom文件的设置中需要设置资源过滤 , 否则会有资源文件打包不成功问题，导致项目无法运行；</p>
<pre><code class='language-xml' lang='xml'>&lt;build&gt;
    &lt;resources&gt;
        &lt;resource&gt;
            &lt;directory&gt;src/main/java&lt;/directory&gt;
            &lt;includes&gt;
                &lt;include&gt;**/*.properties&lt;/include&gt;
                &lt;include&gt;**/*.xml&lt;/include&gt;
            &lt;/includes&gt;
            &lt;filtering&gt;true&lt;/filtering&gt;
        &lt;/resource&gt;
    &lt;/resources&gt;
&lt;/build&gt;
</code></pre>
<p>&nbsp;</p>
<h4>1.2、创建数据库和表</h4>
<pre><code class='language-sql' lang='sql'>CREATE DATABASE mybatis CHARACTER SET utf8;
CREATE TABLE USER(
	id INT PRIMARY KEY,
	username VARCHAR(15) NOT NULL,
	pwd VARCHAR(20) NOT NULL
)
INSERT INTO USER VALUES(2018143114,&#39;张三&#39;,&#39;123456&#39;),(2018143115,&#39;李四&#39;,&#39;1234567&#39;),(2018143116,&#39;王五&#39;,&#39;147258&#39;);
SELECT * FROM USER;
</code></pre>
<h4>1.3、编写mybatis配置文件</h4>
<p>在resource里新建一个mybatis-config.xml文件</p>
<pre><code class='language-xml' lang='xml'>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE configuration
        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;
&lt;configuration&gt;
    &lt;environments default=&quot;development&quot;&gt;
        &lt;environment id=&quot;development&quot;&gt;
            &lt;transactionManager type=&quot;JDBC&quot;/&gt;
            &lt;dataSource type=&quot;POOLED&quot;&gt;
                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;
                &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;amp;useUnicode=true&amp;amp;characterEncoding=utf8&quot;/&gt;
                &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;
                &lt;property name=&quot;password&quot; value=&quot;hufei169357&quot;/&gt;
            &lt;/dataSource&gt;
        &lt;/environment&gt;
    &lt;/environments&gt;
    &lt;mappers&gt;
        &lt;mapper resource=&quot;com/feige/dao/userMapper.xml&quot;/&gt;
    &lt;/mappers&gt;
&lt;/configuration&gt;
</code></pre>
<h4>1.4、新建一个工具类用来获取SqlSession对象</h4>
<pre><code class='language-java' lang='java'>package com.feige.utils;

import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import java.io.IOException;
import java.io.InputStream;
//sqlSessionFactory-sqlSession
public class MybatisUtils {
    private static SqlSessionFactory sqlSessionFactory;
    static {
        try {
            //使用mybatis第一步：获取sqlSessionFactory对象
            String resource = &quot;mybatis-config.xml&quot;;
            InputStream inputStream = Resources.getResourceAsStream(resource);
            sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    //既然有了sqlSessionFactory，顾名思义，我们就可以从中获得sqlSession的实例
    public static SqlSession getSqlSessioon(){
        return sqlSessionFactory.openSession();
    }
}

</code></pre>
<p>&nbsp;</p>
<h4>1.5、编写一个pojo（实体类）</h4>
<pre><code class='language-java' lang='java'>package com.feige.pojo;

public class User {
    private int id;
    private String username;
    private String pwd;

    public User() {
    }

    public User(int id, String username, String pwd) {
        this.id = id;
        this.username = username;
        this.pwd = pwd;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getPwd() {
        return pwd;
    }

    public void setPwd(String pwd) {
        this.pwd = pwd;
    }
    @Override
    public String toString() {
        return &quot;User{&quot; +
                &quot;id=&quot; + id +
                &quot;, username=&#39;&quot; + username + &#39;\&#39;&#39; +
                &quot;, pwd=&#39;&quot; + pwd + &#39;\&#39;&#39; +
                &#39;}&#39;;
    }
}

</code></pre>
<h4>1.6、新建一个userMapper接口</h4>
<pre><code class='language-java' lang='java'>package com.feige.dao;

import com.feige.pojo.User;

import java.util.List;
import java.util.Map;

public interface UserMapper {
    //查询全部用户
    List&lt;User&gt; getAllUser();
    //通过一个id查询一个用户
    User getUserById(int id);
    //通过id修改一个用户
    int updateUserById(Map map);
    //通过id删除一个用户
    int deleteUserById(int id);
    //插入一条数据
    int insertUser(User user);
}

</code></pre>
<h4>1.7、新建一个userMapper.xml文件</h4>
<pre><code class='language-xml' lang='xml'>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE mapper
        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;com.feige.dao.UserMapper&quot;&gt;
    &lt;!--每个语句要对应相应的标签select对应&lt;select&gt; delete 对应&lt;delete&gt; update 对应&lt;update&gt; insert 对应&lt;insert&gt;--&gt;
    &lt;select id=&quot;getAllUser&quot; resultType=&quot;com.feige.pojo.User&quot;&gt;
        select * from user
    &lt;/select&gt;
    &lt;select id=&quot;getUserById&quot; resultType=&quot;com.feige.pojo.User&quot; parameterType=&quot;int&quot;&gt;
        select * from user where id=#{id}
    &lt;/select&gt;
    &lt;update id=&quot;updateUserById&quot; parameterType=&quot;map&quot;&gt;
        update user set pwd=#{pwd} where id=#{id}
    &lt;/update&gt;
    &lt;delete id=&quot;deleteUserById&quot; parameterType=&quot;int&quot;&gt;
        delete from user where id=#{id}
    &lt;/delete&gt;
    &lt;insert id=&quot;insertUser&quot; parameterType=&quot;com.feige.pojo.User&quot;&gt;
        insert into user values (#{id},#{username},#{pwd})
    &lt;/insert&gt;
&lt;/mapper&gt;
</code></pre>
<h4>1.8、测试代码</h4>
<pre><code class='language-java' lang='java'>package com.feige.mybatisTest;

import com.feige.dao.UserMapper;
import com.feige.pojo.User;
import com.feige.utils.MybatisUtils;
import org.apache.ibatis.session.SqlSession;
import org.junit.Test;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MybatisTest {
    @Test
    public void mybatisTest1(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        List&lt;User&gt; allUser = mapper.getAllUser();
        for (User user : allUser) {
            System.out.println(user);
        }
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest2(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        User userById = mapper.getUserById(2018143114);
        System.out.println(userById);
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest3() {
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        //使用万能map传参
        Map&lt;String,Object&gt; map = new HashMap&lt;String, Object&gt;();
        map.put(&quot;pwd&quot;,2018143114);
        map.put(&quot;id&quot;,2018143114);

        int i = mapper.updateUserById(map);
        if (i &gt; 0) {
            System.out.println(&quot;修改成功！&quot;+i);
        }
        //增删改需要提交事务
        sqlSessioon.commit();

        sqlSessioon.close();

    }
    @Test
    public void mybatisTest4(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        int i = mapper.deleteUserById(2018143117);
        if (i &gt; 0) {
            System.out.println(&quot;删除成功！&quot;+i);
        }
        sqlSessioon.commit();
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest5(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        User user = new User(2018143117, &quot;杨帆东&quot;, &quot;2018143117&quot;);
        int i = mapper.insertUser(user);
        if (i &gt; 0) {
            System.out.println(&quot;插入成功！&quot;+i);
        }
        sqlSessioon.commit();
        sqlSessioon.close();

    }
}

</code></pre>
<p>&nbsp;</p>
<p>		</p>, 2020-02-24 03:15:45.0, 2020-02-24 03:15:50.0, admin, 0]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50026} Result: [7, mybatis, mybatis啊, 作者, 2020-02-24 03:27:18.0, 2020-02-24 03:27:18.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50026} Result: [8, springboot, aaa, [TOC]
                            #### Disabled options

                            - TeX (Based on KaTeX);
                            - Emoji;
                            - Task lists;
                            - HTML tags decode;
                            - Flowchart and Sequence Diagram;
                            #### Editor.md directory

                                editor.md/
                                        lib/
                                        css/
                                        scss/
                                        tests/
                                        fonts/
                                        images/
                                        plugins/
                                        examples/
                                        languages/
                                        editormd.js
                                        ...

                            ```html
                            <!-- English -->
                            <script src="../dist/js/languages/en.js"></script>

                            <!-- 繁體中文 -->
                            <script src="../dist/js/languages/zh-tw.js"></script>
                            ```
                        , 2020-02-25 03:39:36.0, 2020-02-25 22:38:07.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50026} Result: [9, mybatis, bbb, [TOC]

                            #### Disabled options

                            - TeX (Based on KaTeX);
                            - Emoji;
                            - Task lists;
                            - HTML tags decode;
                            - Flowchart and Sequence Diagram;

                            #### Editor.md directory

                                editor.md/
                                        lib/
                                        css/
                                        scss/
                                        tests/
                                        fonts/
                                        images/
                                        plugins/
                                        examples/
                                        languages/
                                        editormd.js
                                        ...

                            ```html
                            <!-- English -->
                            <script src="../dist/js/languages/en.js"></script>

                            <!-- 繁體中文 -->
                            <script src="../dist/js/languages/zh-tw.js"></script>
                            ```
                        , 2020-02-25 03:44:09.0, 2020-02-25 03:44:09.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50026} Result: [10, springboot, 飞哥, #大哥的Markdown, 2020-02-25 22:43:28.0, 2020-02-25 22:43:28.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50026} Result: [11, mybatis, 大哥, #飞哥的博客后台管理系统, 2020-02-25 22:49:26.0, 2020-02-25 22:49:26.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50026} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} Parameters : []
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} Types : []
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} executed. 1.248887 millis. select count(*) from `blog`
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50027} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50027} Header: [count(*)]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50027} Result: [13]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50027} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} Parameters : [0, 10]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} executed. 16.386208 millis. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog
         
            limit ?,?
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50028} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50028} Header: [id, type_name, title, content, create_time, change_time, author, view]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50028} Result: [1, springboot, springboot入门, springb自动装配, 2020-02-23 21:43:36.0, 2020-02-24 03:06:48.0, admin, 0]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50028} Result: [2, mybatis, 配置, 得到的, 2020-02-24 02:05:36.0, 2020-03-13 06:39:47.0, admin, 3]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50028} Result: [4, springMVC, mybatis-plus, ##飞哥, 2020-02-24 02:10:09.0, 2020-02-25 22:42:23.0, admin, 111]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50028} Result: [5, springboot, 人, 嗯嗯, 2020-02-24 03:07:20.0, 2020-02-24 03:07:20.0, admin, 2]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50028} Result: [6, mybatis, mybatis入门, <h2>1、Mybatis简介</h2>
<p><img src="https://blog.kuangstudy.com/usr/uploads/2019/10/1296229149.png" referrerpolicy="no-referrer" alt="1567007421329.png"></p>
<h3>什么是MyBatis</h3>
<ul>
<li>MyBatis 是一款优秀的<strong>持久层框架</strong></li>
<li>MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集的过程</li>
<li>MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 实体类 【Plain Old Java Objects,普通的 Java对象】映射成数据库中的记录。</li>
<li>MyBatis 本是apache的一个开源项目ibatis, 2010年这个项目由apache 迁移到了google code，并且改名为MyBatis 。</li>
<li>2013年11月迁移到<strong>Github</strong> .</li>
<li>Mybatis官方文档 : <a href='http://www.mybatis.org/mybatis-3/zh/index.html' target='_blank' class='url'>http://www.mybatis.org/mybatis-3/zh/index.html</a></li>
<li>GitHub : <a href='https://github.com/mybatis/mybatis-3' target='_blank' class='url'>https://github.com/mybatis/mybatis-3</a></li>

</ul>
<h3>持久化</h3>
<ul>
<li><p><strong>持久化是将程序数据在持久状态和瞬时状态间转换的机制。</strong></p>
<ul>
<li>即把数据（如内存中的对象）保存到可永久保存的存储设备中（如磁盘）。持久化的主要应用是将内存中的对象存储在数据库中，或者存储在磁盘文件中、XML数据文件中等等。</li>
<li>JDBC就是一种持久化机制。文件IO也是一种持久化机制。</li>
<li>在生活中 : 将鲜肉冷藏，吃的时候再解冻的方法也是。将水果做成罐头的方法也是。</li>

</ul>
</li>
<li><p><strong>为什么需要持久化服务呢？那是由于内存本身的缺陷引起的</strong></p>
<ul>
<li>内存断电后数据会丢失，但有一些对象是无论如何都不能丢失的，比如银行账号等，遗憾的是，人们还无法保证内存永不掉电。</li>
<li>内存过于昂贵，与硬盘、光盘等外存相比，内存的价格要高2~3个数量级，而且维持成本也高，至少需要一直供电吧。所以即使对象不需要永久保存，也会因为内存的容量限制不能一直呆在内存中，需要持久化来缓存到外存。</li>

</ul>
</li>

</ul>
<h3>持久层</h3>
<ul>
<li><p>什么是持久层？</p>
<ul>
<li>完成持久化工作的代码块 . ----&gt; dao层 【DAO (Data Access Object) 数据访问对象】</li>
<li>大多数情况下特别是企业级应用，数据持久化往往也就意味着将内存中的数据保存到磁盘上加以固化，而持久化的实现过程则大多通过各种<strong>关系数据库</strong>来完成。</li>
<li>不过这里有一个字需要特别强调，也就是所谓的“层”。对于应用系统而言，数据持久功能大多是必不可少的组成部分。也就是说，我们的系统中，已经天然的具备了“持久层”概念？也许是，但也许实际情况并非如此。之所以要独立出一个“持久层”的概念,而不是“持久模块”，“持久单元”，也就意味着，我们的系统架构中，应该有一个相对独立的逻辑层面，专著于数据持久化逻辑的实现.</li>
<li>与系统其他部分相对而言，这个层面应该具有一个较为清晰和严格的逻辑边界。 【说白了就是用来操作数据库存在的！】</li>

</ul>
</li>

</ul>
<h3>为什么需要Mybatis</h3>
<ul>
<li><p>Mybatis就是帮助程序猿将数据存入数据库中 , 和从数据库中取数据 .</p>
</li>
<li><p>传统的jdbc操作 , 有很多重复代码块 .比如 : 数据取出时的封装 , 数据库的建立连接等等... , 通过框架可以减少重复代码,提高开发效率 .</p>
</li>
<li><p>MyBatis 是一个半自动化的<strong>ORM框架 (Object Relationship Mapping) --&gt;对象关系映射</strong></p>
</li>
<li><p>所有的事情，不用Mybatis依旧可以做到，只是用了它，所有实现会更加简单！<strong>技术没有高低之分，只有使用这个技术的人有高低之别</strong></p>
</li>
<li><p>MyBatis的优点</p>
<ul>
<li>简单易学：本身就很小且简单。没有任何第三方依赖，最简单安装只要两个jar文件+配置几个sql映射文件就可以了，易于学习，易于使用，通过文档和源代码，可以比较完全的掌握它的设计思路和实现。</li>
<li>灵活：mybatis不会对应用程序或者数据库的现有设计强加任何影响。 sql写在xml里，便于统一管理和优化。通过sql语句可以满足操作数据库的所有需求。</li>
<li>解除sql与程序代码的耦合：通过提供DAO层，将业务逻辑和数据访问逻辑分离，使系统的设计更清晰，更易维护，更易单元测试。sql和代码的分离，提高了可维护性。</li>
<li>提供xml标签，支持编写动态sql。</li>
<li>.......</li>

</ul>
</li>
<li><p>最重要的一点，使用的人多！公司需要！</p>
</li>
<li><p>环境说明：</p>
<ul>
<li>jdk 8 +</li>
<li>MySQL 5.7.19</li>
<li>maven-3.6.0</li>
<li>IDEA</li>

</ul>
<p>学习前需要掌握：</p>
<ul>
<li>JDBC</li>
<li>MySQL</li>
<li>Java 基础</li>
<li>Maven</li>
<li>Junit</li>

</ul>
</li>

</ul>
<h2>2、mybatis crud（实现增删改查）</h2>
<h4>1.1、创建一个maven项目</h4>
<p>		导入依赖</p>
<pre><code class='language-xml' lang='xml'>&lt;dependencies&gt;
    &lt;!--mysql驱动--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;mysql&lt;/groupId&gt;
        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
        &lt;version&gt;5.1.47&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;!--mybatis支持--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.mybatis&lt;/groupId&gt;
        &lt;artifactId&gt;mybatis&lt;/artifactId&gt;
        &lt;version&gt;3.5.2&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;!--junit支持--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;junit&lt;/groupId&gt;
        &lt;artifactId&gt;junit&lt;/artifactId&gt;
        &lt;version&gt;4.12&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
</code></pre>
<p>注意点 : pom文件的设置中需要设置资源过滤 , 否则会有资源文件打包不成功问题，导致项目无法运行；</p>
<pre><code class='language-xml' lang='xml'>&lt;build&gt;
    &lt;resources&gt;
        &lt;resource&gt;
            &lt;directory&gt;src/main/java&lt;/directory&gt;
            &lt;includes&gt;
                &lt;include&gt;**/*.properties&lt;/include&gt;
                &lt;include&gt;**/*.xml&lt;/include&gt;
            &lt;/includes&gt;
            &lt;filtering&gt;true&lt;/filtering&gt;
        &lt;/resource&gt;
    &lt;/resources&gt;
&lt;/build&gt;
</code></pre>
<p>&nbsp;</p>
<h4>1.2、创建数据库和表</h4>
<pre><code class='language-sql' lang='sql'>CREATE DATABASE mybatis CHARACTER SET utf8;
CREATE TABLE USER(
	id INT PRIMARY KEY,
	username VARCHAR(15) NOT NULL,
	pwd VARCHAR(20) NOT NULL
)
INSERT INTO USER VALUES(2018143114,&#39;张三&#39;,&#39;123456&#39;),(2018143115,&#39;李四&#39;,&#39;1234567&#39;),(2018143116,&#39;王五&#39;,&#39;147258&#39;);
SELECT * FROM USER;
</code></pre>
<h4>1.3、编写mybatis配置文件</h4>
<p>在resource里新建一个mybatis-config.xml文件</p>
<pre><code class='language-xml' lang='xml'>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE configuration
        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;
&lt;configuration&gt;
    &lt;environments default=&quot;development&quot;&gt;
        &lt;environment id=&quot;development&quot;&gt;
            &lt;transactionManager type=&quot;JDBC&quot;/&gt;
            &lt;dataSource type=&quot;POOLED&quot;&gt;
                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;
                &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;amp;useUnicode=true&amp;amp;characterEncoding=utf8&quot;/&gt;
                &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;
                &lt;property name=&quot;password&quot; value=&quot;hufei169357&quot;/&gt;
            &lt;/dataSource&gt;
        &lt;/environment&gt;
    &lt;/environments&gt;
    &lt;mappers&gt;
        &lt;mapper resource=&quot;com/feige/dao/userMapper.xml&quot;/&gt;
    &lt;/mappers&gt;
&lt;/configuration&gt;
</code></pre>
<h4>1.4、新建一个工具类用来获取SqlSession对象</h4>
<pre><code class='language-java' lang='java'>package com.feige.utils;

import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import java.io.IOException;
import java.io.InputStream;
//sqlSessionFactory-sqlSession
public class MybatisUtils {
    private static SqlSessionFactory sqlSessionFactory;
    static {
        try {
            //使用mybatis第一步：获取sqlSessionFactory对象
            String resource = &quot;mybatis-config.xml&quot;;
            InputStream inputStream = Resources.getResourceAsStream(resource);
            sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    //既然有了sqlSessionFactory，顾名思义，我们就可以从中获得sqlSession的实例
    public static SqlSession getSqlSessioon(){
        return sqlSessionFactory.openSession();
    }
}

</code></pre>
<p>&nbsp;</p>
<h4>1.5、编写一个pojo（实体类）</h4>
<pre><code class='language-java' lang='java'>package com.feige.pojo;

public class User {
    private int id;
    private String username;
    private String pwd;

    public User() {
    }

    public User(int id, String username, String pwd) {
        this.id = id;
        this.username = username;
        this.pwd = pwd;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getPwd() {
        return pwd;
    }

    public void setPwd(String pwd) {
        this.pwd = pwd;
    }
    @Override
    public String toString() {
        return &quot;User{&quot; +
                &quot;id=&quot; + id +
                &quot;, username=&#39;&quot; + username + &#39;\&#39;&#39; +
                &quot;, pwd=&#39;&quot; + pwd + &#39;\&#39;&#39; +
                &#39;}&#39;;
    }
}

</code></pre>
<h4>1.6、新建一个userMapper接口</h4>
<pre><code class='language-java' lang='java'>package com.feige.dao;

import com.feige.pojo.User;

import java.util.List;
import java.util.Map;

public interface UserMapper {
    //查询全部用户
    List&lt;User&gt; getAllUser();
    //通过一个id查询一个用户
    User getUserById(int id);
    //通过id修改一个用户
    int updateUserById(Map map);
    //通过id删除一个用户
    int deleteUserById(int id);
    //插入一条数据
    int insertUser(User user);
}

</code></pre>
<h4>1.7、新建一个userMapper.xml文件</h4>
<pre><code class='language-xml' lang='xml'>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE mapper
        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;com.feige.dao.UserMapper&quot;&gt;
    &lt;!--每个语句要对应相应的标签select对应&lt;select&gt; delete 对应&lt;delete&gt; update 对应&lt;update&gt; insert 对应&lt;insert&gt;--&gt;
    &lt;select id=&quot;getAllUser&quot; resultType=&quot;com.feige.pojo.User&quot;&gt;
        select * from user
    &lt;/select&gt;
    &lt;select id=&quot;getUserById&quot; resultType=&quot;com.feige.pojo.User&quot; parameterType=&quot;int&quot;&gt;
        select * from user where id=#{id}
    &lt;/select&gt;
    &lt;update id=&quot;updateUserById&quot; parameterType=&quot;map&quot;&gt;
        update user set pwd=#{pwd} where id=#{id}
    &lt;/update&gt;
    &lt;delete id=&quot;deleteUserById&quot; parameterType=&quot;int&quot;&gt;
        delete from user where id=#{id}
    &lt;/delete&gt;
    &lt;insert id=&quot;insertUser&quot; parameterType=&quot;com.feige.pojo.User&quot;&gt;
        insert into user values (#{id},#{username},#{pwd})
    &lt;/insert&gt;
&lt;/mapper&gt;
</code></pre>
<h4>1.8、测试代码</h4>
<pre><code class='language-java' lang='java'>package com.feige.mybatisTest;

import com.feige.dao.UserMapper;
import com.feige.pojo.User;
import com.feige.utils.MybatisUtils;
import org.apache.ibatis.session.SqlSession;
import org.junit.Test;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MybatisTest {
    @Test
    public void mybatisTest1(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        List&lt;User&gt; allUser = mapper.getAllUser();
        for (User user : allUser) {
            System.out.println(user);
        }
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest2(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        User userById = mapper.getUserById(2018143114);
        System.out.println(userById);
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest3() {
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        //使用万能map传参
        Map&lt;String,Object&gt; map = new HashMap&lt;String, Object&gt;();
        map.put(&quot;pwd&quot;,2018143114);
        map.put(&quot;id&quot;,2018143114);

        int i = mapper.updateUserById(map);
        if (i &gt; 0) {
            System.out.println(&quot;修改成功！&quot;+i);
        }
        //增删改需要提交事务
        sqlSessioon.commit();

        sqlSessioon.close();

    }
    @Test
    public void mybatisTest4(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        int i = mapper.deleteUserById(2018143117);
        if (i &gt; 0) {
            System.out.println(&quot;删除成功！&quot;+i);
        }
        sqlSessioon.commit();
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest5(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        User user = new User(2018143117, &quot;杨帆东&quot;, &quot;2018143117&quot;);
        int i = mapper.insertUser(user);
        if (i &gt; 0) {
            System.out.println(&quot;插入成功！&quot;+i);
        }
        sqlSessioon.commit();
        sqlSessioon.close();

    }
}

</code></pre>
<p>&nbsp;</p>
<p>		</p>, 2020-02-24 03:15:45.0, 2020-02-24 03:15:50.0, admin, 0]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50028} Result: [7, mybatis, mybatis啊, 作者, 2020-02-24 03:27:18.0, 2020-02-24 03:27:18.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50028} Result: [8, springboot, aaa, [TOC]
                            #### Disabled options

                            - TeX (Based on KaTeX);
                            - Emoji;
                            - Task lists;
                            - HTML tags decode;
                            - Flowchart and Sequence Diagram;
                            #### Editor.md directory

                                editor.md/
                                        lib/
                                        css/
                                        scss/
                                        tests/
                                        fonts/
                                        images/
                                        plugins/
                                        examples/
                                        languages/
                                        editormd.js
                                        ...

                            ```html
                            <!-- English -->
                            <script src="../dist/js/languages/en.js"></script>

                            <!-- 繁體中文 -->
                            <script src="../dist/js/languages/zh-tw.js"></script>
                            ```
                        , 2020-02-25 03:39:36.0, 2020-02-25 22:38:07.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50028} Result: [9, mybatis, bbb, [TOC]

                            #### Disabled options

                            - TeX (Based on KaTeX);
                            - Emoji;
                            - Task lists;
                            - HTML tags decode;
                            - Flowchart and Sequence Diagram;

                            #### Editor.md directory

                                editor.md/
                                        lib/
                                        css/
                                        scss/
                                        tests/
                                        fonts/
                                        images/
                                        plugins/
                                        examples/
                                        languages/
                                        editormd.js
                                        ...

                            ```html
                            <!-- English -->
                            <script src="../dist/js/languages/en.js"></script>

                            <!-- 繁體中文 -->
                            <script src="../dist/js/languages/zh-tw.js"></script>
                            ```
                        , 2020-02-25 03:44:09.0, 2020-02-25 03:44:09.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50028} Result: [10, springboot, 飞哥, #大哥的Markdown, 2020-02-25 22:43:28.0, 2020-02-25 22:43:28.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50028} Result: [11, mybatis, 大哥, #飞哥的博客后台管理系统, 2020-02-25 22:49:26.0, 2020-02-25 22:49:26.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50028} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} Parameters : []
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} Types : []
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} executed. 0.569777 millis. select count(*) from `blog`
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50029} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50029} Header: [count(*)]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50029} Result: [13]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50029} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} Parameters : [0, 10]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} executed. 1.819999 millis. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog
         
            limit ?,?
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50030} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50030} Header: [id, type_name, title, content, create_time, change_time, author, view]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50030} Result: [1, springboot, springboot入门, springb自动装配, 2020-02-23 21:43:36.0, 2020-02-24 03:06:48.0, admin, 0]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50030} Result: [2, mybatis, 配置, 得到的, 2020-02-24 02:05:36.0, 2020-03-13 06:39:47.0, admin, 3]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50030} Result: [4, springMVC, mybatis-plus, ##飞哥, 2020-02-24 02:10:09.0, 2020-02-25 22:42:23.0, admin, 111]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50030} Result: [5, springboot, 人, 嗯嗯, 2020-02-24 03:07:20.0, 2020-02-24 03:07:20.0, admin, 2]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50030} Result: [6, mybatis, mybatis入门, <h2>1、Mybatis简介</h2>
<p><img src="https://blog.kuangstudy.com/usr/uploads/2019/10/1296229149.png" referrerpolicy="no-referrer" alt="1567007421329.png"></p>
<h3>什么是MyBatis</h3>
<ul>
<li>MyBatis 是一款优秀的<strong>持久层框架</strong></li>
<li>MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集的过程</li>
<li>MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 实体类 【Plain Old Java Objects,普通的 Java对象】映射成数据库中的记录。</li>
<li>MyBatis 本是apache的一个开源项目ibatis, 2010年这个项目由apache 迁移到了google code，并且改名为MyBatis 。</li>
<li>2013年11月迁移到<strong>Github</strong> .</li>
<li>Mybatis官方文档 : <a href='http://www.mybatis.org/mybatis-3/zh/index.html' target='_blank' class='url'>http://www.mybatis.org/mybatis-3/zh/index.html</a></li>
<li>GitHub : <a href='https://github.com/mybatis/mybatis-3' target='_blank' class='url'>https://github.com/mybatis/mybatis-3</a></li>

</ul>
<h3>持久化</h3>
<ul>
<li><p><strong>持久化是将程序数据在持久状态和瞬时状态间转换的机制。</strong></p>
<ul>
<li>即把数据（如内存中的对象）保存到可永久保存的存储设备中（如磁盘）。持久化的主要应用是将内存中的对象存储在数据库中，或者存储在磁盘文件中、XML数据文件中等等。</li>
<li>JDBC就是一种持久化机制。文件IO也是一种持久化机制。</li>
<li>在生活中 : 将鲜肉冷藏，吃的时候再解冻的方法也是。将水果做成罐头的方法也是。</li>

</ul>
</li>
<li><p><strong>为什么需要持久化服务呢？那是由于内存本身的缺陷引起的</strong></p>
<ul>
<li>内存断电后数据会丢失，但有一些对象是无论如何都不能丢失的，比如银行账号等，遗憾的是，人们还无法保证内存永不掉电。</li>
<li>内存过于昂贵，与硬盘、光盘等外存相比，内存的价格要高2~3个数量级，而且维持成本也高，至少需要一直供电吧。所以即使对象不需要永久保存，也会因为内存的容量限制不能一直呆在内存中，需要持久化来缓存到外存。</li>

</ul>
</li>

</ul>
<h3>持久层</h3>
<ul>
<li><p>什么是持久层？</p>
<ul>
<li>完成持久化工作的代码块 . ----&gt; dao层 【DAO (Data Access Object) 数据访问对象】</li>
<li>大多数情况下特别是企业级应用，数据持久化往往也就意味着将内存中的数据保存到磁盘上加以固化，而持久化的实现过程则大多通过各种<strong>关系数据库</strong>来完成。</li>
<li>不过这里有一个字需要特别强调，也就是所谓的“层”。对于应用系统而言，数据持久功能大多是必不可少的组成部分。也就是说，我们的系统中，已经天然的具备了“持久层”概念？也许是，但也许实际情况并非如此。之所以要独立出一个“持久层”的概念,而不是“持久模块”，“持久单元”，也就意味着，我们的系统架构中，应该有一个相对独立的逻辑层面，专著于数据持久化逻辑的实现.</li>
<li>与系统其他部分相对而言，这个层面应该具有一个较为清晰和严格的逻辑边界。 【说白了就是用来操作数据库存在的！】</li>

</ul>
</li>

</ul>
<h3>为什么需要Mybatis</h3>
<ul>
<li><p>Mybatis就是帮助程序猿将数据存入数据库中 , 和从数据库中取数据 .</p>
</li>
<li><p>传统的jdbc操作 , 有很多重复代码块 .比如 : 数据取出时的封装 , 数据库的建立连接等等... , 通过框架可以减少重复代码,提高开发效率 .</p>
</li>
<li><p>MyBatis 是一个半自动化的<strong>ORM框架 (Object Relationship Mapping) --&gt;对象关系映射</strong></p>
</li>
<li><p>所有的事情，不用Mybatis依旧可以做到，只是用了它，所有实现会更加简单！<strong>技术没有高低之分，只有使用这个技术的人有高低之别</strong></p>
</li>
<li><p>MyBatis的优点</p>
<ul>
<li>简单易学：本身就很小且简单。没有任何第三方依赖，最简单安装只要两个jar文件+配置几个sql映射文件就可以了，易于学习，易于使用，通过文档和源代码，可以比较完全的掌握它的设计思路和实现。</li>
<li>灵活：mybatis不会对应用程序或者数据库的现有设计强加任何影响。 sql写在xml里，便于统一管理和优化。通过sql语句可以满足操作数据库的所有需求。</li>
<li>解除sql与程序代码的耦合：通过提供DAO层，将业务逻辑和数据访问逻辑分离，使系统的设计更清晰，更易维护，更易单元测试。sql和代码的分离，提高了可维护性。</li>
<li>提供xml标签，支持编写动态sql。</li>
<li>.......</li>

</ul>
</li>
<li><p>最重要的一点，使用的人多！公司需要！</p>
</li>
<li><p>环境说明：</p>
<ul>
<li>jdk 8 +</li>
<li>MySQL 5.7.19</li>
<li>maven-3.6.0</li>
<li>IDEA</li>

</ul>
<p>学习前需要掌握：</p>
<ul>
<li>JDBC</li>
<li>MySQL</li>
<li>Java 基础</li>
<li>Maven</li>
<li>Junit</li>

</ul>
</li>

</ul>
<h2>2、mybatis crud（实现增删改查）</h2>
<h4>1.1、创建一个maven项目</h4>
<p>		导入依赖</p>
<pre><code class='language-xml' lang='xml'>&lt;dependencies&gt;
    &lt;!--mysql驱动--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;mysql&lt;/groupId&gt;
        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
        &lt;version&gt;5.1.47&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;!--mybatis支持--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.mybatis&lt;/groupId&gt;
        &lt;artifactId&gt;mybatis&lt;/artifactId&gt;
        &lt;version&gt;3.5.2&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;!--junit支持--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;junit&lt;/groupId&gt;
        &lt;artifactId&gt;junit&lt;/artifactId&gt;
        &lt;version&gt;4.12&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
</code></pre>
<p>注意点 : pom文件的设置中需要设置资源过滤 , 否则会有资源文件打包不成功问题，导致项目无法运行；</p>
<pre><code class='language-xml' lang='xml'>&lt;build&gt;
    &lt;resources&gt;
        &lt;resource&gt;
            &lt;directory&gt;src/main/java&lt;/directory&gt;
            &lt;includes&gt;
                &lt;include&gt;**/*.properties&lt;/include&gt;
                &lt;include&gt;**/*.xml&lt;/include&gt;
            &lt;/includes&gt;
            &lt;filtering&gt;true&lt;/filtering&gt;
        &lt;/resource&gt;
    &lt;/resources&gt;
&lt;/build&gt;
</code></pre>
<p>&nbsp;</p>
<h4>1.2、创建数据库和表</h4>
<pre><code class='language-sql' lang='sql'>CREATE DATABASE mybatis CHARACTER SET utf8;
CREATE TABLE USER(
	id INT PRIMARY KEY,
	username VARCHAR(15) NOT NULL,
	pwd VARCHAR(20) NOT NULL
)
INSERT INTO USER VALUES(2018143114,&#39;张三&#39;,&#39;123456&#39;),(2018143115,&#39;李四&#39;,&#39;1234567&#39;),(2018143116,&#39;王五&#39;,&#39;147258&#39;);
SELECT * FROM USER;
</code></pre>
<h4>1.3、编写mybatis配置文件</h4>
<p>在resource里新建一个mybatis-config.xml文件</p>
<pre><code class='language-xml' lang='xml'>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE configuration
        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;
&lt;configuration&gt;
    &lt;environments default=&quot;development&quot;&gt;
        &lt;environment id=&quot;development&quot;&gt;
            &lt;transactionManager type=&quot;JDBC&quot;/&gt;
            &lt;dataSource type=&quot;POOLED&quot;&gt;
                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;
                &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;amp;useUnicode=true&amp;amp;characterEncoding=utf8&quot;/&gt;
                &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;
                &lt;property name=&quot;password&quot; value=&quot;hufei169357&quot;/&gt;
            &lt;/dataSource&gt;
        &lt;/environment&gt;
    &lt;/environments&gt;
    &lt;mappers&gt;
        &lt;mapper resource=&quot;com/feige/dao/userMapper.xml&quot;/&gt;
    &lt;/mappers&gt;
&lt;/configuration&gt;
</code></pre>
<h4>1.4、新建一个工具类用来获取SqlSession对象</h4>
<pre><code class='language-java' lang='java'>package com.feige.utils;

import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import java.io.IOException;
import java.io.InputStream;
//sqlSessionFactory-sqlSession
public class MybatisUtils {
    private static SqlSessionFactory sqlSessionFactory;
    static {
        try {
            //使用mybatis第一步：获取sqlSessionFactory对象
            String resource = &quot;mybatis-config.xml&quot;;
            InputStream inputStream = Resources.getResourceAsStream(resource);
            sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    //既然有了sqlSessionFactory，顾名思义，我们就可以从中获得sqlSession的实例
    public static SqlSession getSqlSessioon(){
        return sqlSessionFactory.openSession();
    }
}

</code></pre>
<p>&nbsp;</p>
<h4>1.5、编写一个pojo（实体类）</h4>
<pre><code class='language-java' lang='java'>package com.feige.pojo;

public class User {
    private int id;
    private String username;
    private String pwd;

    public User() {
    }

    public User(int id, String username, String pwd) {
        this.id = id;
        this.username = username;
        this.pwd = pwd;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getPwd() {
        return pwd;
    }

    public void setPwd(String pwd) {
        this.pwd = pwd;
    }
    @Override
    public String toString() {
        return &quot;User{&quot; +
                &quot;id=&quot; + id +
                &quot;, username=&#39;&quot; + username + &#39;\&#39;&#39; +
                &quot;, pwd=&#39;&quot; + pwd + &#39;\&#39;&#39; +
                &#39;}&#39;;
    }
}

</code></pre>
<h4>1.6、新建一个userMapper接口</h4>
<pre><code class='language-java' lang='java'>package com.feige.dao;

import com.feige.pojo.User;

import java.util.List;
import java.util.Map;

public interface UserMapper {
    //查询全部用户
    List&lt;User&gt; getAllUser();
    //通过一个id查询一个用户
    User getUserById(int id);
    //通过id修改一个用户
    int updateUserById(Map map);
    //通过id删除一个用户
    int deleteUserById(int id);
    //插入一条数据
    int insertUser(User user);
}

</code></pre>
<h4>1.7、新建一个userMapper.xml文件</h4>
<pre><code class='language-xml' lang='xml'>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE mapper
        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;com.feige.dao.UserMapper&quot;&gt;
    &lt;!--每个语句要对应相应的标签select对应&lt;select&gt; delete 对应&lt;delete&gt; update 对应&lt;update&gt; insert 对应&lt;insert&gt;--&gt;
    &lt;select id=&quot;getAllUser&quot; resultType=&quot;com.feige.pojo.User&quot;&gt;
        select * from user
    &lt;/select&gt;
    &lt;select id=&quot;getUserById&quot; resultType=&quot;com.feige.pojo.User&quot; parameterType=&quot;int&quot;&gt;
        select * from user where id=#{id}
    &lt;/select&gt;
    &lt;update id=&quot;updateUserById&quot; parameterType=&quot;map&quot;&gt;
        update user set pwd=#{pwd} where id=#{id}
    &lt;/update&gt;
    &lt;delete id=&quot;deleteUserById&quot; parameterType=&quot;int&quot;&gt;
        delete from user where id=#{id}
    &lt;/delete&gt;
    &lt;insert id=&quot;insertUser&quot; parameterType=&quot;com.feige.pojo.User&quot;&gt;
        insert into user values (#{id},#{username},#{pwd})
    &lt;/insert&gt;
&lt;/mapper&gt;
</code></pre>
<h4>1.8、测试代码</h4>
<pre><code class='language-java' lang='java'>package com.feige.mybatisTest;

import com.feige.dao.UserMapper;
import com.feige.pojo.User;
import com.feige.utils.MybatisUtils;
import org.apache.ibatis.session.SqlSession;
import org.junit.Test;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MybatisTest {
    @Test
    public void mybatisTest1(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        List&lt;User&gt; allUser = mapper.getAllUser();
        for (User user : allUser) {
            System.out.println(user);
        }
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest2(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        User userById = mapper.getUserById(2018143114);
        System.out.println(userById);
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest3() {
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        //使用万能map传参
        Map&lt;String,Object&gt; map = new HashMap&lt;String, Object&gt;();
        map.put(&quot;pwd&quot;,2018143114);
        map.put(&quot;id&quot;,2018143114);

        int i = mapper.updateUserById(map);
        if (i &gt; 0) {
            System.out.println(&quot;修改成功！&quot;+i);
        }
        //增删改需要提交事务
        sqlSessioon.commit();

        sqlSessioon.close();

    }
    @Test
    public void mybatisTest4(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        int i = mapper.deleteUserById(2018143117);
        if (i &gt; 0) {
            System.out.println(&quot;删除成功！&quot;+i);
        }
        sqlSessioon.commit();
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest5(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        User user = new User(2018143117, &quot;杨帆东&quot;, &quot;2018143117&quot;);
        int i = mapper.insertUser(user);
        if (i &gt; 0) {
            System.out.println(&quot;插入成功！&quot;+i);
        }
        sqlSessioon.commit();
        sqlSessioon.close();

    }
}

</code></pre>
<p>&nbsp;</p>
<p>		</p>, 2020-02-24 03:15:45.0, 2020-02-24 03:15:50.0, admin, 0]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50030} Result: [7, mybatis, mybatis啊, 作者, 2020-02-24 03:27:18.0, 2020-02-24 03:27:18.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50030} Result: [8, springboot, aaa, [TOC]
                            #### Disabled options

                            - TeX (Based on KaTeX);
                            - Emoji;
                            - Task lists;
                            - HTML tags decode;
                            - Flowchart and Sequence Diagram;
                            #### Editor.md directory

                                editor.md/
                                        lib/
                                        css/
                                        scss/
                                        tests/
                                        fonts/
                                        images/
                                        plugins/
                                        examples/
                                        languages/
                                        editormd.js
                                        ...

                            ```html
                            <!-- English -->
                            <script src="../dist/js/languages/en.js"></script>

                            <!-- 繁體中文 -->
                            <script src="../dist/js/languages/zh-tw.js"></script>
                            ```
                        , 2020-02-25 03:39:36.0, 2020-02-25 22:38:07.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50030} Result: [9, mybatis, bbb, [TOC]

                            #### Disabled options

                            - TeX (Based on KaTeX);
                            - Emoji;
                            - Task lists;
                            - HTML tags decode;
                            - Flowchart and Sequence Diagram;

                            #### Editor.md directory

                                editor.md/
                                        lib/
                                        css/
                                        scss/
                                        tests/
                                        fonts/
                                        images/
                                        plugins/
                                        examples/
                                        languages/
                                        editormd.js
                                        ...

                            ```html
                            <!-- English -->
                            <script src="../dist/js/languages/en.js"></script>

                            <!-- 繁體中文 -->
                            <script src="../dist/js/languages/zh-tw.js"></script>
                            ```
                        , 2020-02-25 03:44:09.0, 2020-02-25 03:44:09.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50030} Result: [10, springboot, 飞哥, #大哥的Markdown, 2020-02-25 22:43:28.0, 2020-02-25 22:43:28.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50030} Result: [11, mybatis, 大哥, #飞哥的博客后台管理系统, 2020-02-25 22:49:26.0, 2020-02-25 22:49:26.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50030} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} Parameters : []
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} Types : []
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} executed. 0.622666 millis. select count(*) from `blog`
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50031} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50031} Header: [count(*)]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50031} Result: [13]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50031} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} Parameters : [0, 10]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} executed. 1.581777 millis. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog
         
            limit ?,?
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50032} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50032} Header: [id, type_name, title, content, create_time, change_time, author, view]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50032} Result: [1, springboot, springboot入门, springb自动装配, 2020-02-23 21:43:36.0, 2020-02-24 03:06:48.0, admin, 0]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50032} Result: [2, mybatis, 配置, 得到的, 2020-02-24 02:05:36.0, 2020-03-13 06:39:47.0, admin, 3]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50032} Result: [4, springMVC, mybatis-plus, ##飞哥, 2020-02-24 02:10:09.0, 2020-02-25 22:42:23.0, admin, 111]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50032} Result: [5, springboot, 人, 嗯嗯, 2020-02-24 03:07:20.0, 2020-02-24 03:07:20.0, admin, 2]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50032} Result: [6, mybatis, mybatis入门, <h2>1、Mybatis简介</h2>
<p><img src="https://blog.kuangstudy.com/usr/uploads/2019/10/1296229149.png" referrerpolicy="no-referrer" alt="1567007421329.png"></p>
<h3>什么是MyBatis</h3>
<ul>
<li>MyBatis 是一款优秀的<strong>持久层框架</strong></li>
<li>MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集的过程</li>
<li>MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 实体类 【Plain Old Java Objects,普通的 Java对象】映射成数据库中的记录。</li>
<li>MyBatis 本是apache的一个开源项目ibatis, 2010年这个项目由apache 迁移到了google code，并且改名为MyBatis 。</li>
<li>2013年11月迁移到<strong>Github</strong> .</li>
<li>Mybatis官方文档 : <a href='http://www.mybatis.org/mybatis-3/zh/index.html' target='_blank' class='url'>http://www.mybatis.org/mybatis-3/zh/index.html</a></li>
<li>GitHub : <a href='https://github.com/mybatis/mybatis-3' target='_blank' class='url'>https://github.com/mybatis/mybatis-3</a></li>

</ul>
<h3>持久化</h3>
<ul>
<li><p><strong>持久化是将程序数据在持久状态和瞬时状态间转换的机制。</strong></p>
<ul>
<li>即把数据（如内存中的对象）保存到可永久保存的存储设备中（如磁盘）。持久化的主要应用是将内存中的对象存储在数据库中，或者存储在磁盘文件中、XML数据文件中等等。</li>
<li>JDBC就是一种持久化机制。文件IO也是一种持久化机制。</li>
<li>在生活中 : 将鲜肉冷藏，吃的时候再解冻的方法也是。将水果做成罐头的方法也是。</li>

</ul>
</li>
<li><p><strong>为什么需要持久化服务呢？那是由于内存本身的缺陷引起的</strong></p>
<ul>
<li>内存断电后数据会丢失，但有一些对象是无论如何都不能丢失的，比如银行账号等，遗憾的是，人们还无法保证内存永不掉电。</li>
<li>内存过于昂贵，与硬盘、光盘等外存相比，内存的价格要高2~3个数量级，而且维持成本也高，至少需要一直供电吧。所以即使对象不需要永久保存，也会因为内存的容量限制不能一直呆在内存中，需要持久化来缓存到外存。</li>

</ul>
</li>

</ul>
<h3>持久层</h3>
<ul>
<li><p>什么是持久层？</p>
<ul>
<li>完成持久化工作的代码块 . ----&gt; dao层 【DAO (Data Access Object) 数据访问对象】</li>
<li>大多数情况下特别是企业级应用，数据持久化往往也就意味着将内存中的数据保存到磁盘上加以固化，而持久化的实现过程则大多通过各种<strong>关系数据库</strong>来完成。</li>
<li>不过这里有一个字需要特别强调，也就是所谓的“层”。对于应用系统而言，数据持久功能大多是必不可少的组成部分。也就是说，我们的系统中，已经天然的具备了“持久层”概念？也许是，但也许实际情况并非如此。之所以要独立出一个“持久层”的概念,而不是“持久模块”，“持久单元”，也就意味着，我们的系统架构中，应该有一个相对独立的逻辑层面，专著于数据持久化逻辑的实现.</li>
<li>与系统其他部分相对而言，这个层面应该具有一个较为清晰和严格的逻辑边界。 【说白了就是用来操作数据库存在的！】</li>

</ul>
</li>

</ul>
<h3>为什么需要Mybatis</h3>
<ul>
<li><p>Mybatis就是帮助程序猿将数据存入数据库中 , 和从数据库中取数据 .</p>
</li>
<li><p>传统的jdbc操作 , 有很多重复代码块 .比如 : 数据取出时的封装 , 数据库的建立连接等等... , 通过框架可以减少重复代码,提高开发效率 .</p>
</li>
<li><p>MyBatis 是一个半自动化的<strong>ORM框架 (Object Relationship Mapping) --&gt;对象关系映射</strong></p>
</li>
<li><p>所有的事情，不用Mybatis依旧可以做到，只是用了它，所有实现会更加简单！<strong>技术没有高低之分，只有使用这个技术的人有高低之别</strong></p>
</li>
<li><p>MyBatis的优点</p>
<ul>
<li>简单易学：本身就很小且简单。没有任何第三方依赖，最简单安装只要两个jar文件+配置几个sql映射文件就可以了，易于学习，易于使用，通过文档和源代码，可以比较完全的掌握它的设计思路和实现。</li>
<li>灵活：mybatis不会对应用程序或者数据库的现有设计强加任何影响。 sql写在xml里，便于统一管理和优化。通过sql语句可以满足操作数据库的所有需求。</li>
<li>解除sql与程序代码的耦合：通过提供DAO层，将业务逻辑和数据访问逻辑分离，使系统的设计更清晰，更易维护，更易单元测试。sql和代码的分离，提高了可维护性。</li>
<li>提供xml标签，支持编写动态sql。</li>
<li>.......</li>

</ul>
</li>
<li><p>最重要的一点，使用的人多！公司需要！</p>
</li>
<li><p>环境说明：</p>
<ul>
<li>jdk 8 +</li>
<li>MySQL 5.7.19</li>
<li>maven-3.6.0</li>
<li>IDEA</li>

</ul>
<p>学习前需要掌握：</p>
<ul>
<li>JDBC</li>
<li>MySQL</li>
<li>Java 基础</li>
<li>Maven</li>
<li>Junit</li>

</ul>
</li>

</ul>
<h2>2、mybatis crud（实现增删改查）</h2>
<h4>1.1、创建一个maven项目</h4>
<p>		导入依赖</p>
<pre><code class='language-xml' lang='xml'>&lt;dependencies&gt;
    &lt;!--mysql驱动--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;mysql&lt;/groupId&gt;
        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
        &lt;version&gt;5.1.47&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;!--mybatis支持--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.mybatis&lt;/groupId&gt;
        &lt;artifactId&gt;mybatis&lt;/artifactId&gt;
        &lt;version&gt;3.5.2&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;!--junit支持--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;junit&lt;/groupId&gt;
        &lt;artifactId&gt;junit&lt;/artifactId&gt;
        &lt;version&gt;4.12&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
</code></pre>
<p>注意点 : pom文件的设置中需要设置资源过滤 , 否则会有资源文件打包不成功问题，导致项目无法运行；</p>
<pre><code class='language-xml' lang='xml'>&lt;build&gt;
    &lt;resources&gt;
        &lt;resource&gt;
            &lt;directory&gt;src/main/java&lt;/directory&gt;
            &lt;includes&gt;
                &lt;include&gt;**/*.properties&lt;/include&gt;
                &lt;include&gt;**/*.xml&lt;/include&gt;
            &lt;/includes&gt;
            &lt;filtering&gt;true&lt;/filtering&gt;
        &lt;/resource&gt;
    &lt;/resources&gt;
&lt;/build&gt;
</code></pre>
<p>&nbsp;</p>
<h4>1.2、创建数据库和表</h4>
<pre><code class='language-sql' lang='sql'>CREATE DATABASE mybatis CHARACTER SET utf8;
CREATE TABLE USER(
	id INT PRIMARY KEY,
	username VARCHAR(15) NOT NULL,
	pwd VARCHAR(20) NOT NULL
)
INSERT INTO USER VALUES(2018143114,&#39;张三&#39;,&#39;123456&#39;),(2018143115,&#39;李四&#39;,&#39;1234567&#39;),(2018143116,&#39;王五&#39;,&#39;147258&#39;);
SELECT * FROM USER;
</code></pre>
<h4>1.3、编写mybatis配置文件</h4>
<p>在resource里新建一个mybatis-config.xml文件</p>
<pre><code class='language-xml' lang='xml'>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE configuration
        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;
&lt;configuration&gt;
    &lt;environments default=&quot;development&quot;&gt;
        &lt;environment id=&quot;development&quot;&gt;
            &lt;transactionManager type=&quot;JDBC&quot;/&gt;
            &lt;dataSource type=&quot;POOLED&quot;&gt;
                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;
                &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;amp;useUnicode=true&amp;amp;characterEncoding=utf8&quot;/&gt;
                &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;
                &lt;property name=&quot;password&quot; value=&quot;hufei169357&quot;/&gt;
            &lt;/dataSource&gt;
        &lt;/environment&gt;
    &lt;/environments&gt;
    &lt;mappers&gt;
        &lt;mapper resource=&quot;com/feige/dao/userMapper.xml&quot;/&gt;
    &lt;/mappers&gt;
&lt;/configuration&gt;
</code></pre>
<h4>1.4、新建一个工具类用来获取SqlSession对象</h4>
<pre><code class='language-java' lang='java'>package com.feige.utils;

import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import java.io.IOException;
import java.io.InputStream;
//sqlSessionFactory-sqlSession
public class MybatisUtils {
    private static SqlSessionFactory sqlSessionFactory;
    static {
        try {
            //使用mybatis第一步：获取sqlSessionFactory对象
            String resource = &quot;mybatis-config.xml&quot;;
            InputStream inputStream = Resources.getResourceAsStream(resource);
            sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    //既然有了sqlSessionFactory，顾名思义，我们就可以从中获得sqlSession的实例
    public static SqlSession getSqlSessioon(){
        return sqlSessionFactory.openSession();
    }
}

</code></pre>
<p>&nbsp;</p>
<h4>1.5、编写一个pojo（实体类）</h4>
<pre><code class='language-java' lang='java'>package com.feige.pojo;

public class User {
    private int id;
    private String username;
    private String pwd;

    public User() {
    }

    public User(int id, String username, String pwd) {
        this.id = id;
        this.username = username;
        this.pwd = pwd;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getPwd() {
        return pwd;
    }

    public void setPwd(String pwd) {
        this.pwd = pwd;
    }
    @Override
    public String toString() {
        return &quot;User{&quot; +
                &quot;id=&quot; + id +
                &quot;, username=&#39;&quot; + username + &#39;\&#39;&#39; +
                &quot;, pwd=&#39;&quot; + pwd + &#39;\&#39;&#39; +
                &#39;}&#39;;
    }
}

</code></pre>
<h4>1.6、新建一个userMapper接口</h4>
<pre><code class='language-java' lang='java'>package com.feige.dao;

import com.feige.pojo.User;

import java.util.List;
import java.util.Map;

public interface UserMapper {
    //查询全部用户
    List&lt;User&gt; getAllUser();
    //通过一个id查询一个用户
    User getUserById(int id);
    //通过id修改一个用户
    int updateUserById(Map map);
    //通过id删除一个用户
    int deleteUserById(int id);
    //插入一条数据
    int insertUser(User user);
}

</code></pre>
<h4>1.7、新建一个userMapper.xml文件</h4>
<pre><code class='language-xml' lang='xml'>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE mapper
        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;com.feige.dao.UserMapper&quot;&gt;
    &lt;!--每个语句要对应相应的标签select对应&lt;select&gt; delete 对应&lt;delete&gt; update 对应&lt;update&gt; insert 对应&lt;insert&gt;--&gt;
    &lt;select id=&quot;getAllUser&quot; resultType=&quot;com.feige.pojo.User&quot;&gt;
        select * from user
    &lt;/select&gt;
    &lt;select id=&quot;getUserById&quot; resultType=&quot;com.feige.pojo.User&quot; parameterType=&quot;int&quot;&gt;
        select * from user where id=#{id}
    &lt;/select&gt;
    &lt;update id=&quot;updateUserById&quot; parameterType=&quot;map&quot;&gt;
        update user set pwd=#{pwd} where id=#{id}
    &lt;/update&gt;
    &lt;delete id=&quot;deleteUserById&quot; parameterType=&quot;int&quot;&gt;
        delete from user where id=#{id}
    &lt;/delete&gt;
    &lt;insert id=&quot;insertUser&quot; parameterType=&quot;com.feige.pojo.User&quot;&gt;
        insert into user values (#{id},#{username},#{pwd})
    &lt;/insert&gt;
&lt;/mapper&gt;
</code></pre>
<h4>1.8、测试代码</h4>
<pre><code class='language-java' lang='java'>package com.feige.mybatisTest;

import com.feige.dao.UserMapper;
import com.feige.pojo.User;
import com.feige.utils.MybatisUtils;
import org.apache.ibatis.session.SqlSession;
import org.junit.Test;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MybatisTest {
    @Test
    public void mybatisTest1(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        List&lt;User&gt; allUser = mapper.getAllUser();
        for (User user : allUser) {
            System.out.println(user);
        }
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest2(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        User userById = mapper.getUserById(2018143114);
        System.out.println(userById);
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest3() {
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        //使用万能map传参
        Map&lt;String,Object&gt; map = new HashMap&lt;String, Object&gt;();
        map.put(&quot;pwd&quot;,2018143114);
        map.put(&quot;id&quot;,2018143114);

        int i = mapper.updateUserById(map);
        if (i &gt; 0) {
            System.out.println(&quot;修改成功！&quot;+i);
        }
        //增删改需要提交事务
        sqlSessioon.commit();

        sqlSessioon.close();

    }
    @Test
    public void mybatisTest4(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        int i = mapper.deleteUserById(2018143117);
        if (i &gt; 0) {
            System.out.println(&quot;删除成功！&quot;+i);
        }
        sqlSessioon.commit();
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest5(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        User user = new User(2018143117, &quot;杨帆东&quot;, &quot;2018143117&quot;);
        int i = mapper.insertUser(user);
        if (i &gt; 0) {
            System.out.println(&quot;插入成功！&quot;+i);
        }
        sqlSessioon.commit();
        sqlSessioon.close();

    }
}

</code></pre>
<p>&nbsp;</p>
<p>		</p>, 2020-02-24 03:15:45.0, 2020-02-24 03:15:50.0, admin, 0]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50032} Result: [7, mybatis, mybatis啊, 作者, 2020-02-24 03:27:18.0, 2020-02-24 03:27:18.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50032} Result: [8, springboot, aaa, [TOC]
                            #### Disabled options

                            - TeX (Based on KaTeX);
                            - Emoji;
                            - Task lists;
                            - HTML tags decode;
                            - Flowchart and Sequence Diagram;
                            #### Editor.md directory

                                editor.md/
                                        lib/
                                        css/
                                        scss/
                                        tests/
                                        fonts/
                                        images/
                                        plugins/
                                        examples/
                                        languages/
                                        editormd.js
                                        ...

                            ```html
                            <!-- English -->
                            <script src="../dist/js/languages/en.js"></script>

                            <!-- 繁體中文 -->
                            <script src="../dist/js/languages/zh-tw.js"></script>
                            ```
                        , 2020-02-25 03:39:36.0, 2020-02-25 22:38:07.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50032} Result: [9, mybatis, bbb, [TOC]

                            #### Disabled options

                            - TeX (Based on KaTeX);
                            - Emoji;
                            - Task lists;
                            - HTML tags decode;
                            - Flowchart and Sequence Diagram;

                            #### Editor.md directory

                                editor.md/
                                        lib/
                                        css/
                                        scss/
                                        tests/
                                        fonts/
                                        images/
                                        plugins/
                                        examples/
                                        languages/
                                        editormd.js
                                        ...

                            ```html
                            <!-- English -->
                            <script src="../dist/js/languages/en.js"></script>

                            <!-- 繁體中文 -->
                            <script src="../dist/js/languages/zh-tw.js"></script>
                            ```
                        , 2020-02-25 03:44:09.0, 2020-02-25 03:44:09.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50032} Result: [10, springboot, 飞哥, #大哥的Markdown, 2020-02-25 22:43:28.0, 2020-02-25 22:43:28.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50032} Result: [11, mybatis, 大哥, #飞哥的博客后台管理系统, 2020-02-25 22:49:26.0, 2020-02-25 22:49:26.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50032} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} Parameters : []
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} Types : []
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} executed. 0.410222 millis. select count(*) from `blog`
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50033} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50033} Header: [count(*)]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50033} Result: [13]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50033} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} Parameters : [0, 10]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} executed. 1.355999 millis. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog
         
            limit ?,?
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50034} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50034} Header: [id, type_name, title, content, create_time, change_time, author, view]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50034} Result: [1, springboot, springboot入门, springb自动装配, 2020-02-23 21:43:36.0, 2020-02-24 03:06:48.0, admin, 0]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50034} Result: [2, mybatis, 配置, 得到的, 2020-02-24 02:05:36.0, 2020-03-13 06:39:47.0, admin, 3]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50034} Result: [4, springMVC, mybatis-plus, ##飞哥, 2020-02-24 02:10:09.0, 2020-02-25 22:42:23.0, admin, 111]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50034} Result: [5, springboot, 人, 嗯嗯, 2020-02-24 03:07:20.0, 2020-02-24 03:07:20.0, admin, 2]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50034} Result: [6, mybatis, mybatis入门, <h2>1、Mybatis简介</h2>
<p><img src="https://blog.kuangstudy.com/usr/uploads/2019/10/1296229149.png" referrerpolicy="no-referrer" alt="1567007421329.png"></p>
<h3>什么是MyBatis</h3>
<ul>
<li>MyBatis 是一款优秀的<strong>持久层框架</strong></li>
<li>MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集的过程</li>
<li>MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 实体类 【Plain Old Java Objects,普通的 Java对象】映射成数据库中的记录。</li>
<li>MyBatis 本是apache的一个开源项目ibatis, 2010年这个项目由apache 迁移到了google code，并且改名为MyBatis 。</li>
<li>2013年11月迁移到<strong>Github</strong> .</li>
<li>Mybatis官方文档 : <a href='http://www.mybatis.org/mybatis-3/zh/index.html' target='_blank' class='url'>http://www.mybatis.org/mybatis-3/zh/index.html</a></li>
<li>GitHub : <a href='https://github.com/mybatis/mybatis-3' target='_blank' class='url'>https://github.com/mybatis/mybatis-3</a></li>

</ul>
<h3>持久化</h3>
<ul>
<li><p><strong>持久化是将程序数据在持久状态和瞬时状态间转换的机制。</strong></p>
<ul>
<li>即把数据（如内存中的对象）保存到可永久保存的存储设备中（如磁盘）。持久化的主要应用是将内存中的对象存储在数据库中，或者存储在磁盘文件中、XML数据文件中等等。</li>
<li>JDBC就是一种持久化机制。文件IO也是一种持久化机制。</li>
<li>在生活中 : 将鲜肉冷藏，吃的时候再解冻的方法也是。将水果做成罐头的方法也是。</li>

</ul>
</li>
<li><p><strong>为什么需要持久化服务呢？那是由于内存本身的缺陷引起的</strong></p>
<ul>
<li>内存断电后数据会丢失，但有一些对象是无论如何都不能丢失的，比如银行账号等，遗憾的是，人们还无法保证内存永不掉电。</li>
<li>内存过于昂贵，与硬盘、光盘等外存相比，内存的价格要高2~3个数量级，而且维持成本也高，至少需要一直供电吧。所以即使对象不需要永久保存，也会因为内存的容量限制不能一直呆在内存中，需要持久化来缓存到外存。</li>

</ul>
</li>

</ul>
<h3>持久层</h3>
<ul>
<li><p>什么是持久层？</p>
<ul>
<li>完成持久化工作的代码块 . ----&gt; dao层 【DAO (Data Access Object) 数据访问对象】</li>
<li>大多数情况下特别是企业级应用，数据持久化往往也就意味着将内存中的数据保存到磁盘上加以固化，而持久化的实现过程则大多通过各种<strong>关系数据库</strong>来完成。</li>
<li>不过这里有一个字需要特别强调，也就是所谓的“层”。对于应用系统而言，数据持久功能大多是必不可少的组成部分。也就是说，我们的系统中，已经天然的具备了“持久层”概念？也许是，但也许实际情况并非如此。之所以要独立出一个“持久层”的概念,而不是“持久模块”，“持久单元”，也就意味着，我们的系统架构中，应该有一个相对独立的逻辑层面，专著于数据持久化逻辑的实现.</li>
<li>与系统其他部分相对而言，这个层面应该具有一个较为清晰和严格的逻辑边界。 【说白了就是用来操作数据库存在的！】</li>

</ul>
</li>

</ul>
<h3>为什么需要Mybatis</h3>
<ul>
<li><p>Mybatis就是帮助程序猿将数据存入数据库中 , 和从数据库中取数据 .</p>
</li>
<li><p>传统的jdbc操作 , 有很多重复代码块 .比如 : 数据取出时的封装 , 数据库的建立连接等等... , 通过框架可以减少重复代码,提高开发效率 .</p>
</li>
<li><p>MyBatis 是一个半自动化的<strong>ORM框架 (Object Relationship Mapping) --&gt;对象关系映射</strong></p>
</li>
<li><p>所有的事情，不用Mybatis依旧可以做到，只是用了它，所有实现会更加简单！<strong>技术没有高低之分，只有使用这个技术的人有高低之别</strong></p>
</li>
<li><p>MyBatis的优点</p>
<ul>
<li>简单易学：本身就很小且简单。没有任何第三方依赖，最简单安装只要两个jar文件+配置几个sql映射文件就可以了，易于学习，易于使用，通过文档和源代码，可以比较完全的掌握它的设计思路和实现。</li>
<li>灵活：mybatis不会对应用程序或者数据库的现有设计强加任何影响。 sql写在xml里，便于统一管理和优化。通过sql语句可以满足操作数据库的所有需求。</li>
<li>解除sql与程序代码的耦合：通过提供DAO层，将业务逻辑和数据访问逻辑分离，使系统的设计更清晰，更易维护，更易单元测试。sql和代码的分离，提高了可维护性。</li>
<li>提供xml标签，支持编写动态sql。</li>
<li>.......</li>

</ul>
</li>
<li><p>最重要的一点，使用的人多！公司需要！</p>
</li>
<li><p>环境说明：</p>
<ul>
<li>jdk 8 +</li>
<li>MySQL 5.7.19</li>
<li>maven-3.6.0</li>
<li>IDEA</li>

</ul>
<p>学习前需要掌握：</p>
<ul>
<li>JDBC</li>
<li>MySQL</li>
<li>Java 基础</li>
<li>Maven</li>
<li>Junit</li>

</ul>
</li>

</ul>
<h2>2、mybatis crud（实现增删改查）</h2>
<h4>1.1、创建一个maven项目</h4>
<p>		导入依赖</p>
<pre><code class='language-xml' lang='xml'>&lt;dependencies&gt;
    &lt;!--mysql驱动--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;mysql&lt;/groupId&gt;
        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
        &lt;version&gt;5.1.47&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;!--mybatis支持--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.mybatis&lt;/groupId&gt;
        &lt;artifactId&gt;mybatis&lt;/artifactId&gt;
        &lt;version&gt;3.5.2&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;!--junit支持--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;junit&lt;/groupId&gt;
        &lt;artifactId&gt;junit&lt;/artifactId&gt;
        &lt;version&gt;4.12&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
</code></pre>
<p>注意点 : pom文件的设置中需要设置资源过滤 , 否则会有资源文件打包不成功问题，导致项目无法运行；</p>
<pre><code class='language-xml' lang='xml'>&lt;build&gt;
    &lt;resources&gt;
        &lt;resource&gt;
            &lt;directory&gt;src/main/java&lt;/directory&gt;
            &lt;includes&gt;
                &lt;include&gt;**/*.properties&lt;/include&gt;
                &lt;include&gt;**/*.xml&lt;/include&gt;
            &lt;/includes&gt;
            &lt;filtering&gt;true&lt;/filtering&gt;
        &lt;/resource&gt;
    &lt;/resources&gt;
&lt;/build&gt;
</code></pre>
<p>&nbsp;</p>
<h4>1.2、创建数据库和表</h4>
<pre><code class='language-sql' lang='sql'>CREATE DATABASE mybatis CHARACTER SET utf8;
CREATE TABLE USER(
	id INT PRIMARY KEY,
	username VARCHAR(15) NOT NULL,
	pwd VARCHAR(20) NOT NULL
)
INSERT INTO USER VALUES(2018143114,&#39;张三&#39;,&#39;123456&#39;),(2018143115,&#39;李四&#39;,&#39;1234567&#39;),(2018143116,&#39;王五&#39;,&#39;147258&#39;);
SELECT * FROM USER;
</code></pre>
<h4>1.3、编写mybatis配置文件</h4>
<p>在resource里新建一个mybatis-config.xml文件</p>
<pre><code class='language-xml' lang='xml'>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE configuration
        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;
&lt;configuration&gt;
    &lt;environments default=&quot;development&quot;&gt;
        &lt;environment id=&quot;development&quot;&gt;
            &lt;transactionManager type=&quot;JDBC&quot;/&gt;
            &lt;dataSource type=&quot;POOLED&quot;&gt;
                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;
                &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;amp;useUnicode=true&amp;amp;characterEncoding=utf8&quot;/&gt;
                &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;
                &lt;property name=&quot;password&quot; value=&quot;hufei169357&quot;/&gt;
            &lt;/dataSource&gt;
        &lt;/environment&gt;
    &lt;/environments&gt;
    &lt;mappers&gt;
        &lt;mapper resource=&quot;com/feige/dao/userMapper.xml&quot;/&gt;
    &lt;/mappers&gt;
&lt;/configuration&gt;
</code></pre>
<h4>1.4、新建一个工具类用来获取SqlSession对象</h4>
<pre><code class='language-java' lang='java'>package com.feige.utils;

import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import java.io.IOException;
import java.io.InputStream;
//sqlSessionFactory-sqlSession
public class MybatisUtils {
    private static SqlSessionFactory sqlSessionFactory;
    static {
        try {
            //使用mybatis第一步：获取sqlSessionFactory对象
            String resource = &quot;mybatis-config.xml&quot;;
            InputStream inputStream = Resources.getResourceAsStream(resource);
            sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    //既然有了sqlSessionFactory，顾名思义，我们就可以从中获得sqlSession的实例
    public static SqlSession getSqlSessioon(){
        return sqlSessionFactory.openSession();
    }
}

</code></pre>
<p>&nbsp;</p>
<h4>1.5、编写一个pojo（实体类）</h4>
<pre><code class='language-java' lang='java'>package com.feige.pojo;

public class User {
    private int id;
    private String username;
    private String pwd;

    public User() {
    }

    public User(int id, String username, String pwd) {
        this.id = id;
        this.username = username;
        this.pwd = pwd;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getPwd() {
        return pwd;
    }

    public void setPwd(String pwd) {
        this.pwd = pwd;
    }
    @Override
    public String toString() {
        return &quot;User{&quot; +
                &quot;id=&quot; + id +
                &quot;, username=&#39;&quot; + username + &#39;\&#39;&#39; +
                &quot;, pwd=&#39;&quot; + pwd + &#39;\&#39;&#39; +
                &#39;}&#39;;
    }
}

</code></pre>
<h4>1.6、新建一个userMapper接口</h4>
<pre><code class='language-java' lang='java'>package com.feige.dao;

import com.feige.pojo.User;

import java.util.List;
import java.util.Map;

public interface UserMapper {
    //查询全部用户
    List&lt;User&gt; getAllUser();
    //通过一个id查询一个用户
    User getUserById(int id);
    //通过id修改一个用户
    int updateUserById(Map map);
    //通过id删除一个用户
    int deleteUserById(int id);
    //插入一条数据
    int insertUser(User user);
}

</code></pre>
<h4>1.7、新建一个userMapper.xml文件</h4>
<pre><code class='language-xml' lang='xml'>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE mapper
        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;com.feige.dao.UserMapper&quot;&gt;
    &lt;!--每个语句要对应相应的标签select对应&lt;select&gt; delete 对应&lt;delete&gt; update 对应&lt;update&gt; insert 对应&lt;insert&gt;--&gt;
    &lt;select id=&quot;getAllUser&quot; resultType=&quot;com.feige.pojo.User&quot;&gt;
        select * from user
    &lt;/select&gt;
    &lt;select id=&quot;getUserById&quot; resultType=&quot;com.feige.pojo.User&quot; parameterType=&quot;int&quot;&gt;
        select * from user where id=#{id}
    &lt;/select&gt;
    &lt;update id=&quot;updateUserById&quot; parameterType=&quot;map&quot;&gt;
        update user set pwd=#{pwd} where id=#{id}
    &lt;/update&gt;
    &lt;delete id=&quot;deleteUserById&quot; parameterType=&quot;int&quot;&gt;
        delete from user where id=#{id}
    &lt;/delete&gt;
    &lt;insert id=&quot;insertUser&quot; parameterType=&quot;com.feige.pojo.User&quot;&gt;
        insert into user values (#{id},#{username},#{pwd})
    &lt;/insert&gt;
&lt;/mapper&gt;
</code></pre>
<h4>1.8、测试代码</h4>
<pre><code class='language-java' lang='java'>package com.feige.mybatisTest;

import com.feige.dao.UserMapper;
import com.feige.pojo.User;
import com.feige.utils.MybatisUtils;
import org.apache.ibatis.session.SqlSession;
import org.junit.Test;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MybatisTest {
    @Test
    public void mybatisTest1(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        List&lt;User&gt; allUser = mapper.getAllUser();
        for (User user : allUser) {
            System.out.println(user);
        }
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest2(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        User userById = mapper.getUserById(2018143114);
        System.out.println(userById);
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest3() {
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        //使用万能map传参
        Map&lt;String,Object&gt; map = new HashMap&lt;String, Object&gt;();
        map.put(&quot;pwd&quot;,2018143114);
        map.put(&quot;id&quot;,2018143114);

        int i = mapper.updateUserById(map);
        if (i &gt; 0) {
            System.out.println(&quot;修改成功！&quot;+i);
        }
        //增删改需要提交事务
        sqlSessioon.commit();

        sqlSessioon.close();

    }
    @Test
    public void mybatisTest4(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        int i = mapper.deleteUserById(2018143117);
        if (i &gt; 0) {
            System.out.println(&quot;删除成功！&quot;+i);
        }
        sqlSessioon.commit();
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest5(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        User user = new User(2018143117, &quot;杨帆东&quot;, &quot;2018143117&quot;);
        int i = mapper.insertUser(user);
        if (i &gt; 0) {
            System.out.println(&quot;插入成功！&quot;+i);
        }
        sqlSessioon.commit();
        sqlSessioon.close();

    }
}

</code></pre>
<p>&nbsp;</p>
<p>		</p>, 2020-02-24 03:15:45.0, 2020-02-24 03:15:50.0, admin, 0]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50034} Result: [7, mybatis, mybatis啊, 作者, 2020-02-24 03:27:18.0, 2020-02-24 03:27:18.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50034} Result: [8, springboot, aaa, [TOC]
                            #### Disabled options

                            - TeX (Based on KaTeX);
                            - Emoji;
                            - Task lists;
                            - HTML tags decode;
                            - Flowchart and Sequence Diagram;
                            #### Editor.md directory

                                editor.md/
                                        lib/
                                        css/
                                        scss/
                                        tests/
                                        fonts/
                                        images/
                                        plugins/
                                        examples/
                                        languages/
                                        editormd.js
                                        ...

                            ```html
                            <!-- English -->
                            <script src="../dist/js/languages/en.js"></script>

                            <!-- 繁體中文 -->
                            <script src="../dist/js/languages/zh-tw.js"></script>
                            ```
                        , 2020-02-25 03:39:36.0, 2020-02-25 22:38:07.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50034} Result: [9, mybatis, bbb, [TOC]

                            #### Disabled options

                            - TeX (Based on KaTeX);
                            - Emoji;
                            - Task lists;
                            - HTML tags decode;
                            - Flowchart and Sequence Diagram;

                            #### Editor.md directory

                                editor.md/
                                        lib/
                                        css/
                                        scss/
                                        tests/
                                        fonts/
                                        images/
                                        plugins/
                                        examples/
                                        languages/
                                        editormd.js
                                        ...

                            ```html
                            <!-- English -->
                            <script src="../dist/js/languages/en.js"></script>

                            <!-- 繁體中文 -->
                            <script src="../dist/js/languages/zh-tw.js"></script>
                            ```
                        , 2020-02-25 03:44:09.0, 2020-02-25 03:44:09.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50034} Result: [10, springboot, 飞哥, #大哥的Markdown, 2020-02-25 22:43:28.0, 2020-02-25 22:43:28.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50034} Result: [11, mybatis, 大哥, #飞哥的博客后台管理系统, 2020-02-25 22:49:26.0, 2020-02-25 22:49:26.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50034} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} Parameters : []
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} Types : []
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} executed. 1.385777 millis. select count(*) from `blog`
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50035} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50035} Header: [count(*)]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50035} Result: [13]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50035} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} Parameters : [0, 10]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} executed. 0.949777 millis. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog
         
            limit ?,?
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50036} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50036} Header: [id, type_name, title, content, create_time, change_time, author, view]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50036} Result: [1, springboot, springboot入门, springb自动装配, 2020-02-23 21:43:36.0, 2020-02-24 03:06:48.0, admin, 0]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50036} Result: [2, mybatis, 配置, 得到的, 2020-02-24 02:05:36.0, 2020-03-13 06:39:47.0, admin, 3]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50036} Result: [4, springMVC, mybatis-plus, ##飞哥, 2020-02-24 02:10:09.0, 2020-02-25 22:42:23.0, admin, 111]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50036} Result: [5, springboot, 人, 嗯嗯, 2020-02-24 03:07:20.0, 2020-02-24 03:07:20.0, admin, 2]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50036} Result: [6, mybatis, mybatis入门, <h2>1、Mybatis简介</h2>
<p><img src="https://blog.kuangstudy.com/usr/uploads/2019/10/1296229149.png" referrerpolicy="no-referrer" alt="1567007421329.png"></p>
<h3>什么是MyBatis</h3>
<ul>
<li>MyBatis 是一款优秀的<strong>持久层框架</strong></li>
<li>MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集的过程</li>
<li>MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 实体类 【Plain Old Java Objects,普通的 Java对象】映射成数据库中的记录。</li>
<li>MyBatis 本是apache的一个开源项目ibatis, 2010年这个项目由apache 迁移到了google code，并且改名为MyBatis 。</li>
<li>2013年11月迁移到<strong>Github</strong> .</li>
<li>Mybatis官方文档 : <a href='http://www.mybatis.org/mybatis-3/zh/index.html' target='_blank' class='url'>http://www.mybatis.org/mybatis-3/zh/index.html</a></li>
<li>GitHub : <a href='https://github.com/mybatis/mybatis-3' target='_blank' class='url'>https://github.com/mybatis/mybatis-3</a></li>

</ul>
<h3>持久化</h3>
<ul>
<li><p><strong>持久化是将程序数据在持久状态和瞬时状态间转换的机制。</strong></p>
<ul>
<li>即把数据（如内存中的对象）保存到可永久保存的存储设备中（如磁盘）。持久化的主要应用是将内存中的对象存储在数据库中，或者存储在磁盘文件中、XML数据文件中等等。</li>
<li>JDBC就是一种持久化机制。文件IO也是一种持久化机制。</li>
<li>在生活中 : 将鲜肉冷藏，吃的时候再解冻的方法也是。将水果做成罐头的方法也是。</li>

</ul>
</li>
<li><p><strong>为什么需要持久化服务呢？那是由于内存本身的缺陷引起的</strong></p>
<ul>
<li>内存断电后数据会丢失，但有一些对象是无论如何都不能丢失的，比如银行账号等，遗憾的是，人们还无法保证内存永不掉电。</li>
<li>内存过于昂贵，与硬盘、光盘等外存相比，内存的价格要高2~3个数量级，而且维持成本也高，至少需要一直供电吧。所以即使对象不需要永久保存，也会因为内存的容量限制不能一直呆在内存中，需要持久化来缓存到外存。</li>

</ul>
</li>

</ul>
<h3>持久层</h3>
<ul>
<li><p>什么是持久层？</p>
<ul>
<li>完成持久化工作的代码块 . ----&gt; dao层 【DAO (Data Access Object) 数据访问对象】</li>
<li>大多数情况下特别是企业级应用，数据持久化往往也就意味着将内存中的数据保存到磁盘上加以固化，而持久化的实现过程则大多通过各种<strong>关系数据库</strong>来完成。</li>
<li>不过这里有一个字需要特别强调，也就是所谓的“层”。对于应用系统而言，数据持久功能大多是必不可少的组成部分。也就是说，我们的系统中，已经天然的具备了“持久层”概念？也许是，但也许实际情况并非如此。之所以要独立出一个“持久层”的概念,而不是“持久模块”，“持久单元”，也就意味着，我们的系统架构中，应该有一个相对独立的逻辑层面，专著于数据持久化逻辑的实现.</li>
<li>与系统其他部分相对而言，这个层面应该具有一个较为清晰和严格的逻辑边界。 【说白了就是用来操作数据库存在的！】</li>

</ul>
</li>

</ul>
<h3>为什么需要Mybatis</h3>
<ul>
<li><p>Mybatis就是帮助程序猿将数据存入数据库中 , 和从数据库中取数据 .</p>
</li>
<li><p>传统的jdbc操作 , 有很多重复代码块 .比如 : 数据取出时的封装 , 数据库的建立连接等等... , 通过框架可以减少重复代码,提高开发效率 .</p>
</li>
<li><p>MyBatis 是一个半自动化的<strong>ORM框架 (Object Relationship Mapping) --&gt;对象关系映射</strong></p>
</li>
<li><p>所有的事情，不用Mybatis依旧可以做到，只是用了它，所有实现会更加简单！<strong>技术没有高低之分，只有使用这个技术的人有高低之别</strong></p>
</li>
<li><p>MyBatis的优点</p>
<ul>
<li>简单易学：本身就很小且简单。没有任何第三方依赖，最简单安装只要两个jar文件+配置几个sql映射文件就可以了，易于学习，易于使用，通过文档和源代码，可以比较完全的掌握它的设计思路和实现。</li>
<li>灵活：mybatis不会对应用程序或者数据库的现有设计强加任何影响。 sql写在xml里，便于统一管理和优化。通过sql语句可以满足操作数据库的所有需求。</li>
<li>解除sql与程序代码的耦合：通过提供DAO层，将业务逻辑和数据访问逻辑分离，使系统的设计更清晰，更易维护，更易单元测试。sql和代码的分离，提高了可维护性。</li>
<li>提供xml标签，支持编写动态sql。</li>
<li>.......</li>

</ul>
</li>
<li><p>最重要的一点，使用的人多！公司需要！</p>
</li>
<li><p>环境说明：</p>
<ul>
<li>jdk 8 +</li>
<li>MySQL 5.7.19</li>
<li>maven-3.6.0</li>
<li>IDEA</li>

</ul>
<p>学习前需要掌握：</p>
<ul>
<li>JDBC</li>
<li>MySQL</li>
<li>Java 基础</li>
<li>Maven</li>
<li>Junit</li>

</ul>
</li>

</ul>
<h2>2、mybatis crud（实现增删改查）</h2>
<h4>1.1、创建一个maven项目</h4>
<p>		导入依赖</p>
<pre><code class='language-xml' lang='xml'>&lt;dependencies&gt;
    &lt;!--mysql驱动--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;mysql&lt;/groupId&gt;
        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
        &lt;version&gt;5.1.47&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;!--mybatis支持--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.mybatis&lt;/groupId&gt;
        &lt;artifactId&gt;mybatis&lt;/artifactId&gt;
        &lt;version&gt;3.5.2&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;!--junit支持--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;junit&lt;/groupId&gt;
        &lt;artifactId&gt;junit&lt;/artifactId&gt;
        &lt;version&gt;4.12&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
</code></pre>
<p>注意点 : pom文件的设置中需要设置资源过滤 , 否则会有资源文件打包不成功问题，导致项目无法运行；</p>
<pre><code class='language-xml' lang='xml'>&lt;build&gt;
    &lt;resources&gt;
        &lt;resource&gt;
            &lt;directory&gt;src/main/java&lt;/directory&gt;
            &lt;includes&gt;
                &lt;include&gt;**/*.properties&lt;/include&gt;
                &lt;include&gt;**/*.xml&lt;/include&gt;
            &lt;/includes&gt;
            &lt;filtering&gt;true&lt;/filtering&gt;
        &lt;/resource&gt;
    &lt;/resources&gt;
&lt;/build&gt;
</code></pre>
<p>&nbsp;</p>
<h4>1.2、创建数据库和表</h4>
<pre><code class='language-sql' lang='sql'>CREATE DATABASE mybatis CHARACTER SET utf8;
CREATE TABLE USER(
	id INT PRIMARY KEY,
	username VARCHAR(15) NOT NULL,
	pwd VARCHAR(20) NOT NULL
)
INSERT INTO USER VALUES(2018143114,&#39;张三&#39;,&#39;123456&#39;),(2018143115,&#39;李四&#39;,&#39;1234567&#39;),(2018143116,&#39;王五&#39;,&#39;147258&#39;);
SELECT * FROM USER;
</code></pre>
<h4>1.3、编写mybatis配置文件</h4>
<p>在resource里新建一个mybatis-config.xml文件</p>
<pre><code class='language-xml' lang='xml'>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE configuration
        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;
&lt;configuration&gt;
    &lt;environments default=&quot;development&quot;&gt;
        &lt;environment id=&quot;development&quot;&gt;
            &lt;transactionManager type=&quot;JDBC&quot;/&gt;
            &lt;dataSource type=&quot;POOLED&quot;&gt;
                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;
                &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;amp;useUnicode=true&amp;amp;characterEncoding=utf8&quot;/&gt;
                &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;
                &lt;property name=&quot;password&quot; value=&quot;hufei169357&quot;/&gt;
            &lt;/dataSource&gt;
        &lt;/environment&gt;
    &lt;/environments&gt;
    &lt;mappers&gt;
        &lt;mapper resource=&quot;com/feige/dao/userMapper.xml&quot;/&gt;
    &lt;/mappers&gt;
&lt;/configuration&gt;
</code></pre>
<h4>1.4、新建一个工具类用来获取SqlSession对象</h4>
<pre><code class='language-java' lang='java'>package com.feige.utils;

import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import java.io.IOException;
import java.io.InputStream;
//sqlSessionFactory-sqlSession
public class MybatisUtils {
    private static SqlSessionFactory sqlSessionFactory;
    static {
        try {
            //使用mybatis第一步：获取sqlSessionFactory对象
            String resource = &quot;mybatis-config.xml&quot;;
            InputStream inputStream = Resources.getResourceAsStream(resource);
            sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    //既然有了sqlSessionFactory，顾名思义，我们就可以从中获得sqlSession的实例
    public static SqlSession getSqlSessioon(){
        return sqlSessionFactory.openSession();
    }
}

</code></pre>
<p>&nbsp;</p>
<h4>1.5、编写一个pojo（实体类）</h4>
<pre><code class='language-java' lang='java'>package com.feige.pojo;

public class User {
    private int id;
    private String username;
    private String pwd;

    public User() {
    }

    public User(int id, String username, String pwd) {
        this.id = id;
        this.username = username;
        this.pwd = pwd;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getPwd() {
        return pwd;
    }

    public void setPwd(String pwd) {
        this.pwd = pwd;
    }
    @Override
    public String toString() {
        return &quot;User{&quot; +
                &quot;id=&quot; + id +
                &quot;, username=&#39;&quot; + username + &#39;\&#39;&#39; +
                &quot;, pwd=&#39;&quot; + pwd + &#39;\&#39;&#39; +
                &#39;}&#39;;
    }
}

</code></pre>
<h4>1.6、新建一个userMapper接口</h4>
<pre><code class='language-java' lang='java'>package com.feige.dao;

import com.feige.pojo.User;

import java.util.List;
import java.util.Map;

public interface UserMapper {
    //查询全部用户
    List&lt;User&gt; getAllUser();
    //通过一个id查询一个用户
    User getUserById(int id);
    //通过id修改一个用户
    int updateUserById(Map map);
    //通过id删除一个用户
    int deleteUserById(int id);
    //插入一条数据
    int insertUser(User user);
}

</code></pre>
<h4>1.7、新建一个userMapper.xml文件</h4>
<pre><code class='language-xml' lang='xml'>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE mapper
        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;com.feige.dao.UserMapper&quot;&gt;
    &lt;!--每个语句要对应相应的标签select对应&lt;select&gt; delete 对应&lt;delete&gt; update 对应&lt;update&gt; insert 对应&lt;insert&gt;--&gt;
    &lt;select id=&quot;getAllUser&quot; resultType=&quot;com.feige.pojo.User&quot;&gt;
        select * from user
    &lt;/select&gt;
    &lt;select id=&quot;getUserById&quot; resultType=&quot;com.feige.pojo.User&quot; parameterType=&quot;int&quot;&gt;
        select * from user where id=#{id}
    &lt;/select&gt;
    &lt;update id=&quot;updateUserById&quot; parameterType=&quot;map&quot;&gt;
        update user set pwd=#{pwd} where id=#{id}
    &lt;/update&gt;
    &lt;delete id=&quot;deleteUserById&quot; parameterType=&quot;int&quot;&gt;
        delete from user where id=#{id}
    &lt;/delete&gt;
    &lt;insert id=&quot;insertUser&quot; parameterType=&quot;com.feige.pojo.User&quot;&gt;
        insert into user values (#{id},#{username},#{pwd})
    &lt;/insert&gt;
&lt;/mapper&gt;
</code></pre>
<h4>1.8、测试代码</h4>
<pre><code class='language-java' lang='java'>package com.feige.mybatisTest;

import com.feige.dao.UserMapper;
import com.feige.pojo.User;
import com.feige.utils.MybatisUtils;
import org.apache.ibatis.session.SqlSession;
import org.junit.Test;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MybatisTest {
    @Test
    public void mybatisTest1(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        List&lt;User&gt; allUser = mapper.getAllUser();
        for (User user : allUser) {
            System.out.println(user);
        }
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest2(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        User userById = mapper.getUserById(2018143114);
        System.out.println(userById);
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest3() {
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        //使用万能map传参
        Map&lt;String,Object&gt; map = new HashMap&lt;String, Object&gt;();
        map.put(&quot;pwd&quot;,2018143114);
        map.put(&quot;id&quot;,2018143114);

        int i = mapper.updateUserById(map);
        if (i &gt; 0) {
            System.out.println(&quot;修改成功！&quot;+i);
        }
        //增删改需要提交事务
        sqlSessioon.commit();

        sqlSessioon.close();

    }
    @Test
    public void mybatisTest4(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        int i = mapper.deleteUserById(2018143117);
        if (i &gt; 0) {
            System.out.println(&quot;删除成功！&quot;+i);
        }
        sqlSessioon.commit();
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest5(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        User user = new User(2018143117, &quot;杨帆东&quot;, &quot;2018143117&quot;);
        int i = mapper.insertUser(user);
        if (i &gt; 0) {
            System.out.println(&quot;插入成功！&quot;+i);
        }
        sqlSessioon.commit();
        sqlSessioon.close();

    }
}

</code></pre>
<p>&nbsp;</p>
<p>		</p>, 2020-02-24 03:15:45.0, 2020-02-24 03:15:50.0, admin, 0]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50036} Result: [7, mybatis, mybatis啊, 作者, 2020-02-24 03:27:18.0, 2020-02-24 03:27:18.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50036} Result: [8, springboot, aaa, [TOC]
                            #### Disabled options

                            - TeX (Based on KaTeX);
                            - Emoji;
                            - Task lists;
                            - HTML tags decode;
                            - Flowchart and Sequence Diagram;
                            #### Editor.md directory

                                editor.md/
                                        lib/
                                        css/
                                        scss/
                                        tests/
                                        fonts/
                                        images/
                                        plugins/
                                        examples/
                                        languages/
                                        editormd.js
                                        ...

                            ```html
                            <!-- English -->
                            <script src="../dist/js/languages/en.js"></script>

                            <!-- 繁體中文 -->
                            <script src="../dist/js/languages/zh-tw.js"></script>
                            ```
                        , 2020-02-25 03:39:36.0, 2020-02-25 22:38:07.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50036} Result: [9, mybatis, bbb, [TOC]

                            #### Disabled options

                            - TeX (Based on KaTeX);
                            - Emoji;
                            - Task lists;
                            - HTML tags decode;
                            - Flowchart and Sequence Diagram;

                            #### Editor.md directory

                                editor.md/
                                        lib/
                                        css/
                                        scss/
                                        tests/
                                        fonts/
                                        images/
                                        plugins/
                                        examples/
                                        languages/
                                        editormd.js
                                        ...

                            ```html
                            <!-- English -->
                            <script src="../dist/js/languages/en.js"></script>

                            <!-- 繁體中文 -->
                            <script src="../dist/js/languages/zh-tw.js"></script>
                            ```
                        , 2020-02-25 03:44:09.0, 2020-02-25 03:44:09.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50036} Result: [10, springboot, 飞哥, #大哥的Markdown, 2020-02-25 22:43:28.0, 2020-02-25 22:43:28.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50036} Result: [11, mybatis, 大哥, #飞哥的博客后台管理系统, 2020-02-25 22:49:26.0, 2020-02-25 22:49:26.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50036} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} Parameters : []
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} Types : []
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} executed. 0.661777 millis. select count(*) from `blog`
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50037} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50037} Header: [count(*)]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50037} Result: [13]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50037} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} Parameters : [0, 10]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} executed. 0.811555 millis. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog
         
            limit ?,?
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50038} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50038} Header: [id, type_name, title, content, create_time, change_time, author, view]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50038} Result: [1, springboot, springboot入门, springb自动装配, 2020-02-23 21:43:36.0, 2020-02-24 03:06:48.0, admin, 0]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50038} Result: [2, mybatis, 配置, 得到的, 2020-02-24 02:05:36.0, 2020-03-13 06:39:47.0, admin, 3]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50038} Result: [4, springMVC, mybatis-plus, ##飞哥, 2020-02-24 02:10:09.0, 2020-02-25 22:42:23.0, admin, 111]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50038} Result: [5, springboot, 人, 嗯嗯, 2020-02-24 03:07:20.0, 2020-02-24 03:07:20.0, admin, 2]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50038} Result: [6, mybatis, mybatis入门, <h2>1、Mybatis简介</h2>
<p><img src="https://blog.kuangstudy.com/usr/uploads/2019/10/1296229149.png" referrerpolicy="no-referrer" alt="1567007421329.png"></p>
<h3>什么是MyBatis</h3>
<ul>
<li>MyBatis 是一款优秀的<strong>持久层框架</strong></li>
<li>MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集的过程</li>
<li>MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 实体类 【Plain Old Java Objects,普通的 Java对象】映射成数据库中的记录。</li>
<li>MyBatis 本是apache的一个开源项目ibatis, 2010年这个项目由apache 迁移到了google code，并且改名为MyBatis 。</li>
<li>2013年11月迁移到<strong>Github</strong> .</li>
<li>Mybatis官方文档 : <a href='http://www.mybatis.org/mybatis-3/zh/index.html' target='_blank' class='url'>http://www.mybatis.org/mybatis-3/zh/index.html</a></li>
<li>GitHub : <a href='https://github.com/mybatis/mybatis-3' target='_blank' class='url'>https://github.com/mybatis/mybatis-3</a></li>

</ul>
<h3>持久化</h3>
<ul>
<li><p><strong>持久化是将程序数据在持久状态和瞬时状态间转换的机制。</strong></p>
<ul>
<li>即把数据（如内存中的对象）保存到可永久保存的存储设备中（如磁盘）。持久化的主要应用是将内存中的对象存储在数据库中，或者存储在磁盘文件中、XML数据文件中等等。</li>
<li>JDBC就是一种持久化机制。文件IO也是一种持久化机制。</li>
<li>在生活中 : 将鲜肉冷藏，吃的时候再解冻的方法也是。将水果做成罐头的方法也是。</li>

</ul>
</li>
<li><p><strong>为什么需要持久化服务呢？那是由于内存本身的缺陷引起的</strong></p>
<ul>
<li>内存断电后数据会丢失，但有一些对象是无论如何都不能丢失的，比如银行账号等，遗憾的是，人们还无法保证内存永不掉电。</li>
<li>内存过于昂贵，与硬盘、光盘等外存相比，内存的价格要高2~3个数量级，而且维持成本也高，至少需要一直供电吧。所以即使对象不需要永久保存，也会因为内存的容量限制不能一直呆在内存中，需要持久化来缓存到外存。</li>

</ul>
</li>

</ul>
<h3>持久层</h3>
<ul>
<li><p>什么是持久层？</p>
<ul>
<li>完成持久化工作的代码块 . ----&gt; dao层 【DAO (Data Access Object) 数据访问对象】</li>
<li>大多数情况下特别是企业级应用，数据持久化往往也就意味着将内存中的数据保存到磁盘上加以固化，而持久化的实现过程则大多通过各种<strong>关系数据库</strong>来完成。</li>
<li>不过这里有一个字需要特别强调，也就是所谓的“层”。对于应用系统而言，数据持久功能大多是必不可少的组成部分。也就是说，我们的系统中，已经天然的具备了“持久层”概念？也许是，但也许实际情况并非如此。之所以要独立出一个“持久层”的概念,而不是“持久模块”，“持久单元”，也就意味着，我们的系统架构中，应该有一个相对独立的逻辑层面，专著于数据持久化逻辑的实现.</li>
<li>与系统其他部分相对而言，这个层面应该具有一个较为清晰和严格的逻辑边界。 【说白了就是用来操作数据库存在的！】</li>

</ul>
</li>

</ul>
<h3>为什么需要Mybatis</h3>
<ul>
<li><p>Mybatis就是帮助程序猿将数据存入数据库中 , 和从数据库中取数据 .</p>
</li>
<li><p>传统的jdbc操作 , 有很多重复代码块 .比如 : 数据取出时的封装 , 数据库的建立连接等等... , 通过框架可以减少重复代码,提高开发效率 .</p>
</li>
<li><p>MyBatis 是一个半自动化的<strong>ORM框架 (Object Relationship Mapping) --&gt;对象关系映射</strong></p>
</li>
<li><p>所有的事情，不用Mybatis依旧可以做到，只是用了它，所有实现会更加简单！<strong>技术没有高低之分，只有使用这个技术的人有高低之别</strong></p>
</li>
<li><p>MyBatis的优点</p>
<ul>
<li>简单易学：本身就很小且简单。没有任何第三方依赖，最简单安装只要两个jar文件+配置几个sql映射文件就可以了，易于学习，易于使用，通过文档和源代码，可以比较完全的掌握它的设计思路和实现。</li>
<li>灵活：mybatis不会对应用程序或者数据库的现有设计强加任何影响。 sql写在xml里，便于统一管理和优化。通过sql语句可以满足操作数据库的所有需求。</li>
<li>解除sql与程序代码的耦合：通过提供DAO层，将业务逻辑和数据访问逻辑分离，使系统的设计更清晰，更易维护，更易单元测试。sql和代码的分离，提高了可维护性。</li>
<li>提供xml标签，支持编写动态sql。</li>
<li>.......</li>

</ul>
</li>
<li><p>最重要的一点，使用的人多！公司需要！</p>
</li>
<li><p>环境说明：</p>
<ul>
<li>jdk 8 +</li>
<li>MySQL 5.7.19</li>
<li>maven-3.6.0</li>
<li>IDEA</li>

</ul>
<p>学习前需要掌握：</p>
<ul>
<li>JDBC</li>
<li>MySQL</li>
<li>Java 基础</li>
<li>Maven</li>
<li>Junit</li>

</ul>
</li>

</ul>
<h2>2、mybatis crud（实现增删改查）</h2>
<h4>1.1、创建一个maven项目</h4>
<p>		导入依赖</p>
<pre><code class='language-xml' lang='xml'>&lt;dependencies&gt;
    &lt;!--mysql驱动--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;mysql&lt;/groupId&gt;
        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
        &lt;version&gt;5.1.47&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;!--mybatis支持--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.mybatis&lt;/groupId&gt;
        &lt;artifactId&gt;mybatis&lt;/artifactId&gt;
        &lt;version&gt;3.5.2&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;!--junit支持--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;junit&lt;/groupId&gt;
        &lt;artifactId&gt;junit&lt;/artifactId&gt;
        &lt;version&gt;4.12&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
</code></pre>
<p>注意点 : pom文件的设置中需要设置资源过滤 , 否则会有资源文件打包不成功问题，导致项目无法运行；</p>
<pre><code class='language-xml' lang='xml'>&lt;build&gt;
    &lt;resources&gt;
        &lt;resource&gt;
            &lt;directory&gt;src/main/java&lt;/directory&gt;
            &lt;includes&gt;
                &lt;include&gt;**/*.properties&lt;/include&gt;
                &lt;include&gt;**/*.xml&lt;/include&gt;
            &lt;/includes&gt;
            &lt;filtering&gt;true&lt;/filtering&gt;
        &lt;/resource&gt;
    &lt;/resources&gt;
&lt;/build&gt;
</code></pre>
<p>&nbsp;</p>
<h4>1.2、创建数据库和表</h4>
<pre><code class='language-sql' lang='sql'>CREATE DATABASE mybatis CHARACTER SET utf8;
CREATE TABLE USER(
	id INT PRIMARY KEY,
	username VARCHAR(15) NOT NULL,
	pwd VARCHAR(20) NOT NULL
)
INSERT INTO USER VALUES(2018143114,&#39;张三&#39;,&#39;123456&#39;),(2018143115,&#39;李四&#39;,&#39;1234567&#39;),(2018143116,&#39;王五&#39;,&#39;147258&#39;);
SELECT * FROM USER;
</code></pre>
<h4>1.3、编写mybatis配置文件</h4>
<p>在resource里新建一个mybatis-config.xml文件</p>
<pre><code class='language-xml' lang='xml'>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE configuration
        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;
&lt;configuration&gt;
    &lt;environments default=&quot;development&quot;&gt;
        &lt;environment id=&quot;development&quot;&gt;
            &lt;transactionManager type=&quot;JDBC&quot;/&gt;
            &lt;dataSource type=&quot;POOLED&quot;&gt;
                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;
                &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;amp;useUnicode=true&amp;amp;characterEncoding=utf8&quot;/&gt;
                &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;
                &lt;property name=&quot;password&quot; value=&quot;hufei169357&quot;/&gt;
            &lt;/dataSource&gt;
        &lt;/environment&gt;
    &lt;/environments&gt;
    &lt;mappers&gt;
        &lt;mapper resource=&quot;com/feige/dao/userMapper.xml&quot;/&gt;
    &lt;/mappers&gt;
&lt;/configuration&gt;
</code></pre>
<h4>1.4、新建一个工具类用来获取SqlSession对象</h4>
<pre><code class='language-java' lang='java'>package com.feige.utils;

import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import java.io.IOException;
import java.io.InputStream;
//sqlSessionFactory-sqlSession
public class MybatisUtils {
    private static SqlSessionFactory sqlSessionFactory;
    static {
        try {
            //使用mybatis第一步：获取sqlSessionFactory对象
            String resource = &quot;mybatis-config.xml&quot;;
            InputStream inputStream = Resources.getResourceAsStream(resource);
            sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    //既然有了sqlSessionFactory，顾名思义，我们就可以从中获得sqlSession的实例
    public static SqlSession getSqlSessioon(){
        return sqlSessionFactory.openSession();
    }
}

</code></pre>
<p>&nbsp;</p>
<h4>1.5、编写一个pojo（实体类）</h4>
<pre><code class='language-java' lang='java'>package com.feige.pojo;

public class User {
    private int id;
    private String username;
    private String pwd;

    public User() {
    }

    public User(int id, String username, String pwd) {
        this.id = id;
        this.username = username;
        this.pwd = pwd;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getPwd() {
        return pwd;
    }

    public void setPwd(String pwd) {
        this.pwd = pwd;
    }
    @Override
    public String toString() {
        return &quot;User{&quot; +
                &quot;id=&quot; + id +
                &quot;, username=&#39;&quot; + username + &#39;\&#39;&#39; +
                &quot;, pwd=&#39;&quot; + pwd + &#39;\&#39;&#39; +
                &#39;}&#39;;
    }
}

</code></pre>
<h4>1.6、新建一个userMapper接口</h4>
<pre><code class='language-java' lang='java'>package com.feige.dao;

import com.feige.pojo.User;

import java.util.List;
import java.util.Map;

public interface UserMapper {
    //查询全部用户
    List&lt;User&gt; getAllUser();
    //通过一个id查询一个用户
    User getUserById(int id);
    //通过id修改一个用户
    int updateUserById(Map map);
    //通过id删除一个用户
    int deleteUserById(int id);
    //插入一条数据
    int insertUser(User user);
}

</code></pre>
<h4>1.7、新建一个userMapper.xml文件</h4>
<pre><code class='language-xml' lang='xml'>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE mapper
        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;com.feige.dao.UserMapper&quot;&gt;
    &lt;!--每个语句要对应相应的标签select对应&lt;select&gt; delete 对应&lt;delete&gt; update 对应&lt;update&gt; insert 对应&lt;insert&gt;--&gt;
    &lt;select id=&quot;getAllUser&quot; resultType=&quot;com.feige.pojo.User&quot;&gt;
        select * from user
    &lt;/select&gt;
    &lt;select id=&quot;getUserById&quot; resultType=&quot;com.feige.pojo.User&quot; parameterType=&quot;int&quot;&gt;
        select * from user where id=#{id}
    &lt;/select&gt;
    &lt;update id=&quot;updateUserById&quot; parameterType=&quot;map&quot;&gt;
        update user set pwd=#{pwd} where id=#{id}
    &lt;/update&gt;
    &lt;delete id=&quot;deleteUserById&quot; parameterType=&quot;int&quot;&gt;
        delete from user where id=#{id}
    &lt;/delete&gt;
    &lt;insert id=&quot;insertUser&quot; parameterType=&quot;com.feige.pojo.User&quot;&gt;
        insert into user values (#{id},#{username},#{pwd})
    &lt;/insert&gt;
&lt;/mapper&gt;
</code></pre>
<h4>1.8、测试代码</h4>
<pre><code class='language-java' lang='java'>package com.feige.mybatisTest;

import com.feige.dao.UserMapper;
import com.feige.pojo.User;
import com.feige.utils.MybatisUtils;
import org.apache.ibatis.session.SqlSession;
import org.junit.Test;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MybatisTest {
    @Test
    public void mybatisTest1(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        List&lt;User&gt; allUser = mapper.getAllUser();
        for (User user : allUser) {
            System.out.println(user);
        }
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest2(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        User userById = mapper.getUserById(2018143114);
        System.out.println(userById);
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest3() {
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        //使用万能map传参
        Map&lt;String,Object&gt; map = new HashMap&lt;String, Object&gt;();
        map.put(&quot;pwd&quot;,2018143114);
        map.put(&quot;id&quot;,2018143114);

        int i = mapper.updateUserById(map);
        if (i &gt; 0) {
            System.out.println(&quot;修改成功！&quot;+i);
        }
        //增删改需要提交事务
        sqlSessioon.commit();

        sqlSessioon.close();

    }
    @Test
    public void mybatisTest4(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        int i = mapper.deleteUserById(2018143117);
        if (i &gt; 0) {
            System.out.println(&quot;删除成功！&quot;+i);
        }
        sqlSessioon.commit();
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest5(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        User user = new User(2018143117, &quot;杨帆东&quot;, &quot;2018143117&quot;);
        int i = mapper.insertUser(user);
        if (i &gt; 0) {
            System.out.println(&quot;插入成功！&quot;+i);
        }
        sqlSessioon.commit();
        sqlSessioon.close();

    }
}

</code></pre>
<p>&nbsp;</p>
<p>		</p>, 2020-02-24 03:15:45.0, 2020-02-24 03:15:50.0, admin, 0]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50038} Result: [7, mybatis, mybatis啊, 作者, 2020-02-24 03:27:18.0, 2020-02-24 03:27:18.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50038} Result: [8, springboot, aaa, [TOC]
                            #### Disabled options

                            - TeX (Based on KaTeX);
                            - Emoji;
                            - Task lists;
                            - HTML tags decode;
                            - Flowchart and Sequence Diagram;
                            #### Editor.md directory

                                editor.md/
                                        lib/
                                        css/
                                        scss/
                                        tests/
                                        fonts/
                                        images/
                                        plugins/
                                        examples/
                                        languages/
                                        editormd.js
                                        ...

                            ```html
                            <!-- English -->
                            <script src="../dist/js/languages/en.js"></script>

                            <!-- 繁體中文 -->
                            <script src="../dist/js/languages/zh-tw.js"></script>
                            ```
                        , 2020-02-25 03:39:36.0, 2020-02-25 22:38:07.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50038} Result: [9, mybatis, bbb, [TOC]

                            #### Disabled options

                            - TeX (Based on KaTeX);
                            - Emoji;
                            - Task lists;
                            - HTML tags decode;
                            - Flowchart and Sequence Diagram;

                            #### Editor.md directory

                                editor.md/
                                        lib/
                                        css/
                                        scss/
                                        tests/
                                        fonts/
                                        images/
                                        plugins/
                                        examples/
                                        languages/
                                        editormd.js
                                        ...

                            ```html
                            <!-- English -->
                            <script src="../dist/js/languages/en.js"></script>

                            <!-- 繁體中文 -->
                            <script src="../dist/js/languages/zh-tw.js"></script>
                            ```
                        , 2020-02-25 03:44:09.0, 2020-02-25 03:44:09.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50038} Result: [10, springboot, 飞哥, #大哥的Markdown, 2020-02-25 22:43:28.0, 2020-02-25 22:43:28.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50038} Result: [11, mybatis, 大哥, #飞哥的博客后台管理系统, 2020-02-25 22:49:26.0, 2020-02-25 22:49:26.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50038} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} Parameters : []
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} Types : []
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} executed. 0.626221 millis. select count(*) from `blog`
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50039} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50039} Header: [count(*)]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50039} Result: [13]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50039} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} Parameters : [0, 10]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} executed. 1.727554 millis. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog
         
            limit ?,?
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50040} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50040} Header: [id, type_name, title, content, create_time, change_time, author, view]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50040} Result: [1, springboot, springboot入门, springb自动装配, 2020-02-23 21:43:36.0, 2020-02-24 03:06:48.0, admin, 0]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50040} Result: [2, mybatis, 配置, 得到的, 2020-02-24 02:05:36.0, 2020-03-13 06:39:47.0, admin, 3]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50040} Result: [4, springMVC, mybatis-plus, ##飞哥, 2020-02-24 02:10:09.0, 2020-02-25 22:42:23.0, admin, 111]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50040} Result: [5, springboot, 人, 嗯嗯, 2020-02-24 03:07:20.0, 2020-02-24 03:07:20.0, admin, 2]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50040} Result: [6, mybatis, mybatis入门, <h2>1、Mybatis简介</h2>
<p><img src="https://blog.kuangstudy.com/usr/uploads/2019/10/1296229149.png" referrerpolicy="no-referrer" alt="1567007421329.png"></p>
<h3>什么是MyBatis</h3>
<ul>
<li>MyBatis 是一款优秀的<strong>持久层框架</strong></li>
<li>MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集的过程</li>
<li>MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 实体类 【Plain Old Java Objects,普通的 Java对象】映射成数据库中的记录。</li>
<li>MyBatis 本是apache的一个开源项目ibatis, 2010年这个项目由apache 迁移到了google code，并且改名为MyBatis 。</li>
<li>2013年11月迁移到<strong>Github</strong> .</li>
<li>Mybatis官方文档 : <a href='http://www.mybatis.org/mybatis-3/zh/index.html' target='_blank' class='url'>http://www.mybatis.org/mybatis-3/zh/index.html</a></li>
<li>GitHub : <a href='https://github.com/mybatis/mybatis-3' target='_blank' class='url'>https://github.com/mybatis/mybatis-3</a></li>

</ul>
<h3>持久化</h3>
<ul>
<li><p><strong>持久化是将程序数据在持久状态和瞬时状态间转换的机制。</strong></p>
<ul>
<li>即把数据（如内存中的对象）保存到可永久保存的存储设备中（如磁盘）。持久化的主要应用是将内存中的对象存储在数据库中，或者存储在磁盘文件中、XML数据文件中等等。</li>
<li>JDBC就是一种持久化机制。文件IO也是一种持久化机制。</li>
<li>在生活中 : 将鲜肉冷藏，吃的时候再解冻的方法也是。将水果做成罐头的方法也是。</li>

</ul>
</li>
<li><p><strong>为什么需要持久化服务呢？那是由于内存本身的缺陷引起的</strong></p>
<ul>
<li>内存断电后数据会丢失，但有一些对象是无论如何都不能丢失的，比如银行账号等，遗憾的是，人们还无法保证内存永不掉电。</li>
<li>内存过于昂贵，与硬盘、光盘等外存相比，内存的价格要高2~3个数量级，而且维持成本也高，至少需要一直供电吧。所以即使对象不需要永久保存，也会因为内存的容量限制不能一直呆在内存中，需要持久化来缓存到外存。</li>

</ul>
</li>

</ul>
<h3>持久层</h3>
<ul>
<li><p>什么是持久层？</p>
<ul>
<li>完成持久化工作的代码块 . ----&gt; dao层 【DAO (Data Access Object) 数据访问对象】</li>
<li>大多数情况下特别是企业级应用，数据持久化往往也就意味着将内存中的数据保存到磁盘上加以固化，而持久化的实现过程则大多通过各种<strong>关系数据库</strong>来完成。</li>
<li>不过这里有一个字需要特别强调，也就是所谓的“层”。对于应用系统而言，数据持久功能大多是必不可少的组成部分。也就是说，我们的系统中，已经天然的具备了“持久层”概念？也许是，但也许实际情况并非如此。之所以要独立出一个“持久层”的概念,而不是“持久模块”，“持久单元”，也就意味着，我们的系统架构中，应该有一个相对独立的逻辑层面，专著于数据持久化逻辑的实现.</li>
<li>与系统其他部分相对而言，这个层面应该具有一个较为清晰和严格的逻辑边界。 【说白了就是用来操作数据库存在的！】</li>

</ul>
</li>

</ul>
<h3>为什么需要Mybatis</h3>
<ul>
<li><p>Mybatis就是帮助程序猿将数据存入数据库中 , 和从数据库中取数据 .</p>
</li>
<li><p>传统的jdbc操作 , 有很多重复代码块 .比如 : 数据取出时的封装 , 数据库的建立连接等等... , 通过框架可以减少重复代码,提高开发效率 .</p>
</li>
<li><p>MyBatis 是一个半自动化的<strong>ORM框架 (Object Relationship Mapping) --&gt;对象关系映射</strong></p>
</li>
<li><p>所有的事情，不用Mybatis依旧可以做到，只是用了它，所有实现会更加简单！<strong>技术没有高低之分，只有使用这个技术的人有高低之别</strong></p>
</li>
<li><p>MyBatis的优点</p>
<ul>
<li>简单易学：本身就很小且简单。没有任何第三方依赖，最简单安装只要两个jar文件+配置几个sql映射文件就可以了，易于学习，易于使用，通过文档和源代码，可以比较完全的掌握它的设计思路和实现。</li>
<li>灵活：mybatis不会对应用程序或者数据库的现有设计强加任何影响。 sql写在xml里，便于统一管理和优化。通过sql语句可以满足操作数据库的所有需求。</li>
<li>解除sql与程序代码的耦合：通过提供DAO层，将业务逻辑和数据访问逻辑分离，使系统的设计更清晰，更易维护，更易单元测试。sql和代码的分离，提高了可维护性。</li>
<li>提供xml标签，支持编写动态sql。</li>
<li>.......</li>

</ul>
</li>
<li><p>最重要的一点，使用的人多！公司需要！</p>
</li>
<li><p>环境说明：</p>
<ul>
<li>jdk 8 +</li>
<li>MySQL 5.7.19</li>
<li>maven-3.6.0</li>
<li>IDEA</li>

</ul>
<p>学习前需要掌握：</p>
<ul>
<li>JDBC</li>
<li>MySQL</li>
<li>Java 基础</li>
<li>Maven</li>
<li>Junit</li>

</ul>
</li>

</ul>
<h2>2、mybatis crud（实现增删改查）</h2>
<h4>1.1、创建一个maven项目</h4>
<p>		导入依赖</p>
<pre><code class='language-xml' lang='xml'>&lt;dependencies&gt;
    &lt;!--mysql驱动--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;mysql&lt;/groupId&gt;
        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
        &lt;version&gt;5.1.47&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;!--mybatis支持--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.mybatis&lt;/groupId&gt;
        &lt;artifactId&gt;mybatis&lt;/artifactId&gt;
        &lt;version&gt;3.5.2&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;!--junit支持--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;junit&lt;/groupId&gt;
        &lt;artifactId&gt;junit&lt;/artifactId&gt;
        &lt;version&gt;4.12&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
</code></pre>
<p>注意点 : pom文件的设置中需要设置资源过滤 , 否则会有资源文件打包不成功问题，导致项目无法运行；</p>
<pre><code class='language-xml' lang='xml'>&lt;build&gt;
    &lt;resources&gt;
        &lt;resource&gt;
            &lt;directory&gt;src/main/java&lt;/directory&gt;
            &lt;includes&gt;
                &lt;include&gt;**/*.properties&lt;/include&gt;
                &lt;include&gt;**/*.xml&lt;/include&gt;
            &lt;/includes&gt;
            &lt;filtering&gt;true&lt;/filtering&gt;
        &lt;/resource&gt;
    &lt;/resources&gt;
&lt;/build&gt;
</code></pre>
<p>&nbsp;</p>
<h4>1.2、创建数据库和表</h4>
<pre><code class='language-sql' lang='sql'>CREATE DATABASE mybatis CHARACTER SET utf8;
CREATE TABLE USER(
	id INT PRIMARY KEY,
	username VARCHAR(15) NOT NULL,
	pwd VARCHAR(20) NOT NULL
)
INSERT INTO USER VALUES(2018143114,&#39;张三&#39;,&#39;123456&#39;),(2018143115,&#39;李四&#39;,&#39;1234567&#39;),(2018143116,&#39;王五&#39;,&#39;147258&#39;);
SELECT * FROM USER;
</code></pre>
<h4>1.3、编写mybatis配置文件</h4>
<p>在resource里新建一个mybatis-config.xml文件</p>
<pre><code class='language-xml' lang='xml'>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE configuration
        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;
&lt;configuration&gt;
    &lt;environments default=&quot;development&quot;&gt;
        &lt;environment id=&quot;development&quot;&gt;
            &lt;transactionManager type=&quot;JDBC&quot;/&gt;
            &lt;dataSource type=&quot;POOLED&quot;&gt;
                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;
                &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;amp;useUnicode=true&amp;amp;characterEncoding=utf8&quot;/&gt;
                &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;
                &lt;property name=&quot;password&quot; value=&quot;hufei169357&quot;/&gt;
            &lt;/dataSource&gt;
        &lt;/environment&gt;
    &lt;/environments&gt;
    &lt;mappers&gt;
        &lt;mapper resource=&quot;com/feige/dao/userMapper.xml&quot;/&gt;
    &lt;/mappers&gt;
&lt;/configuration&gt;
</code></pre>
<h4>1.4、新建一个工具类用来获取SqlSession对象</h4>
<pre><code class='language-java' lang='java'>package com.feige.utils;

import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import java.io.IOException;
import java.io.InputStream;
//sqlSessionFactory-sqlSession
public class MybatisUtils {
    private static SqlSessionFactory sqlSessionFactory;
    static {
        try {
            //使用mybatis第一步：获取sqlSessionFactory对象
            String resource = &quot;mybatis-config.xml&quot;;
            InputStream inputStream = Resources.getResourceAsStream(resource);
            sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    //既然有了sqlSessionFactory，顾名思义，我们就可以从中获得sqlSession的实例
    public static SqlSession getSqlSessioon(){
        return sqlSessionFactory.openSession();
    }
}

</code></pre>
<p>&nbsp;</p>
<h4>1.5、编写一个pojo（实体类）</h4>
<pre><code class='language-java' lang='java'>package com.feige.pojo;

public class User {
    private int id;
    private String username;
    private String pwd;

    public User() {
    }

    public User(int id, String username, String pwd) {
        this.id = id;
        this.username = username;
        this.pwd = pwd;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getPwd() {
        return pwd;
    }

    public void setPwd(String pwd) {
        this.pwd = pwd;
    }
    @Override
    public String toString() {
        return &quot;User{&quot; +
                &quot;id=&quot; + id +
                &quot;, username=&#39;&quot; + username + &#39;\&#39;&#39; +
                &quot;, pwd=&#39;&quot; + pwd + &#39;\&#39;&#39; +
                &#39;}&#39;;
    }
}

</code></pre>
<h4>1.6、新建一个userMapper接口</h4>
<pre><code class='language-java' lang='java'>package com.feige.dao;

import com.feige.pojo.User;

import java.util.List;
import java.util.Map;

public interface UserMapper {
    //查询全部用户
    List&lt;User&gt; getAllUser();
    //通过一个id查询一个用户
    User getUserById(int id);
    //通过id修改一个用户
    int updateUserById(Map map);
    //通过id删除一个用户
    int deleteUserById(int id);
    //插入一条数据
    int insertUser(User user);
}

</code></pre>
<h4>1.7、新建一个userMapper.xml文件</h4>
<pre><code class='language-xml' lang='xml'>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE mapper
        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;com.feige.dao.UserMapper&quot;&gt;
    &lt;!--每个语句要对应相应的标签select对应&lt;select&gt; delete 对应&lt;delete&gt; update 对应&lt;update&gt; insert 对应&lt;insert&gt;--&gt;
    &lt;select id=&quot;getAllUser&quot; resultType=&quot;com.feige.pojo.User&quot;&gt;
        select * from user
    &lt;/select&gt;
    &lt;select id=&quot;getUserById&quot; resultType=&quot;com.feige.pojo.User&quot; parameterType=&quot;int&quot;&gt;
        select * from user where id=#{id}
    &lt;/select&gt;
    &lt;update id=&quot;updateUserById&quot; parameterType=&quot;map&quot;&gt;
        update user set pwd=#{pwd} where id=#{id}
    &lt;/update&gt;
    &lt;delete id=&quot;deleteUserById&quot; parameterType=&quot;int&quot;&gt;
        delete from user where id=#{id}
    &lt;/delete&gt;
    &lt;insert id=&quot;insertUser&quot; parameterType=&quot;com.feige.pojo.User&quot;&gt;
        insert into user values (#{id},#{username},#{pwd})
    &lt;/insert&gt;
&lt;/mapper&gt;
</code></pre>
<h4>1.8、测试代码</h4>
<pre><code class='language-java' lang='java'>package com.feige.mybatisTest;

import com.feige.dao.UserMapper;
import com.feige.pojo.User;
import com.feige.utils.MybatisUtils;
import org.apache.ibatis.session.SqlSession;
import org.junit.Test;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MybatisTest {
    @Test
    public void mybatisTest1(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        List&lt;User&gt; allUser = mapper.getAllUser();
        for (User user : allUser) {
            System.out.println(user);
        }
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest2(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        User userById = mapper.getUserById(2018143114);
        System.out.println(userById);
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest3() {
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        //使用万能map传参
        Map&lt;String,Object&gt; map = new HashMap&lt;String, Object&gt;();
        map.put(&quot;pwd&quot;,2018143114);
        map.put(&quot;id&quot;,2018143114);

        int i = mapper.updateUserById(map);
        if (i &gt; 0) {
            System.out.println(&quot;修改成功！&quot;+i);
        }
        //增删改需要提交事务
        sqlSessioon.commit();

        sqlSessioon.close();

    }
    @Test
    public void mybatisTest4(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        int i = mapper.deleteUserById(2018143117);
        if (i &gt; 0) {
            System.out.println(&quot;删除成功！&quot;+i);
        }
        sqlSessioon.commit();
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest5(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        User user = new User(2018143117, &quot;杨帆东&quot;, &quot;2018143117&quot;);
        int i = mapper.insertUser(user);
        if (i &gt; 0) {
            System.out.println(&quot;插入成功！&quot;+i);
        }
        sqlSessioon.commit();
        sqlSessioon.close();

    }
}

</code></pre>
<p>&nbsp;</p>
<p>		</p>, 2020-02-24 03:15:45.0, 2020-02-24 03:15:50.0, admin, 0]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50040} Result: [7, mybatis, mybatis啊, 作者, 2020-02-24 03:27:18.0, 2020-02-24 03:27:18.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50040} Result: [8, springboot, aaa, [TOC]
                            #### Disabled options

                            - TeX (Based on KaTeX);
                            - Emoji;
                            - Task lists;
                            - HTML tags decode;
                            - Flowchart and Sequence Diagram;
                            #### Editor.md directory

                                editor.md/
                                        lib/
                                        css/
                                        scss/
                                        tests/
                                        fonts/
                                        images/
                                        plugins/
                                        examples/
                                        languages/
                                        editormd.js
                                        ...

                            ```html
                            <!-- English -->
                            <script src="../dist/js/languages/en.js"></script>

                            <!-- 繁體中文 -->
                            <script src="../dist/js/languages/zh-tw.js"></script>
                            ```
                        , 2020-02-25 03:39:36.0, 2020-02-25 22:38:07.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50040} Result: [9, mybatis, bbb, [TOC]

                            #### Disabled options

                            - TeX (Based on KaTeX);
                            - Emoji;
                            - Task lists;
                            - HTML tags decode;
                            - Flowchart and Sequence Diagram;

                            #### Editor.md directory

                                editor.md/
                                        lib/
                                        css/
                                        scss/
                                        tests/
                                        fonts/
                                        images/
                                        plugins/
                                        examples/
                                        languages/
                                        editormd.js
                                        ...

                            ```html
                            <!-- English -->
                            <script src="../dist/js/languages/en.js"></script>

                            <!-- 繁體中文 -->
                            <script src="../dist/js/languages/zh-tw.js"></script>
                            ```
                        , 2020-02-25 03:44:09.0, 2020-02-25 03:44:09.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50040} Result: [10, springboot, 飞哥, #大哥的Markdown, 2020-02-25 22:43:28.0, 2020-02-25 22:43:28.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50040} Result: [11, mybatis, 大哥, #飞哥的博客后台管理系统, 2020-02-25 22:49:26.0, 2020-02-25 22:49:26.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50040} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} Parameters : []
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} Types : []
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} executed. 0.637777 millis. select count(*) from `blog`
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50041} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50041} Header: [count(*)]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50041} Result: [13]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50041} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} Parameters : [0, 10]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} executed. 3.10222 millis. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog
         
            limit ?,?
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50042} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50042} Header: [id, type_name, title, content, create_time, change_time, author, view]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50042} Result: [1, springboot, springboot入门, springb自动装配, 2020-02-23 21:43:36.0, 2020-02-24 03:06:48.0, admin, 0]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50042} Result: [2, mybatis, 配置, 得到的, 2020-02-24 02:05:36.0, 2020-03-13 06:39:47.0, admin, 3]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50042} Result: [4, springMVC, mybatis-plus, ##飞哥, 2020-02-24 02:10:09.0, 2020-02-25 22:42:23.0, admin, 111]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50042} Result: [5, springboot, 人, 嗯嗯, 2020-02-24 03:07:20.0, 2020-02-24 03:07:20.0, admin, 2]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50042} Result: [6, mybatis, mybatis入门, <h2>1、Mybatis简介</h2>
<p><img src="https://blog.kuangstudy.com/usr/uploads/2019/10/1296229149.png" referrerpolicy="no-referrer" alt="1567007421329.png"></p>
<h3>什么是MyBatis</h3>
<ul>
<li>MyBatis 是一款优秀的<strong>持久层框架</strong></li>
<li>MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集的过程</li>
<li>MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 实体类 【Plain Old Java Objects,普通的 Java对象】映射成数据库中的记录。</li>
<li>MyBatis 本是apache的一个开源项目ibatis, 2010年这个项目由apache 迁移到了google code，并且改名为MyBatis 。</li>
<li>2013年11月迁移到<strong>Github</strong> .</li>
<li>Mybatis官方文档 : <a href='http://www.mybatis.org/mybatis-3/zh/index.html' target='_blank' class='url'>http://www.mybatis.org/mybatis-3/zh/index.html</a></li>
<li>GitHub : <a href='https://github.com/mybatis/mybatis-3' target='_blank' class='url'>https://github.com/mybatis/mybatis-3</a></li>

</ul>
<h3>持久化</h3>
<ul>
<li><p><strong>持久化是将程序数据在持久状态和瞬时状态间转换的机制。</strong></p>
<ul>
<li>即把数据（如内存中的对象）保存到可永久保存的存储设备中（如磁盘）。持久化的主要应用是将内存中的对象存储在数据库中，或者存储在磁盘文件中、XML数据文件中等等。</li>
<li>JDBC就是一种持久化机制。文件IO也是一种持久化机制。</li>
<li>在生活中 : 将鲜肉冷藏，吃的时候再解冻的方法也是。将水果做成罐头的方法也是。</li>

</ul>
</li>
<li><p><strong>为什么需要持久化服务呢？那是由于内存本身的缺陷引起的</strong></p>
<ul>
<li>内存断电后数据会丢失，但有一些对象是无论如何都不能丢失的，比如银行账号等，遗憾的是，人们还无法保证内存永不掉电。</li>
<li>内存过于昂贵，与硬盘、光盘等外存相比，内存的价格要高2~3个数量级，而且维持成本也高，至少需要一直供电吧。所以即使对象不需要永久保存，也会因为内存的容量限制不能一直呆在内存中，需要持久化来缓存到外存。</li>

</ul>
</li>

</ul>
<h3>持久层</h3>
<ul>
<li><p>什么是持久层？</p>
<ul>
<li>完成持久化工作的代码块 . ----&gt; dao层 【DAO (Data Access Object) 数据访问对象】</li>
<li>大多数情况下特别是企业级应用，数据持久化往往也就意味着将内存中的数据保存到磁盘上加以固化，而持久化的实现过程则大多通过各种<strong>关系数据库</strong>来完成。</li>
<li>不过这里有一个字需要特别强调，也就是所谓的“层”。对于应用系统而言，数据持久功能大多是必不可少的组成部分。也就是说，我们的系统中，已经天然的具备了“持久层”概念？也许是，但也许实际情况并非如此。之所以要独立出一个“持久层”的概念,而不是“持久模块”，“持久单元”，也就意味着，我们的系统架构中，应该有一个相对独立的逻辑层面，专著于数据持久化逻辑的实现.</li>
<li>与系统其他部分相对而言，这个层面应该具有一个较为清晰和严格的逻辑边界。 【说白了就是用来操作数据库存在的！】</li>

</ul>
</li>

</ul>
<h3>为什么需要Mybatis</h3>
<ul>
<li><p>Mybatis就是帮助程序猿将数据存入数据库中 , 和从数据库中取数据 .</p>
</li>
<li><p>传统的jdbc操作 , 有很多重复代码块 .比如 : 数据取出时的封装 , 数据库的建立连接等等... , 通过框架可以减少重复代码,提高开发效率 .</p>
</li>
<li><p>MyBatis 是一个半自动化的<strong>ORM框架 (Object Relationship Mapping) --&gt;对象关系映射</strong></p>
</li>
<li><p>所有的事情，不用Mybatis依旧可以做到，只是用了它，所有实现会更加简单！<strong>技术没有高低之分，只有使用这个技术的人有高低之别</strong></p>
</li>
<li><p>MyBatis的优点</p>
<ul>
<li>简单易学：本身就很小且简单。没有任何第三方依赖，最简单安装只要两个jar文件+配置几个sql映射文件就可以了，易于学习，易于使用，通过文档和源代码，可以比较完全的掌握它的设计思路和实现。</li>
<li>灵活：mybatis不会对应用程序或者数据库的现有设计强加任何影响。 sql写在xml里，便于统一管理和优化。通过sql语句可以满足操作数据库的所有需求。</li>
<li>解除sql与程序代码的耦合：通过提供DAO层，将业务逻辑和数据访问逻辑分离，使系统的设计更清晰，更易维护，更易单元测试。sql和代码的分离，提高了可维护性。</li>
<li>提供xml标签，支持编写动态sql。</li>
<li>.......</li>

</ul>
</li>
<li><p>最重要的一点，使用的人多！公司需要！</p>
</li>
<li><p>环境说明：</p>
<ul>
<li>jdk 8 +</li>
<li>MySQL 5.7.19</li>
<li>maven-3.6.0</li>
<li>IDEA</li>

</ul>
<p>学习前需要掌握：</p>
<ul>
<li>JDBC</li>
<li>MySQL</li>
<li>Java 基础</li>
<li>Maven</li>
<li>Junit</li>

</ul>
</li>

</ul>
<h2>2、mybatis crud（实现增删改查）</h2>
<h4>1.1、创建一个maven项目</h4>
<p>		导入依赖</p>
<pre><code class='language-xml' lang='xml'>&lt;dependencies&gt;
    &lt;!--mysql驱动--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;mysql&lt;/groupId&gt;
        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
        &lt;version&gt;5.1.47&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;!--mybatis支持--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.mybatis&lt;/groupId&gt;
        &lt;artifactId&gt;mybatis&lt;/artifactId&gt;
        &lt;version&gt;3.5.2&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;!--junit支持--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;junit&lt;/groupId&gt;
        &lt;artifactId&gt;junit&lt;/artifactId&gt;
        &lt;version&gt;4.12&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
</code></pre>
<p>注意点 : pom文件的设置中需要设置资源过滤 , 否则会有资源文件打包不成功问题，导致项目无法运行；</p>
<pre><code class='language-xml' lang='xml'>&lt;build&gt;
    &lt;resources&gt;
        &lt;resource&gt;
            &lt;directory&gt;src/main/java&lt;/directory&gt;
            &lt;includes&gt;
                &lt;include&gt;**/*.properties&lt;/include&gt;
                &lt;include&gt;**/*.xml&lt;/include&gt;
            &lt;/includes&gt;
            &lt;filtering&gt;true&lt;/filtering&gt;
        &lt;/resource&gt;
    &lt;/resources&gt;
&lt;/build&gt;
</code></pre>
<p>&nbsp;</p>
<h4>1.2、创建数据库和表</h4>
<pre><code class='language-sql' lang='sql'>CREATE DATABASE mybatis CHARACTER SET utf8;
CREATE TABLE USER(
	id INT PRIMARY KEY,
	username VARCHAR(15) NOT NULL,
	pwd VARCHAR(20) NOT NULL
)
INSERT INTO USER VALUES(2018143114,&#39;张三&#39;,&#39;123456&#39;),(2018143115,&#39;李四&#39;,&#39;1234567&#39;),(2018143116,&#39;王五&#39;,&#39;147258&#39;);
SELECT * FROM USER;
</code></pre>
<h4>1.3、编写mybatis配置文件</h4>
<p>在resource里新建一个mybatis-config.xml文件</p>
<pre><code class='language-xml' lang='xml'>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE configuration
        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;
&lt;configuration&gt;
    &lt;environments default=&quot;development&quot;&gt;
        &lt;environment id=&quot;development&quot;&gt;
            &lt;transactionManager type=&quot;JDBC&quot;/&gt;
            &lt;dataSource type=&quot;POOLED&quot;&gt;
                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;
                &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;amp;useUnicode=true&amp;amp;characterEncoding=utf8&quot;/&gt;
                &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;
                &lt;property name=&quot;password&quot; value=&quot;hufei169357&quot;/&gt;
            &lt;/dataSource&gt;
        &lt;/environment&gt;
    &lt;/environments&gt;
    &lt;mappers&gt;
        &lt;mapper resource=&quot;com/feige/dao/userMapper.xml&quot;/&gt;
    &lt;/mappers&gt;
&lt;/configuration&gt;
</code></pre>
<h4>1.4、新建一个工具类用来获取SqlSession对象</h4>
<pre><code class='language-java' lang='java'>package com.feige.utils;

import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import java.io.IOException;
import java.io.InputStream;
//sqlSessionFactory-sqlSession
public class MybatisUtils {
    private static SqlSessionFactory sqlSessionFactory;
    static {
        try {
            //使用mybatis第一步：获取sqlSessionFactory对象
            String resource = &quot;mybatis-config.xml&quot;;
            InputStream inputStream = Resources.getResourceAsStream(resource);
            sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    //既然有了sqlSessionFactory，顾名思义，我们就可以从中获得sqlSession的实例
    public static SqlSession getSqlSessioon(){
        return sqlSessionFactory.openSession();
    }
}

</code></pre>
<p>&nbsp;</p>
<h4>1.5、编写一个pojo（实体类）</h4>
<pre><code class='language-java' lang='java'>package com.feige.pojo;

public class User {
    private int id;
    private String username;
    private String pwd;

    public User() {
    }

    public User(int id, String username, String pwd) {
        this.id = id;
        this.username = username;
        this.pwd = pwd;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getPwd() {
        return pwd;
    }

    public void setPwd(String pwd) {
        this.pwd = pwd;
    }
    @Override
    public String toString() {
        return &quot;User{&quot; +
                &quot;id=&quot; + id +
                &quot;, username=&#39;&quot; + username + &#39;\&#39;&#39; +
                &quot;, pwd=&#39;&quot; + pwd + &#39;\&#39;&#39; +
                &#39;}&#39;;
    }
}

</code></pre>
<h4>1.6、新建一个userMapper接口</h4>
<pre><code class='language-java' lang='java'>package com.feige.dao;

import com.feige.pojo.User;

import java.util.List;
import java.util.Map;

public interface UserMapper {
    //查询全部用户
    List&lt;User&gt; getAllUser();
    //通过一个id查询一个用户
    User getUserById(int id);
    //通过id修改一个用户
    int updateUserById(Map map);
    //通过id删除一个用户
    int deleteUserById(int id);
    //插入一条数据
    int insertUser(User user);
}

</code></pre>
<h4>1.7、新建一个userMapper.xml文件</h4>
<pre><code class='language-xml' lang='xml'>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE mapper
        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;com.feige.dao.UserMapper&quot;&gt;
    &lt;!--每个语句要对应相应的标签select对应&lt;select&gt; delete 对应&lt;delete&gt; update 对应&lt;update&gt; insert 对应&lt;insert&gt;--&gt;
    &lt;select id=&quot;getAllUser&quot; resultType=&quot;com.feige.pojo.User&quot;&gt;
        select * from user
    &lt;/select&gt;
    &lt;select id=&quot;getUserById&quot; resultType=&quot;com.feige.pojo.User&quot; parameterType=&quot;int&quot;&gt;
        select * from user where id=#{id}
    &lt;/select&gt;
    &lt;update id=&quot;updateUserById&quot; parameterType=&quot;map&quot;&gt;
        update user set pwd=#{pwd} where id=#{id}
    &lt;/update&gt;
    &lt;delete id=&quot;deleteUserById&quot; parameterType=&quot;int&quot;&gt;
        delete from user where id=#{id}
    &lt;/delete&gt;
    &lt;insert id=&quot;insertUser&quot; parameterType=&quot;com.feige.pojo.User&quot;&gt;
        insert into user values (#{id},#{username},#{pwd})
    &lt;/insert&gt;
&lt;/mapper&gt;
</code></pre>
<h4>1.8、测试代码</h4>
<pre><code class='language-java' lang='java'>package com.feige.mybatisTest;

import com.feige.dao.UserMapper;
import com.feige.pojo.User;
import com.feige.utils.MybatisUtils;
import org.apache.ibatis.session.SqlSession;
import org.junit.Test;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MybatisTest {
    @Test
    public void mybatisTest1(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        List&lt;User&gt; allUser = mapper.getAllUser();
        for (User user : allUser) {
            System.out.println(user);
        }
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest2(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        User userById = mapper.getUserById(2018143114);
        System.out.println(userById);
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest3() {
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        //使用万能map传参
        Map&lt;String,Object&gt; map = new HashMap&lt;String, Object&gt;();
        map.put(&quot;pwd&quot;,2018143114);
        map.put(&quot;id&quot;,2018143114);

        int i = mapper.updateUserById(map);
        if (i &gt; 0) {
            System.out.println(&quot;修改成功！&quot;+i);
        }
        //增删改需要提交事务
        sqlSessioon.commit();

        sqlSessioon.close();

    }
    @Test
    public void mybatisTest4(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        int i = mapper.deleteUserById(2018143117);
        if (i &gt; 0) {
            System.out.println(&quot;删除成功！&quot;+i);
        }
        sqlSessioon.commit();
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest5(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        User user = new User(2018143117, &quot;杨帆东&quot;, &quot;2018143117&quot;);
        int i = mapper.insertUser(user);
        if (i &gt; 0) {
            System.out.println(&quot;插入成功！&quot;+i);
        }
        sqlSessioon.commit();
        sqlSessioon.close();

    }
}

</code></pre>
<p>&nbsp;</p>
<p>		</p>, 2020-02-24 03:15:45.0, 2020-02-24 03:15:50.0, admin, 0]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50042} Result: [7, mybatis, mybatis啊, 作者, 2020-02-24 03:27:18.0, 2020-02-24 03:27:18.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50042} Result: [8, springboot, aaa, [TOC]
                            #### Disabled options

                            - TeX (Based on KaTeX);
                            - Emoji;
                            - Task lists;
                            - HTML tags decode;
                            - Flowchart and Sequence Diagram;
                            #### Editor.md directory

                                editor.md/
                                        lib/
                                        css/
                                        scss/
                                        tests/
                                        fonts/
                                        images/
                                        plugins/
                                        examples/
                                        languages/
                                        editormd.js
                                        ...

                            ```html
                            <!-- English -->
                            <script src="../dist/js/languages/en.js"></script>

                            <!-- 繁體中文 -->
                            <script src="../dist/js/languages/zh-tw.js"></script>
                            ```
                        , 2020-02-25 03:39:36.0, 2020-02-25 22:38:07.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50042} Result: [9, mybatis, bbb, [TOC]

                            #### Disabled options

                            - TeX (Based on KaTeX);
                            - Emoji;
                            - Task lists;
                            - HTML tags decode;
                            - Flowchart and Sequence Diagram;

                            #### Editor.md directory

                                editor.md/
                                        lib/
                                        css/
                                        scss/
                                        tests/
                                        fonts/
                                        images/
                                        plugins/
                                        examples/
                                        languages/
                                        editormd.js
                                        ...

                            ```html
                            <!-- English -->
                            <script src="../dist/js/languages/en.js"></script>

                            <!-- 繁體中文 -->
                            <script src="../dist/js/languages/zh-tw.js"></script>
                            ```
                        , 2020-02-25 03:44:09.0, 2020-02-25 03:44:09.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50042} Result: [10, springboot, 飞哥, #大哥的Markdown, 2020-02-25 22:43:28.0, 2020-02-25 22:43:28.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50042} Result: [11, mybatis, 大哥, #飞哥的博客后台管理系统, 2020-02-25 22:49:26.0, 2020-02-25 22:49:26.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50042} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} Parameters : []
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} Types : []
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} executed. 1.432444 millis. select count(*) from `blog`
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50043} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50043} Header: [count(*)]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50043} Result: [13]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50043} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} Parameters : [10, 10]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} executed. 19.73776 millis. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog
         
            limit ?,?
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50044} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50044} Header: [id, type_name, title, content, create_time, change_time, author, view]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50044} Result: [12, mybatis, 56, ##等待, 2020-02-25 22:50:53.0, 2020-02-25 22:50:53.0, admin, 5]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50044} Result: [13, mybatis, ssm框架整合, # ssm整合

## 1、数据库环境

创建一个存放书籍数据的数据库表

```
CREATE DATABASE `ssmbuild`;

USE `ssmbuild`;

DROP TABLE IF EXISTS `books`;

CREATE TABLE `books` (
  `bookId` INT PRIMARY KEY COMMENT '书id',
  `bookName` VARCHAR(100) NOT NULL COMMENT '书名',
  `bookCounts` INT(11) NOT NULL COMMENT '数量',
  ``ssmbuild``ssmbuild`` VARCHAR(200) NOT NULL COMMENT '描述'
) ENGINE=INNODB DEFAULT CHARSET=utf8

INSERT  INTO `books`(`bookId`,`bookName`,`bookCounts`,`detail`)VALUES 
(1,'Java',1,'从入门到放弃'),
(2,'MySQL',10,'从删库到跑路'),
(3,'Linux',5,'从进门到进牢');

SELECT * FROM books
```

## 2、基本环境搭建

1. 新建一Maven项目！ ssmbuild ， 添加web的支持

   ![image-20200128134359317](https://gitee.com/feigeCode/java_blog/raw/master/java/ssm%E6%95%B4%E5%90%88.assets/image-20200128134359317.png)

2. 导入相关的pom依赖！

   ```
   <dependencies>
       <!--Junit-->
       <dependency>
           <groupId>junit</groupId>
           <artifactId>junit</artifactId>
           <version>4.12</version>
       </dependency>
       <!--数据库驱动-->
       <dependency>
           <groupId>mysql</groupId>
           <artifactId>mysql-connector-java</artifactId>
           <version>5.1.47</version>
       </dependency>
       <!-- 数据库连接池 -->
       <dependency>
           <groupId>com.mchange</groupId>
           <artifactId>c3p0</artifactId>
           <version>0.9.5.2</version>
       </dependency>
   
       <!--Servlet - JSP -->
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>servlet-api</artifactId>
           <version>2.5</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet.jsp</groupId>
           <artifactId>jsp-api</artifactId>
           <version>2.2</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>jstl</artifactId>
           <version>1.2</version>
       </dependency>
   
       <!--Mybatis-->
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis</artifactId>
           <version>3.5.2</version>
       </dependency>
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis-spring</artifactId>
           <version>2.0.2</version>
       </dependency>
   
       <!--Spring-->
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-webmvc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-jdbc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->
       <dependency>
           <groupId>org.projectlombok</groupId>
           <artifactId>lombok</artifactId>
           <version>1.16.10</version>
       </dependency>
   </dependencies>
   ```

3. Maven资源过滤设置

   ```
   <build>
       <resources>
           <resource>
               <directory>src/main/java</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
           <resource>
               <directory>src/main/resources</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
       </resources>
   </build>
   ```

4. 建立基本结构和配置框架！

   - com.feige.pojo

   - com.feige.dao

   - com.feige.service

   - com.feige.controller

     在resources目录下创建

   - mybatis-config.xml

     ```
     <?xml version="1.0" encoding="UTF-8" ?>
     <!DOCTYPE configuration
             PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
             "http://mybatis.org/dtd/mybatis-3-config.dtd">
     <configuration>
     
     </configuration>
     ```

   - applicationContext.xml

     ```
     <?xml version="1.0" encoding="UTF-8"?>
     <beans xmlns="http://www.springframework.org/schema/beans"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://www.springframework.org/schema/beans
             http://www.springframework.org/schema/beans/spring-beans.xsd">
     
     </beans>
     ```

## 3、Mybatis层编写

1. 数据库配置文件 **database.properties**

   ```
   jdbc.driver=com.mysql.jdbc.Driver
   jdbc.url=jdbc:mysql://localhost:3306/ssmbuild?useSSL=true&useUnicode=true&characterEncoding=utf8
   jdbc.username=root
   jdbc.password=hufei169357
   ```

2. IDEA关联数据库

3. 编写MyBatis的核心配置文件

   ```
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE configuration
           PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-config.dtd">
   <configuration>
       
       <typeAliases>
           <package name="com.feige.pojo"/>
       </typeAliases>
       <mappers>
           <mapper resource="com/feige/dao/BookMapper.xml"/>
       </mappers>
   
   </configuration>
   ```

4. 编写数据库对应的实体类 com.feige.pojo.Books 使用lombok插件！

   ```
   package com.kuang.pojo;
   
   import lombok.AllArgsConstructor;
   import lombok.Data;
   import lombok.NoArgsConstructor;
   
   @Data
   @AllArgsConstructor
   @NoArgsConstructor
   public class Books {
       
       private int bookId;
       private String bookName;
       private int bookCounts;
       private String detail;
       
   }
   ```

5. 编写Dao层的 Mapper接口！

   ```
   package com.kuang.dao;
   
   import com.kuang.pojo.Books;
   import java.util.List;
   
   public interface BookMapper {
   
       //增加一个Book
       int addBook(Books book);
   
       //根据id删除一个Book
       int deleteBookById(int id);
   
       //更新Book
       int updateBook(Books books);
   
       //根据id查询,返回一个Book
       Books queryBookById(int id);
   
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   
   }
   ```

6. 编写接口对应的 Mapper.xml 文件。需要导入MyBatis的包；

   ```
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE mapper
           PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
   
   <mapper namespace="com.feige.dao.BooksMapper">
   
       <!--增加一个Book-->
       <insert id="addBook" parameterType="Books">
           insert into books(bookName,bookCounts,detail)
           values (#{bookName}, #{bookCounts}, #{detail})
       </insert>
   
       <!--根据id删除一个Book-->
       <delete id="deleteBookById" parameterType="int">
           delete from books where bookId=#{bookId}
       </delete>
   
       <!--更新Book-->
       <update id="updateBook" parameterType="Books">
           update books
           set bookName = #{bookName},bookCounts = #{bookCounts},detail = #{detail}
           where bookId = #{bookId}
       </update>
   
       <!--根据id查询,返回一个Book-->
       <select id="queryBookById" resultType="Books">
           select * from books
           where bookID = #{bookId}
       </select>
   
       <!--查询全部Book-->
       <select id="queryAllBook" resultType="com.feige.pojo.Books">
           SELECT * from books
       </select>
   
   </mapper>
   ```

7. 编写Service层的接口和实现类 接口：

   ```
   package com.feige.service;
   
   import com.feige.pojo.Books;
   
   import java.util.List;
   
   //BookService:底下需要去实现,调用dao层
   public interface BookService {
       //增加一个Book
       int addBook(Books book);
       //根据id删除一个Book
       int deleteBookById(int id);
       //更新Book
       int updateBook(Books books);
       //根据id查询,返回一个Book
       Books queryBookById(int id);
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   }
   ```

实现类：

```
package com.feige.service;

import com.feige.dao.BookMapper;
import com.feige.pojo.Books;
import java.util.List;

public class BookServiceImpl implements BookService {

    //调用dao层的操作，设置一个set接口，方便Spring管理
    private BookMapper bookMapper;

    public void setBookMapper(BookMapper bookMapper) {
        this.bookMapper = bookMapper;
    }
    
    public int addBook(Books book) {
        return bookMapper.addBook(book);
    }
    
    public int deleteBookById(int id) {
        return bookMapper.deleteBookById(id);
    }
    
    public int updateBook(Books books) {
        return bookMapper.updateBook(books);
    }
    
    public Books queryBookById(int id) {
        return bookMapper.queryBookById(id);
    }
    
    public List<Books> queryAllBook() {
        return bookMapper.queryAllBook();
    }
}
```

**OK，到此，底层需求操作编写完毕！**

## 4、Spring层

1. 配置**Spring整合MyBatis**，我们这里数据源使用c3p0连接池；

2. 我们去编写Spring整合Mybatis的相关的配置文件； spring-dao.xml

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans.xsd
   http://www.springframework.org/schema/context
   https://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 配置整合mybatis -->
       <!-- 1.关联数据库文件 -->
       <context:property-placeholder location="classpath:database.properties"/>
   
       <!-- 2.数据库连接池 -->
       <!--数据库连接池
   dbcp  半自动化操作  不能自动连接
   c3p0  自动化操作（自动的加载配置文件 并且设置到对象里面）
       -->
       <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
   <!-- 配置连接池属性 -->
   <property name="driverClass" value="${jdbc.driver}"/>
   <property name="jdbcUrl" value="${jdbc.url}"/>
   <property name="user" value="${jdbc.username}"/>
   <property name="password" value="${jdbc.password}"/>
   
   <!-- c3p0连接池的私有属性 -->
   <property name="maxPoolSize" value="30"/>
   <property name="minPoolSize" value="10"/>
   <!-- 关闭连接后不自动commit -->
   <property name="autoCommitOnClose" value="false"/>
   <!-- 获取连接超时时间 -->
   <property name="checkoutTimeout" value="10000"/>
   <!-- 当获取连接失败重试次数 -->
   <property name="acquireRetryAttempts" value="2"/>
       </bean>
   
       <!-- 3.配置SqlSessionFactory对象 -->
       <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource"/>
   <!-- 配置MyBaties全局配置文件:mybatis-config.xml -->
   <property name="configLocation" value="classpath:mybatis-config.xml"/>
       </bean>
   
       <!-- 4.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 -->
       <!--解释 ： https://www.cnblogs.com/jpfss/p/7799806.html-->
       <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
   <!-- 注入sqlSessionFactory -->
   <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
   <!-- 给出需要扫描Dao接口包 -->
   <property name="basePackage" value="com.feige.dao"/>
       </bean>
   
   </beans>
   ```

3. **Spring整合service层**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 扫描service相关的bean -->
       <context:component-scan base-package="com.kuang.service" />
   
       <!--BookServiceImpl注入到IOC容器中-->
       <bean id="BookServiceImpl" class="com.kuang.service.BookServiceImpl">
   <property name="bookMapper" ref="bookMapper"/>
       </bean>
   
       <!-- 配置事务管理器 -->
       <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource" />
       </bean>
   
   </beans>
   ```

Spring层搞定！再次理解一下，Spring就是一个大杂烩，一个容器！对吧！

## 5、SpringMVC层

1. **web.xml**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
            version="4.0">
   
       <!--DispatcherServlet-->
       <servlet>
           <servlet-name>DispatcherServlet</servlet-name>
           <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
           <init-param>
               <param-name>contextConfigLocation</param-name>
               <param-value>classpath:applicationContext.xml</param-value>
           </init-param>
           <load-on-startup>1</load-on-startup>
       </servlet>
       <servlet-mapping>
           <servlet-name>DispatcherServlet</servlet-name>
           <url-pattern>/</url-pattern>
       </servlet-mapping>
   
       <!--encodingFilter-->
       <filter>
           <filter-name>encodingFilter</filter-name>
           <filter-class>
               org.springframework.web.filter.CharacterEncodingFilter
           </filter-class>
           <init-param>
               <param-name>encoding</param-name>
               <param-value>utf-8</param-value>
           </init-param>
       </filter>
       <filter-mapping>
           <filter-name>encodingFilter</filter-name>
           <url-pattern>/*</url-pattern>
       </filter-mapping>
       
       <!--Session过期时间-->
       <session-config>
           <session-timeout>15</session-timeout>
       </session-config>
       
   </web-app>
   ```

2. **spring-mvc.xml**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xmlns:mvc="http://www.springframework.org/schema/mvc"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       https://www.springframework.org/schema/mvc/spring-mvc.xsd">
   
       <!-- 配置SpringMVC -->
       <!-- 1.开启SpringMVC注解驱动 -->
       <mvc:annotation-driven>
           <mvc:message-converters register-defaults="true">
               <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                   <constructor-arg value="UTF-8"/>
               </bean>
               <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                   <property name="objectMapper">
                       <bean class="org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean">
                           <property name="failOnEmptyBeans" value="false"/>
                       </bean>
                   </property>
               </bean>
           </mvc:message-converters>
       </mvc:annotation-driven>
       <!--解决跨域问题-->
       <mvc:cors>
       <mvc:mapping path="/**"
                    allowed-origins="http://127.0.0.1:8090,http://localhost:8090"
                    allowed-methods="POST,GET, OPTIONS,DELETE,PUT"
                    allowed-headers="Content-Type,ContentType,Access-Control-Allow-Headers, Authorization, X-Requested-With"
                    allow-credentials="true"/>
       </mvc:cors>
       <!-- 2.静态资源默认servlet配置-->
       <mvc:default-servlet-handler/>
   
       <!-- 3.配置jsp 显示ViewResolver视图解析器 -->
       <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
           <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
           <property name="prefix" value="/WEB-INF/jsp/" />
           <property name="suffix" value=".jsp" />
       </bean>
   
       <!-- 4.扫描web相关的bean -->
       <context:component-scan base-package="com.feige.controller" />
   
   </beans>
   ```

3. **Spring配置整合文件，applicationContext.xml**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd">
   
       <import resource="spring-dao.xml"/>
       <import resource="spring-service.xml"/>
       <import resource="spring-mvc.xml"/>
       
   </beans>
   ```

**配置文件，暂时结束！Controller 和 视图层编写**

1. BookController 类编写 ， 方法一：查询全部书籍

   ```
   @Controller
   @RequestMapping("/book")
   public class BookController {
   
       @Autowired
       @Qualifier("BookServiceImpl")
       private BookService bookService;
   
       @RequestMapping("/allBook")
       public String list(Model model) {
           List<Books> list = bookService.queryAllBook();
           model.addAttribute("list", list);
           return "allBook";
       }
   }
   ```

2. 编写首页 **index.jsp**

   ```
   <%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" %>
   <!DOCTYPE HTML>
   <html>
   <head>
       <title>首页</title>
       <style type="text/css">
           a {
               text-decoration: none;
               color: black;
               font-size: 18px;
           }
           h3 {
               width: 180px;
               height: 38px;
               margin: 100px auto;
               text-align: center;
               line-height: 38px;
               background: deepskyblue;
               border-radius: 4px;
           }
       </style>
   </head>
   <body>
   
   <h3>
       <a href="${pageContext.request.contextPath}/book/allBook">点击进入列表页</a>
   </h3>
   </body>
   </html>
   ```

3. 书籍列表页面 **allbook.jsp**

   ```
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>书籍列表</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>书籍列表 —— 显示所有书籍</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <div class="row">
           <div class="col-md-4 column">
               <a class="btn btn-primary" href="${pageContext.request.contextPath}/book/toAddBook">新增</a>
           </div>
       </div>
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <table class="table table-hover table-striped">
                   <thead>
                   <tr>
                       <th>书籍编号</th>
                       <th>书籍名字</th>
                       <th>书籍数量</th>
                       <th>书籍详情</th>
                       <th>操作</th>
                   </tr>
                   </thead>
   
                   <tbody>
                   <c:forEach var="book" items="${requestScope.get('list')}">
                       <tr>
                           <td>${book.getBookId()}</td>
                           <td>${book.getBookName()}</td>
                           <td>${book.getBookCounts()}</td>
                           <td>${book.getDetail()}</td>
                           <td>
                               <a href="${pageContext.request.contextPath}/book/toUpdateBook?id=${book.getBookId()}">更改</a> |
                               <a href="${pageContext.request.contextPath}/book/del/${book.getBookId()}">删除</a>
                           </td>
                       </tr>
                   </c:forEach>
                   </tbody>
               </table>
           </div>
       </div>
   </div>
   ```

4. BookController 类编写 ， 方法二：添加书籍

   ```
   @RequestMapping("/toAddBook")
   public String toAddPaper() {
       return "addBook";
   }
   
   @RequestMapping("/addBook")
   public String addPaper(Books books) {
       System.out.println(books);
       bookService.addBook(books);
       return "redirect:/book/allBook";
   }
   ```

5. 添加书籍页面：**addBook.jsp**

   ```
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   
   <html>
   <head>
       <title>新增书籍</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>新增书籍</small>
                   </h1>
               </div>
           </div>
       </div>
       <form action="${pageContext.request.contextPath}/book/addBook" method="post">
           书籍名称：<input type="text" name="bookName"><br><br><br>
           书籍数量：<input type="text" name="bookCounts"><br><br><br>
           书籍详情：<input type="text" name="detail"><br><br><br>
           <input type="submit" value="添加">
       </form>
   
   </div>
   ```

6. BookController 类编写 ， 方法三：修改书籍

   ```
   @RequestMapping("/toUpdateBook")
   public String toUpdateBook(Model model, int id) {
       Books books = bookService.queryBookById(id);
       System.out.println(books);
       model.addAttribute("book",books );
       return "updateBook";
   }
   
   @RequestMapping("/updateBook")
   public String updateBook(Model model, Books book) {
       bookService.updateBook(book);
       Books books = bookService.queryBookById(book.getBookID());
       model.addAttribute("books", books);
       return "redirect:/book/allBook";
   }
   ```

7. 修改书籍页面 **updateBook.jsp**

   ```
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>修改信息</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>修改信息</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <form action="${pageContext.request.contextPath}/book/updateBook" method="post">
           <input type="hidden" name="bookID" value="${book.getBookId()}"/>
           书籍名称：<input type="text" name="bookName" value="${book.getBookName()}"/>
           书籍数量：<input type="text" name="bookCounts" value="${book.getBookCounts()}"/>
           书籍详情：<input type="text" name="detail" value="${book.getDetail() }"/>
           <input type="submit" value="提交"/>
       </form>
   
   </div>
   ```

8. BookController 类编写 ， 方法四：删除书籍

   ```
   @RequestMapping("/del/{bookId}")
   public String deleteBook(@PathVariable("bookId") int id) {
       bookService.deleteBookById(id);
       return "redirect:/book/allBook";
   }
   ```

**配置Tomcat，进行运行！**

到目前为止，这个SSM项目整合已经完全的OK了，可以直接运行进行测试！这个练习十分的重要，大家需要保证，不看任何东西，自己也可以完整的实现出来！

## **6、项目结构图**

![1570186854191.png](https://blog.kuangstudy.com/usr/uploads/2019/10/1086489242.png)

![1570186868239.png](https://blog.kuangstudy.com/usr/uploads/2019/10/2326667495.png)

## 7、错误排查

### 1、访问出现404，排查步骤：**

1. 查看控制台输出，看一下是不是缺少了什么jar包。

2. 如果jar包存在，显示无法输出，就在IDEA的项目发布中，添加lib依赖！

   步骤：点击项目结构----->Artifacts----->点击自己的项目(ssm:war exploded)--->(点击工具栏的第一个)在WEB-INF目录下新建一个lib包----->选中lib------>点击工具栏的第三个然后选中第一个---->把里面的包全部选中点击ok---->点击Apply再ok

   ![image-20200128125126368](https://gitee.com/feigeCode/java_blog/raw/master/java/ssm%E6%95%B4%E5%90%88.assets/image-20200128125126368.png)

   ![image-20200128125237179](https://gitee.com/feigeCode/java_blog/raw/master/java/ssm%E6%95%B4%E5%90%88.assets/image-20200128125237179.png)

3. 重启Tomcat 即可解决！

### 2、其他错误

#### 1、bean不存在

 步骤：

 查看bean注入是否成功

 junit单元测试，看我们的代码是否能够查询出来

 问题不在底层，是我们spring出了问题

 springMVC整合时没有调用到service层的bean

 applicationContext.xml没有注册bean

 web.xml也绑定过配置文件要绑定大的applicationContext.xml



## 8、小结及展望

这个是同学们的第一个SSM整合案例，一定要烂熟于心！

SSM框架的重要程度是不言而喻的，学到这里，大家已经可以进行基本网站的单独开发。但是这只是增删改查的基本操作。可以说学到这里，大家才算是真正的步入了后台开发的门。也就是能找一个后台相关工作的底线。

或许很多人，工作就做这些事情，但是对于个人的提高来说，还远远不够！

| 飞哥 | 飞哥 | 飞哥 |
| ---- | ---- | ---- |
| 飞哥 | 飞哥 | 飞哥 |
| 飞哥 | 飞哥 | 飞哥 |
| 飞哥 | 飞哥 | 飞哥 |



~~~java
static class CustomAttributeProvider implements AttributeProvider {

        @Override
        public void setAttributes(Node node, String s, Map<String, String> map) {
            //改变a标签的target属性为_blank
            if(node instanceof Link) {
                map.put("target","_blank");
            }
            if (node instanceof TableBlock) {
                map.put("class","el-table__body-wrapper is-scrolling-none");
            }
            if (node instanceof TableBody) {
                map.put("class","el-table__body");
            }
            if (node instanceof TableRow) {
                map.put("class","el-table__row");
            }
            if (node instanceof TableCell) {
                map.put("class","el-table_13_column_55");
            }
        }
~~~

# feige

, 2020-03-02 07:06:53.0, 2020-03-13 06:59:47.0, admin, 10]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50044} Result: [17, springboot, ss, ss, 2020-02-24 03:07:20.0, 2020-03-20 00:07:13.0, admin, 11]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50044} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} Parameters : []
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} Types : []
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} executed. 0.918221 millis. select count(*) from `blog`
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50045} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50045} Header: [count(*)]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50045} Result: [13]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50045} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} Parameters : [0, 10]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} executed. 1.563109 millis. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog
         
            limit ?,?
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50046} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50046} Header: [id, type_name, title, content, create_time, change_time, author, view]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50046} Result: [1, springboot, springboot入门, springb自动装配, 2020-02-23 21:43:36.0, 2020-02-24 03:06:48.0, admin, 0]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50046} Result: [2, mybatis, 配置, 得到的, 2020-02-24 02:05:36.0, 2020-03-13 06:39:47.0, admin, 3]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50046} Result: [4, springMVC, mybatis-plus, ##飞哥, 2020-02-24 02:10:09.0, 2020-02-25 22:42:23.0, admin, 111]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50046} Result: [5, springboot, 人, 嗯嗯, 2020-02-24 03:07:20.0, 2020-02-24 03:07:20.0, admin, 2]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50046} Result: [6, mybatis, mybatis入门, <h2>1、Mybatis简介</h2>
<p><img src="https://blog.kuangstudy.com/usr/uploads/2019/10/1296229149.png" referrerpolicy="no-referrer" alt="1567007421329.png"></p>
<h3>什么是MyBatis</h3>
<ul>
<li>MyBatis 是一款优秀的<strong>持久层框架</strong></li>
<li>MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集的过程</li>
<li>MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 实体类 【Plain Old Java Objects,普通的 Java对象】映射成数据库中的记录。</li>
<li>MyBatis 本是apache的一个开源项目ibatis, 2010年这个项目由apache 迁移到了google code，并且改名为MyBatis 。</li>
<li>2013年11月迁移到<strong>Github</strong> .</li>
<li>Mybatis官方文档 : <a href='http://www.mybatis.org/mybatis-3/zh/index.html' target='_blank' class='url'>http://www.mybatis.org/mybatis-3/zh/index.html</a></li>
<li>GitHub : <a href='https://github.com/mybatis/mybatis-3' target='_blank' class='url'>https://github.com/mybatis/mybatis-3</a></li>

</ul>
<h3>持久化</h3>
<ul>
<li><p><strong>持久化是将程序数据在持久状态和瞬时状态间转换的机制。</strong></p>
<ul>
<li>即把数据（如内存中的对象）保存到可永久保存的存储设备中（如磁盘）。持久化的主要应用是将内存中的对象存储在数据库中，或者存储在磁盘文件中、XML数据文件中等等。</li>
<li>JDBC就是一种持久化机制。文件IO也是一种持久化机制。</li>
<li>在生活中 : 将鲜肉冷藏，吃的时候再解冻的方法也是。将水果做成罐头的方法也是。</li>

</ul>
</li>
<li><p><strong>为什么需要持久化服务呢？那是由于内存本身的缺陷引起的</strong></p>
<ul>
<li>内存断电后数据会丢失，但有一些对象是无论如何都不能丢失的，比如银行账号等，遗憾的是，人们还无法保证内存永不掉电。</li>
<li>内存过于昂贵，与硬盘、光盘等外存相比，内存的价格要高2~3个数量级，而且维持成本也高，至少需要一直供电吧。所以即使对象不需要永久保存，也会因为内存的容量限制不能一直呆在内存中，需要持久化来缓存到外存。</li>

</ul>
</li>

</ul>
<h3>持久层</h3>
<ul>
<li><p>什么是持久层？</p>
<ul>
<li>完成持久化工作的代码块 . ----&gt; dao层 【DAO (Data Access Object) 数据访问对象】</li>
<li>大多数情况下特别是企业级应用，数据持久化往往也就意味着将内存中的数据保存到磁盘上加以固化，而持久化的实现过程则大多通过各种<strong>关系数据库</strong>来完成。</li>
<li>不过这里有一个字需要特别强调，也就是所谓的“层”。对于应用系统而言，数据持久功能大多是必不可少的组成部分。也就是说，我们的系统中，已经天然的具备了“持久层”概念？也许是，但也许实际情况并非如此。之所以要独立出一个“持久层”的概念,而不是“持久模块”，“持久单元”，也就意味着，我们的系统架构中，应该有一个相对独立的逻辑层面，专著于数据持久化逻辑的实现.</li>
<li>与系统其他部分相对而言，这个层面应该具有一个较为清晰和严格的逻辑边界。 【说白了就是用来操作数据库存在的！】</li>

</ul>
</li>

</ul>
<h3>为什么需要Mybatis</h3>
<ul>
<li><p>Mybatis就是帮助程序猿将数据存入数据库中 , 和从数据库中取数据 .</p>
</li>
<li><p>传统的jdbc操作 , 有很多重复代码块 .比如 : 数据取出时的封装 , 数据库的建立连接等等... , 通过框架可以减少重复代码,提高开发效率 .</p>
</li>
<li><p>MyBatis 是一个半自动化的<strong>ORM框架 (Object Relationship Mapping) --&gt;对象关系映射</strong></p>
</li>
<li><p>所有的事情，不用Mybatis依旧可以做到，只是用了它，所有实现会更加简单！<strong>技术没有高低之分，只有使用这个技术的人有高低之别</strong></p>
</li>
<li><p>MyBatis的优点</p>
<ul>
<li>简单易学：本身就很小且简单。没有任何第三方依赖，最简单安装只要两个jar文件+配置几个sql映射文件就可以了，易于学习，易于使用，通过文档和源代码，可以比较完全的掌握它的设计思路和实现。</li>
<li>灵活：mybatis不会对应用程序或者数据库的现有设计强加任何影响。 sql写在xml里，便于统一管理和优化。通过sql语句可以满足操作数据库的所有需求。</li>
<li>解除sql与程序代码的耦合：通过提供DAO层，将业务逻辑和数据访问逻辑分离，使系统的设计更清晰，更易维护，更易单元测试。sql和代码的分离，提高了可维护性。</li>
<li>提供xml标签，支持编写动态sql。</li>
<li>.......</li>

</ul>
</li>
<li><p>最重要的一点，使用的人多！公司需要！</p>
</li>
<li><p>环境说明：</p>
<ul>
<li>jdk 8 +</li>
<li>MySQL 5.7.19</li>
<li>maven-3.6.0</li>
<li>IDEA</li>

</ul>
<p>学习前需要掌握：</p>
<ul>
<li>JDBC</li>
<li>MySQL</li>
<li>Java 基础</li>
<li>Maven</li>
<li>Junit</li>

</ul>
</li>

</ul>
<h2>2、mybatis crud（实现增删改查）</h2>
<h4>1.1、创建一个maven项目</h4>
<p>		导入依赖</p>
<pre><code class='language-xml' lang='xml'>&lt;dependencies&gt;
    &lt;!--mysql驱动--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;mysql&lt;/groupId&gt;
        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
        &lt;version&gt;5.1.47&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;!--mybatis支持--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.mybatis&lt;/groupId&gt;
        &lt;artifactId&gt;mybatis&lt;/artifactId&gt;
        &lt;version&gt;3.5.2&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;!--junit支持--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;junit&lt;/groupId&gt;
        &lt;artifactId&gt;junit&lt;/artifactId&gt;
        &lt;version&gt;4.12&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
</code></pre>
<p>注意点 : pom文件的设置中需要设置资源过滤 , 否则会有资源文件打包不成功问题，导致项目无法运行；</p>
<pre><code class='language-xml' lang='xml'>&lt;build&gt;
    &lt;resources&gt;
        &lt;resource&gt;
            &lt;directory&gt;src/main/java&lt;/directory&gt;
            &lt;includes&gt;
                &lt;include&gt;**/*.properties&lt;/include&gt;
                &lt;include&gt;**/*.xml&lt;/include&gt;
            &lt;/includes&gt;
            &lt;filtering&gt;true&lt;/filtering&gt;
        &lt;/resource&gt;
    &lt;/resources&gt;
&lt;/build&gt;
</code></pre>
<p>&nbsp;</p>
<h4>1.2、创建数据库和表</h4>
<pre><code class='language-sql' lang='sql'>CREATE DATABASE mybatis CHARACTER SET utf8;
CREATE TABLE USER(
	id INT PRIMARY KEY,
	username VARCHAR(15) NOT NULL,
	pwd VARCHAR(20) NOT NULL
)
INSERT INTO USER VALUES(2018143114,&#39;张三&#39;,&#39;123456&#39;),(2018143115,&#39;李四&#39;,&#39;1234567&#39;),(2018143116,&#39;王五&#39;,&#39;147258&#39;);
SELECT * FROM USER;
</code></pre>
<h4>1.3、编写mybatis配置文件</h4>
<p>在resource里新建一个mybatis-config.xml文件</p>
<pre><code class='language-xml' lang='xml'>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE configuration
        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;
&lt;configuration&gt;
    &lt;environments default=&quot;development&quot;&gt;
        &lt;environment id=&quot;development&quot;&gt;
            &lt;transactionManager type=&quot;JDBC&quot;/&gt;
            &lt;dataSource type=&quot;POOLED&quot;&gt;
                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;
                &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;amp;useUnicode=true&amp;amp;characterEncoding=utf8&quot;/&gt;
                &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;
                &lt;property name=&quot;password&quot; value=&quot;hufei169357&quot;/&gt;
            &lt;/dataSource&gt;
        &lt;/environment&gt;
    &lt;/environments&gt;
    &lt;mappers&gt;
        &lt;mapper resource=&quot;com/feige/dao/userMapper.xml&quot;/&gt;
    &lt;/mappers&gt;
&lt;/configuration&gt;
</code></pre>
<h4>1.4、新建一个工具类用来获取SqlSession对象</h4>
<pre><code class='language-java' lang='java'>package com.feige.utils;

import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import java.io.IOException;
import java.io.InputStream;
//sqlSessionFactory-sqlSession
public class MybatisUtils {
    private static SqlSessionFactory sqlSessionFactory;
    static {
        try {
            //使用mybatis第一步：获取sqlSessionFactory对象
            String resource = &quot;mybatis-config.xml&quot;;
            InputStream inputStream = Resources.getResourceAsStream(resource);
            sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    //既然有了sqlSessionFactory，顾名思义，我们就可以从中获得sqlSession的实例
    public static SqlSession getSqlSessioon(){
        return sqlSessionFactory.openSession();
    }
}

</code></pre>
<p>&nbsp;</p>
<h4>1.5、编写一个pojo（实体类）</h4>
<pre><code class='language-java' lang='java'>package com.feige.pojo;

public class User {
    private int id;
    private String username;
    private String pwd;

    public User() {
    }

    public User(int id, String username, String pwd) {
        this.id = id;
        this.username = username;
        this.pwd = pwd;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getPwd() {
        return pwd;
    }

    public void setPwd(String pwd) {
        this.pwd = pwd;
    }
    @Override
    public String toString() {
        return &quot;User{&quot; +
                &quot;id=&quot; + id +
                &quot;, username=&#39;&quot; + username + &#39;\&#39;&#39; +
                &quot;, pwd=&#39;&quot; + pwd + &#39;\&#39;&#39; +
                &#39;}&#39;;
    }
}

</code></pre>
<h4>1.6、新建一个userMapper接口</h4>
<pre><code class='language-java' lang='java'>package com.feige.dao;

import com.feige.pojo.User;

import java.util.List;
import java.util.Map;

public interface UserMapper {
    //查询全部用户
    List&lt;User&gt; getAllUser();
    //通过一个id查询一个用户
    User getUserById(int id);
    //通过id修改一个用户
    int updateUserById(Map map);
    //通过id删除一个用户
    int deleteUserById(int id);
    //插入一条数据
    int insertUser(User user);
}

</code></pre>
<h4>1.7、新建一个userMapper.xml文件</h4>
<pre><code class='language-xml' lang='xml'>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE mapper
        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;com.feige.dao.UserMapper&quot;&gt;
    &lt;!--每个语句要对应相应的标签select对应&lt;select&gt; delete 对应&lt;delete&gt; update 对应&lt;update&gt; insert 对应&lt;insert&gt;--&gt;
    &lt;select id=&quot;getAllUser&quot; resultType=&quot;com.feige.pojo.User&quot;&gt;
        select * from user
    &lt;/select&gt;
    &lt;select id=&quot;getUserById&quot; resultType=&quot;com.feige.pojo.User&quot; parameterType=&quot;int&quot;&gt;
        select * from user where id=#{id}
    &lt;/select&gt;
    &lt;update id=&quot;updateUserById&quot; parameterType=&quot;map&quot;&gt;
        update user set pwd=#{pwd} where id=#{id}
    &lt;/update&gt;
    &lt;delete id=&quot;deleteUserById&quot; parameterType=&quot;int&quot;&gt;
        delete from user where id=#{id}
    &lt;/delete&gt;
    &lt;insert id=&quot;insertUser&quot; parameterType=&quot;com.feige.pojo.User&quot;&gt;
        insert into user values (#{id},#{username},#{pwd})
    &lt;/insert&gt;
&lt;/mapper&gt;
</code></pre>
<h4>1.8、测试代码</h4>
<pre><code class='language-java' lang='java'>package com.feige.mybatisTest;

import com.feige.dao.UserMapper;
import com.feige.pojo.User;
import com.feige.utils.MybatisUtils;
import org.apache.ibatis.session.SqlSession;
import org.junit.Test;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MybatisTest {
    @Test
    public void mybatisTest1(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        List&lt;User&gt; allUser = mapper.getAllUser();
        for (User user : allUser) {
            System.out.println(user);
        }
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest2(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        User userById = mapper.getUserById(2018143114);
        System.out.println(userById);
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest3() {
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        //使用万能map传参
        Map&lt;String,Object&gt; map = new HashMap&lt;String, Object&gt;();
        map.put(&quot;pwd&quot;,2018143114);
        map.put(&quot;id&quot;,2018143114);

        int i = mapper.updateUserById(map);
        if (i &gt; 0) {
            System.out.println(&quot;修改成功！&quot;+i);
        }
        //增删改需要提交事务
        sqlSessioon.commit();

        sqlSessioon.close();

    }
    @Test
    public void mybatisTest4(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        int i = mapper.deleteUserById(2018143117);
        if (i &gt; 0) {
            System.out.println(&quot;删除成功！&quot;+i);
        }
        sqlSessioon.commit();
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest5(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        User user = new User(2018143117, &quot;杨帆东&quot;, &quot;2018143117&quot;);
        int i = mapper.insertUser(user);
        if (i &gt; 0) {
            System.out.println(&quot;插入成功！&quot;+i);
        }
        sqlSessioon.commit();
        sqlSessioon.close();

    }
}

</code></pre>
<p>&nbsp;</p>
<p>		</p>, 2020-02-24 03:15:45.0, 2020-02-24 03:15:50.0, admin, 0]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50046} Result: [7, mybatis, mybatis啊, 作者, 2020-02-24 03:27:18.0, 2020-02-24 03:27:18.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50046} Result: [8, springboot, aaa, [TOC]
                            #### Disabled options

                            - TeX (Based on KaTeX);
                            - Emoji;
                            - Task lists;
                            - HTML tags decode;
                            - Flowchart and Sequence Diagram;
                            #### Editor.md directory

                                editor.md/
                                        lib/
                                        css/
                                        scss/
                                        tests/
                                        fonts/
                                        images/
                                        plugins/
                                        examples/
                                        languages/
                                        editormd.js
                                        ...

                            ```html
                            <!-- English -->
                            <script src="../dist/js/languages/en.js"></script>

                            <!-- 繁體中文 -->
                            <script src="../dist/js/languages/zh-tw.js"></script>
                            ```
                        , 2020-02-25 03:39:36.0, 2020-02-25 22:38:07.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50046} Result: [9, mybatis, bbb, [TOC]

                            #### Disabled options

                            - TeX (Based on KaTeX);
                            - Emoji;
                            - Task lists;
                            - HTML tags decode;
                            - Flowchart and Sequence Diagram;

                            #### Editor.md directory

                                editor.md/
                                        lib/
                                        css/
                                        scss/
                                        tests/
                                        fonts/
                                        images/
                                        plugins/
                                        examples/
                                        languages/
                                        editormd.js
                                        ...

                            ```html
                            <!-- English -->
                            <script src="../dist/js/languages/en.js"></script>

                            <!-- 繁體中文 -->
                            <script src="../dist/js/languages/zh-tw.js"></script>
                            ```
                        , 2020-02-25 03:44:09.0, 2020-02-25 03:44:09.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50046} Result: [10, springboot, 飞哥, #大哥的Markdown, 2020-02-25 22:43:28.0, 2020-02-25 22:43:28.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50046} Result: [11, mybatis, 大哥, #飞哥的博客后台管理系统, 2020-02-25 22:49:26.0, 2020-02-25 22:49:26.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50046} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} Parameters : []
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} Types : []
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} executed. 0.384888 millis. select count(*) from `blog`
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50047} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50047} Header: [count(*)]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50047} Result: [13]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50047} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} Parameters : [10, 10]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} executed. 0.711555 millis. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog
         
            limit ?,?
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50048} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50048} Header: [id, type_name, title, content, create_time, change_time, author, view]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50048} Result: [12, mybatis, 56, ##等待, 2020-02-25 22:50:53.0, 2020-02-25 22:50:53.0, admin, 5]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50048} Result: [13, mybatis, ssm框架整合, # ssm整合

## 1、数据库环境

创建一个存放书籍数据的数据库表

```
CREATE DATABASE `ssmbuild`;

USE `ssmbuild`;

DROP TABLE IF EXISTS `books`;

CREATE TABLE `books` (
  `bookId` INT PRIMARY KEY COMMENT '书id',
  `bookName` VARCHAR(100) NOT NULL COMMENT '书名',
  `bookCounts` INT(11) NOT NULL COMMENT '数量',
  ``ssmbuild``ssmbuild`` VARCHAR(200) NOT NULL COMMENT '描述'
) ENGINE=INNODB DEFAULT CHARSET=utf8

INSERT  INTO `books`(`bookId`,`bookName`,`bookCounts`,`detail`)VALUES 
(1,'Java',1,'从入门到放弃'),
(2,'MySQL',10,'从删库到跑路'),
(3,'Linux',5,'从进门到进牢');

SELECT * FROM books
```

## 2、基本环境搭建

1. 新建一Maven项目！ ssmbuild ， 添加web的支持

   ![image-20200128134359317](https://gitee.com/feigeCode/java_blog/raw/master/java/ssm%E6%95%B4%E5%90%88.assets/image-20200128134359317.png)

2. 导入相关的pom依赖！

   ```
   <dependencies>
       <!--Junit-->
       <dependency>
           <groupId>junit</groupId>
           <artifactId>junit</artifactId>
           <version>4.12</version>
       </dependency>
       <!--数据库驱动-->
       <dependency>
           <groupId>mysql</groupId>
           <artifactId>mysql-connector-java</artifactId>
           <version>5.1.47</version>
       </dependency>
       <!-- 数据库连接池 -->
       <dependency>
           <groupId>com.mchange</groupId>
           <artifactId>c3p0</artifactId>
           <version>0.9.5.2</version>
       </dependency>
   
       <!--Servlet - JSP -->
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>servlet-api</artifactId>
           <version>2.5</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet.jsp</groupId>
           <artifactId>jsp-api</artifactId>
           <version>2.2</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>jstl</artifactId>
           <version>1.2</version>
       </dependency>
   
       <!--Mybatis-->
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis</artifactId>
           <version>3.5.2</version>
       </dependency>
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis-spring</artifactId>
           <version>2.0.2</version>
       </dependency>
   
       <!--Spring-->
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-webmvc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-jdbc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->
       <dependency>
           <groupId>org.projectlombok</groupId>
           <artifactId>lombok</artifactId>
           <version>1.16.10</version>
       </dependency>
   </dependencies>
   ```

3. Maven资源过滤设置

   ```
   <build>
       <resources>
           <resource>
               <directory>src/main/java</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
           <resource>
               <directory>src/main/resources</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
       </resources>
   </build>
   ```

4. 建立基本结构和配置框架！

   - com.feige.pojo

   - com.feige.dao

   - com.feige.service

   - com.feige.controller

     在resources目录下创建

   - mybatis-config.xml

     ```
     <?xml version="1.0" encoding="UTF-8" ?>
     <!DOCTYPE configuration
             PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
             "http://mybatis.org/dtd/mybatis-3-config.dtd">
     <configuration>
     
     </configuration>
     ```

   - applicationContext.xml

     ```
     <?xml version="1.0" encoding="UTF-8"?>
     <beans xmlns="http://www.springframework.org/schema/beans"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://www.springframework.org/schema/beans
             http://www.springframework.org/schema/beans/spring-beans.xsd">
     
     </beans>
     ```

## 3、Mybatis层编写

1. 数据库配置文件 **database.properties**

   ```
   jdbc.driver=com.mysql.jdbc.Driver
   jdbc.url=jdbc:mysql://localhost:3306/ssmbuild?useSSL=true&useUnicode=true&characterEncoding=utf8
   jdbc.username=root
   jdbc.password=hufei169357
   ```

2. IDEA关联数据库

3. 编写MyBatis的核心配置文件

   ```
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE configuration
           PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-config.dtd">
   <configuration>
       
       <typeAliases>
           <package name="com.feige.pojo"/>
       </typeAliases>
       <mappers>
           <mapper resource="com/feige/dao/BookMapper.xml"/>
       </mappers>
   
   </configuration>
   ```

4. 编写数据库对应的实体类 com.feige.pojo.Books 使用lombok插件！

   ```
   package com.kuang.pojo;
   
   import lombok.AllArgsConstructor;
   import lombok.Data;
   import lombok.NoArgsConstructor;
   
   @Data
   @AllArgsConstructor
   @NoArgsConstructor
   public class Books {
       
       private int bookId;
       private String bookName;
       private int bookCounts;
       private String detail;
       
   }
   ```

5. 编写Dao层的 Mapper接口！

   ```
   package com.kuang.dao;
   
   import com.kuang.pojo.Books;
   import java.util.List;
   
   public interface BookMapper {
   
       //增加一个Book
       int addBook(Books book);
   
       //根据id删除一个Book
       int deleteBookById(int id);
   
       //更新Book
       int updateBook(Books books);
   
       //根据id查询,返回一个Book
       Books queryBookById(int id);
   
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   
   }
   ```

6. 编写接口对应的 Mapper.xml 文件。需要导入MyBatis的包；

   ```
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE mapper
           PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
   
   <mapper namespace="com.feige.dao.BooksMapper">
   
       <!--增加一个Book-->
       <insert id="addBook" parameterType="Books">
           insert into books(bookName,bookCounts,detail)
           values (#{bookName}, #{bookCounts}, #{detail})
       </insert>
   
       <!--根据id删除一个Book-->
       <delete id="deleteBookById" parameterType="int">
           delete from books where bookId=#{bookId}
       </delete>
   
       <!--更新Book-->
       <update id="updateBook" parameterType="Books">
           update books
           set bookName = #{bookName},bookCounts = #{bookCounts},detail = #{detail}
           where bookId = #{bookId}
       </update>
   
       <!--根据id查询,返回一个Book-->
       <select id="queryBookById" resultType="Books">
           select * from books
           where bookID = #{bookId}
       </select>
   
       <!--查询全部Book-->
       <select id="queryAllBook" resultType="com.feige.pojo.Books">
           SELECT * from books
       </select>
   
   </mapper>
   ```

7. 编写Service层的接口和实现类 接口：

   ```
   package com.feige.service;
   
   import com.feige.pojo.Books;
   
   import java.util.List;
   
   //BookService:底下需要去实现,调用dao层
   public interface BookService {
       //增加一个Book
       int addBook(Books book);
       //根据id删除一个Book
       int deleteBookById(int id);
       //更新Book
       int updateBook(Books books);
       //根据id查询,返回一个Book
       Books queryBookById(int id);
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   }
   ```

实现类：

```
package com.feige.service;

import com.feige.dao.BookMapper;
import com.feige.pojo.Books;
import java.util.List;

public class BookServiceImpl implements BookService {

    //调用dao层的操作，设置一个set接口，方便Spring管理
    private BookMapper bookMapper;

    public void setBookMapper(BookMapper bookMapper) {
        this.bookMapper = bookMapper;
    }
    
    public int addBook(Books book) {
        return bookMapper.addBook(book);
    }
    
    public int deleteBookById(int id) {
        return bookMapper.deleteBookById(id);
    }
    
    public int updateBook(Books books) {
        return bookMapper.updateBook(books);
    }
    
    public Books queryBookById(int id) {
        return bookMapper.queryBookById(id);
    }
    
    public List<Books> queryAllBook() {
        return bookMapper.queryAllBook();
    }
}
```

**OK，到此，底层需求操作编写完毕！**

## 4、Spring层

1. 配置**Spring整合MyBatis**，我们这里数据源使用c3p0连接池；

2. 我们去编写Spring整合Mybatis的相关的配置文件； spring-dao.xml

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans.xsd
   http://www.springframework.org/schema/context
   https://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 配置整合mybatis -->
       <!-- 1.关联数据库文件 -->
       <context:property-placeholder location="classpath:database.properties"/>
   
       <!-- 2.数据库连接池 -->
       <!--数据库连接池
   dbcp  半自动化操作  不能自动连接
   c3p0  自动化操作（自动的加载配置文件 并且设置到对象里面）
       -->
       <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
   <!-- 配置连接池属性 -->
   <property name="driverClass" value="${jdbc.driver}"/>
   <property name="jdbcUrl" value="${jdbc.url}"/>
   <property name="user" value="${jdbc.username}"/>
   <property name="password" value="${jdbc.password}"/>
   
   <!-- c3p0连接池的私有属性 -->
   <property name="maxPoolSize" value="30"/>
   <property name="minPoolSize" value="10"/>
   <!-- 关闭连接后不自动commit -->
   <property name="autoCommitOnClose" value="false"/>
   <!-- 获取连接超时时间 -->
   <property name="checkoutTimeout" value="10000"/>
   <!-- 当获取连接失败重试次数 -->
   <property name="acquireRetryAttempts" value="2"/>
       </bean>
   
       <!-- 3.配置SqlSessionFactory对象 -->
       <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource"/>
   <!-- 配置MyBaties全局配置文件:mybatis-config.xml -->
   <property name="configLocation" value="classpath:mybatis-config.xml"/>
       </bean>
   
       <!-- 4.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 -->
       <!--解释 ： https://www.cnblogs.com/jpfss/p/7799806.html-->
       <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
   <!-- 注入sqlSessionFactory -->
   <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
   <!-- 给出需要扫描Dao接口包 -->
   <property name="basePackage" value="com.feige.dao"/>
       </bean>
   
   </beans>
   ```

3. **Spring整合service层**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 扫描service相关的bean -->
       <context:component-scan base-package="com.kuang.service" />
   
       <!--BookServiceImpl注入到IOC容器中-->
       <bean id="BookServiceImpl" class="com.kuang.service.BookServiceImpl">
   <property name="bookMapper" ref="bookMapper"/>
       </bean>
   
       <!-- 配置事务管理器 -->
       <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource" />
       </bean>
   
   </beans>
   ```

Spring层搞定！再次理解一下，Spring就是一个大杂烩，一个容器！对吧！

## 5、SpringMVC层

1. **web.xml**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
            version="4.0">
   
       <!--DispatcherServlet-->
       <servlet>
           <servlet-name>DispatcherServlet</servlet-name>
           <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
           <init-param>
               <param-name>contextConfigLocation</param-name>
               <param-value>classpath:applicationContext.xml</param-value>
           </init-param>
           <load-on-startup>1</load-on-startup>
       </servlet>
       <servlet-mapping>
           <servlet-name>DispatcherServlet</servlet-name>
           <url-pattern>/</url-pattern>
       </servlet-mapping>
   
       <!--encodingFilter-->
       <filter>
           <filter-name>encodingFilter</filter-name>
           <filter-class>
               org.springframework.web.filter.CharacterEncodingFilter
           </filter-class>
           <init-param>
               <param-name>encoding</param-name>
               <param-value>utf-8</param-value>
           </init-param>
       </filter>
       <filter-mapping>
           <filter-name>encodingFilter</filter-name>
           <url-pattern>/*</url-pattern>
       </filter-mapping>
       
       <!--Session过期时间-->
       <session-config>
           <session-timeout>15</session-timeout>
       </session-config>
       
   </web-app>
   ```

2. **spring-mvc.xml**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xmlns:mvc="http://www.springframework.org/schema/mvc"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       https://www.springframework.org/schema/mvc/spring-mvc.xsd">
   
       <!-- 配置SpringMVC -->
       <!-- 1.开启SpringMVC注解驱动 -->
       <mvc:annotation-driven>
           <mvc:message-converters register-defaults="true">
               <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                   <constructor-arg value="UTF-8"/>
               </bean>
               <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                   <property name="objectMapper">
                       <bean class="org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean">
                           <property name="failOnEmptyBeans" value="false"/>
                       </bean>
                   </property>
               </bean>
           </mvc:message-converters>
       </mvc:annotation-driven>
       <!--解决跨域问题-->
       <mvc:cors>
       <mvc:mapping path="/**"
                    allowed-origins="http://127.0.0.1:8090,http://localhost:8090"
                    allowed-methods="POST,GET, OPTIONS,DELETE,PUT"
                    allowed-headers="Content-Type,ContentType,Access-Control-Allow-Headers, Authorization, X-Requested-With"
                    allow-credentials="true"/>
       </mvc:cors>
       <!-- 2.静态资源默认servlet配置-->
       <mvc:default-servlet-handler/>
   
       <!-- 3.配置jsp 显示ViewResolver视图解析器 -->
       <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
           <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
           <property name="prefix" value="/WEB-INF/jsp/" />
           <property name="suffix" value=".jsp" />
       </bean>
   
       <!-- 4.扫描web相关的bean -->
       <context:component-scan base-package="com.feige.controller" />
   
   </beans>
   ```

3. **Spring配置整合文件，applicationContext.xml**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd">
   
       <import resource="spring-dao.xml"/>
       <import resource="spring-service.xml"/>
       <import resource="spring-mvc.xml"/>
       
   </beans>
   ```

**配置文件，暂时结束！Controller 和 视图层编写**

1. BookController 类编写 ， 方法一：查询全部书籍

   ```
   @Controller
   @RequestMapping("/book")
   public class BookController {
   
       @Autowired
       @Qualifier("BookServiceImpl")
       private BookService bookService;
   
       @RequestMapping("/allBook")
       public String list(Model model) {
           List<Books> list = bookService.queryAllBook();
           model.addAttribute("list", list);
           return "allBook";
       }
   }
   ```

2. 编写首页 **index.jsp**

   ```
   <%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" %>
   <!DOCTYPE HTML>
   <html>
   <head>
       <title>首页</title>
       <style type="text/css">
           a {
               text-decoration: none;
               color: black;
               font-size: 18px;
           }
           h3 {
               width: 180px;
               height: 38px;
               margin: 100px auto;
               text-align: center;
               line-height: 38px;
               background: deepskyblue;
               border-radius: 4px;
           }
       </style>
   </head>
   <body>
   
   <h3>
       <a href="${pageContext.request.contextPath}/book/allBook">点击进入列表页</a>
   </h3>
   </body>
   </html>
   ```

3. 书籍列表页面 **allbook.jsp**

   ```
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>书籍列表</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>书籍列表 —— 显示所有书籍</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <div class="row">
           <div class="col-md-4 column">
               <a class="btn btn-primary" href="${pageContext.request.contextPath}/book/toAddBook">新增</a>
           </div>
       </div>
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <table class="table table-hover table-striped">
                   <thead>
                   <tr>
                       <th>书籍编号</th>
                       <th>书籍名字</th>
                       <th>书籍数量</th>
                       <th>书籍详情</th>
                       <th>操作</th>
                   </tr>
                   </thead>
   
                   <tbody>
                   <c:forEach var="book" items="${requestScope.get('list')}">
                       <tr>
                           <td>${book.getBookId()}</td>
                           <td>${book.getBookName()}</td>
                           <td>${book.getBookCounts()}</td>
                           <td>${book.getDetail()}</td>
                           <td>
                               <a href="${pageContext.request.contextPath}/book/toUpdateBook?id=${book.getBookId()}">更改</a> |
                               <a href="${pageContext.request.contextPath}/book/del/${book.getBookId()}">删除</a>
                           </td>
                       </tr>
                   </c:forEach>
                   </tbody>
               </table>
           </div>
       </div>
   </div>
   ```

4. BookController 类编写 ， 方法二：添加书籍

   ```
   @RequestMapping("/toAddBook")
   public String toAddPaper() {
       return "addBook";
   }
   
   @RequestMapping("/addBook")
   public String addPaper(Books books) {
       System.out.println(books);
       bookService.addBook(books);
       return "redirect:/book/allBook";
   }
   ```

5. 添加书籍页面：**addBook.jsp**

   ```
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   
   <html>
   <head>
       <title>新增书籍</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>新增书籍</small>
                   </h1>
               </div>
           </div>
       </div>
       <form action="${pageContext.request.contextPath}/book/addBook" method="post">
           书籍名称：<input type="text" name="bookName"><br><br><br>
           书籍数量：<input type="text" name="bookCounts"><br><br><br>
           书籍详情：<input type="text" name="detail"><br><br><br>
           <input type="submit" value="添加">
       </form>
   
   </div>
   ```

6. BookController 类编写 ， 方法三：修改书籍

   ```
   @RequestMapping("/toUpdateBook")
   public String toUpdateBook(Model model, int id) {
       Books books = bookService.queryBookById(id);
       System.out.println(books);
       model.addAttribute("book",books );
       return "updateBook";
   }
   
   @RequestMapping("/updateBook")
   public String updateBook(Model model, Books book) {
       bookService.updateBook(book);
       Books books = bookService.queryBookById(book.getBookID());
       model.addAttribute("books", books);
       return "redirect:/book/allBook";
   }
   ```

7. 修改书籍页面 **updateBook.jsp**

   ```
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>修改信息</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>修改信息</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <form action="${pageContext.request.contextPath}/book/updateBook" method="post">
           <input type="hidden" name="bookID" value="${book.getBookId()}"/>
           书籍名称：<input type="text" name="bookName" value="${book.getBookName()}"/>
           书籍数量：<input type="text" name="bookCounts" value="${book.getBookCounts()}"/>
           书籍详情：<input type="text" name="detail" value="${book.getDetail() }"/>
           <input type="submit" value="提交"/>
       </form>
   
   </div>
   ```

8. BookController 类编写 ， 方法四：删除书籍

   ```
   @RequestMapping("/del/{bookId}")
   public String deleteBook(@PathVariable("bookId") int id) {
       bookService.deleteBookById(id);
       return "redirect:/book/allBook";
   }
   ```

**配置Tomcat，进行运行！**

到目前为止，这个SSM项目整合已经完全的OK了，可以直接运行进行测试！这个练习十分的重要，大家需要保证，不看任何东西，自己也可以完整的实现出来！

## **6、项目结构图**

![1570186854191.png](https://blog.kuangstudy.com/usr/uploads/2019/10/1086489242.png)

![1570186868239.png](https://blog.kuangstudy.com/usr/uploads/2019/10/2326667495.png)

## 7、错误排查

### 1、访问出现404，排查步骤：**

1. 查看控制台输出，看一下是不是缺少了什么jar包。

2. 如果jar包存在，显示无法输出，就在IDEA的项目发布中，添加lib依赖！

   步骤：点击项目结构----->Artifacts----->点击自己的项目(ssm:war exploded)--->(点击工具栏的第一个)在WEB-INF目录下新建一个lib包----->选中lib------>点击工具栏的第三个然后选中第一个---->把里面的包全部选中点击ok---->点击Apply再ok

   ![image-20200128125126368](https://gitee.com/feigeCode/java_blog/raw/master/java/ssm%E6%95%B4%E5%90%88.assets/image-20200128125126368.png)

   ![image-20200128125237179](https://gitee.com/feigeCode/java_blog/raw/master/java/ssm%E6%95%B4%E5%90%88.assets/image-20200128125237179.png)

3. 重启Tomcat 即可解决！

### 2、其他错误

#### 1、bean不存在

 步骤：

 查看bean注入是否成功

 junit单元测试，看我们的代码是否能够查询出来

 问题不在底层，是我们spring出了问题

 springMVC整合时没有调用到service层的bean

 applicationContext.xml没有注册bean

 web.xml也绑定过配置文件要绑定大的applicationContext.xml



## 8、小结及展望

这个是同学们的第一个SSM整合案例，一定要烂熟于心！

SSM框架的重要程度是不言而喻的，学到这里，大家已经可以进行基本网站的单独开发。但是这只是增删改查的基本操作。可以说学到这里，大家才算是真正的步入了后台开发的门。也就是能找一个后台相关工作的底线。

或许很多人，工作就做这些事情，但是对于个人的提高来说，还远远不够！

| 飞哥 | 飞哥 | 飞哥 |
| ---- | ---- | ---- |
| 飞哥 | 飞哥 | 飞哥 |
| 飞哥 | 飞哥 | 飞哥 |
| 飞哥 | 飞哥 | 飞哥 |



~~~java
static class CustomAttributeProvider implements AttributeProvider {

        @Override
        public void setAttributes(Node node, String s, Map<String, String> map) {
            //改变a标签的target属性为_blank
            if(node instanceof Link) {
                map.put("target","_blank");
            }
            if (node instanceof TableBlock) {
                map.put("class","el-table__body-wrapper is-scrolling-none");
            }
            if (node instanceof TableBody) {
                map.put("class","el-table__body");
            }
            if (node instanceof TableRow) {
                map.put("class","el-table__row");
            }
            if (node instanceof TableCell) {
                map.put("class","el-table_13_column_55");
            }
        }
~~~

# feige

, 2020-03-02 07:06:53.0, 2020-03-13 06:59:47.0, admin, 10]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50048} Result: [17, springboot, ss, ss, 2020-02-24 03:07:20.0, 2020-03-20 00:07:13.0, admin, 11]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50048} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} Parameters : []
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} Types : []
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} executed. 1.086666 millis. select count(*) from `blog`
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50049} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50049} Header: [count(*)]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50049} Result: [13]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50049} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} Parameters : [0, 10]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} executed. 1.091555 millis. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog
         
            limit ?,?
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50050} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50050} Header: [id, type_name, title, content, create_time, change_time, author, view]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50050} Result: [1, springboot, springboot入门, springb自动装配, 2020-02-23 21:43:36.0, 2020-02-24 03:06:48.0, admin, 0]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50050} Result: [2, mybatis, 配置, 得到的, 2020-02-24 02:05:36.0, 2020-03-13 06:39:47.0, admin, 3]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50050} Result: [4, springMVC, mybatis-plus, ##飞哥, 2020-02-24 02:10:09.0, 2020-02-25 22:42:23.0, admin, 111]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50050} Result: [5, springboot, 人, 嗯嗯, 2020-02-24 03:07:20.0, 2020-02-24 03:07:20.0, admin, 2]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50050} Result: [6, mybatis, mybatis入门, <h2>1、Mybatis简介</h2>
<p><img src="https://blog.kuangstudy.com/usr/uploads/2019/10/1296229149.png" referrerpolicy="no-referrer" alt="1567007421329.png"></p>
<h3>什么是MyBatis</h3>
<ul>
<li>MyBatis 是一款优秀的<strong>持久层框架</strong></li>
<li>MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集的过程</li>
<li>MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 实体类 【Plain Old Java Objects,普通的 Java对象】映射成数据库中的记录。</li>
<li>MyBatis 本是apache的一个开源项目ibatis, 2010年这个项目由apache 迁移到了google code，并且改名为MyBatis 。</li>
<li>2013年11月迁移到<strong>Github</strong> .</li>
<li>Mybatis官方文档 : <a href='http://www.mybatis.org/mybatis-3/zh/index.html' target='_blank' class='url'>http://www.mybatis.org/mybatis-3/zh/index.html</a></li>
<li>GitHub : <a href='https://github.com/mybatis/mybatis-3' target='_blank' class='url'>https://github.com/mybatis/mybatis-3</a></li>

</ul>
<h3>持久化</h3>
<ul>
<li><p><strong>持久化是将程序数据在持久状态和瞬时状态间转换的机制。</strong></p>
<ul>
<li>即把数据（如内存中的对象）保存到可永久保存的存储设备中（如磁盘）。持久化的主要应用是将内存中的对象存储在数据库中，或者存储在磁盘文件中、XML数据文件中等等。</li>
<li>JDBC就是一种持久化机制。文件IO也是一种持久化机制。</li>
<li>在生活中 : 将鲜肉冷藏，吃的时候再解冻的方法也是。将水果做成罐头的方法也是。</li>

</ul>
</li>
<li><p><strong>为什么需要持久化服务呢？那是由于内存本身的缺陷引起的</strong></p>
<ul>
<li>内存断电后数据会丢失，但有一些对象是无论如何都不能丢失的，比如银行账号等，遗憾的是，人们还无法保证内存永不掉电。</li>
<li>内存过于昂贵，与硬盘、光盘等外存相比，内存的价格要高2~3个数量级，而且维持成本也高，至少需要一直供电吧。所以即使对象不需要永久保存，也会因为内存的容量限制不能一直呆在内存中，需要持久化来缓存到外存。</li>

</ul>
</li>

</ul>
<h3>持久层</h3>
<ul>
<li><p>什么是持久层？</p>
<ul>
<li>完成持久化工作的代码块 . ----&gt; dao层 【DAO (Data Access Object) 数据访问对象】</li>
<li>大多数情况下特别是企业级应用，数据持久化往往也就意味着将内存中的数据保存到磁盘上加以固化，而持久化的实现过程则大多通过各种<strong>关系数据库</strong>来完成。</li>
<li>不过这里有一个字需要特别强调，也就是所谓的“层”。对于应用系统而言，数据持久功能大多是必不可少的组成部分。也就是说，我们的系统中，已经天然的具备了“持久层”概念？也许是，但也许实际情况并非如此。之所以要独立出一个“持久层”的概念,而不是“持久模块”，“持久单元”，也就意味着，我们的系统架构中，应该有一个相对独立的逻辑层面，专著于数据持久化逻辑的实现.</li>
<li>与系统其他部分相对而言，这个层面应该具有一个较为清晰和严格的逻辑边界。 【说白了就是用来操作数据库存在的！】</li>

</ul>
</li>

</ul>
<h3>为什么需要Mybatis</h3>
<ul>
<li><p>Mybatis就是帮助程序猿将数据存入数据库中 , 和从数据库中取数据 .</p>
</li>
<li><p>传统的jdbc操作 , 有很多重复代码块 .比如 : 数据取出时的封装 , 数据库的建立连接等等... , 通过框架可以减少重复代码,提高开发效率 .</p>
</li>
<li><p>MyBatis 是一个半自动化的<strong>ORM框架 (Object Relationship Mapping) --&gt;对象关系映射</strong></p>
</li>
<li><p>所有的事情，不用Mybatis依旧可以做到，只是用了它，所有实现会更加简单！<strong>技术没有高低之分，只有使用这个技术的人有高低之别</strong></p>
</li>
<li><p>MyBatis的优点</p>
<ul>
<li>简单易学：本身就很小且简单。没有任何第三方依赖，最简单安装只要两个jar文件+配置几个sql映射文件就可以了，易于学习，易于使用，通过文档和源代码，可以比较完全的掌握它的设计思路和实现。</li>
<li>灵活：mybatis不会对应用程序或者数据库的现有设计强加任何影响。 sql写在xml里，便于统一管理和优化。通过sql语句可以满足操作数据库的所有需求。</li>
<li>解除sql与程序代码的耦合：通过提供DAO层，将业务逻辑和数据访问逻辑分离，使系统的设计更清晰，更易维护，更易单元测试。sql和代码的分离，提高了可维护性。</li>
<li>提供xml标签，支持编写动态sql。</li>
<li>.......</li>

</ul>
</li>
<li><p>最重要的一点，使用的人多！公司需要！</p>
</li>
<li><p>环境说明：</p>
<ul>
<li>jdk 8 +</li>
<li>MySQL 5.7.19</li>
<li>maven-3.6.0</li>
<li>IDEA</li>

</ul>
<p>学习前需要掌握：</p>
<ul>
<li>JDBC</li>
<li>MySQL</li>
<li>Java 基础</li>
<li>Maven</li>
<li>Junit</li>

</ul>
</li>

</ul>
<h2>2、mybatis crud（实现增删改查）</h2>
<h4>1.1、创建一个maven项目</h4>
<p>		导入依赖</p>
<pre><code class='language-xml' lang='xml'>&lt;dependencies&gt;
    &lt;!--mysql驱动--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;mysql&lt;/groupId&gt;
        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
        &lt;version&gt;5.1.47&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;!--mybatis支持--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.mybatis&lt;/groupId&gt;
        &lt;artifactId&gt;mybatis&lt;/artifactId&gt;
        &lt;version&gt;3.5.2&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;!--junit支持--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;junit&lt;/groupId&gt;
        &lt;artifactId&gt;junit&lt;/artifactId&gt;
        &lt;version&gt;4.12&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
</code></pre>
<p>注意点 : pom文件的设置中需要设置资源过滤 , 否则会有资源文件打包不成功问题，导致项目无法运行；</p>
<pre><code class='language-xml' lang='xml'>&lt;build&gt;
    &lt;resources&gt;
        &lt;resource&gt;
            &lt;directory&gt;src/main/java&lt;/directory&gt;
            &lt;includes&gt;
                &lt;include&gt;**/*.properties&lt;/include&gt;
                &lt;include&gt;**/*.xml&lt;/include&gt;
            &lt;/includes&gt;
            &lt;filtering&gt;true&lt;/filtering&gt;
        &lt;/resource&gt;
    &lt;/resources&gt;
&lt;/build&gt;
</code></pre>
<p>&nbsp;</p>
<h4>1.2、创建数据库和表</h4>
<pre><code class='language-sql' lang='sql'>CREATE DATABASE mybatis CHARACTER SET utf8;
CREATE TABLE USER(
	id INT PRIMARY KEY,
	username VARCHAR(15) NOT NULL,
	pwd VARCHAR(20) NOT NULL
)
INSERT INTO USER VALUES(2018143114,&#39;张三&#39;,&#39;123456&#39;),(2018143115,&#39;李四&#39;,&#39;1234567&#39;),(2018143116,&#39;王五&#39;,&#39;147258&#39;);
SELECT * FROM USER;
</code></pre>
<h4>1.3、编写mybatis配置文件</h4>
<p>在resource里新建一个mybatis-config.xml文件</p>
<pre><code class='language-xml' lang='xml'>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE configuration
        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;
&lt;configuration&gt;
    &lt;environments default=&quot;development&quot;&gt;
        &lt;environment id=&quot;development&quot;&gt;
            &lt;transactionManager type=&quot;JDBC&quot;/&gt;
            &lt;dataSource type=&quot;POOLED&quot;&gt;
                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;
                &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;amp;useUnicode=true&amp;amp;characterEncoding=utf8&quot;/&gt;
                &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;
                &lt;property name=&quot;password&quot; value=&quot;hufei169357&quot;/&gt;
            &lt;/dataSource&gt;
        &lt;/environment&gt;
    &lt;/environments&gt;
    &lt;mappers&gt;
        &lt;mapper resource=&quot;com/feige/dao/userMapper.xml&quot;/&gt;
    &lt;/mappers&gt;
&lt;/configuration&gt;
</code></pre>
<h4>1.4、新建一个工具类用来获取SqlSession对象</h4>
<pre><code class='language-java' lang='java'>package com.feige.utils;

import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import java.io.IOException;
import java.io.InputStream;
//sqlSessionFactory-sqlSession
public class MybatisUtils {
    private static SqlSessionFactory sqlSessionFactory;
    static {
        try {
            //使用mybatis第一步：获取sqlSessionFactory对象
            String resource = &quot;mybatis-config.xml&quot;;
            InputStream inputStream = Resources.getResourceAsStream(resource);
            sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    //既然有了sqlSessionFactory，顾名思义，我们就可以从中获得sqlSession的实例
    public static SqlSession getSqlSessioon(){
        return sqlSessionFactory.openSession();
    }
}

</code></pre>
<p>&nbsp;</p>
<h4>1.5、编写一个pojo（实体类）</h4>
<pre><code class='language-java' lang='java'>package com.feige.pojo;

public class User {
    private int id;
    private String username;
    private String pwd;

    public User() {
    }

    public User(int id, String username, String pwd) {
        this.id = id;
        this.username = username;
        this.pwd = pwd;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getPwd() {
        return pwd;
    }

    public void setPwd(String pwd) {
        this.pwd = pwd;
    }
    @Override
    public String toString() {
        return &quot;User{&quot; +
                &quot;id=&quot; + id +
                &quot;, username=&#39;&quot; + username + &#39;\&#39;&#39; +
                &quot;, pwd=&#39;&quot; + pwd + &#39;\&#39;&#39; +
                &#39;}&#39;;
    }
}

</code></pre>
<h4>1.6、新建一个userMapper接口</h4>
<pre><code class='language-java' lang='java'>package com.feige.dao;

import com.feige.pojo.User;

import java.util.List;
import java.util.Map;

public interface UserMapper {
    //查询全部用户
    List&lt;User&gt; getAllUser();
    //通过一个id查询一个用户
    User getUserById(int id);
    //通过id修改一个用户
    int updateUserById(Map map);
    //通过id删除一个用户
    int deleteUserById(int id);
    //插入一条数据
    int insertUser(User user);
}

</code></pre>
<h4>1.7、新建一个userMapper.xml文件</h4>
<pre><code class='language-xml' lang='xml'>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE mapper
        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;com.feige.dao.UserMapper&quot;&gt;
    &lt;!--每个语句要对应相应的标签select对应&lt;select&gt; delete 对应&lt;delete&gt; update 对应&lt;update&gt; insert 对应&lt;insert&gt;--&gt;
    &lt;select id=&quot;getAllUser&quot; resultType=&quot;com.feige.pojo.User&quot;&gt;
        select * from user
    &lt;/select&gt;
    &lt;select id=&quot;getUserById&quot; resultType=&quot;com.feige.pojo.User&quot; parameterType=&quot;int&quot;&gt;
        select * from user where id=#{id}
    &lt;/select&gt;
    &lt;update id=&quot;updateUserById&quot; parameterType=&quot;map&quot;&gt;
        update user set pwd=#{pwd} where id=#{id}
    &lt;/update&gt;
    &lt;delete id=&quot;deleteUserById&quot; parameterType=&quot;int&quot;&gt;
        delete from user where id=#{id}
    &lt;/delete&gt;
    &lt;insert id=&quot;insertUser&quot; parameterType=&quot;com.feige.pojo.User&quot;&gt;
        insert into user values (#{id},#{username},#{pwd})
    &lt;/insert&gt;
&lt;/mapper&gt;
</code></pre>
<h4>1.8、测试代码</h4>
<pre><code class='language-java' lang='java'>package com.feige.mybatisTest;

import com.feige.dao.UserMapper;
import com.feige.pojo.User;
import com.feige.utils.MybatisUtils;
import org.apache.ibatis.session.SqlSession;
import org.junit.Test;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MybatisTest {
    @Test
    public void mybatisTest1(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        List&lt;User&gt; allUser = mapper.getAllUser();
        for (User user : allUser) {
            System.out.println(user);
        }
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest2(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        User userById = mapper.getUserById(2018143114);
        System.out.println(userById);
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest3() {
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        //使用万能map传参
        Map&lt;String,Object&gt; map = new HashMap&lt;String, Object&gt;();
        map.put(&quot;pwd&quot;,2018143114);
        map.put(&quot;id&quot;,2018143114);

        int i = mapper.updateUserById(map);
        if (i &gt; 0) {
            System.out.println(&quot;修改成功！&quot;+i);
        }
        //增删改需要提交事务
        sqlSessioon.commit();

        sqlSessioon.close();

    }
    @Test
    public void mybatisTest4(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        int i = mapper.deleteUserById(2018143117);
        if (i &gt; 0) {
            System.out.println(&quot;删除成功！&quot;+i);
        }
        sqlSessioon.commit();
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest5(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        User user = new User(2018143117, &quot;杨帆东&quot;, &quot;2018143117&quot;);
        int i = mapper.insertUser(user);
        if (i &gt; 0) {
            System.out.println(&quot;插入成功！&quot;+i);
        }
        sqlSessioon.commit();
        sqlSessioon.close();

    }
}

</code></pre>
<p>&nbsp;</p>
<p>		</p>, 2020-02-24 03:15:45.0, 2020-02-24 03:15:50.0, admin, 0]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50050} Result: [7, mybatis, mybatis啊, 作者, 2020-02-24 03:27:18.0, 2020-02-24 03:27:18.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50050} Result: [8, springboot, aaa, [TOC]
                            #### Disabled options

                            - TeX (Based on KaTeX);
                            - Emoji;
                            - Task lists;
                            - HTML tags decode;
                            - Flowchart and Sequence Diagram;
                            #### Editor.md directory

                                editor.md/
                                        lib/
                                        css/
                                        scss/
                                        tests/
                                        fonts/
                                        images/
                                        plugins/
                                        examples/
                                        languages/
                                        editormd.js
                                        ...

                            ```html
                            <!-- English -->
                            <script src="../dist/js/languages/en.js"></script>

                            <!-- 繁體中文 -->
                            <script src="../dist/js/languages/zh-tw.js"></script>
                            ```
                        , 2020-02-25 03:39:36.0, 2020-02-25 22:38:07.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50050} Result: [9, mybatis, bbb, [TOC]

                            #### Disabled options

                            - TeX (Based on KaTeX);
                            - Emoji;
                            - Task lists;
                            - HTML tags decode;
                            - Flowchart and Sequence Diagram;

                            #### Editor.md directory

                                editor.md/
                                        lib/
                                        css/
                                        scss/
                                        tests/
                                        fonts/
                                        images/
                                        plugins/
                                        examples/
                                        languages/
                                        editormd.js
                                        ...

                            ```html
                            <!-- English -->
                            <script src="../dist/js/languages/en.js"></script>

                            <!-- 繁體中文 -->
                            <script src="../dist/js/languages/zh-tw.js"></script>
                            ```
                        , 2020-02-25 03:44:09.0, 2020-02-25 03:44:09.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50050} Result: [10, springboot, 飞哥, #大哥的Markdown, 2020-02-25 22:43:28.0, 2020-02-25 22:43:28.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50050} Result: [11, mybatis, 大哥, #飞哥的博客后台管理系统, 2020-02-25 22:49:26.0, 2020-02-25 22:49:26.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50050} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} Parameters : []
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} Types : []
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} executed. 0.965332 millis. select count(*) from `blog`
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50051} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50051} Header: [count(*)]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50051} Result: [13]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50051} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} Parameters : [0, 10]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} executed. 1.190222 millis. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog
         
            limit ?,?
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50052} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50052} Header: [id, type_name, title, content, create_time, change_time, author, view]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50052} Result: [1, springboot, springboot入门, springb自动装配, 2020-02-23 21:43:36.0, 2020-02-24 03:06:48.0, admin, 0]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50052} Result: [2, mybatis, 配置, 得到的, 2020-02-24 02:05:36.0, 2020-03-13 06:39:47.0, admin, 3]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50052} Result: [4, springMVC, mybatis-plus, ##飞哥, 2020-02-24 02:10:09.0, 2020-02-25 22:42:23.0, admin, 111]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50052} Result: [5, springboot, 人, 嗯嗯, 2020-02-24 03:07:20.0, 2020-02-24 03:07:20.0, admin, 2]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50052} Result: [6, mybatis, mybatis入门, <h2>1、Mybatis简介</h2>
<p><img src="https://blog.kuangstudy.com/usr/uploads/2019/10/1296229149.png" referrerpolicy="no-referrer" alt="1567007421329.png"></p>
<h3>什么是MyBatis</h3>
<ul>
<li>MyBatis 是一款优秀的<strong>持久层框架</strong></li>
<li>MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集的过程</li>
<li>MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 实体类 【Plain Old Java Objects,普通的 Java对象】映射成数据库中的记录。</li>
<li>MyBatis 本是apache的一个开源项目ibatis, 2010年这个项目由apache 迁移到了google code，并且改名为MyBatis 。</li>
<li>2013年11月迁移到<strong>Github</strong> .</li>
<li>Mybatis官方文档 : <a href='http://www.mybatis.org/mybatis-3/zh/index.html' target='_blank' class='url'>http://www.mybatis.org/mybatis-3/zh/index.html</a></li>
<li>GitHub : <a href='https://github.com/mybatis/mybatis-3' target='_blank' class='url'>https://github.com/mybatis/mybatis-3</a></li>

</ul>
<h3>持久化</h3>
<ul>
<li><p><strong>持久化是将程序数据在持久状态和瞬时状态间转换的机制。</strong></p>
<ul>
<li>即把数据（如内存中的对象）保存到可永久保存的存储设备中（如磁盘）。持久化的主要应用是将内存中的对象存储在数据库中，或者存储在磁盘文件中、XML数据文件中等等。</li>
<li>JDBC就是一种持久化机制。文件IO也是一种持久化机制。</li>
<li>在生活中 : 将鲜肉冷藏，吃的时候再解冻的方法也是。将水果做成罐头的方法也是。</li>

</ul>
</li>
<li><p><strong>为什么需要持久化服务呢？那是由于内存本身的缺陷引起的</strong></p>
<ul>
<li>内存断电后数据会丢失，但有一些对象是无论如何都不能丢失的，比如银行账号等，遗憾的是，人们还无法保证内存永不掉电。</li>
<li>内存过于昂贵，与硬盘、光盘等外存相比，内存的价格要高2~3个数量级，而且维持成本也高，至少需要一直供电吧。所以即使对象不需要永久保存，也会因为内存的容量限制不能一直呆在内存中，需要持久化来缓存到外存。</li>

</ul>
</li>

</ul>
<h3>持久层</h3>
<ul>
<li><p>什么是持久层？</p>
<ul>
<li>完成持久化工作的代码块 . ----&gt; dao层 【DAO (Data Access Object) 数据访问对象】</li>
<li>大多数情况下特别是企业级应用，数据持久化往往也就意味着将内存中的数据保存到磁盘上加以固化，而持久化的实现过程则大多通过各种<strong>关系数据库</strong>来完成。</li>
<li>不过这里有一个字需要特别强调，也就是所谓的“层”。对于应用系统而言，数据持久功能大多是必不可少的组成部分。也就是说，我们的系统中，已经天然的具备了“持久层”概念？也许是，但也许实际情况并非如此。之所以要独立出一个“持久层”的概念,而不是“持久模块”，“持久单元”，也就意味着，我们的系统架构中，应该有一个相对独立的逻辑层面，专著于数据持久化逻辑的实现.</li>
<li>与系统其他部分相对而言，这个层面应该具有一个较为清晰和严格的逻辑边界。 【说白了就是用来操作数据库存在的！】</li>

</ul>
</li>

</ul>
<h3>为什么需要Mybatis</h3>
<ul>
<li><p>Mybatis就是帮助程序猿将数据存入数据库中 , 和从数据库中取数据 .</p>
</li>
<li><p>传统的jdbc操作 , 有很多重复代码块 .比如 : 数据取出时的封装 , 数据库的建立连接等等... , 通过框架可以减少重复代码,提高开发效率 .</p>
</li>
<li><p>MyBatis 是一个半自动化的<strong>ORM框架 (Object Relationship Mapping) --&gt;对象关系映射</strong></p>
</li>
<li><p>所有的事情，不用Mybatis依旧可以做到，只是用了它，所有实现会更加简单！<strong>技术没有高低之分，只有使用这个技术的人有高低之别</strong></p>
</li>
<li><p>MyBatis的优点</p>
<ul>
<li>简单易学：本身就很小且简单。没有任何第三方依赖，最简单安装只要两个jar文件+配置几个sql映射文件就可以了，易于学习，易于使用，通过文档和源代码，可以比较完全的掌握它的设计思路和实现。</li>
<li>灵活：mybatis不会对应用程序或者数据库的现有设计强加任何影响。 sql写在xml里，便于统一管理和优化。通过sql语句可以满足操作数据库的所有需求。</li>
<li>解除sql与程序代码的耦合：通过提供DAO层，将业务逻辑和数据访问逻辑分离，使系统的设计更清晰，更易维护，更易单元测试。sql和代码的分离，提高了可维护性。</li>
<li>提供xml标签，支持编写动态sql。</li>
<li>.......</li>

</ul>
</li>
<li><p>最重要的一点，使用的人多！公司需要！</p>
</li>
<li><p>环境说明：</p>
<ul>
<li>jdk 8 +</li>
<li>MySQL 5.7.19</li>
<li>maven-3.6.0</li>
<li>IDEA</li>

</ul>
<p>学习前需要掌握：</p>
<ul>
<li>JDBC</li>
<li>MySQL</li>
<li>Java 基础</li>
<li>Maven</li>
<li>Junit</li>

</ul>
</li>

</ul>
<h2>2、mybatis crud（实现增删改查）</h2>
<h4>1.1、创建一个maven项目</h4>
<p>		导入依赖</p>
<pre><code class='language-xml' lang='xml'>&lt;dependencies&gt;
    &lt;!--mysql驱动--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;mysql&lt;/groupId&gt;
        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
        &lt;version&gt;5.1.47&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;!--mybatis支持--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.mybatis&lt;/groupId&gt;
        &lt;artifactId&gt;mybatis&lt;/artifactId&gt;
        &lt;version&gt;3.5.2&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;!--junit支持--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;junit&lt;/groupId&gt;
        &lt;artifactId&gt;junit&lt;/artifactId&gt;
        &lt;version&gt;4.12&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
</code></pre>
<p>注意点 : pom文件的设置中需要设置资源过滤 , 否则会有资源文件打包不成功问题，导致项目无法运行；</p>
<pre><code class='language-xml' lang='xml'>&lt;build&gt;
    &lt;resources&gt;
        &lt;resource&gt;
            &lt;directory&gt;src/main/java&lt;/directory&gt;
            &lt;includes&gt;
                &lt;include&gt;**/*.properties&lt;/include&gt;
                &lt;include&gt;**/*.xml&lt;/include&gt;
            &lt;/includes&gt;
            &lt;filtering&gt;true&lt;/filtering&gt;
        &lt;/resource&gt;
    &lt;/resources&gt;
&lt;/build&gt;
</code></pre>
<p>&nbsp;</p>
<h4>1.2、创建数据库和表</h4>
<pre><code class='language-sql' lang='sql'>CREATE DATABASE mybatis CHARACTER SET utf8;
CREATE TABLE USER(
	id INT PRIMARY KEY,
	username VARCHAR(15) NOT NULL,
	pwd VARCHAR(20) NOT NULL
)
INSERT INTO USER VALUES(2018143114,&#39;张三&#39;,&#39;123456&#39;),(2018143115,&#39;李四&#39;,&#39;1234567&#39;),(2018143116,&#39;王五&#39;,&#39;147258&#39;);
SELECT * FROM USER;
</code></pre>
<h4>1.3、编写mybatis配置文件</h4>
<p>在resource里新建一个mybatis-config.xml文件</p>
<pre><code class='language-xml' lang='xml'>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE configuration
        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;
&lt;configuration&gt;
    &lt;environments default=&quot;development&quot;&gt;
        &lt;environment id=&quot;development&quot;&gt;
            &lt;transactionManager type=&quot;JDBC&quot;/&gt;
            &lt;dataSource type=&quot;POOLED&quot;&gt;
                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;
                &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;amp;useUnicode=true&amp;amp;characterEncoding=utf8&quot;/&gt;
                &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;
                &lt;property name=&quot;password&quot; value=&quot;hufei169357&quot;/&gt;
            &lt;/dataSource&gt;
        &lt;/environment&gt;
    &lt;/environments&gt;
    &lt;mappers&gt;
        &lt;mapper resource=&quot;com/feige/dao/userMapper.xml&quot;/&gt;
    &lt;/mappers&gt;
&lt;/configuration&gt;
</code></pre>
<h4>1.4、新建一个工具类用来获取SqlSession对象</h4>
<pre><code class='language-java' lang='java'>package com.feige.utils;

import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import java.io.IOException;
import java.io.InputStream;
//sqlSessionFactory-sqlSession
public class MybatisUtils {
    private static SqlSessionFactory sqlSessionFactory;
    static {
        try {
            //使用mybatis第一步：获取sqlSessionFactory对象
            String resource = &quot;mybatis-config.xml&quot;;
            InputStream inputStream = Resources.getResourceAsStream(resource);
            sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    //既然有了sqlSessionFactory，顾名思义，我们就可以从中获得sqlSession的实例
    public static SqlSession getSqlSessioon(){
        return sqlSessionFactory.openSession();
    }
}

</code></pre>
<p>&nbsp;</p>
<h4>1.5、编写一个pojo（实体类）</h4>
<pre><code class='language-java' lang='java'>package com.feige.pojo;

public class User {
    private int id;
    private String username;
    private String pwd;

    public User() {
    }

    public User(int id, String username, String pwd) {
        this.id = id;
        this.username = username;
        this.pwd = pwd;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getPwd() {
        return pwd;
    }

    public void setPwd(String pwd) {
        this.pwd = pwd;
    }
    @Override
    public String toString() {
        return &quot;User{&quot; +
                &quot;id=&quot; + id +
                &quot;, username=&#39;&quot; + username + &#39;\&#39;&#39; +
                &quot;, pwd=&#39;&quot; + pwd + &#39;\&#39;&#39; +
                &#39;}&#39;;
    }
}

</code></pre>
<h4>1.6、新建一个userMapper接口</h4>
<pre><code class='language-java' lang='java'>package com.feige.dao;

import com.feige.pojo.User;

import java.util.List;
import java.util.Map;

public interface UserMapper {
    //查询全部用户
    List&lt;User&gt; getAllUser();
    //通过一个id查询一个用户
    User getUserById(int id);
    //通过id修改一个用户
    int updateUserById(Map map);
    //通过id删除一个用户
    int deleteUserById(int id);
    //插入一条数据
    int insertUser(User user);
}

</code></pre>
<h4>1.7、新建一个userMapper.xml文件</h4>
<pre><code class='language-xml' lang='xml'>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE mapper
        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;com.feige.dao.UserMapper&quot;&gt;
    &lt;!--每个语句要对应相应的标签select对应&lt;select&gt; delete 对应&lt;delete&gt; update 对应&lt;update&gt; insert 对应&lt;insert&gt;--&gt;
    &lt;select id=&quot;getAllUser&quot; resultType=&quot;com.feige.pojo.User&quot;&gt;
        select * from user
    &lt;/select&gt;
    &lt;select id=&quot;getUserById&quot; resultType=&quot;com.feige.pojo.User&quot; parameterType=&quot;int&quot;&gt;
        select * from user where id=#{id}
    &lt;/select&gt;
    &lt;update id=&quot;updateUserById&quot; parameterType=&quot;map&quot;&gt;
        update user set pwd=#{pwd} where id=#{id}
    &lt;/update&gt;
    &lt;delete id=&quot;deleteUserById&quot; parameterType=&quot;int&quot;&gt;
        delete from user where id=#{id}
    &lt;/delete&gt;
    &lt;insert id=&quot;insertUser&quot; parameterType=&quot;com.feige.pojo.User&quot;&gt;
        insert into user values (#{id},#{username},#{pwd})
    &lt;/insert&gt;
&lt;/mapper&gt;
</code></pre>
<h4>1.8、测试代码</h4>
<pre><code class='language-java' lang='java'>package com.feige.mybatisTest;

import com.feige.dao.UserMapper;
import com.feige.pojo.User;
import com.feige.utils.MybatisUtils;
import org.apache.ibatis.session.SqlSession;
import org.junit.Test;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MybatisTest {
    @Test
    public void mybatisTest1(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        List&lt;User&gt; allUser = mapper.getAllUser();
        for (User user : allUser) {
            System.out.println(user);
        }
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest2(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        User userById = mapper.getUserById(2018143114);
        System.out.println(userById);
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest3() {
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        //使用万能map传参
        Map&lt;String,Object&gt; map = new HashMap&lt;String, Object&gt;();
        map.put(&quot;pwd&quot;,2018143114);
        map.put(&quot;id&quot;,2018143114);

        int i = mapper.updateUserById(map);
        if (i &gt; 0) {
            System.out.println(&quot;修改成功！&quot;+i);
        }
        //增删改需要提交事务
        sqlSessioon.commit();

        sqlSessioon.close();

    }
    @Test
    public void mybatisTest4(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        int i = mapper.deleteUserById(2018143117);
        if (i &gt; 0) {
            System.out.println(&quot;删除成功！&quot;+i);
        }
        sqlSessioon.commit();
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest5(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        User user = new User(2018143117, &quot;杨帆东&quot;, &quot;2018143117&quot;);
        int i = mapper.insertUser(user);
        if (i &gt; 0) {
            System.out.println(&quot;插入成功！&quot;+i);
        }
        sqlSessioon.commit();
        sqlSessioon.close();

    }
}

</code></pre>
<p>&nbsp;</p>
<p>		</p>, 2020-02-24 03:15:45.0, 2020-02-24 03:15:50.0, admin, 0]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50052} Result: [7, mybatis, mybatis啊, 作者, 2020-02-24 03:27:18.0, 2020-02-24 03:27:18.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50052} Result: [8, springboot, aaa, [TOC]
                            #### Disabled options

                            - TeX (Based on KaTeX);
                            - Emoji;
                            - Task lists;
                            - HTML tags decode;
                            - Flowchart and Sequence Diagram;
                            #### Editor.md directory

                                editor.md/
                                        lib/
                                        css/
                                        scss/
                                        tests/
                                        fonts/
                                        images/
                                        plugins/
                                        examples/
                                        languages/
                                        editormd.js
                                        ...

                            ```html
                            <!-- English -->
                            <script src="../dist/js/languages/en.js"></script>

                            <!-- 繁體中文 -->
                            <script src="../dist/js/languages/zh-tw.js"></script>
                            ```
                        , 2020-02-25 03:39:36.0, 2020-02-25 22:38:07.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50052} Result: [9, mybatis, bbb, [TOC]

                            #### Disabled options

                            - TeX (Based on KaTeX);
                            - Emoji;
                            - Task lists;
                            - HTML tags decode;
                            - Flowchart and Sequence Diagram;

                            #### Editor.md directory

                                editor.md/
                                        lib/
                                        css/
                                        scss/
                                        tests/
                                        fonts/
                                        images/
                                        plugins/
                                        examples/
                                        languages/
                                        editormd.js
                                        ...

                            ```html
                            <!-- English -->
                            <script src="../dist/js/languages/en.js"></script>

                            <!-- 繁體中文 -->
                            <script src="../dist/js/languages/zh-tw.js"></script>
                            ```
                        , 2020-02-25 03:44:09.0, 2020-02-25 03:44:09.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50052} Result: [10, springboot, 飞哥, #大哥的Markdown, 2020-02-25 22:43:28.0, 2020-02-25 22:43:28.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50052} Result: [11, mybatis, 大哥, #飞哥的博客后台管理系统, 2020-02-25 22:49:26.0, 2020-02-25 22:49:26.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50052} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} Parameters : []
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} Types : []
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} executed. 0.65111 millis. select count(*) from `blog`
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50053} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50053} Header: [count(*)]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50053} Result: [13]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50053} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} Parameters : [10, 10]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} executed. 143.225206 millis. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog
         
            limit ?,?
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50054} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50054} Header: [id, type_name, title, content, create_time, change_time, author, view]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50054} Result: [12, mybatis, 56, ##等待, 2020-02-25 22:50:53.0, 2020-02-25 22:50:53.0, admin, 5]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50054} Result: [13, mybatis, ssm框架整合, # ssm整合

## 1、数据库环境

创建一个存放书籍数据的数据库表

```
CREATE DATABASE `ssmbuild`;

USE `ssmbuild`;

DROP TABLE IF EXISTS `books`;

CREATE TABLE `books` (
  `bookId` INT PRIMARY KEY COMMENT '书id',
  `bookName` VARCHAR(100) NOT NULL COMMENT '书名',
  `bookCounts` INT(11) NOT NULL COMMENT '数量',
  ``ssmbuild``ssmbuild`` VARCHAR(200) NOT NULL COMMENT '描述'
) ENGINE=INNODB DEFAULT CHARSET=utf8

INSERT  INTO `books`(`bookId`,`bookName`,`bookCounts`,`detail`)VALUES 
(1,'Java',1,'从入门到放弃'),
(2,'MySQL',10,'从删库到跑路'),
(3,'Linux',5,'从进门到进牢');

SELECT * FROM books
```

## 2、基本环境搭建

1. 新建一Maven项目！ ssmbuild ， 添加web的支持

   ![image-20200128134359317](https://gitee.com/feigeCode/java_blog/raw/master/java/ssm%E6%95%B4%E5%90%88.assets/image-20200128134359317.png)

2. 导入相关的pom依赖！

   ```
   <dependencies>
       <!--Junit-->
       <dependency>
           <groupId>junit</groupId>
           <artifactId>junit</artifactId>
           <version>4.12</version>
       </dependency>
       <!--数据库驱动-->
       <dependency>
           <groupId>mysql</groupId>
           <artifactId>mysql-connector-java</artifactId>
           <version>5.1.47</version>
       </dependency>
       <!-- 数据库连接池 -->
       <dependency>
           <groupId>com.mchange</groupId>
           <artifactId>c3p0</artifactId>
           <version>0.9.5.2</version>
       </dependency>
   
       <!--Servlet - JSP -->
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>servlet-api</artifactId>
           <version>2.5</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet.jsp</groupId>
           <artifactId>jsp-api</artifactId>
           <version>2.2</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>jstl</artifactId>
           <version>1.2</version>
       </dependency>
   
       <!--Mybatis-->
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis</artifactId>
           <version>3.5.2</version>
       </dependency>
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis-spring</artifactId>
           <version>2.0.2</version>
       </dependency>
   
       <!--Spring-->
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-webmvc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-jdbc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->
       <dependency>
           <groupId>org.projectlombok</groupId>
           <artifactId>lombok</artifactId>
           <version>1.16.10</version>
       </dependency>
   </dependencies>
   ```

3. Maven资源过滤设置

   ```
   <build>
       <resources>
           <resource>
               <directory>src/main/java</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
           <resource>
               <directory>src/main/resources</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
       </resources>
   </build>
   ```

4. 建立基本结构和配置框架！

   - com.feige.pojo

   - com.feige.dao

   - com.feige.service

   - com.feige.controller

     在resources目录下创建

   - mybatis-config.xml

     ```
     <?xml version="1.0" encoding="UTF-8" ?>
     <!DOCTYPE configuration
             PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
             "http://mybatis.org/dtd/mybatis-3-config.dtd">
     <configuration>
     
     </configuration>
     ```

   - applicationContext.xml

     ```
     <?xml version="1.0" encoding="UTF-8"?>
     <beans xmlns="http://www.springframework.org/schema/beans"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://www.springframework.org/schema/beans
             http://www.springframework.org/schema/beans/spring-beans.xsd">
     
     </beans>
     ```

## 3、Mybatis层编写

1. 数据库配置文件 **database.properties**

   ```
   jdbc.driver=com.mysql.jdbc.Driver
   jdbc.url=jdbc:mysql://localhost:3306/ssmbuild?useSSL=true&useUnicode=true&characterEncoding=utf8
   jdbc.username=root
   jdbc.password=hufei169357
   ```

2. IDEA关联数据库

3. 编写MyBatis的核心配置文件

   ```
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE configuration
           PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-config.dtd">
   <configuration>
       
       <typeAliases>
           <package name="com.feige.pojo"/>
       </typeAliases>
       <mappers>
           <mapper resource="com/feige/dao/BookMapper.xml"/>
       </mappers>
   
   </configuration>
   ```

4. 编写数据库对应的实体类 com.feige.pojo.Books 使用lombok插件！

   ```
   package com.kuang.pojo;
   
   import lombok.AllArgsConstructor;
   import lombok.Data;
   import lombok.NoArgsConstructor;
   
   @Data
   @AllArgsConstructor
   @NoArgsConstructor
   public class Books {
       
       private int bookId;
       private String bookName;
       private int bookCounts;
       private String detail;
       
   }
   ```

5. 编写Dao层的 Mapper接口！

   ```
   package com.kuang.dao;
   
   import com.kuang.pojo.Books;
   import java.util.List;
   
   public interface BookMapper {
   
       //增加一个Book
       int addBook(Books book);
   
       //根据id删除一个Book
       int deleteBookById(int id);
   
       //更新Book
       int updateBook(Books books);
   
       //根据id查询,返回一个Book
       Books queryBookById(int id);
   
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   
   }
   ```

6. 编写接口对应的 Mapper.xml 文件。需要导入MyBatis的包；

   ```
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE mapper
           PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
   
   <mapper namespace="com.feige.dao.BooksMapper">
   
       <!--增加一个Book-->
       <insert id="addBook" parameterType="Books">
           insert into books(bookName,bookCounts,detail)
           values (#{bookName}, #{bookCounts}, #{detail})
       </insert>
   
       <!--根据id删除一个Book-->
       <delete id="deleteBookById" parameterType="int">
           delete from books where bookId=#{bookId}
       </delete>
   
       <!--更新Book-->
       <update id="updateBook" parameterType="Books">
           update books
           set bookName = #{bookName},bookCounts = #{bookCounts},detail = #{detail}
           where bookId = #{bookId}
       </update>
   
       <!--根据id查询,返回一个Book-->
       <select id="queryBookById" resultType="Books">
           select * from books
           where bookID = #{bookId}
       </select>
   
       <!--查询全部Book-->
       <select id="queryAllBook" resultType="com.feige.pojo.Books">
           SELECT * from books
       </select>
   
   </mapper>
   ```

7. 编写Service层的接口和实现类 接口：

   ```
   package com.feige.service;
   
   import com.feige.pojo.Books;
   
   import java.util.List;
   
   //BookService:底下需要去实现,调用dao层
   public interface BookService {
       //增加一个Book
       int addBook(Books book);
       //根据id删除一个Book
       int deleteBookById(int id);
       //更新Book
       int updateBook(Books books);
       //根据id查询,返回一个Book
       Books queryBookById(int id);
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   }
   ```

实现类：

```
package com.feige.service;

import com.feige.dao.BookMapper;
import com.feige.pojo.Books;
import java.util.List;

public class BookServiceImpl implements BookService {

    //调用dao层的操作，设置一个set接口，方便Spring管理
    private BookMapper bookMapper;

    public void setBookMapper(BookMapper bookMapper) {
        this.bookMapper = bookMapper;
    }
    
    public int addBook(Books book) {
        return bookMapper.addBook(book);
    }
    
    public int deleteBookById(int id) {
        return bookMapper.deleteBookById(id);
    }
    
    public int updateBook(Books books) {
        return bookMapper.updateBook(books);
    }
    
    public Books queryBookById(int id) {
        return bookMapper.queryBookById(id);
    }
    
    public List<Books> queryAllBook() {
        return bookMapper.queryAllBook();
    }
}
```

**OK，到此，底层需求操作编写完毕！**

## 4、Spring层

1. 配置**Spring整合MyBatis**，我们这里数据源使用c3p0连接池；

2. 我们去编写Spring整合Mybatis的相关的配置文件； spring-dao.xml

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans.xsd
   http://www.springframework.org/schema/context
   https://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 配置整合mybatis -->
       <!-- 1.关联数据库文件 -->
       <context:property-placeholder location="classpath:database.properties"/>
   
       <!-- 2.数据库连接池 -->
       <!--数据库连接池
   dbcp  半自动化操作  不能自动连接
   c3p0  自动化操作（自动的加载配置文件 并且设置到对象里面）
       -->
       <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
   <!-- 配置连接池属性 -->
   <property name="driverClass" value="${jdbc.driver}"/>
   <property name="jdbcUrl" value="${jdbc.url}"/>
   <property name="user" value="${jdbc.username}"/>
   <property name="password" value="${jdbc.password}"/>
   
   <!-- c3p0连接池的私有属性 -->
   <property name="maxPoolSize" value="30"/>
   <property name="minPoolSize" value="10"/>
   <!-- 关闭连接后不自动commit -->
   <property name="autoCommitOnClose" value="false"/>
   <!-- 获取连接超时时间 -->
   <property name="checkoutTimeout" value="10000"/>
   <!-- 当获取连接失败重试次数 -->
   <property name="acquireRetryAttempts" value="2"/>
       </bean>
   
       <!-- 3.配置SqlSessionFactory对象 -->
       <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource"/>
   <!-- 配置MyBaties全局配置文件:mybatis-config.xml -->
   <property name="configLocation" value="classpath:mybatis-config.xml"/>
       </bean>
   
       <!-- 4.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 -->
       <!--解释 ： https://www.cnblogs.com/jpfss/p/7799806.html-->
       <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
   <!-- 注入sqlSessionFactory -->
   <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
   <!-- 给出需要扫描Dao接口包 -->
   <property name="basePackage" value="com.feige.dao"/>
       </bean>
   
   </beans>
   ```

3. **Spring整合service层**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 扫描service相关的bean -->
       <context:component-scan base-package="com.kuang.service" />
   
       <!--BookServiceImpl注入到IOC容器中-->
       <bean id="BookServiceImpl" class="com.kuang.service.BookServiceImpl">
   <property name="bookMapper" ref="bookMapper"/>
       </bean>
   
       <!-- 配置事务管理器 -->
       <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource" />
       </bean>
   
   </beans>
   ```

Spring层搞定！再次理解一下，Spring就是一个大杂烩，一个容器！对吧！

## 5、SpringMVC层

1. **web.xml**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
            version="4.0">
   
       <!--DispatcherServlet-->
       <servlet>
           <servlet-name>DispatcherServlet</servlet-name>
           <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
           <init-param>
               <param-name>contextConfigLocation</param-name>
               <param-value>classpath:applicationContext.xml</param-value>
           </init-param>
           <load-on-startup>1</load-on-startup>
       </servlet>
       <servlet-mapping>
           <servlet-name>DispatcherServlet</servlet-name>
           <url-pattern>/</url-pattern>
       </servlet-mapping>
   
       <!--encodingFilter-->
       <filter>
           <filter-name>encodingFilter</filter-name>
           <filter-class>
               org.springframework.web.filter.CharacterEncodingFilter
           </filter-class>
           <init-param>
               <param-name>encoding</param-name>
               <param-value>utf-8</param-value>
           </init-param>
       </filter>
       <filter-mapping>
           <filter-name>encodingFilter</filter-name>
           <url-pattern>/*</url-pattern>
       </filter-mapping>
       
       <!--Session过期时间-->
       <session-config>
           <session-timeout>15</session-timeout>
       </session-config>
       
   </web-app>
   ```

2. **spring-mvc.xml**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xmlns:mvc="http://www.springframework.org/schema/mvc"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       https://www.springframework.org/schema/mvc/spring-mvc.xsd">
   
       <!-- 配置SpringMVC -->
       <!-- 1.开启SpringMVC注解驱动 -->
       <mvc:annotation-driven>
           <mvc:message-converters register-defaults="true">
               <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                   <constructor-arg value="UTF-8"/>
               </bean>
               <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                   <property name="objectMapper">
                       <bean class="org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean">
                           <property name="failOnEmptyBeans" value="false"/>
                       </bean>
                   </property>
               </bean>
           </mvc:message-converters>
       </mvc:annotation-driven>
       <!--解决跨域问题-->
       <mvc:cors>
       <mvc:mapping path="/**"
                    allowed-origins="http://127.0.0.1:8090,http://localhost:8090"
                    allowed-methods="POST,GET, OPTIONS,DELETE,PUT"
                    allowed-headers="Content-Type,ContentType,Access-Control-Allow-Headers, Authorization, X-Requested-With"
                    allow-credentials="true"/>
       </mvc:cors>
       <!-- 2.静态资源默认servlet配置-->
       <mvc:default-servlet-handler/>
   
       <!-- 3.配置jsp 显示ViewResolver视图解析器 -->
       <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
           <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
           <property name="prefix" value="/WEB-INF/jsp/" />
           <property name="suffix" value=".jsp" />
       </bean>
   
       <!-- 4.扫描web相关的bean -->
       <context:component-scan base-package="com.feige.controller" />
   
   </beans>
   ```

3. **Spring配置整合文件，applicationContext.xml**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd">
   
       <import resource="spring-dao.xml"/>
       <import resource="spring-service.xml"/>
       <import resource="spring-mvc.xml"/>
       
   </beans>
   ```

**配置文件，暂时结束！Controller 和 视图层编写**

1. BookController 类编写 ， 方法一：查询全部书籍

   ```
   @Controller
   @RequestMapping("/book")
   public class BookController {
   
       @Autowired
       @Qualifier("BookServiceImpl")
       private BookService bookService;
   
       @RequestMapping("/allBook")
       public String list(Model model) {
           List<Books> list = bookService.queryAllBook();
           model.addAttribute("list", list);
           return "allBook";
       }
   }
   ```

2. 编写首页 **index.jsp**

   ```
   <%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" %>
   <!DOCTYPE HTML>
   <html>
   <head>
       <title>首页</title>
       <style type="text/css">
           a {
               text-decoration: none;
               color: black;
               font-size: 18px;
           }
           h3 {
               width: 180px;
               height: 38px;
               margin: 100px auto;
               text-align: center;
               line-height: 38px;
               background: deepskyblue;
               border-radius: 4px;
           }
       </style>
   </head>
   <body>
   
   <h3>
       <a href="${pageContext.request.contextPath}/book/allBook">点击进入列表页</a>
   </h3>
   </body>
   </html>
   ```

3. 书籍列表页面 **allbook.jsp**

   ```
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>书籍列表</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>书籍列表 —— 显示所有书籍</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <div class="row">
           <div class="col-md-4 column">
               <a class="btn btn-primary" href="${pageContext.request.contextPath}/book/toAddBook">新增</a>
           </div>
       </div>
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <table class="table table-hover table-striped">
                   <thead>
                   <tr>
                       <th>书籍编号</th>
                       <th>书籍名字</th>
                       <th>书籍数量</th>
                       <th>书籍详情</th>
                       <th>操作</th>
                   </tr>
                   </thead>
   
                   <tbody>
                   <c:forEach var="book" items="${requestScope.get('list')}">
                       <tr>
                           <td>${book.getBookId()}</td>
                           <td>${book.getBookName()}</td>
                           <td>${book.getBookCounts()}</td>
                           <td>${book.getDetail()}</td>
                           <td>
                               <a href="${pageContext.request.contextPath}/book/toUpdateBook?id=${book.getBookId()}">更改</a> |
                               <a href="${pageContext.request.contextPath}/book/del/${book.getBookId()}">删除</a>
                           </td>
                       </tr>
                   </c:forEach>
                   </tbody>
               </table>
           </div>
       </div>
   </div>
   ```

4. BookController 类编写 ， 方法二：添加书籍

   ```
   @RequestMapping("/toAddBook")
   public String toAddPaper() {
       return "addBook";
   }
   
   @RequestMapping("/addBook")
   public String addPaper(Books books) {
       System.out.println(books);
       bookService.addBook(books);
       return "redirect:/book/allBook";
   }
   ```

5. 添加书籍页面：**addBook.jsp**

   ```
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   
   <html>
   <head>
       <title>新增书籍</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>新增书籍</small>
                   </h1>
               </div>
           </div>
       </div>
       <form action="${pageContext.request.contextPath}/book/addBook" method="post">
           书籍名称：<input type="text" name="bookName"><br><br><br>
           书籍数量：<input type="text" name="bookCounts"><br><br><br>
           书籍详情：<input type="text" name="detail"><br><br><br>
           <input type="submit" value="添加">
       </form>
   
   </div>
   ```

6. BookController 类编写 ， 方法三：修改书籍

   ```
   @RequestMapping("/toUpdateBook")
   public String toUpdateBook(Model model, int id) {
       Books books = bookService.queryBookById(id);
       System.out.println(books);
       model.addAttribute("book",books );
       return "updateBook";
   }
   
   @RequestMapping("/updateBook")
   public String updateBook(Model model, Books book) {
       bookService.updateBook(book);
       Books books = bookService.queryBookById(book.getBookID());
       model.addAttribute("books", books);
       return "redirect:/book/allBook";
   }
   ```

7. 修改书籍页面 **updateBook.jsp**

   ```
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>修改信息</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>修改信息</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <form action="${pageContext.request.contextPath}/book/updateBook" method="post">
           <input type="hidden" name="bookID" value="${book.getBookId()}"/>
           书籍名称：<input type="text" name="bookName" value="${book.getBookName()}"/>
           书籍数量：<input type="text" name="bookCounts" value="${book.getBookCounts()}"/>
           书籍详情：<input type="text" name="detail" value="${book.getDetail() }"/>
           <input type="submit" value="提交"/>
       </form>
   
   </div>
   ```

8. BookController 类编写 ， 方法四：删除书籍

   ```
   @RequestMapping("/del/{bookId}")
   public String deleteBook(@PathVariable("bookId") int id) {
       bookService.deleteBookById(id);
       return "redirect:/book/allBook";
   }
   ```

**配置Tomcat，进行运行！**

到目前为止，这个SSM项目整合已经完全的OK了，可以直接运行进行测试！这个练习十分的重要，大家需要保证，不看任何东西，自己也可以完整的实现出来！

## **6、项目结构图**

![1570186854191.png](https://blog.kuangstudy.com/usr/uploads/2019/10/1086489242.png)

![1570186868239.png](https://blog.kuangstudy.com/usr/uploads/2019/10/2326667495.png)

## 7、错误排查

### 1、访问出现404，排查步骤：**

1. 查看控制台输出，看一下是不是缺少了什么jar包。

2. 如果jar包存在，显示无法输出，就在IDEA的项目发布中，添加lib依赖！

   步骤：点击项目结构----->Artifacts----->点击自己的项目(ssm:war exploded)--->(点击工具栏的第一个)在WEB-INF目录下新建一个lib包----->选中lib------>点击工具栏的第三个然后选中第一个---->把里面的包全部选中点击ok---->点击Apply再ok

   ![image-20200128125126368](https://gitee.com/feigeCode/java_blog/raw/master/java/ssm%E6%95%B4%E5%90%88.assets/image-20200128125126368.png)

   ![image-20200128125237179](https://gitee.com/feigeCode/java_blog/raw/master/java/ssm%E6%95%B4%E5%90%88.assets/image-20200128125237179.png)

3. 重启Tomcat 即可解决！

### 2、其他错误

#### 1、bean不存在

 步骤：

 查看bean注入是否成功

 junit单元测试，看我们的代码是否能够查询出来

 问题不在底层，是我们spring出了问题

 springMVC整合时没有调用到service层的bean

 applicationContext.xml没有注册bean

 web.xml也绑定过配置文件要绑定大的applicationContext.xml



## 8、小结及展望

这个是同学们的第一个SSM整合案例，一定要烂熟于心！

SSM框架的重要程度是不言而喻的，学到这里，大家已经可以进行基本网站的单独开发。但是这只是增删改查的基本操作。可以说学到这里，大家才算是真正的步入了后台开发的门。也就是能找一个后台相关工作的底线。

或许很多人，工作就做这些事情，但是对于个人的提高来说，还远远不够！

| 飞哥 | 飞哥 | 飞哥 |
| ---- | ---- | ---- |
| 飞哥 | 飞哥 | 飞哥 |
| 飞哥 | 飞哥 | 飞哥 |
| 飞哥 | 飞哥 | 飞哥 |



~~~java
static class CustomAttributeProvider implements AttributeProvider {

        @Override
        public void setAttributes(Node node, String s, Map<String, String> map) {
            //改变a标签的target属性为_blank
            if(node instanceof Link) {
                map.put("target","_blank");
            }
            if (node instanceof TableBlock) {
                map.put("class","el-table__body-wrapper is-scrolling-none");
            }
            if (node instanceof TableBody) {
                map.put("class","el-table__body");
            }
            if (node instanceof TableRow) {
                map.put("class","el-table__row");
            }
            if (node instanceof TableCell) {
                map.put("class","el-table_13_column_55");
            }
        }
~~~

# feige

, 2020-03-02 07:06:53.0, 2020-03-13 06:59:47.0, admin, 10]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50054} Result: [17, springboot, ss, ss, 2020-02-24 03:07:20.0, 2020-03-20 00:07:13.0, admin, 11]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50054} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} Parameters : []
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} Types : []
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} executed. 1.325332 millis. select count(*) from `blog`
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50055} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50055} Header: [count(*)]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50055} Result: [13]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50055} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20002} created. select distinct count(*) from comments c
        where c.blog_id=? and
        c.parent_id is null;
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20002} Parameters : [13]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20002} Types : [INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20002} executed. 14.704431 millis. select distinct count(*) from comments c
        where c.blog_id=? and
        c.parent_id is null;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20002, rs-50056} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20002, rs-50056} Header: [count(*)]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20002, rs-50056} Result: [3]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20002, rs-50056} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20002} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20003} created. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id  and
        c.parent_id is null limit ?,?;;
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20003} Parameters : [13, 0, 10]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20003} Types : [INTEGER, INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20003} executed. 11.661768 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id  and
        c.parent_id is null limit ?,?;;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20003, rs-50057} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20003, rs-50057} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20003, rs-50057} Result: [26, 好好, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:35.0, null]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20003, rs-50057} Result: [29, 太好了, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:13.0, null]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20003, rs-50057} Result: [32, <p>feige</p>, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 01:33:26.0, null]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20003, rs-50057} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20003} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} created. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Parameters : [13, 26]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} executed. 4.035996 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50058} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50058} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50058} Result: [27, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:56.0, sss]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50058} Result: [28, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:43:03.0, sss]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50058} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Parameters : [13, 26]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} executed. 4.799996 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50059} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50059} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50059} Result: [27, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:56.0, sss]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50059} Result: [28, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:43:03.0, sss]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50059} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Parameters : [13, 27]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} executed. 1.930665 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50060} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50060} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50060} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Parameters : [13, 27]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} executed. 0.566222 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50061} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50061} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50061} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Parameters : [13, 29]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} executed. 3.816885 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50062} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50062} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50062} Result: [30, 谢谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:43.0, sss]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50062} Result: [31, 不用谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:47:01.0, sss]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50062} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Parameters : [13, 29]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} executed. 4.003107 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50063} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50063} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50063} Result: [30, 谢谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:43.0, sss]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50063} Result: [31, 不用谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:47:01.0, sss]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50063} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Parameters : [13, 30]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} executed. 0.585333 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50064} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50064} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50064} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Parameters : [13, 30]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} executed. 0.952888 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50065} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50065} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50065} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Parameters : [13, 32]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} executed. 0.478667 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50066} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50066} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50066} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20002} Parameters : [13]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20002} Types : [INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20002} executed. 3.342664 millis. select distinct count(*) from comments c
        where c.blog_id=? and
        c.parent_id is null;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20002, rs-50067} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20002, rs-50067} Header: [count(*)]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20002, rs-50067} Result: [3]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20002, rs-50067} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20002} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20003} Parameters : [13, 0, 10]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20003} Types : [INTEGER, INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20003} executed. 2.019998 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id  and
        c.parent_id is null limit ?,?;;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20003, rs-50068} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20003, rs-50068} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20003, rs-50068} Result: [26, 好好, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:35.0, null]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20003, rs-50068} Result: [29, 太好了, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:13.0, null]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20003, rs-50068} Result: [32, <p>feige</p>, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 01:33:26.0, null]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20003, rs-50068} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20003} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Parameters : [13, 26]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} executed. 4.178218 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50069} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50069} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50069} Result: [27, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:56.0, sss]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50069} Result: [28, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:43:03.0, sss]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50069} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Parameters : [13, 26]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} executed. 6.301772 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50070} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50070} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50070} Result: [27, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:56.0, sss]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50070} Result: [28, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:43:03.0, sss]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50070} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Parameters : [13, 27]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} executed. 0.825332 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50071} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50071} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50071} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Parameters : [13, 27]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} executed. 0.560444 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50072} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50072} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50072} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Parameters : [13, 29]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} executed. 3.865775 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50073} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50073} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50073} Result: [30, 谢谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:43.0, sss]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50073} Result: [31, 不用谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:47:01.0, sss]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50073} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Parameters : [13, 29]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} executed. 5.166217 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50074} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50074} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50074} Result: [30, 谢谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:43.0, sss]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50074} Result: [31, 不用谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:47:01.0, sss]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50074} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Parameters : [13, 30]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} executed. 1.324887 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50075} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50075} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50075} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Parameters : [13, 30]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} executed. 0.691999 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50076} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50076} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50076} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Parameters : [13, 32]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} executed. 0.568888 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50077} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50077} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50077} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20005} created. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog where id=?
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20005} Parameters : [13]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20005} Types : [INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20005} executed. 4.035552 millis. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog where id=?
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50078} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50078} Header: [id, type_name, title, content, create_time, change_time, author, view]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50078} Result: [13, mybatis, ssm框架整合, # ssm整合

## 1、数据库环境

创建一个存放书籍数据的数据库表

```
CREATE DATABASE `ssmbuild`;

USE `ssmbuild`;

DROP TABLE IF EXISTS `books`;

CREATE TABLE `books` (
  `bookId` INT PRIMARY KEY COMMENT '书id',
  `bookName` VARCHAR(100) NOT NULL COMMENT '书名',
  `bookCounts` INT(11) NOT NULL COMMENT '数量',
  ``ssmbuild``ssmbuild`` VARCHAR(200) NOT NULL COMMENT '描述'
) ENGINE=INNODB DEFAULT CHARSET=utf8

INSERT  INTO `books`(`bookId`,`bookName`,`bookCounts`,`detail`)VALUES 
(1,'Java',1,'从入门到放弃'),
(2,'MySQL',10,'从删库到跑路'),
(3,'Linux',5,'从进门到进牢');

SELECT * FROM books
```

## 2、基本环境搭建

1. 新建一Maven项目！ ssmbuild ， 添加web的支持

   ![image-20200128134359317](https://gitee.com/feigeCode/java_blog/raw/master/java/ssm%E6%95%B4%E5%90%88.assets/image-20200128134359317.png)

2. 导入相关的pom依赖！

   ```
   <dependencies>
       <!--Junit-->
       <dependency>
           <groupId>junit</groupId>
           <artifactId>junit</artifactId>
           <version>4.12</version>
       </dependency>
       <!--数据库驱动-->
       <dependency>
           <groupId>mysql</groupId>
           <artifactId>mysql-connector-java</artifactId>
           <version>5.1.47</version>
       </dependency>
       <!-- 数据库连接池 -->
       <dependency>
           <groupId>com.mchange</groupId>
           <artifactId>c3p0</artifactId>
           <version>0.9.5.2</version>
       </dependency>
   
       <!--Servlet - JSP -->
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>servlet-api</artifactId>
           <version>2.5</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet.jsp</groupId>
           <artifactId>jsp-api</artifactId>
           <version>2.2</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>jstl</artifactId>
           <version>1.2</version>
       </dependency>
   
       <!--Mybatis-->
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis</artifactId>
           <version>3.5.2</version>
       </dependency>
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis-spring</artifactId>
           <version>2.0.2</version>
       </dependency>
   
       <!--Spring-->
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-webmvc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-jdbc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->
       <dependency>
           <groupId>org.projectlombok</groupId>
           <artifactId>lombok</artifactId>
           <version>1.16.10</version>
       </dependency>
   </dependencies>
   ```

3. Maven资源过滤设置

   ```
   <build>
       <resources>
           <resource>
               <directory>src/main/java</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
           <resource>
               <directory>src/main/resources</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
       </resources>
   </build>
   ```

4. 建立基本结构和配置框架！

   - com.feige.pojo

   - com.feige.dao

   - com.feige.service

   - com.feige.controller

     在resources目录下创建

   - mybatis-config.xml

     ```
     <?xml version="1.0" encoding="UTF-8" ?>
     <!DOCTYPE configuration
             PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
             "http://mybatis.org/dtd/mybatis-3-config.dtd">
     <configuration>
     
     </configuration>
     ```

   - applicationContext.xml

     ```
     <?xml version="1.0" encoding="UTF-8"?>
     <beans xmlns="http://www.springframework.org/schema/beans"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://www.springframework.org/schema/beans
             http://www.springframework.org/schema/beans/spring-beans.xsd">
     
     </beans>
     ```

## 3、Mybatis层编写

1. 数据库配置文件 **database.properties**

   ```
   jdbc.driver=com.mysql.jdbc.Driver
   jdbc.url=jdbc:mysql://localhost:3306/ssmbuild?useSSL=true&useUnicode=true&characterEncoding=utf8
   jdbc.username=root
   jdbc.password=hufei169357
   ```

2. IDEA关联数据库

3. 编写MyBatis的核心配置文件

   ```
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE configuration
           PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-config.dtd">
   <configuration>
       
       <typeAliases>
           <package name="com.feige.pojo"/>
       </typeAliases>
       <mappers>
           <mapper resource="com/feige/dao/BookMapper.xml"/>
       </mappers>
   
   </configuration>
   ```

4. 编写数据库对应的实体类 com.feige.pojo.Books 使用lombok插件！

   ```
   package com.kuang.pojo;
   
   import lombok.AllArgsConstructor;
   import lombok.Data;
   import lombok.NoArgsConstructor;
   
   @Data
   @AllArgsConstructor
   @NoArgsConstructor
   public class Books {
       
       private int bookId;
       private String bookName;
       private int bookCounts;
       private String detail;
       
   }
   ```

5. 编写Dao层的 Mapper接口！

   ```
   package com.kuang.dao;
   
   import com.kuang.pojo.Books;
   import java.util.List;
   
   public interface BookMapper {
   
       //增加一个Book
       int addBook(Books book);
   
       //根据id删除一个Book
       int deleteBookById(int id);
   
       //更新Book
       int updateBook(Books books);
   
       //根据id查询,返回一个Book
       Books queryBookById(int id);
   
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   
   }
   ```

6. 编写接口对应的 Mapper.xml 文件。需要导入MyBatis的包；

   ```
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE mapper
           PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
   
   <mapper namespace="com.feige.dao.BooksMapper">
   
       <!--增加一个Book-->
       <insert id="addBook" parameterType="Books">
           insert into books(bookName,bookCounts,detail)
           values (#{bookName}, #{bookCounts}, #{detail})
       </insert>
   
       <!--根据id删除一个Book-->
       <delete id="deleteBookById" parameterType="int">
           delete from books where bookId=#{bookId}
       </delete>
   
       <!--更新Book-->
       <update id="updateBook" parameterType="Books">
           update books
           set bookName = #{bookName},bookCounts = #{bookCounts},detail = #{detail}
           where bookId = #{bookId}
       </update>
   
       <!--根据id查询,返回一个Book-->
       <select id="queryBookById" resultType="Books">
           select * from books
           where bookID = #{bookId}
       </select>
   
       <!--查询全部Book-->
       <select id="queryAllBook" resultType="com.feige.pojo.Books">
           SELECT * from books
       </select>
   
   </mapper>
   ```

7. 编写Service层的接口和实现类 接口：

   ```
   package com.feige.service;
   
   import com.feige.pojo.Books;
   
   import java.util.List;
   
   //BookService:底下需要去实现,调用dao层
   public interface BookService {
       //增加一个Book
       int addBook(Books book);
       //根据id删除一个Book
       int deleteBookById(int id);
       //更新Book
       int updateBook(Books books);
       //根据id查询,返回一个Book
       Books queryBookById(int id);
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   }
   ```

实现类：

```
package com.feige.service;

import com.feige.dao.BookMapper;
import com.feige.pojo.Books;
import java.util.List;

public class BookServiceImpl implements BookService {

    //调用dao层的操作，设置一个set接口，方便Spring管理
    private BookMapper bookMapper;

    public void setBookMapper(BookMapper bookMapper) {
        this.bookMapper = bookMapper;
    }
    
    public int addBook(Books book) {
        return bookMapper.addBook(book);
    }
    
    public int deleteBookById(int id) {
        return bookMapper.deleteBookById(id);
    }
    
    public int updateBook(Books books) {
        return bookMapper.updateBook(books);
    }
    
    public Books queryBookById(int id) {
        return bookMapper.queryBookById(id);
    }
    
    public List<Books> queryAllBook() {
        return bookMapper.queryAllBook();
    }
}
```

**OK，到此，底层需求操作编写完毕！**

## 4、Spring层

1. 配置**Spring整合MyBatis**，我们这里数据源使用c3p0连接池；

2. 我们去编写Spring整合Mybatis的相关的配置文件； spring-dao.xml

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans.xsd
   http://www.springframework.org/schema/context
   https://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 配置整合mybatis -->
       <!-- 1.关联数据库文件 -->
       <context:property-placeholder location="classpath:database.properties"/>
   
       <!-- 2.数据库连接池 -->
       <!--数据库连接池
   dbcp  半自动化操作  不能自动连接
   c3p0  自动化操作（自动的加载配置文件 并且设置到对象里面）
       -->
       <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
   <!-- 配置连接池属性 -->
   <property name="driverClass" value="${jdbc.driver}"/>
   <property name="jdbcUrl" value="${jdbc.url}"/>
   <property name="user" value="${jdbc.username}"/>
   <property name="password" value="${jdbc.password}"/>
   
   <!-- c3p0连接池的私有属性 -->
   <property name="maxPoolSize" value="30"/>
   <property name="minPoolSize" value="10"/>
   <!-- 关闭连接后不自动commit -->
   <property name="autoCommitOnClose" value="false"/>
   <!-- 获取连接超时时间 -->
   <property name="checkoutTimeout" value="10000"/>
   <!-- 当获取连接失败重试次数 -->
   <property name="acquireRetryAttempts" value="2"/>
       </bean>
   
       <!-- 3.配置SqlSessionFactory对象 -->
       <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource"/>
   <!-- 配置MyBaties全局配置文件:mybatis-config.xml -->
   <property name="configLocation" value="classpath:mybatis-config.xml"/>
       </bean>
   
       <!-- 4.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 -->
       <!--解释 ： https://www.cnblogs.com/jpfss/p/7799806.html-->
       <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
   <!-- 注入sqlSessionFactory -->
   <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
   <!-- 给出需要扫描Dao接口包 -->
   <property name="basePackage" value="com.feige.dao"/>
       </bean>
   
   </beans>
   ```

3. **Spring整合service层**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 扫描service相关的bean -->
       <context:component-scan base-package="com.kuang.service" />
   
       <!--BookServiceImpl注入到IOC容器中-->
       <bean id="BookServiceImpl" class="com.kuang.service.BookServiceImpl">
   <property name="bookMapper" ref="bookMapper"/>
       </bean>
   
       <!-- 配置事务管理器 -->
       <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource" />
       </bean>
   
   </beans>
   ```

Spring层搞定！再次理解一下，Spring就是一个大杂烩，一个容器！对吧！

## 5、SpringMVC层

1. **web.xml**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
            version="4.0">
   
       <!--DispatcherServlet-->
       <servlet>
           <servlet-name>DispatcherServlet</servlet-name>
           <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
           <init-param>
               <param-name>contextConfigLocation</param-name>
               <param-value>classpath:applicationContext.xml</param-value>
           </init-param>
           <load-on-startup>1</load-on-startup>
       </servlet>
       <servlet-mapping>
           <servlet-name>DispatcherServlet</servlet-name>
           <url-pattern>/</url-pattern>
       </servlet-mapping>
   
       <!--encodingFilter-->
       <filter>
           <filter-name>encodingFilter</filter-name>
           <filter-class>
               org.springframework.web.filter.CharacterEncodingFilter
           </filter-class>
           <init-param>
               <param-name>encoding</param-name>
               <param-value>utf-8</param-value>
           </init-param>
       </filter>
       <filter-mapping>
           <filter-name>encodingFilter</filter-name>
           <url-pattern>/*</url-pattern>
       </filter-mapping>
       
       <!--Session过期时间-->
       <session-config>
           <session-timeout>15</session-timeout>
       </session-config>
       
   </web-app>
   ```

2. **spring-mvc.xml**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xmlns:mvc="http://www.springframework.org/schema/mvc"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       https://www.springframework.org/schema/mvc/spring-mvc.xsd">
   
       <!-- 配置SpringMVC -->
       <!-- 1.开启SpringMVC注解驱动 -->
       <mvc:annotation-driven>
           <mvc:message-converters register-defaults="true">
               <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                   <constructor-arg value="UTF-8"/>
               </bean>
               <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                   <property name="objectMapper">
                       <bean class="org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean">
                           <property name="failOnEmptyBeans" value="false"/>
                       </bean>
                   </property>
               </bean>
           </mvc:message-converters>
       </mvc:annotation-driven>
       <!--解决跨域问题-->
       <mvc:cors>
       <mvc:mapping path="/**"
                    allowed-origins="http://127.0.0.1:8090,http://localhost:8090"
                    allowed-methods="POST,GET, OPTIONS,DELETE,PUT"
                    allowed-headers="Content-Type,ContentType,Access-Control-Allow-Headers, Authorization, X-Requested-With"
                    allow-credentials="true"/>
       </mvc:cors>
       <!-- 2.静态资源默认servlet配置-->
       <mvc:default-servlet-handler/>
   
       <!-- 3.配置jsp 显示ViewResolver视图解析器 -->
       <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
           <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
           <property name="prefix" value="/WEB-INF/jsp/" />
           <property name="suffix" value=".jsp" />
       </bean>
   
       <!-- 4.扫描web相关的bean -->
       <context:component-scan base-package="com.feige.controller" />
   
   </beans>
   ```

3. **Spring配置整合文件，applicationContext.xml**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd">
   
       <import resource="spring-dao.xml"/>
       <import resource="spring-service.xml"/>
       <import resource="spring-mvc.xml"/>
       
   </beans>
   ```

**配置文件，暂时结束！Controller 和 视图层编写**

1. BookController 类编写 ， 方法一：查询全部书籍

   ```
   @Controller
   @RequestMapping("/book")
   public class BookController {
   
       @Autowired
       @Qualifier("BookServiceImpl")
       private BookService bookService;
   
       @RequestMapping("/allBook")
       public String list(Model model) {
           List<Books> list = bookService.queryAllBook();
           model.addAttribute("list", list);
           return "allBook";
       }
   }
   ```

2. 编写首页 **index.jsp**

   ```
   <%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" %>
   <!DOCTYPE HTML>
   <html>
   <head>
       <title>首页</title>
       <style type="text/css">
           a {
               text-decoration: none;
               color: black;
               font-size: 18px;
           }
           h3 {
               width: 180px;
               height: 38px;
               margin: 100px auto;
               text-align: center;
               line-height: 38px;
               background: deepskyblue;
               border-radius: 4px;
           }
       </style>
   </head>
   <body>
   
   <h3>
       <a href="${pageContext.request.contextPath}/book/allBook">点击进入列表页</a>
   </h3>
   </body>
   </html>
   ```

3. 书籍列表页面 **allbook.jsp**

   ```
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>书籍列表</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>书籍列表 —— 显示所有书籍</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <div class="row">
           <div class="col-md-4 column">
               <a class="btn btn-primary" href="${pageContext.request.contextPath}/book/toAddBook">新增</a>
           </div>
       </div>
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <table class="table table-hover table-striped">
                   <thead>
                   <tr>
                       <th>书籍编号</th>
                       <th>书籍名字</th>
                       <th>书籍数量</th>
                       <th>书籍详情</th>
                       <th>操作</th>
                   </tr>
                   </thead>
   
                   <tbody>
                   <c:forEach var="book" items="${requestScope.get('list')}">
                       <tr>
                           <td>${book.getBookId()}</td>
                           <td>${book.getBookName()}</td>
                           <td>${book.getBookCounts()}</td>
                           <td>${book.getDetail()}</td>
                           <td>
                               <a href="${pageContext.request.contextPath}/book/toUpdateBook?id=${book.getBookId()}">更改</a> |
                               <a href="${pageContext.request.contextPath}/book/del/${book.getBookId()}">删除</a>
                           </td>
                       </tr>
                   </c:forEach>
                   </tbody>
               </table>
           </div>
       </div>
   </div>
   ```

4. BookController 类编写 ， 方法二：添加书籍

   ```
   @RequestMapping("/toAddBook")
   public String toAddPaper() {
       return "addBook";
   }
   
   @RequestMapping("/addBook")
   public String addPaper(Books books) {
       System.out.println(books);
       bookService.addBook(books);
       return "redirect:/book/allBook";
   }
   ```

5. 添加书籍页面：**addBook.jsp**

   ```
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   
   <html>
   <head>
       <title>新增书籍</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>新增书籍</small>
                   </h1>
               </div>
           </div>
       </div>
       <form action="${pageContext.request.contextPath}/book/addBook" method="post">
           书籍名称：<input type="text" name="bookName"><br><br><br>
           书籍数量：<input type="text" name="bookCounts"><br><br><br>
           书籍详情：<input type="text" name="detail"><br><br><br>
           <input type="submit" value="添加">
       </form>
   
   </div>
   ```

6. BookController 类编写 ， 方法三：修改书籍

   ```
   @RequestMapping("/toUpdateBook")
   public String toUpdateBook(Model model, int id) {
       Books books = bookService.queryBookById(id);
       System.out.println(books);
       model.addAttribute("book",books );
       return "updateBook";
   }
   
   @RequestMapping("/updateBook")
   public String updateBook(Model model, Books book) {
       bookService.updateBook(book);
       Books books = bookService.queryBookById(book.getBookID());
       model.addAttribute("books", books);
       return "redirect:/book/allBook";
   }
   ```

7. 修改书籍页面 **updateBook.jsp**

   ```
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>修改信息</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>修改信息</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <form action="${pageContext.request.contextPath}/book/updateBook" method="post">
           <input type="hidden" name="bookID" value="${book.getBookId()}"/>
           书籍名称：<input type="text" name="bookName" value="${book.getBookName()}"/>
           书籍数量：<input type="text" name="bookCounts" value="${book.getBookCounts()}"/>
           书籍详情：<input type="text" name="detail" value="${book.getDetail() }"/>
           <input type="submit" value="提交"/>
       </form>
   
   </div>
   ```

8. BookController 类编写 ， 方法四：删除书籍

   ```
   @RequestMapping("/del/{bookId}")
   public String deleteBook(@PathVariable("bookId") int id) {
       bookService.deleteBookById(id);
       return "redirect:/book/allBook";
   }
   ```

**配置Tomcat，进行运行！**

到目前为止，这个SSM项目整合已经完全的OK了，可以直接运行进行测试！这个练习十分的重要，大家需要保证，不看任何东西，自己也可以完整的实现出来！

## **6、项目结构图**

![1570186854191.png](https://blog.kuangstudy.com/usr/uploads/2019/10/1086489242.png)

![1570186868239.png](https://blog.kuangstudy.com/usr/uploads/2019/10/2326667495.png)

## 7、错误排查

### 1、访问出现404，排查步骤：**

1. 查看控制台输出，看一下是不是缺少了什么jar包。

2. 如果jar包存在，显示无法输出，就在IDEA的项目发布中，添加lib依赖！

   步骤：点击项目结构----->Artifacts----->点击自己的项目(ssm:war exploded)--->(点击工具栏的第一个)在WEB-INF目录下新建一个lib包----->选中lib------>点击工具栏的第三个然后选中第一个---->把里面的包全部选中点击ok---->点击Apply再ok

   ![image-20200128125126368](https://gitee.com/feigeCode/java_blog/raw/master/java/ssm%E6%95%B4%E5%90%88.assets/image-20200128125126368.png)

   ![image-20200128125237179](https://gitee.com/feigeCode/java_blog/raw/master/java/ssm%E6%95%B4%E5%90%88.assets/image-20200128125237179.png)

3. 重启Tomcat 即可解决！

### 2、其他错误

#### 1、bean不存在

 步骤：

 查看bean注入是否成功

 junit单元测试，看我们的代码是否能够查询出来

 问题不在底层，是我们spring出了问题

 springMVC整合时没有调用到service层的bean

 applicationContext.xml没有注册bean

 web.xml也绑定过配置文件要绑定大的applicationContext.xml



## 8、小结及展望

这个是同学们的第一个SSM整合案例，一定要烂熟于心！

SSM框架的重要程度是不言而喻的，学到这里，大家已经可以进行基本网站的单独开发。但是这只是增删改查的基本操作。可以说学到这里，大家才算是真正的步入了后台开发的门。也就是能找一个后台相关工作的底线。

或许很多人，工作就做这些事情，但是对于个人的提高来说，还远远不够！

| 飞哥 | 飞哥 | 飞哥 |
| ---- | ---- | ---- |
| 飞哥 | 飞哥 | 飞哥 |
| 飞哥 | 飞哥 | 飞哥 |
| 飞哥 | 飞哥 | 飞哥 |



~~~java
static class CustomAttributeProvider implements AttributeProvider {

        @Override
        public void setAttributes(Node node, String s, Map<String, String> map) {
            //改变a标签的target属性为_blank
            if(node instanceof Link) {
                map.put("target","_blank");
            }
            if (node instanceof TableBlock) {
                map.put("class","el-table__body-wrapper is-scrolling-none");
            }
            if (node instanceof TableBody) {
                map.put("class","el-table__body");
            }
            if (node instanceof TableRow) {
                map.put("class","el-table__row");
            }
            if (node instanceof TableCell) {
                map.put("class","el-table_13_column_55");
            }
        }
~~~

# feige

, 2020-03-02 07:06:53.0, 2020-03-13 06:59:47.0, admin, 10]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50078} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20005} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20005} Parameters : [13]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20005} Types : [INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20005} executed. 2.071998 millis. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog where id=?
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50079} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50079} Header: [id, type_name, title, content, create_time, change_time, author, view]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50079} Result: [13, mybatis, ssm框架整合, # ssm整合

## 1、数据库环境

创建一个存放书籍数据的数据库表

```
CREATE DATABASE `ssmbuild`;

USE `ssmbuild`;

DROP TABLE IF EXISTS `books`;

CREATE TABLE `books` (
  `bookId` INT PRIMARY KEY COMMENT '书id',
  `bookName` VARCHAR(100) NOT NULL COMMENT '书名',
  `bookCounts` INT(11) NOT NULL COMMENT '数量',
  ``ssmbuild``ssmbuild`` VARCHAR(200) NOT NULL COMMENT '描述'
) ENGINE=INNODB DEFAULT CHARSET=utf8

INSERT  INTO `books`(`bookId`,`bookName`,`bookCounts`,`detail`)VALUES 
(1,'Java',1,'从入门到放弃'),
(2,'MySQL',10,'从删库到跑路'),
(3,'Linux',5,'从进门到进牢');

SELECT * FROM books
```

## 2、基本环境搭建

1. 新建一Maven项目！ ssmbuild ， 添加web的支持

   ![image-20200128134359317](https://gitee.com/feigeCode/java_blog/raw/master/java/ssm%E6%95%B4%E5%90%88.assets/image-20200128134359317.png)

2. 导入相关的pom依赖！

   ```
   <dependencies>
       <!--Junit-->
       <dependency>
           <groupId>junit</groupId>
           <artifactId>junit</artifactId>
           <version>4.12</version>
       </dependency>
       <!--数据库驱动-->
       <dependency>
           <groupId>mysql</groupId>
           <artifactId>mysql-connector-java</artifactId>
           <version>5.1.47</version>
       </dependency>
       <!-- 数据库连接池 -->
       <dependency>
           <groupId>com.mchange</groupId>
           <artifactId>c3p0</artifactId>
           <version>0.9.5.2</version>
       </dependency>
   
       <!--Servlet - JSP -->
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>servlet-api</artifactId>
           <version>2.5</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet.jsp</groupId>
           <artifactId>jsp-api</artifactId>
           <version>2.2</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>jstl</artifactId>
           <version>1.2</version>
       </dependency>
   
       <!--Mybatis-->
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis</artifactId>
           <version>3.5.2</version>
       </dependency>
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis-spring</artifactId>
           <version>2.0.2</version>
       </dependency>
   
       <!--Spring-->
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-webmvc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-jdbc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->
       <dependency>
           <groupId>org.projectlombok</groupId>
           <artifactId>lombok</artifactId>
           <version>1.16.10</version>
       </dependency>
   </dependencies>
   ```

3. Maven资源过滤设置

   ```
   <build>
       <resources>
           <resource>
               <directory>src/main/java</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
           <resource>
               <directory>src/main/resources</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
       </resources>
   </build>
   ```

4. 建立基本结构和配置框架！

   - com.feige.pojo

   - com.feige.dao

   - com.feige.service

   - com.feige.controller

     在resources目录下创建

   - mybatis-config.xml

     ```
     <?xml version="1.0" encoding="UTF-8" ?>
     <!DOCTYPE configuration
             PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
             "http://mybatis.org/dtd/mybatis-3-config.dtd">
     <configuration>
     
     </configuration>
     ```

   - applicationContext.xml

     ```
     <?xml version="1.0" encoding="UTF-8"?>
     <beans xmlns="http://www.springframework.org/schema/beans"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://www.springframework.org/schema/beans
             http://www.springframework.org/schema/beans/spring-beans.xsd">
     
     </beans>
     ```

## 3、Mybatis层编写

1. 数据库配置文件 **database.properties**

   ```
   jdbc.driver=com.mysql.jdbc.Driver
   jdbc.url=jdbc:mysql://localhost:3306/ssmbuild?useSSL=true&useUnicode=true&characterEncoding=utf8
   jdbc.username=root
   jdbc.password=hufei169357
   ```

2. IDEA关联数据库

3. 编写MyBatis的核心配置文件

   ```
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE configuration
           PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-config.dtd">
   <configuration>
       
       <typeAliases>
           <package name="com.feige.pojo"/>
       </typeAliases>
       <mappers>
           <mapper resource="com/feige/dao/BookMapper.xml"/>
       </mappers>
   
   </configuration>
   ```

4. 编写数据库对应的实体类 com.feige.pojo.Books 使用lombok插件！

   ```
   package com.kuang.pojo;
   
   import lombok.AllArgsConstructor;
   import lombok.Data;
   import lombok.NoArgsConstructor;
   
   @Data
   @AllArgsConstructor
   @NoArgsConstructor
   public class Books {
       
       private int bookId;
       private String bookName;
       private int bookCounts;
       private String detail;
       
   }
   ```

5. 编写Dao层的 Mapper接口！

   ```
   package com.kuang.dao;
   
   import com.kuang.pojo.Books;
   import java.util.List;
   
   public interface BookMapper {
   
       //增加一个Book
       int addBook(Books book);
   
       //根据id删除一个Book
       int deleteBookById(int id);
   
       //更新Book
       int updateBook(Books books);
   
       //根据id查询,返回一个Book
       Books queryBookById(int id);
   
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   
   }
   ```

6. 编写接口对应的 Mapper.xml 文件。需要导入MyBatis的包；

   ```
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE mapper
           PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
   
   <mapper namespace="com.feige.dao.BooksMapper">
   
       <!--增加一个Book-->
       <insert id="addBook" parameterType="Books">
           insert into books(bookName,bookCounts,detail)
           values (#{bookName}, #{bookCounts}, #{detail})
       </insert>
   
       <!--根据id删除一个Book-->
       <delete id="deleteBookById" parameterType="int">
           delete from books where bookId=#{bookId}
       </delete>
   
       <!--更新Book-->
       <update id="updateBook" parameterType="Books">
           update books
           set bookName = #{bookName},bookCounts = #{bookCounts},detail = #{detail}
           where bookId = #{bookId}
       </update>
   
       <!--根据id查询,返回一个Book-->
       <select id="queryBookById" resultType="Books">
           select * from books
           where bookID = #{bookId}
       </select>
   
       <!--查询全部Book-->
       <select id="queryAllBook" resultType="com.feige.pojo.Books">
           SELECT * from books
       </select>
   
   </mapper>
   ```

7. 编写Service层的接口和实现类 接口：

   ```
   package com.feige.service;
   
   import com.feige.pojo.Books;
   
   import java.util.List;
   
   //BookService:底下需要去实现,调用dao层
   public interface BookService {
       //增加一个Book
       int addBook(Books book);
       //根据id删除一个Book
       int deleteBookById(int id);
       //更新Book
       int updateBook(Books books);
       //根据id查询,返回一个Book
       Books queryBookById(int id);
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   }
   ```

实现类：

```
package com.feige.service;

import com.feige.dao.BookMapper;
import com.feige.pojo.Books;
import java.util.List;

public class BookServiceImpl implements BookService {

    //调用dao层的操作，设置一个set接口，方便Spring管理
    private BookMapper bookMapper;

    public void setBookMapper(BookMapper bookMapper) {
        this.bookMapper = bookMapper;
    }
    
    public int addBook(Books book) {
        return bookMapper.addBook(book);
    }
    
    public int deleteBookById(int id) {
        return bookMapper.deleteBookById(id);
    }
    
    public int updateBook(Books books) {
        return bookMapper.updateBook(books);
    }
    
    public Books queryBookById(int id) {
        return bookMapper.queryBookById(id);
    }
    
    public List<Books> queryAllBook() {
        return bookMapper.queryAllBook();
    }
}
```

**OK，到此，底层需求操作编写完毕！**

## 4、Spring层

1. 配置**Spring整合MyBatis**，我们这里数据源使用c3p0连接池；

2. 我们去编写Spring整合Mybatis的相关的配置文件； spring-dao.xml

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans.xsd
   http://www.springframework.org/schema/context
   https://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 配置整合mybatis -->
       <!-- 1.关联数据库文件 -->
       <context:property-placeholder location="classpath:database.properties"/>
   
       <!-- 2.数据库连接池 -->
       <!--数据库连接池
   dbcp  半自动化操作  不能自动连接
   c3p0  自动化操作（自动的加载配置文件 并且设置到对象里面）
       -->
       <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
   <!-- 配置连接池属性 -->
   <property name="driverClass" value="${jdbc.driver}"/>
   <property name="jdbcUrl" value="${jdbc.url}"/>
   <property name="user" value="${jdbc.username}"/>
   <property name="password" value="${jdbc.password}"/>
   
   <!-- c3p0连接池的私有属性 -->
   <property name="maxPoolSize" value="30"/>
   <property name="minPoolSize" value="10"/>
   <!-- 关闭连接后不自动commit -->
   <property name="autoCommitOnClose" value="false"/>
   <!-- 获取连接超时时间 -->
   <property name="checkoutTimeout" value="10000"/>
   <!-- 当获取连接失败重试次数 -->
   <property name="acquireRetryAttempts" value="2"/>
       </bean>
   
       <!-- 3.配置SqlSessionFactory对象 -->
       <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource"/>
   <!-- 配置MyBaties全局配置文件:mybatis-config.xml -->
   <property name="configLocation" value="classpath:mybatis-config.xml"/>
       </bean>
   
       <!-- 4.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 -->
       <!--解释 ： https://www.cnblogs.com/jpfss/p/7799806.html-->
       <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
   <!-- 注入sqlSessionFactory -->
   <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
   <!-- 给出需要扫描Dao接口包 -->
   <property name="basePackage" value="com.feige.dao"/>
       </bean>
   
   </beans>
   ```

3. **Spring整合service层**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 扫描service相关的bean -->
       <context:component-scan base-package="com.kuang.service" />
   
       <!--BookServiceImpl注入到IOC容器中-->
       <bean id="BookServiceImpl" class="com.kuang.service.BookServiceImpl">
   <property name="bookMapper" ref="bookMapper"/>
       </bean>
   
       <!-- 配置事务管理器 -->
       <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource" />
       </bean>
   
   </beans>
   ```

Spring层搞定！再次理解一下，Spring就是一个大杂烩，一个容器！对吧！

## 5、SpringMVC层

1. **web.xml**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
            version="4.0">
   
       <!--DispatcherServlet-->
       <servlet>
           <servlet-name>DispatcherServlet</servlet-name>
           <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
           <init-param>
               <param-name>contextConfigLocation</param-name>
               <param-value>classpath:applicationContext.xml</param-value>
           </init-param>
           <load-on-startup>1</load-on-startup>
       </servlet>
       <servlet-mapping>
           <servlet-name>DispatcherServlet</servlet-name>
           <url-pattern>/</url-pattern>
       </servlet-mapping>
   
       <!--encodingFilter-->
       <filter>
           <filter-name>encodingFilter</filter-name>
           <filter-class>
               org.springframework.web.filter.CharacterEncodingFilter
           </filter-class>
           <init-param>
               <param-name>encoding</param-name>
               <param-value>utf-8</param-value>
           </init-param>
       </filter>
       <filter-mapping>
           <filter-name>encodingFilter</filter-name>
           <url-pattern>/*</url-pattern>
       </filter-mapping>
       
       <!--Session过期时间-->
       <session-config>
           <session-timeout>15</session-timeout>
       </session-config>
       
   </web-app>
   ```

2. **spring-mvc.xml**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xmlns:mvc="http://www.springframework.org/schema/mvc"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       https://www.springframework.org/schema/mvc/spring-mvc.xsd">
   
       <!-- 配置SpringMVC -->
       <!-- 1.开启SpringMVC注解驱动 -->
       <mvc:annotation-driven>
           <mvc:message-converters register-defaults="true">
               <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                   <constructor-arg value="UTF-8"/>
               </bean>
               <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                   <property name="objectMapper">
                       <bean class="org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean">
                           <property name="failOnEmptyBeans" value="false"/>
                       </bean>
                   </property>
               </bean>
           </mvc:message-converters>
       </mvc:annotation-driven>
       <!--解决跨域问题-->
       <mvc:cors>
       <mvc:mapping path="/**"
                    allowed-origins="http://127.0.0.1:8090,http://localhost:8090"
                    allowed-methods="POST,GET, OPTIONS,DELETE,PUT"
                    allowed-headers="Content-Type,ContentType,Access-Control-Allow-Headers, Authorization, X-Requested-With"
                    allow-credentials="true"/>
       </mvc:cors>
       <!-- 2.静态资源默认servlet配置-->
       <mvc:default-servlet-handler/>
   
       <!-- 3.配置jsp 显示ViewResolver视图解析器 -->
       <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
           <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
           <property name="prefix" value="/WEB-INF/jsp/" />
           <property name="suffix" value=".jsp" />
       </bean>
   
       <!-- 4.扫描web相关的bean -->
       <context:component-scan base-package="com.feige.controller" />
   
   </beans>
   ```

3. **Spring配置整合文件，applicationContext.xml**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd">
   
       <import resource="spring-dao.xml"/>
       <import resource="spring-service.xml"/>
       <import resource="spring-mvc.xml"/>
       
   </beans>
   ```

**配置文件，暂时结束！Controller 和 视图层编写**

1. BookController 类编写 ， 方法一：查询全部书籍

   ```
   @Controller
   @RequestMapping("/book")
   public class BookController {
   
       @Autowired
       @Qualifier("BookServiceImpl")
       private BookService bookService;
   
       @RequestMapping("/allBook")
       public String list(Model model) {
           List<Books> list = bookService.queryAllBook();
           model.addAttribute("list", list);
           return "allBook";
       }
   }
   ```

2. 编写首页 **index.jsp**

   ```
   <%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" %>
   <!DOCTYPE HTML>
   <html>
   <head>
       <title>首页</title>
       <style type="text/css">
           a {
               text-decoration: none;
               color: black;
               font-size: 18px;
           }
           h3 {
               width: 180px;
               height: 38px;
               margin: 100px auto;
               text-align: center;
               line-height: 38px;
               background: deepskyblue;
               border-radius: 4px;
           }
       </style>
   </head>
   <body>
   
   <h3>
       <a href="${pageContext.request.contextPath}/book/allBook">点击进入列表页</a>
   </h3>
   </body>
   </html>
   ```

3. 书籍列表页面 **allbook.jsp**

   ```
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>书籍列表</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>书籍列表 —— 显示所有书籍</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <div class="row">
           <div class="col-md-4 column">
               <a class="btn btn-primary" href="${pageContext.request.contextPath}/book/toAddBook">新增</a>
           </div>
       </div>
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <table class="table table-hover table-striped">
                   <thead>
                   <tr>
                       <th>书籍编号</th>
                       <th>书籍名字</th>
                       <th>书籍数量</th>
                       <th>书籍详情</th>
                       <th>操作</th>
                   </tr>
                   </thead>
   
                   <tbody>
                   <c:forEach var="book" items="${requestScope.get('list')}">
                       <tr>
                           <td>${book.getBookId()}</td>
                           <td>${book.getBookName()}</td>
                           <td>${book.getBookCounts()}</td>
                           <td>${book.getDetail()}</td>
                           <td>
                               <a href="${pageContext.request.contextPath}/book/toUpdateBook?id=${book.getBookId()}">更改</a> |
                               <a href="${pageContext.request.contextPath}/book/del/${book.getBookId()}">删除</a>
                           </td>
                       </tr>
                   </c:forEach>
                   </tbody>
               </table>
           </div>
       </div>
   </div>
   ```

4. BookController 类编写 ， 方法二：添加书籍

   ```
   @RequestMapping("/toAddBook")
   public String toAddPaper() {
       return "addBook";
   }
   
   @RequestMapping("/addBook")
   public String addPaper(Books books) {
       System.out.println(books);
       bookService.addBook(books);
       return "redirect:/book/allBook";
   }
   ```

5. 添加书籍页面：**addBook.jsp**

   ```
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   
   <html>
   <head>
       <title>新增书籍</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>新增书籍</small>
                   </h1>
               </div>
           </div>
       </div>
       <form action="${pageContext.request.contextPath}/book/addBook" method="post">
           书籍名称：<input type="text" name="bookName"><br><br><br>
           书籍数量：<input type="text" name="bookCounts"><br><br><br>
           书籍详情：<input type="text" name="detail"><br><br><br>
           <input type="submit" value="添加">
       </form>
   
   </div>
   ```

6. BookController 类编写 ， 方法三：修改书籍

   ```
   @RequestMapping("/toUpdateBook")
   public String toUpdateBook(Model model, int id) {
       Books books = bookService.queryBookById(id);
       System.out.println(books);
       model.addAttribute("book",books );
       return "updateBook";
   }
   
   @RequestMapping("/updateBook")
   public String updateBook(Model model, Books book) {
       bookService.updateBook(book);
       Books books = bookService.queryBookById(book.getBookID());
       model.addAttribute("books", books);
       return "redirect:/book/allBook";
   }
   ```

7. 修改书籍页面 **updateBook.jsp**

   ```
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>修改信息</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>修改信息</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <form action="${pageContext.request.contextPath}/book/updateBook" method="post">
           <input type="hidden" name="bookID" value="${book.getBookId()}"/>
           书籍名称：<input type="text" name="bookName" value="${book.getBookName()}"/>
           书籍数量：<input type="text" name="bookCounts" value="${book.getBookCounts()}"/>
           书籍详情：<input type="text" name="detail" value="${book.getDetail() }"/>
           <input type="submit" value="提交"/>
       </form>
   
   </div>
   ```

8. BookController 类编写 ， 方法四：删除书籍

   ```
   @RequestMapping("/del/{bookId}")
   public String deleteBook(@PathVariable("bookId") int id) {
       bookService.deleteBookById(id);
       return "redirect:/book/allBook";
   }
   ```

**配置Tomcat，进行运行！**

到目前为止，这个SSM项目整合已经完全的OK了，可以直接运行进行测试！这个练习十分的重要，大家需要保证，不看任何东西，自己也可以完整的实现出来！

## **6、项目结构图**

![1570186854191.png](https://blog.kuangstudy.com/usr/uploads/2019/10/1086489242.png)

![1570186868239.png](https://blog.kuangstudy.com/usr/uploads/2019/10/2326667495.png)

## 7、错误排查

### 1、访问出现404，排查步骤：**

1. 查看控制台输出，看一下是不是缺少了什么jar包。

2. 如果jar包存在，显示无法输出，就在IDEA的项目发布中，添加lib依赖！

   步骤：点击项目结构----->Artifacts----->点击自己的项目(ssm:war exploded)--->(点击工具栏的第一个)在WEB-INF目录下新建一个lib包----->选中lib------>点击工具栏的第三个然后选中第一个---->把里面的包全部选中点击ok---->点击Apply再ok

   ![image-20200128125126368](https://gitee.com/feigeCode/java_blog/raw/master/java/ssm%E6%95%B4%E5%90%88.assets/image-20200128125126368.png)

   ![image-20200128125237179](https://gitee.com/feigeCode/java_blog/raw/master/java/ssm%E6%95%B4%E5%90%88.assets/image-20200128125237179.png)

3. 重启Tomcat 即可解决！

### 2、其他错误

#### 1、bean不存在

 步骤：

 查看bean注入是否成功

 junit单元测试，看我们的代码是否能够查询出来

 问题不在底层，是我们spring出了问题

 springMVC整合时没有调用到service层的bean

 applicationContext.xml没有注册bean

 web.xml也绑定过配置文件要绑定大的applicationContext.xml



## 8、小结及展望

这个是同学们的第一个SSM整合案例，一定要烂熟于心！

SSM框架的重要程度是不言而喻的，学到这里，大家已经可以进行基本网站的单独开发。但是这只是增删改查的基本操作。可以说学到这里，大家才算是真正的步入了后台开发的门。也就是能找一个后台相关工作的底线。

或许很多人，工作就做这些事情，但是对于个人的提高来说，还远远不够！

| 飞哥 | 飞哥 | 飞哥 |
| ---- | ---- | ---- |
| 飞哥 | 飞哥 | 飞哥 |
| 飞哥 | 飞哥 | 飞哥 |
| 飞哥 | 飞哥 | 飞哥 |



~~~java
static class CustomAttributeProvider implements AttributeProvider {

        @Override
        public void setAttributes(Node node, String s, Map<String, String> map) {
            //改变a标签的target属性为_blank
            if(node instanceof Link) {
                map.put("target","_blank");
            }
            if (node instanceof TableBlock) {
                map.put("class","el-table__body-wrapper is-scrolling-none");
            }
            if (node instanceof TableBody) {
                map.put("class","el-table__body");
            }
            if (node instanceof TableRow) {
                map.put("class","el-table__row");
            }
            if (node instanceof TableCell) {
                map.put("class","el-table_13_column_55");
            }
        }
~~~

# feige

, 2020-03-02 07:06:53.0, 2020-03-13 06:59:47.0, admin, 10]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50079} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20005} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20006} created. select distinct count(*) from comments c
        where c.blog_id=? and
        c.parent_id is null;
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20006} Parameters : [13]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20006} Types : [INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20006} executed. 8.334215 millis. select distinct count(*) from comments c
        where c.blog_id=? and
        c.parent_id is null;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20006, rs-50080} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20006, rs-50080} Header: [count(*)]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20006, rs-50080} Result: [3]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20006, rs-50080} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20006} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20007} created. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id  and
        c.parent_id is null limit ?,?;;
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20007} Parameters : [13, 0, 10]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20007} Types : [INTEGER, INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20007} executed. 5.703106 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id  and
        c.parent_id is null limit ?,?;;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20007, rs-50081} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20007, rs-50081} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20007, rs-50081} Result: [26, 好好, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:35.0, null]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20007, rs-50081} Result: [29, 太好了, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:13.0, null]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20007, rs-50081} Result: [32, <p>feige</p>, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 01:33:26.0, null]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20007, rs-50081} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20007} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} created. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} Parameters : [13, 26]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} executed. 5.465328 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50082} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50082} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50082} Result: [27, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:56.0, sss]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50082} Result: [28, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:43:03.0, sss]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50082} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} Parameters : [13, 26]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} executed. 4.091108 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50083} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50083} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50083} Result: [27, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:56.0, sss]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50083} Result: [28, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:43:03.0, sss]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50083} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} Parameters : [13, 27]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} executed. 0.668888 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50084} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50084} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50084} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} Parameters : [13, 27]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} executed. 0.802221 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50085} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50085} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50085} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} Parameters : [13, 29]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} executed. 4.684441 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50086} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50086} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50086} Result: [30, 谢谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:43.0, sss]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50086} Result: [31, 不用谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:47:01.0, sss]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50086} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} Parameters : [13, 29]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} executed. 4.243552 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50087} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50087} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50087} Result: [30, 谢谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:43.0, sss]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50087} Result: [31, 不用谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:47:01.0, sss]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50087} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} Parameters : [13, 30]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} executed. 0.839999 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50088} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50088} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50088} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} Parameters : [13, 30]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} executed. 0.665333 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50089} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50089} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50089} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} Parameters : [13, 32]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} executed. 0.716 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50090} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50090} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50090} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20009} created. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog where id=?
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20009} Parameters : [13]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20009} Types : [INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20009} executed. 1.655555 millis. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog where id=?
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20009, rs-50091} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20009, rs-50091} Header: [id, type_name, title, content, create_time, change_time, author, view]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20009, rs-50091} Result: [13, mybatis, ssm框架整合, # ssm整合

## 1、数据库环境

创建一个存放书籍数据的数据库表

```
CREATE DATABASE `ssmbuild`;

USE `ssmbuild`;

DROP TABLE IF EXISTS `books`;

CREATE TABLE `books` (
  `bookId` INT PRIMARY KEY COMMENT '书id',
  `bookName` VARCHAR(100) NOT NULL COMMENT '书名',
  `bookCounts` INT(11) NOT NULL COMMENT '数量',
  ``ssmbuild``ssmbuild`` VARCHAR(200) NOT NULL COMMENT '描述'
) ENGINE=INNODB DEFAULT CHARSET=utf8

INSERT  INTO `books`(`bookId`,`bookName`,`bookCounts`,`detail`)VALUES 
(1,'Java',1,'从入门到放弃'),
(2,'MySQL',10,'从删库到跑路'),
(3,'Linux',5,'从进门到进牢');

SELECT * FROM books
```

## 2、基本环境搭建

1. 新建一Maven项目！ ssmbuild ， 添加web的支持

   ![image-20200128134359317](https://gitee.com/feigeCode/java_blog/raw/master/java/ssm%E6%95%B4%E5%90%88.assets/image-20200128134359317.png)

2. 导入相关的pom依赖！

   ```
   <dependencies>
       <!--Junit-->
       <dependency>
           <groupId>junit</groupId>
           <artifactId>junit</artifactId>
           <version>4.12</version>
       </dependency>
       <!--数据库驱动-->
       <dependency>
           <groupId>mysql</groupId>
           <artifactId>mysql-connector-java</artifactId>
           <version>5.1.47</version>
       </dependency>
       <!-- 数据库连接池 -->
       <dependency>
           <groupId>com.mchange</groupId>
           <artifactId>c3p0</artifactId>
           <version>0.9.5.2</version>
       </dependency>
   
       <!--Servlet - JSP -->
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>servlet-api</artifactId>
           <version>2.5</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet.jsp</groupId>
           <artifactId>jsp-api</artifactId>
           <version>2.2</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>jstl</artifactId>
           <version>1.2</version>
       </dependency>
   
       <!--Mybatis-->
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis</artifactId>
           <version>3.5.2</version>
       </dependency>
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis-spring</artifactId>
           <version>2.0.2</version>
       </dependency>
   
       <!--Spring-->
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-webmvc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-jdbc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->
       <dependency>
           <groupId>org.projectlombok</groupId>
           <artifactId>lombok</artifactId>
           <version>1.16.10</version>
       </dependency>
   </dependencies>
   ```

3. Maven资源过滤设置

   ```
   <build>
       <resources>
           <resource>
               <directory>src/main/java</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
           <resource>
               <directory>src/main/resources</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
       </resources>
   </build>
   ```

4. 建立基本结构和配置框架！

   - com.feige.pojo

   - com.feige.dao

   - com.feige.service

   - com.feige.controller

     在resources目录下创建

   - mybatis-config.xml

     ```
     <?xml version="1.0" encoding="UTF-8" ?>
     <!DOCTYPE configuration
             PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
             "http://mybatis.org/dtd/mybatis-3-config.dtd">
     <configuration>
     
     </configuration>
     ```

   - applicationContext.xml

     ```
     <?xml version="1.0" encoding="UTF-8"?>
     <beans xmlns="http://www.springframework.org/schema/beans"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://www.springframework.org/schema/beans
             http://www.springframework.org/schema/beans/spring-beans.xsd">
     
     </beans>
     ```

## 3、Mybatis层编写

1. 数据库配置文件 **database.properties**

   ```
   jdbc.driver=com.mysql.jdbc.Driver
   jdbc.url=jdbc:mysql://localhost:3306/ssmbuild?useSSL=true&useUnicode=true&characterEncoding=utf8
   jdbc.username=root
   jdbc.password=hufei169357
   ```

2. IDEA关联数据库

3. 编写MyBatis的核心配置文件

   ```
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE configuration
           PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-config.dtd">
   <configuration>
       
       <typeAliases>
           <package name="com.feige.pojo"/>
       </typeAliases>
       <mappers>
           <mapper resource="com/feige/dao/BookMapper.xml"/>
       </mappers>
   
   </configuration>
   ```

4. 编写数据库对应的实体类 com.feige.pojo.Books 使用lombok插件！

   ```
   package com.kuang.pojo;
   
   import lombok.AllArgsConstructor;
   import lombok.Data;
   import lombok.NoArgsConstructor;
   
   @Data
   @AllArgsConstructor
   @NoArgsConstructor
   public class Books {
       
       private int bookId;
       private String bookName;
       private int bookCounts;
       private String detail;
       
   }
   ```

5. 编写Dao层的 Mapper接口！

   ```
   package com.kuang.dao;
   
   import com.kuang.pojo.Books;
   import java.util.List;
   
   public interface BookMapper {
   
       //增加一个Book
       int addBook(Books book);
   
       //根据id删除一个Book
       int deleteBookById(int id);
   
       //更新Book
       int updateBook(Books books);
   
       //根据id查询,返回一个Book
       Books queryBookById(int id);
   
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   
   }
   ```

6. 编写接口对应的 Mapper.xml 文件。需要导入MyBatis的包；

   ```
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE mapper
           PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
   
   <mapper namespace="com.feige.dao.BooksMapper">
   
       <!--增加一个Book-->
       <insert id="addBook" parameterType="Books">
           insert into books(bookName,bookCounts,detail)
           values (#{bookName}, #{bookCounts}, #{detail})
       </insert>
   
       <!--根据id删除一个Book-->
       <delete id="deleteBookById" parameterType="int">
           delete from books where bookId=#{bookId}
       </delete>
   
       <!--更新Book-->
       <update id="updateBook" parameterType="Books">
           update books
           set bookName = #{bookName},bookCounts = #{bookCounts},detail = #{detail}
           where bookId = #{bookId}
       </update>
   
       <!--根据id查询,返回一个Book-->
       <select id="queryBookById" resultType="Books">
           select * from books
           where bookID = #{bookId}
       </select>
   
       <!--查询全部Book-->
       <select id="queryAllBook" resultType="com.feige.pojo.Books">
           SELECT * from books
       </select>
   
   </mapper>
   ```

7. 编写Service层的接口和实现类 接口：

   ```
   package com.feige.service;
   
   import com.feige.pojo.Books;
   
   import java.util.List;
   
   //BookService:底下需要去实现,调用dao层
   public interface BookService {
       //增加一个Book
       int addBook(Books book);
       //根据id删除一个Book
       int deleteBookById(int id);
       //更新Book
       int updateBook(Books books);
       //根据id查询,返回一个Book
       Books queryBookById(int id);
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   }
   ```

实现类：

```
package com.feige.service;

import com.feige.dao.BookMapper;
import com.feige.pojo.Books;
import java.util.List;

public class BookServiceImpl implements BookService {

    //调用dao层的操作，设置一个set接口，方便Spring管理
    private BookMapper bookMapper;

    public void setBookMapper(BookMapper bookMapper) {
        this.bookMapper = bookMapper;
    }
    
    public int addBook(Books book) {
        return bookMapper.addBook(book);
    }
    
    public int deleteBookById(int id) {
        return bookMapper.deleteBookById(id);
    }
    
    public int updateBook(Books books) {
        return bookMapper.updateBook(books);
    }
    
    public Books queryBookById(int id) {
        return bookMapper.queryBookById(id);
    }
    
    public List<Books> queryAllBook() {
        return bookMapper.queryAllBook();
    }
}
```

**OK，到此，底层需求操作编写完毕！**

## 4、Spring层

1. 配置**Spring整合MyBatis**，我们这里数据源使用c3p0连接池；

2. 我们去编写Spring整合Mybatis的相关的配置文件； spring-dao.xml

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans.xsd
   http://www.springframework.org/schema/context
   https://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 配置整合mybatis -->
       <!-- 1.关联数据库文件 -->
       <context:property-placeholder location="classpath:database.properties"/>
   
       <!-- 2.数据库连接池 -->
       <!--数据库连接池
   dbcp  半自动化操作  不能自动连接
   c3p0  自动化操作（自动的加载配置文件 并且设置到对象里面）
       -->
       <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
   <!-- 配置连接池属性 -->
   <property name="driverClass" value="${jdbc.driver}"/>
   <property name="jdbcUrl" value="${jdbc.url}"/>
   <property name="user" value="${jdbc.username}"/>
   <property name="password" value="${jdbc.password}"/>
   
   <!-- c3p0连接池的私有属性 -->
   <property name="maxPoolSize" value="30"/>
   <property name="minPoolSize" value="10"/>
   <!-- 关闭连接后不自动commit -->
   <property name="autoCommitOnClose" value="false"/>
   <!-- 获取连接超时时间 -->
   <property name="checkoutTimeout" value="10000"/>
   <!-- 当获取连接失败重试次数 -->
   <property name="acquireRetryAttempts" value="2"/>
       </bean>
   
       <!-- 3.配置SqlSessionFactory对象 -->
       <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource"/>
   <!-- 配置MyBaties全局配置文件:mybatis-config.xml -->
   <property name="configLocation" value="classpath:mybatis-config.xml"/>
       </bean>
   
       <!-- 4.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 -->
       <!--解释 ： https://www.cnblogs.com/jpfss/p/7799806.html-->
       <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
   <!-- 注入sqlSessionFactory -->
   <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
   <!-- 给出需要扫描Dao接口包 -->
   <property name="basePackage" value="com.feige.dao"/>
       </bean>
   
   </beans>
   ```

3. **Spring整合service层**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 扫描service相关的bean -->
       <context:component-scan base-package="com.kuang.service" />
   
       <!--BookServiceImpl注入到IOC容器中-->
       <bean id="BookServiceImpl" class="com.kuang.service.BookServiceImpl">
   <property name="bookMapper" ref="bookMapper"/>
       </bean>
   
       <!-- 配置事务管理器 -->
       <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource" />
       </bean>
   
   </beans>
   ```

Spring层搞定！再次理解一下，Spring就是一个大杂烩，一个容器！对吧！

## 5、SpringMVC层

1. **web.xml**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
            version="4.0">
   
       <!--DispatcherServlet-->
       <servlet>
           <servlet-name>DispatcherServlet</servlet-name>
           <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
           <init-param>
               <param-name>contextConfigLocation</param-name>
               <param-value>classpath:applicationContext.xml</param-value>
           </init-param>
           <load-on-startup>1</load-on-startup>
       </servlet>
       <servlet-mapping>
           <servlet-name>DispatcherServlet</servlet-name>
           <url-pattern>/</url-pattern>
       </servlet-mapping>
   
       <!--encodingFilter-->
       <filter>
           <filter-name>encodingFilter</filter-name>
           <filter-class>
               org.springframework.web.filter.CharacterEncodingFilter
           </filter-class>
           <init-param>
               <param-name>encoding</param-name>
               <param-value>utf-8</param-value>
           </init-param>
       </filter>
       <filter-mapping>
           <filter-name>encodingFilter</filter-name>
           <url-pattern>/*</url-pattern>
       </filter-mapping>
       
       <!--Session过期时间-->
       <session-config>
           <session-timeout>15</session-timeout>
       </session-config>
       
   </web-app>
   ```

2. **spring-mvc.xml**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xmlns:mvc="http://www.springframework.org/schema/mvc"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       https://www.springframework.org/schema/mvc/spring-mvc.xsd">
   
       <!-- 配置SpringMVC -->
       <!-- 1.开启SpringMVC注解驱动 -->
       <mvc:annotation-driven>
           <mvc:message-converters register-defaults="true">
               <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                   <constructor-arg value="UTF-8"/>
               </bean>
               <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                   <property name="objectMapper">
                       <bean class="org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean">
                           <property name="failOnEmptyBeans" value="false"/>
                       </bean>
                   </property>
               </bean>
           </mvc:message-converters>
       </mvc:annotation-driven>
       <!--解决跨域问题-->
       <mvc:cors>
       <mvc:mapping path="/**"
                    allowed-origins="http://127.0.0.1:8090,http://localhost:8090"
                    allowed-methods="POST,GET, OPTIONS,DELETE,PUT"
                    allowed-headers="Content-Type,ContentType,Access-Control-Allow-Headers, Authorization, X-Requested-With"
                    allow-credentials="true"/>
       </mvc:cors>
       <!-- 2.静态资源默认servlet配置-->
       <mvc:default-servlet-handler/>
   
       <!-- 3.配置jsp 显示ViewResolver视图解析器 -->
       <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
           <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
           <property name="prefix" value="/WEB-INF/jsp/" />
           <property name="suffix" value=".jsp" />
       </bean>
   
       <!-- 4.扫描web相关的bean -->
       <context:component-scan base-package="com.feige.controller" />
   
   </beans>
   ```

3. **Spring配置整合文件，applicationContext.xml**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd">
   
       <import resource="spring-dao.xml"/>
       <import resource="spring-service.xml"/>
       <import resource="spring-mvc.xml"/>
       
   </beans>
   ```

**配置文件，暂时结束！Controller 和 视图层编写**

1. BookController 类编写 ， 方法一：查询全部书籍

   ```
   @Controller
   @RequestMapping("/book")
   public class BookController {
   
       @Autowired
       @Qualifier("BookServiceImpl")
       private BookService bookService;
   
       @RequestMapping("/allBook")
       public String list(Model model) {
           List<Books> list = bookService.queryAllBook();
           model.addAttribute("list", list);
           return "allBook";
       }
   }
   ```

2. 编写首页 **index.jsp**

   ```
   <%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" %>
   <!DOCTYPE HTML>
   <html>
   <head>
       <title>首页</title>
       <style type="text/css">
           a {
               text-decoration: none;
               color: black;
               font-size: 18px;
           }
           h3 {
               width: 180px;
               height: 38px;
               margin: 100px auto;
               text-align: center;
               line-height: 38px;
               background: deepskyblue;
               border-radius: 4px;
           }
       </style>
   </head>
   <body>
   
   <h3>
       <a href="${pageContext.request.contextPath}/book/allBook">点击进入列表页</a>
   </h3>
   </body>
   </html>
   ```

3. 书籍列表页面 **allbook.jsp**

   ```
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>书籍列表</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>书籍列表 —— 显示所有书籍</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <div class="row">
           <div class="col-md-4 column">
               <a class="btn btn-primary" href="${pageContext.request.contextPath}/book/toAddBook">新增</a>
           </div>
       </div>
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <table class="table table-hover table-striped">
                   <thead>
                   <tr>
                       <th>书籍编号</th>
                       <th>书籍名字</th>
                       <th>书籍数量</th>
                       <th>书籍详情</th>
                       <th>操作</th>
                   </tr>
                   </thead>
   
                   <tbody>
                   <c:forEach var="book" items="${requestScope.get('list')}">
                       <tr>
                           <td>${book.getBookId()}</td>
                           <td>${book.getBookName()}</td>
                           <td>${book.getBookCounts()}</td>
                           <td>${book.getDetail()}</td>
                           <td>
                               <a href="${pageContext.request.contextPath}/book/toUpdateBook?id=${book.getBookId()}">更改</a> |
                               <a href="${pageContext.request.contextPath}/book/del/${book.getBookId()}">删除</a>
                           </td>
                       </tr>
                   </c:forEach>
                   </tbody>
               </table>
           </div>
       </div>
   </div>
   ```

4. BookController 类编写 ， 方法二：添加书籍

   ```
   @RequestMapping("/toAddBook")
   public String toAddPaper() {
       return "addBook";
   }
   
   @RequestMapping("/addBook")
   public String addPaper(Books books) {
       System.out.println(books);
       bookService.addBook(books);
       return "redirect:/book/allBook";
   }
   ```

5. 添加书籍页面：**addBook.jsp**

   ```
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   
   <html>
   <head>
       <title>新增书籍</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>新增书籍</small>
                   </h1>
               </div>
           </div>
       </div>
       <form action="${pageContext.request.contextPath}/book/addBook" method="post">
           书籍名称：<input type="text" name="bookName"><br><br><br>
           书籍数量：<input type="text" name="bookCounts"><br><br><br>
           书籍详情：<input type="text" name="detail"><br><br><br>
           <input type="submit" value="添加">
       </form>
   
   </div>
   ```

6. BookController 类编写 ， 方法三：修改书籍

   ```
   @RequestMapping("/toUpdateBook")
   public String toUpdateBook(Model model, int id) {
       Books books = bookService.queryBookById(id);
       System.out.println(books);
       model.addAttribute("book",books );
       return "updateBook";
   }
   
   @RequestMapping("/updateBook")
   public String updateBook(Model model, Books book) {
       bookService.updateBook(book);
       Books books = bookService.queryBookById(book.getBookID());
       model.addAttribute("books", books);
       return "redirect:/book/allBook";
   }
   ```

7. 修改书籍页面 **updateBook.jsp**

   ```
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>修改信息</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>修改信息</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <form action="${pageContext.request.contextPath}/book/updateBook" method="post">
           <input type="hidden" name="bookID" value="${book.getBookId()}"/>
           书籍名称：<input type="text" name="bookName" value="${book.getBookName()}"/>
           书籍数量：<input type="text" name="bookCounts" value="${book.getBookCounts()}"/>
           书籍详情：<input type="text" name="detail" value="${book.getDetail() }"/>
           <input type="submit" value="提交"/>
       </form>
   
   </div>
   ```

8. BookController 类编写 ， 方法四：删除书籍

   ```
   @RequestMapping("/del/{bookId}")
   public String deleteBook(@PathVariable("bookId") int id) {
       bookService.deleteBookById(id);
       return "redirect:/book/allBook";
   }
   ```

**配置Tomcat，进行运行！**

到目前为止，这个SSM项目整合已经完全的OK了，可以直接运行进行测试！这个练习十分的重要，大家需要保证，不看任何东西，自己也可以完整的实现出来！

## **6、项目结构图**

![1570186854191.png](https://blog.kuangstudy.com/usr/uploads/2019/10/1086489242.png)

![1570186868239.png](https://blog.kuangstudy.com/usr/uploads/2019/10/2326667495.png)

## 7、错误排查

### 1、访问出现404，排查步骤：**

1. 查看控制台输出，看一下是不是缺少了什么jar包。

2. 如果jar包存在，显示无法输出，就在IDEA的项目发布中，添加lib依赖！

   步骤：点击项目结构----->Artifacts----->点击自己的项目(ssm:war exploded)--->(点击工具栏的第一个)在WEB-INF目录下新建一个lib包----->选中lib------>点击工具栏的第三个然后选中第一个---->把里面的包全部选中点击ok---->点击Apply再ok

   ![image-20200128125126368](https://gitee.com/feigeCode/java_blog/raw/master/java/ssm%E6%95%B4%E5%90%88.assets/image-20200128125126368.png)

   ![image-20200128125237179](https://gitee.com/feigeCode/java_blog/raw/master/java/ssm%E6%95%B4%E5%90%88.assets/image-20200128125237179.png)

3. 重启Tomcat 即可解决！

### 2、其他错误

#### 1、bean不存在

 步骤：

 查看bean注入是否成功

 junit单元测试，看我们的代码是否能够查询出来

 问题不在底层，是我们spring出了问题

 springMVC整合时没有调用到service层的bean

 applicationContext.xml没有注册bean

 web.xml也绑定过配置文件要绑定大的applicationContext.xml



## 8、小结及展望

这个是同学们的第一个SSM整合案例，一定要烂熟于心！

SSM框架的重要程度是不言而喻的，学到这里，大家已经可以进行基本网站的单独开发。但是这只是增删改查的基本操作。可以说学到这里，大家才算是真正的步入了后台开发的门。也就是能找一个后台相关工作的底线。

或许很多人，工作就做这些事情，但是对于个人的提高来说，还远远不够！

| 飞哥 | 飞哥 | 飞哥 |
| ---- | ---- | ---- |
| 飞哥 | 飞哥 | 飞哥 |
| 飞哥 | 飞哥 | 飞哥 |
| 飞哥 | 飞哥 | 飞哥 |



~~~java
static class CustomAttributeProvider implements AttributeProvider {

        @Override
        public void setAttributes(Node node, String s, Map<String, String> map) {
            //改变a标签的target属性为_blank
            if(node instanceof Link) {
                map.put("target","_blank");
            }
            if (node instanceof TableBlock) {
                map.put("class","el-table__body-wrapper is-scrolling-none");
            }
            if (node instanceof TableBody) {
                map.put("class","el-table__body");
            }
            if (node instanceof TableRow) {
                map.put("class","el-table__row");
            }
            if (node instanceof TableCell) {
                map.put("class","el-table_13_column_55");
            }
        }
~~~

# feige

, 2020-03-02 07:06:53.0, 2020-03-13 06:59:47.0, admin, 10]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20009, rs-50091} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20009} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20009} Parameters : [13]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20009} Types : [INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20009} executed. 1.11511 millis. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog where id=?
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20009, rs-50092} open
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20009, rs-50092} Header: [id, type_name, title, content, create_time, change_time, author, view]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20002} Parameters : [13]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20002} Types : [INTEGER]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20009, rs-50092} Result: [13, mybatis, ssm框架整合, # ssm整合

## 1、数据库环境

创建一个存放书籍数据的数据库表

```
CREATE DATABASE `ssmbuild`;

USE `ssmbuild`;

DROP TABLE IF EXISTS `books`;

CREATE TABLE `books` (
  `bookId` INT PRIMARY KEY COMMENT '书id',
  `bookName` VARCHAR(100) NOT NULL COMMENT '书名',
  `bookCounts` INT(11) NOT NULL COMMENT '数量',
  ``ssmbuild``ssmbuild`` VARCHAR(200) NOT NULL COMMENT '描述'
) ENGINE=INNODB DEFAULT CHARSET=utf8

INSERT  INTO `books`(`bookId`,`bookName`,`bookCounts`,`detail`)VALUES 
(1,'Java',1,'从入门到放弃'),
(2,'MySQL',10,'从删库到跑路'),
(3,'Linux',5,'从进门到进牢');

SELECT * FROM books
```

## 2、基本环境搭建

1. 新建一Maven项目！ ssmbuild ， 添加web的支持

   ![image-20200128134359317](https://gitee.com/feigeCode/java_blog/raw/master/java/ssm%E6%95%B4%E5%90%88.assets/image-20200128134359317.png)

2. 导入相关的pom依赖！

   ```
   <dependencies>
       <!--Junit-->
       <dependency>
           <groupId>junit</groupId>
           <artifactId>junit</artifactId>
           <version>4.12</version>
       </dependency>
       <!--数据库驱动-->
       <dependency>
           <groupId>mysql</groupId>
           <artifactId>mysql-connector-java</artifactId>
           <version>5.1.47</version>
       </dependency>
       <!-- 数据库连接池 -->
       <dependency>
           <groupId>com.mchange</groupId>
           <artifactId>c3p0</artifactId>
           <version>0.9.5.2</version>
       </dependency>
   
       <!--Servlet - JSP -->
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>servlet-api</artifactId>
           <version>2.5</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet.jsp</groupId>
           <artifactId>jsp-api</artifactId>
           <version>2.2</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>jstl</artifactId>
           <version>1.2</version>
       </dependency>
   
       <!--Mybatis-->
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis</artifactId>
           <version>3.5.2</version>
       </dependency>
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis-spring</artifactId>
           <version>2.0.2</version>
       </dependency>
   
       <!--Spring-->
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-webmvc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-jdbc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->
       <dependency>
           <groupId>org.projectlombok</groupId>
           <artifactId>lombok</artifactId>
           <version>1.16.10</version>
       </dependency>
   </dependencies>
   ```

3. Maven资源过滤设置

   ```
   <build>
       <resources>
           <resource>
               <directory>src/main/java</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
           <resource>
               <directory>src/main/resources</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
       </resources>
   </build>
   ```

4. 建立基本结构和配置框架！

   - com.feige.pojo

   - com.feige.dao

   - com.feige.service

   - com.feige.controller

     在resources目录下创建

   - mybatis-config.xml

     ```
     <?xml version="1.0" encoding="UTF-8" ?>
     <!DOCTYPE configuration
             PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
             "http://mybatis.org/dtd/mybatis-3-config.dtd">
     <configuration>
     
     </configuration>
     ```

   - applicationContext.xml

     ```
     <?xml version="1.0" encoding="UTF-8"?>
     <beans xmlns="http://www.springframework.org/schema/beans"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://www.springframework.org/schema/beans
             http://www.springframework.org/schema/beans/spring-beans.xsd">
     
     </beans>
     ```

## 3、Mybatis层编写

1. 数据库配置文件 **database.properties**

   ```
   jdbc.driver=com.mysql.jdbc.Driver
   jdbc.url=jdbc:mysql://localhost:3306/ssmbuild?useSSL=true&useUnicode=true&characterEncoding=utf8
   jdbc.username=root
   jdbc.password=hufei169357
   ```

2. IDEA关联数据库

3. 编写MyBatis的核心配置文件

   ```
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE configuration
           PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-config.dtd">
   <configuration>
       
       <typeAliases>
           <package name="com.feige.pojo"/>
       </typeAliases>
       <mappers>
           <mapper resource="com/feige/dao/BookMapper.xml"/>
       </mappers>
   
   </configuration>
   ```

4. 编写数据库对应的实体类 com.feige.pojo.Books 使用lombok插件！

   ```
   package com.kuang.pojo;
   
   import lombok.AllArgsConstructor;
   import lombok.Data;
   import lombok.NoArgsConstructor;
   
   @Data
   @AllArgsConstructor
   @NoArgsConstructor
   public class Books {
       
       private int bookId;
       private String bookName;
       private int bookCounts;
       private String detail;
       
   }
   ```

5. 编写Dao层的 Mapper接口！

   ```
   package com.kuang.dao;
   
   import com.kuang.pojo.Books;
   import java.util.List;
   
   public interface BookMapper {
   
       //增加一个Book
       int addBook(Books book);
   
       //根据id删除一个Book
       int deleteBookById(int id);
   
       //更新Book
       int updateBook(Books books);
   
       //根据id查询,返回一个Book
       Books queryBookById(int id);
   
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   
   }
   ```

6. 编写接口对应的 Mapper.xml 文件。需要导入MyBatis的包；

   ```
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE mapper
           PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
   
   <mapper namespace="com.feige.dao.BooksMapper">
   
       <!--增加一个Book-->
       <insert id="addBook" parameterType="Books">
           insert into books(bookName,bookCounts,detail)
           values (#{bookName}, #{bookCounts}, #{detail})
       </insert>
   
       <!--根据id删除一个Book-->
       <delete id="deleteBookById" parameterType="int">
           delete from books where bookId=#{bookId}
       </delete>
   
       <!--更新Book-->
       <update id="updateBook" parameterType="Books">
           update books
           set bookName = #{bookName},bookCounts = #{bookCounts},detail = #{detail}
           where bookId = #{bookId}
       </update>
   
       <!--根据id查询,返回一个Book-->
       <select id="queryBookById" resultType="Books">
           select * from books
           where bookID = #{bookId}
       </select>
   
       <!--查询全部Book-->
       <select id="queryAllBook" resultType="com.feige.pojo.Books">
           SELECT * from books
       </select>
   
   </mapper>
   ```

7. 编写Service层的接口和实现类 接口：

   ```
   package com.feige.service;
   
   import com.feige.pojo.Books;
   
   import java.util.List;
   
   //BookService:底下需要去实现,调用dao层
   public interface BookService {
       //增加一个Book
       int addBook(Books book);
       //根据id删除一个Book
       int deleteBookById(int id);
       //更新Book
       int updateBook(Books books);
       //根据id查询,返回一个Book
       Books queryBookById(int id);
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   }
   ```

实现类：

```
package com.feige.service;

import com.feige.dao.BookMapper;
import com.feige.pojo.Books;
import java.util.List;

public class BookServiceImpl implements BookService {

    //调用dao层的操作，设置一个set接口，方便Spring管理
    private BookMapper bookMapper;

    public void setBookMapper(BookMapper bookMapper) {
        this.bookMapper = bookMapper;
    }
    
    public int addBook(Books book) {
        return bookMapper.addBook(book);
    }
    
    public int deleteBookById(int id) {
        return bookMapper.deleteBookById(id);
    }
    
    public int updateBook(Books books) {
        return bookMapper.updateBook(books);
    }
    
    public Books queryBookById(int id) {
        return bookMapper.queryBookById(id);
    }
    
    public List<Books> queryAllBook() {
        return bookMapper.queryAllBook();
    }
}
```

**OK，到此，底层需求操作编写完毕！**

## 4、Spring层

1. 配置**Spring整合MyBatis**，我们这里数据源使用c3p0连接池；

2. 我们去编写Spring整合Mybatis的相关的配置文件； spring-dao.xml

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans.xsd
   http://www.springframework.org/schema/context
   https://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 配置整合mybatis -->
       <!-- 1.关联数据库文件 -->
       <context:property-placeholder location="classpath:database.properties"/>
   
       <!-- 2.数据库连接池 -->
       <!--数据库连接池
   dbcp  半自动化操作  不能自动连接
   c3p0  自动化操作（自动的加载配置文件 并且设置到对象里面）
       -->
       <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
   <!-- 配置连接池属性 -->
   <property name="driverClass" value="${jdbc.driver}"/>
   <property name="jdbcUrl" value="${jdbc.url}"/>
   <property name="user" value="${jdbc.username}"/>
   <property name="password" value="${jdbc.password}"/>
   
   <!-- c3p0连接池的私有属性 -->
   <property name="maxPoolSize" value="30"/>
   <property name="minPoolSize" value="10"/>
   <!-- 关闭连接后不自动commit -->
   <property name="autoCommitOnClose" value="false"/>
   <!-- 获取连接超时时间 -->
   <property name="checkoutTimeout" value="10000"/>
   <!-- 当获取连接失败重试次数 -->
   <property name="acquireRetryAttempts" value="2"/>
       </bean>
   
       <!-- 3.配置SqlSessionFactory对象 -->
       <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource"/>
   <!-- 配置MyBaties全局配置文件:mybatis-config.xml -->
   <property name="configLocation" value="classpath:mybatis-config.xml"/>
       </bean>
   
       <!-- 4.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 -->
       <!--解释 ： https://www.cnblogs.com/jpfss/p/7799806.html-->
       <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
   <!-- 注入sqlSessionFactory -->
   <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
   <!-- 给出需要扫描Dao接口包 -->
   <property name="basePackage" value="com.feige.dao"/>
       </bean>
   
   </beans>
   ```

3. **Spring整合service层**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 扫描service相关的bean -->
       <context:component-scan base-package="com.kuang.service" />
   
       <!--BookServiceImpl注入到IOC容器中-->
       <bean id="BookServiceImpl" class="com.kuang.service.BookServiceImpl">
   <property name="bookMapper" ref="bookMapper"/>
       </bean>
   
       <!-- 配置事务管理器 -->
       <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource" />
       </bean>
   
   </beans>
   ```

Spring层搞定！再次理解一下，Spring就是一个大杂烩，一个容器！对吧！

## 5、SpringMVC层

1. **web.xml**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
            version="4.0">
   
       <!--DispatcherServlet-->
       <servlet>
           <servlet-name>DispatcherServlet</servlet-name>
           <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
           <init-param>
               <param-name>contextConfigLocation</param-name>
               <param-value>classpath:applicationContext.xml</param-value>
           </init-param>
           <load-on-startup>1</load-on-startup>
       </servlet>
       <servlet-mapping>
           <servlet-name>DispatcherServlet</servlet-name>
           <url-pattern>/</url-pattern>
       </servlet-mapping>
   
       <!--encodingFilter-->
       <filter>
           <filter-name>encodingFilter</filter-name>
           <filter-class>
               org.springframework.web.filter.CharacterEncodingFilter
           </filter-class>
           <init-param>
               <param-name>encoding</param-name>
               <param-value>utf-8</param-value>
           </init-param>
       </filter>
       <filter-mapping>
           <filter-name>encodingFilter</filter-name>
           <url-pattern>/*</url-pattern>
       </filter-mapping>
       
       <!--Session过期时间-->
       <session-config>
           <session-timeout>15</session-timeout>
       </session-config>
       
   </web-app>
   ```

2. **spring-mvc.xml**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xmlns:mvc="http://www.springframework.org/schema/mvc"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       https://www.springframework.org/schema/mvc/spring-mvc.xsd">
   
       <!-- 配置SpringMVC -->
       <!-- 1.开启SpringMVC注解驱动 -->
       <mvc:annotation-driven>
           <mvc:message-converters register-defaults="true">
               <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                   <constructor-arg value="UTF-8"/>
               </bean>
               <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                   <property name="objectMapper">
                       <bean class="org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean">
                           <property name="failOnEmptyBeans" value="false"/>
                       </bean>
                   </property>
               </bean>
           </mvc:message-converters>
       </mvc:annotation-driven>
       <!--解决跨域问题-->
       <mvc:cors>
       <mvc:mapping path="/**"
                    allowed-origins="http://127.0.0.1:8090,http://localhost:8090"
                    allowed-methods="POST,GET, OPTIONS,DELETE,PUT"
                    allowed-headers="Content-Type,ContentType,Access-Control-Allow-Headers, Authorization, X-Requested-With"
                    allow-credentials="true"/>
       </mvc:cors>
       <!-- 2.静态资源默认servlet配置-->
       <mvc:default-servlet-handler/>
   
       <!-- 3.配置jsp 显示ViewResolver视图解析器 -->
       <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
           <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
           <property name="prefix" value="/WEB-INF/jsp/" />
           <property name="suffix" value=".jsp" />
       </bean>
   
       <!-- 4.扫描web相关的bean -->
       <context:component-scan base-package="com.feige.controller" />
   
   </beans>
   ```

3. **Spring配置整合文件，applicationContext.xml**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd">
   
       <import resource="spring-dao.xml"/>
       <import resource="spring-service.xml"/>
       <import resource="spring-mvc.xml"/>
       
   </beans>
   ```

**配置文件，暂时结束！Controller 和 视图层编写**

1. BookController 类编写 ， 方法一：查询全部书籍

   ```
   @Controller
   @RequestMapping("/book")
   public class BookController {
   
       @Autowired
       @Qualifier("BookServiceImpl")
       private BookService bookService;
   
       @RequestMapping("/allBook")
       public String list(Model model) {
           List<Books> list = bookService.queryAllBook();
           model.addAttribute("list", list);
           return "allBook";
       }
   }
   ```

2. 编写首页 **index.jsp**

   ```
   <%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" %>
   <!DOCTYPE HTML>
   <html>
   <head>
       <title>首页</title>
       <style type="text/css">
           a {
               text-decoration: none;
               color: black;
               font-size: 18px;
           }
           h3 {
               width: 180px;
               height: 38px;
               margin: 100px auto;
               text-align: center;
               line-height: 38px;
               background: deepskyblue;
               border-radius: 4px;
           }
       </style>
   </head>
   <body>
   
   <h3>
       <a href="${pageContext.request.contextPath}/book/allBook">点击进入列表页</a>
   </h3>
   </body>
   </html>
   ```

3. 书籍列表页面 **allbook.jsp**

   ```
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>书籍列表</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>书籍列表 —— 显示所有书籍</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <div class="row">
           <div class="col-md-4 column">
               <a class="btn btn-primary" href="${pageContext.request.contextPath}/book/toAddBook">新增</a>
           </div>
       </div>
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <table class="table table-hover table-striped">
                   <thead>
                   <tr>
                       <th>书籍编号</th>
                       <th>书籍名字</th>
                       <th>书籍数量</th>
                       <th>书籍详情</th>
                       <th>操作</th>
                   </tr>
                   </thead>
   
                   <tbody>
                   <c:forEach var="book" items="${requestScope.get('list')}">
                       <tr>
                           <td>${book.getBookId()}</td>
                           <td>${book.getBookName()}</td>
                           <td>${book.getBookCounts()}</td>
                           <td>${book.getDetail()}</td>
                           <td>
                               <a href="${pageContext.request.contextPath}/book/toUpdateBook?id=${book.getBookId()}">更改</a> |
                               <a href="${pageContext.request.contextPath}/book/del/${book.getBookId()}">删除</a>
                           </td>
                       </tr>
                   </c:forEach>
                   </tbody>
               </table>
           </div>
       </div>
   </div>
   ```

4. BookController 类编写 ， 方法二：添加书籍

   ```
   @RequestMapping("/toAddBook")
   public String toAddPaper() {
       return "addBook";
   }
   
   @RequestMapping("/addBook")
   public String addPaper(Books books) {
       System.out.println(books);
       bookService.addBook(books);
       return "redirect:/book/allBook";
   }
   ```

5. 添加书籍页面：**addBook.jsp**

   ```
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   
   <html>
   <head>
       <title>新增书籍</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>新增书籍</small>
                   </h1>
               </div>
           </div>
       </div>
       <form action="${pageContext.request.contextPath}/book/addBook" method="post">
           书籍名称：<input type="text" name="bookName"><br><br><br>
           书籍数量：<input type="text" name="bookCounts"><br><br><br>
           书籍详情：<input type="text" name="detail"><br><br><br>
           <input type="submit" value="添加">
       </form>
   
   </div>
   ```

6. BookController 类编写 ， 方法三：修改书籍

   ```
   @RequestMapping("/toUpdateBook")
   public String toUpdateBook(Model model, int id) {
       Books books = bookService.queryBookById(id);
       System.out.println(books);
       model.addAttribute("book",books );
       return "updateBook";
   }
   
   @RequestMapping("/updateBook")
   public String updateBook(Model model, Books book) {
       bookService.updateBook(book);
       Books books = bookService.queryBookById(book.getBookID());
       model.addAttribute("books", books);
       return "redirect:/book/allBook";
   }
   ```

7. 修改书籍页面 **updateBook.jsp**

   ```
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>修改信息</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>修改信息</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <form action="${pageContext.request.contextPath}/book/updateBook" method="post">
           <input type="hidden" name="bookID" value="${book.getBookId()}"/>
           书籍名称：<input type="text" name="bookName" value="${book.getBookName()}"/>
           书籍数量：<input type="text" name="bookCounts" value="${book.getBookCounts()}"/>
           书籍详情：<input type="text" name="detail" value="${book.getDetail() }"/>
           <input type="submit" value="提交"/>
       </form>
   
   </div>
   ```

8. BookController 类编写 ， 方法四：删除书籍

   ```
   @RequestMapping("/del/{bookId}")
   public String deleteBook(@PathVariable("bookId") int id) {
       bookService.deleteBookById(id);
       return "redirect:/book/allBook";
   }
   ```

**配置Tomcat，进行运行！**

到目前为止，这个SSM项目整合已经完全的OK了，可以直接运行进行测试！这个练习十分的重要，大家需要保证，不看任何东西，自己也可以完整的实现出来！

## **6、项目结构图**

![1570186854191.png](https://blog.kuangstudy.com/usr/uploads/2019/10/1086489242.png)

![1570186868239.png](https://blog.kuangstudy.com/usr/uploads/2019/10/2326667495.png)

## 7、错误排查

### 1、访问出现404，排查步骤：**

1. 查看控制台输出，看一下是不是缺少了什么jar包。

2. 如果jar包存在，显示无法输出，就在IDEA的项目发布中，添加lib依赖！

   步骤：点击项目结构----->Artifacts----->点击自己的项目(ssm:war exploded)--->(点击工具栏的第一个)在WEB-INF目录下新建一个lib包----->选中lib------>点击工具栏的第三个然后选中第一个---->把里面的包全部选中点击ok---->点击Apply再ok

   ![image-20200128125126368](https://gitee.com/feigeCode/java_blog/raw/master/java/ssm%E6%95%B4%E5%90%88.assets/image-20200128125126368.png)

   ![image-20200128125237179](https://gitee.com/feigeCode/java_blog/raw/master/java/ssm%E6%95%B4%E5%90%88.assets/image-20200128125237179.png)

3. 重启Tomcat 即可解决！

### 2、其他错误

#### 1、bean不存在

 步骤：

 查看bean注入是否成功

 junit单元测试，看我们的代码是否能够查询出来

 问题不在底层，是我们spring出了问题

 springMVC整合时没有调用到service层的bean

 applicationContext.xml没有注册bean

 web.xml也绑定过配置文件要绑定大的applicationContext.xml



## 8、小结及展望

这个是同学们的第一个SSM整合案例，一定要烂熟于心！

SSM框架的重要程度是不言而喻的，学到这里，大家已经可以进行基本网站的单独开发。但是这只是增删改查的基本操作。可以说学到这里，大家才算是真正的步入了后台开发的门。也就是能找一个后台相关工作的底线。

或许很多人，工作就做这些事情，但是对于个人的提高来说，还远远不够！

| 飞哥 | 飞哥 | 飞哥 |
| ---- | ---- | ---- |
| 飞哥 | 飞哥 | 飞哥 |
| 飞哥 | 飞哥 | 飞哥 |
| 飞哥 | 飞哥 | 飞哥 |



~~~java
static class CustomAttributeProvider implements AttributeProvider {

        @Override
        public void setAttributes(Node node, String s, Map<String, String> map) {
            //改变a标签的target属性为_blank
            if(node instanceof Link) {
                map.put("target","_blank");
            }
            if (node instanceof TableBlock) {
                map.put("class","el-table__body-wrapper is-scrolling-none");
            }
            if (node instanceof TableBody) {
                map.put("class","el-table__body");
            }
            if (node instanceof TableRow) {
                map.put("class","el-table__row");
            }
            if (node instanceof TableCell) {
                map.put("class","el-table_13_column_55");
            }
        }
~~~

# feige

, 2020-03-02 07:06:53.0, 2020-03-13 06:59:47.0, admin, 10]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20009, rs-50092} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20009} clearParameters. 
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20002} executed. 3.070664 millis. select distinct count(*) from comments c
        where c.blog_id=? and
        c.parent_id is null;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20002, rs-50093} open
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20002, rs-50093} Header: [count(*)]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20002, rs-50093} Result: [3]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20002, rs-50093} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20002} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20003} Parameters : [13, 0, 10]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20003} Types : [INTEGER, INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20003} executed. 2.64622 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id  and
        c.parent_id is null limit ?,?;;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20003, rs-50094} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20003, rs-50094} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20003, rs-50094} Result: [26, 好好, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:35.0, null]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20003, rs-50094} Result: [29, 太好了, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:13.0, null]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20003, rs-50094} Result: [32, <p>feige</p>, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 01:33:26.0, null]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20003, rs-50094} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20003} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Parameters : [13, 26]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} executed. 4.874662 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50095} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50095} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50095} Result: [27, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:56.0, sss]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50095} Result: [28, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:43:03.0, sss]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50095} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Parameters : [13, 26]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} executed. 4.181774 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50096} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50096} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50096} Result: [27, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:56.0, sss]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50096} Result: [28, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:43:03.0, sss]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50096} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Parameters : [13, 27]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} executed. 1.137777 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50097} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50097} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50097} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Parameters : [13, 27]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} executed. 0.654222 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50098} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50098} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50098} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Parameters : [13, 29]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} executed. 3.232442 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50099} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50099} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50099} Result: [30, 谢谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:43.0, sss]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50099} Result: [31, 不用谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:47:01.0, sss]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50099} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Parameters : [13, 29]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} executed. 3.427553 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50100} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50100} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50100} Result: [30, 谢谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:43.0, sss]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50100} Result: [31, 不用谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:47:01.0, sss]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50100} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Parameters : [13, 30]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} executed. 0.666221 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50101} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50101} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50101} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Parameters : [13, 30]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} executed. 1.588443 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50102} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50102} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50102} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Parameters : [13, 32]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} executed. 2.556442 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50103} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50103} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50103} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20005} Parameters : [13]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20005} Types : [INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20005} executed. 2.001776 millis. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog where id=?
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50104} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50104} Header: [id, type_name, title, content, create_time, change_time, author, view]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20006} Parameters : [13]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20006} Types : [INTEGER]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50104} Result: [13, mybatis, ssm框架整合, # ssm整合

## 1、数据库环境

创建一个存放书籍数据的数据库表

```
CREATE DATABASE `ssmbuild`;

USE `ssmbuild`;

DROP TABLE IF EXISTS `books`;

CREATE TABLE `books` (
  `bookId` INT PRIMARY KEY COMMENT '书id',
  `bookName` VARCHAR(100) NOT NULL COMMENT '书名',
  `bookCounts` INT(11) NOT NULL COMMENT '数量',
  ``ssmbuild``ssmbuild`` VARCHAR(200) NOT NULL COMMENT '描述'
) ENGINE=INNODB DEFAULT CHARSET=utf8

INSERT  INTO `books`(`bookId`,`bookName`,`bookCounts`,`detail`)VALUES 
(1,'Java',1,'从入门到放弃'),
(2,'MySQL',10,'从删库到跑路'),
(3,'Linux',5,'从进门到进牢');

SELECT * FROM books
```

## 2、基本环境搭建

1. 新建一Maven项目！ ssmbuild ， 添加web的支持

   ![image-20200128134359317](https://gitee.com/feigeCode/java_blog/raw/master/java/ssm%E6%95%B4%E5%90%88.assets/image-20200128134359317.png)

2. 导入相关的pom依赖！

   ```
   <dependencies>
       <!--Junit-->
       <dependency>
           <groupId>junit</groupId>
           <artifactId>junit</artifactId>
           <version>4.12</version>
       </dependency>
       <!--数据库驱动-->
       <dependency>
           <groupId>mysql</groupId>
           <artifactId>mysql-connector-java</artifactId>
           <version>5.1.47</version>
       </dependency>
       <!-- 数据库连接池 -->
       <dependency>
           <groupId>com.mchange</groupId>
           <artifactId>c3p0</artifactId>
           <version>0.9.5.2</version>
       </dependency>
   
       <!--Servlet - JSP -->
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>servlet-api</artifactId>
           <version>2.5</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet.jsp</groupId>
           <artifactId>jsp-api</artifactId>
           <version>2.2</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>jstl</artifactId>
           <version>1.2</version>
       </dependency>
   
       <!--Mybatis-->
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis</artifactId>
           <version>3.5.2</version>
       </dependency>
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis-spring</artifactId>
           <version>2.0.2</version>
       </dependency>
   
       <!--Spring-->
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-webmvc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-jdbc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->
       <dependency>
           <groupId>org.projectlombok</groupId>
           <artifactId>lombok</artifactId>
           <version>1.16.10</version>
       </dependency>
   </dependencies>
   ```

3. Maven资源过滤设置

   ```
   <build>
       <resources>
           <resource>
               <directory>src/main/java</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
           <resource>
               <directory>src/main/resources</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
       </resources>
   </build>
   ```

4. 建立基本结构和配置框架！

   - com.feige.pojo

   - com.feige.dao

   - com.feige.service

   - com.feige.controller

     在resources目录下创建

   - mybatis-config.xml

     ```
     <?xml version="1.0" encoding="UTF-8" ?>
     <!DOCTYPE configuration
             PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
             "http://mybatis.org/dtd/mybatis-3-config.dtd">
     <configuration>
     
     </configuration>
     ```

   - applicationContext.xml

     ```
     <?xml version="1.0" encoding="UTF-8"?>
     <beans xmlns="http://www.springframework.org/schema/beans"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://www.springframework.org/schema/beans
             http://www.springframework.org/schema/beans/spring-beans.xsd">
     
     </beans>
     ```

## 3、Mybatis层编写

1. 数据库配置文件 **database.properties**

   ```
   jdbc.driver=com.mysql.jdbc.Driver
   jdbc.url=jdbc:mysql://localhost:3306/ssmbuild?useSSL=true&useUnicode=true&characterEncoding=utf8
   jdbc.username=root
   jdbc.password=hufei169357
   ```

2. IDEA关联数据库

3. 编写MyBatis的核心配置文件

   ```
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE configuration
           PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-config.dtd">
   <configuration>
       
       <typeAliases>
           <package name="com.feige.pojo"/>
       </typeAliases>
       <mappers>
           <mapper resource="com/feige/dao/BookMapper.xml"/>
       </mappers>
   
   </configuration>
   ```

4. 编写数据库对应的实体类 com.feige.pojo.Books 使用lombok插件！

   ```
   package com.kuang.pojo;
   
   import lombok.AllArgsConstructor;
   import lombok.Data;
   import lombok.NoArgsConstructor;
   
   @Data
   @AllArgsConstructor
   @NoArgsConstructor
   public class Books {
       
       private int bookId;
       private String bookName;
       private int bookCounts;
       private String detail;
       
   }
   ```

5. 编写Dao层的 Mapper接口！

   ```
   package com.kuang.dao;
   
   import com.kuang.pojo.Books;
   import java.util.List;
   
   public interface BookMapper {
   
       //增加一个Book
       int addBook(Books book);
   
       //根据id删除一个Book
       int deleteBookById(int id);
   
       //更新Book
       int updateBook(Books books);
   
       //根据id查询,返回一个Book
       Books queryBookById(int id);
   
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   
   }
   ```

6. 编写接口对应的 Mapper.xml 文件。需要导入MyBatis的包；

   ```
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE mapper
           PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
   
   <mapper namespace="com.feige.dao.BooksMapper">
   
       <!--增加一个Book-->
       <insert id="addBook" parameterType="Books">
           insert into books(bookName,bookCounts,detail)
           values (#{bookName}, #{bookCounts}, #{detail})
       </insert>
   
       <!--根据id删除一个Book-->
       <delete id="deleteBookById" parameterType="int">
           delete from books where bookId=#{bookId}
       </delete>
   
       <!--更新Book-->
       <update id="updateBook" parameterType="Books">
           update books
           set bookName = #{bookName},bookCounts = #{bookCounts},detail = #{detail}
           where bookId = #{bookId}
       </update>
   
       <!--根据id查询,返回一个Book-->
       <select id="queryBookById" resultType="Books">
           select * from books
           where bookID = #{bookId}
       </select>
   
       <!--查询全部Book-->
       <select id="queryAllBook" resultType="com.feige.pojo.Books">
           SELECT * from books
       </select>
   
   </mapper>
   ```

7. 编写Service层的接口和实现类 接口：

   ```
   package com.feige.service;
   
   import com.feige.pojo.Books;
   
   import java.util.List;
   
   //BookService:底下需要去实现,调用dao层
   public interface BookService {
       //增加一个Book
       int addBook(Books book);
       //根据id删除一个Book
       int deleteBookById(int id);
       //更新Book
       int updateBook(Books books);
       //根据id查询,返回一个Book
       Books queryBookById(int id);
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   }
   ```

实现类：

```
package com.feige.service;

import com.feige.dao.BookMapper;
import com.feige.pojo.Books;
import java.util.List;

public class BookServiceImpl implements BookService {

    //调用dao层的操作，设置一个set接口，方便Spring管理
    private BookMapper bookMapper;

    public void setBookMapper(BookMapper bookMapper) {
        this.bookMapper = bookMapper;
    }
    
    public int addBook(Books book) {
        return bookMapper.addBook(book);
    }
    
    public int deleteBookById(int id) {
        return bookMapper.deleteBookById(id);
    }
    
    public int updateBook(Books books) {
        return bookMapper.updateBook(books);
    }
    
    public Books queryBookById(int id) {
        return bookMapper.queryBookById(id);
    }
    
    public List<Books> queryAllBook() {
        return bookMapper.queryAllBook();
    }
}
```

**OK，到此，底层需求操作编写完毕！**

## 4、Spring层

1. 配置**Spring整合MyBatis**，我们这里数据源使用c3p0连接池；

2. 我们去编写Spring整合Mybatis的相关的配置文件； spring-dao.xml

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans.xsd
   http://www.springframework.org/schema/context
   https://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 配置整合mybatis -->
       <!-- 1.关联数据库文件 -->
       <context:property-placeholder location="classpath:database.properties"/>
   
       <!-- 2.数据库连接池 -->
       <!--数据库连接池
   dbcp  半自动化操作  不能自动连接
   c3p0  自动化操作（自动的加载配置文件 并且设置到对象里面）
       -->
       <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
   <!-- 配置连接池属性 -->
   <property name="driverClass" value="${jdbc.driver}"/>
   <property name="jdbcUrl" value="${jdbc.url}"/>
   <property name="user" value="${jdbc.username}"/>
   <property name="password" value="${jdbc.password}"/>
   
   <!-- c3p0连接池的私有属性 -->
   <property name="maxPoolSize" value="30"/>
   <property name="minPoolSize" value="10"/>
   <!-- 关闭连接后不自动commit -->
   <property name="autoCommitOnClose" value="false"/>
   <!-- 获取连接超时时间 -->
   <property name="checkoutTimeout" value="10000"/>
   <!-- 当获取连接失败重试次数 -->
   <property name="acquireRetryAttempts" value="2"/>
       </bean>
   
       <!-- 3.配置SqlSessionFactory对象 -->
       <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource"/>
   <!-- 配置MyBaties全局配置文件:mybatis-config.xml -->
   <property name="configLocation" value="classpath:mybatis-config.xml"/>
       </bean>
   
       <!-- 4.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 -->
       <!--解释 ： https://www.cnblogs.com/jpfss/p/7799806.html-->
       <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
   <!-- 注入sqlSessionFactory -->
   <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
   <!-- 给出需要扫描Dao接口包 -->
   <property name="basePackage" value="com.feige.dao"/>
       </bean>
   
   </beans>
   ```

3. **Spring整合service层**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 扫描service相关的bean -->
       <context:component-scan base-package="com.kuang.service" />
   
       <!--BookServiceImpl注入到IOC容器中-->
       <bean id="BookServiceImpl" class="com.kuang.service.BookServiceImpl">
   <property name="bookMapper" ref="bookMapper"/>
       </bean>
   
       <!-- 配置事务管理器 -->
       <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource" />
       </bean>
   
   </beans>
   ```

Spring层搞定！再次理解一下，Spring就是一个大杂烩，一个容器！对吧！

## 5、SpringMVC层

1. **web.xml**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
            version="4.0">
   
       <!--DispatcherServlet-->
       <servlet>
           <servlet-name>DispatcherServlet</servlet-name>
           <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
           <init-param>
               <param-name>contextConfigLocation</param-name>
               <param-value>classpath:applicationContext.xml</param-value>
           </init-param>
           <load-on-startup>1</load-on-startup>
       </servlet>
       <servlet-mapping>
           <servlet-name>DispatcherServlet</servlet-name>
           <url-pattern>/</url-pattern>
       </servlet-mapping>
   
       <!--encodingFilter-->
       <filter>
           <filter-name>encodingFilter</filter-name>
           <filter-class>
               org.springframework.web.filter.CharacterEncodingFilter
           </filter-class>
           <init-param>
               <param-name>encoding</param-name>
               <param-value>utf-8</param-value>
           </init-param>
       </filter>
       <filter-mapping>
           <filter-name>encodingFilter</filter-name>
           <url-pattern>/*</url-pattern>
       </filter-mapping>
       
       <!--Session过期时间-->
       <session-config>
           <session-timeout>15</session-timeout>
       </session-config>
       
   </web-app>
   ```

2. **spring-mvc.xml**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xmlns:mvc="http://www.springframework.org/schema/mvc"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       https://www.springframework.org/schema/mvc/spring-mvc.xsd">
   
       <!-- 配置SpringMVC -->
       <!-- 1.开启SpringMVC注解驱动 -->
       <mvc:annotation-driven>
           <mvc:message-converters register-defaults="true">
               <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                   <constructor-arg value="UTF-8"/>
               </bean>
               <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                   <property name="objectMapper">
                       <bean class="org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean">
                           <property name="failOnEmptyBeans" value="false"/>
                       </bean>
                   </property>
               </bean>
           </mvc:message-converters>
       </mvc:annotation-driven>
       <!--解决跨域问题-->
       <mvc:cors>
       <mvc:mapping path="/**"
                    allowed-origins="http://127.0.0.1:8090,http://localhost:8090"
                    allowed-methods="POST,GET, OPTIONS,DELETE,PUT"
                    allowed-headers="Content-Type,ContentType,Access-Control-Allow-Headers, Authorization, X-Requested-With"
                    allow-credentials="true"/>
       </mvc:cors>
       <!-- 2.静态资源默认servlet配置-->
       <mvc:default-servlet-handler/>
   
       <!-- 3.配置jsp 显示ViewResolver视图解析器 -->
       <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
           <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
           <property name="prefix" value="/WEB-INF/jsp/" />
           <property name="suffix" value=".jsp" />
       </bean>
   
       <!-- 4.扫描web相关的bean -->
       <context:component-scan base-package="com.feige.controller" />
   
   </beans>
   ```

3. **Spring配置整合文件，applicationContext.xml**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd">
   
       <import resource="spring-dao.xml"/>
       <import resource="spring-service.xml"/>
       <import resource="spring-mvc.xml"/>
       
   </beans>
   ```

**配置文件，暂时结束！Controller 和 视图层编写**

1. BookController 类编写 ， 方法一：查询全部书籍

   ```
   @Controller
   @RequestMapping("/book")
   public class BookController {
   
       @Autowired
       @Qualifier("BookServiceImpl")
       private BookService bookService;
   
       @RequestMapping("/allBook")
       public String list(Model model) {
           List<Books> list = bookService.queryAllBook();
           model.addAttribute("list", list);
           return "allBook";
       }
   }
   ```

2. 编写首页 **index.jsp**

   ```
   <%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" %>
   <!DOCTYPE HTML>
   <html>
   <head>
       <title>首页</title>
       <style type="text/css">
           a {
               text-decoration: none;
               color: black;
               font-size: 18px;
           }
           h3 {
               width: 180px;
               height: 38px;
               margin: 100px auto;
               text-align: center;
               line-height: 38px;
               background: deepskyblue;
               border-radius: 4px;
           }
       </style>
   </head>
   <body>
   
   <h3>
       <a href="${pageContext.request.contextPath}/book/allBook">点击进入列表页</a>
   </h3>
   </body>
   </html>
   ```

3. 书籍列表页面 **allbook.jsp**

   ```
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>书籍列表</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>书籍列表 —— 显示所有书籍</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <div class="row">
           <div class="col-md-4 column">
               <a class="btn btn-primary" href="${pageContext.request.contextPath}/book/toAddBook">新增</a>
           </div>
       </div>
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <table class="table table-hover table-striped">
                   <thead>
                   <tr>
                       <th>书籍编号</th>
                       <th>书籍名字</th>
                       <th>书籍数量</th>
                       <th>书籍详情</th>
                       <th>操作</th>
                   </tr>
                   </thead>
   
                   <tbody>
                   <c:forEach var="book" items="${requestScope.get('list')}">
                       <tr>
                           <td>${book.getBookId()}</td>
                           <td>${book.getBookName()}</td>
                           <td>${book.getBookCounts()}</td>
                           <td>${book.getDetail()}</td>
                           <td>
                               <a href="${pageContext.request.contextPath}/book/toUpdateBook?id=${book.getBookId()}">更改</a> |
                               <a href="${pageContext.request.contextPath}/book/del/${book.getBookId()}">删除</a>
                           </td>
                       </tr>
                   </c:forEach>
                   </tbody>
               </table>
           </div>
       </div>
   </div>
   ```

4. BookController 类编写 ， 方法二：添加书籍

   ```
   @RequestMapping("/toAddBook")
   public String toAddPaper() {
       return "addBook";
   }
   
   @RequestMapping("/addBook")
   public String addPaper(Books books) {
       System.out.println(books);
       bookService.addBook(books);
       return "redirect:/book/allBook";
   }
   ```

5. 添加书籍页面：**addBook.jsp**

   ```
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   
   <html>
   <head>
       <title>新增书籍</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>新增书籍</small>
                   </h1>
               </div>
           </div>
       </div>
       <form action="${pageContext.request.contextPath}/book/addBook" method="post">
           书籍名称：<input type="text" name="bookName"><br><br><br>
           书籍数量：<input type="text" name="bookCounts"><br><br><br>
           书籍详情：<input type="text" name="detail"><br><br><br>
           <input type="submit" value="添加">
       </form>
   
   </div>
   ```

6. BookController 类编写 ， 方法三：修改书籍

   ```
   @RequestMapping("/toUpdateBook")
   public String toUpdateBook(Model model, int id) {
       Books books = bookService.queryBookById(id);
       System.out.println(books);
       model.addAttribute("book",books );
       return "updateBook";
   }
   
   @RequestMapping("/updateBook")
   public String updateBook(Model model, Books book) {
       bookService.updateBook(book);
       Books books = bookService.queryBookById(book.getBookID());
       model.addAttribute("books", books);
       return "redirect:/book/allBook";
   }
   ```

7. 修改书籍页面 **updateBook.jsp**

   ```
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>修改信息</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>修改信息</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <form action="${pageContext.request.contextPath}/book/updateBook" method="post">
           <input type="hidden" name="bookID" value="${book.getBookId()}"/>
           书籍名称：<input type="text" name="bookName" value="${book.getBookName()}"/>
           书籍数量：<input type="text" name="bookCounts" value="${book.getBookCounts()}"/>
           书籍详情：<input type="text" name="detail" value="${book.getDetail() }"/>
           <input type="submit" value="提交"/>
       </form>
   
   </div>
   ```

8. BookController 类编写 ， 方法四：删除书籍

   ```
   @RequestMapping("/del/{bookId}")
   public String deleteBook(@PathVariable("bookId") int id) {
       bookService.deleteBookById(id);
       return "redirect:/book/allBook";
   }
   ```

**配置Tomcat，进行运行！**

到目前为止，这个SSM项目整合已经完全的OK了，可以直接运行进行测试！这个练习十分的重要，大家需要保证，不看任何东西，自己也可以完整的实现出来！

## **6、项目结构图**

![1570186854191.png](https://blog.kuangstudy.com/usr/uploads/2019/10/1086489242.png)

![1570186868239.png](https://blog.kuangstudy.com/usr/uploads/2019/10/2326667495.png)

## 7、错误排查

### 1、访问出现404，排查步骤：**

1. 查看控制台输出，看一下是不是缺少了什么jar包。

2. 如果jar包存在，显示无法输出，就在IDEA的项目发布中，添加lib依赖！

   步骤：点击项目结构----->Artifacts----->点击自己的项目(ssm:war exploded)--->(点击工具栏的第一个)在WEB-INF目录下新建一个lib包----->选中lib------>点击工具栏的第三个然后选中第一个---->把里面的包全部选中点击ok---->点击Apply再ok

   ![image-20200128125126368](https://gitee.com/feigeCode/java_blog/raw/master/java/ssm%E6%95%B4%E5%90%88.assets/image-20200128125126368.png)

   ![image-20200128125237179](https://gitee.com/feigeCode/java_blog/raw/master/java/ssm%E6%95%B4%E5%90%88.assets/image-20200128125237179.png)

3. 重启Tomcat 即可解决！

### 2、其他错误

#### 1、bean不存在

 步骤：

 查看bean注入是否成功

 junit单元测试，看我们的代码是否能够查询出来

 问题不在底层，是我们spring出了问题

 springMVC整合时没有调用到service层的bean

 applicationContext.xml没有注册bean

 web.xml也绑定过配置文件要绑定大的applicationContext.xml



## 8、小结及展望

这个是同学们的第一个SSM整合案例，一定要烂熟于心！

SSM框架的重要程度是不言而喻的，学到这里，大家已经可以进行基本网站的单独开发。但是这只是增删改查的基本操作。可以说学到这里，大家才算是真正的步入了后台开发的门。也就是能找一个后台相关工作的底线。

或许很多人，工作就做这些事情，但是对于个人的提高来说，还远远不够！

| 飞哥 | 飞哥 | 飞哥 |
| ---- | ---- | ---- |
| 飞哥 | 飞哥 | 飞哥 |
| 飞哥 | 飞哥 | 飞哥 |
| 飞哥 | 飞哥 | 飞哥 |



~~~java
static class CustomAttributeProvider implements AttributeProvider {

        @Override
        public void setAttributes(Node node, String s, Map<String, String> map) {
            //改变a标签的target属性为_blank
            if(node instanceof Link) {
                map.put("target","_blank");
            }
            if (node instanceof TableBlock) {
                map.put("class","el-table__body-wrapper is-scrolling-none");
            }
            if (node instanceof TableBody) {
                map.put("class","el-table__body");
            }
            if (node instanceof TableRow) {
                map.put("class","el-table__row");
            }
            if (node instanceof TableCell) {
                map.put("class","el-table_13_column_55");
            }
        }
~~~

# feige

, 2020-03-02 07:06:53.0, 2020-03-13 06:59:47.0, admin, 10]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50104} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20005} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20006} executed. 4.195108 millis. select distinct count(*) from comments c
        where c.blog_id=? and
        c.parent_id is null;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20006, rs-50105} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20006, rs-50105} Header: [count(*)]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20006, rs-50105} Result: [3]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20006, rs-50105} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20006} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20007} Parameters : [13, 0, 10]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20007} Types : [INTEGER, INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20007} executed. 2.917331 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id  and
        c.parent_id is null limit ?,?;;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20007, rs-50106} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20007, rs-50106} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20007, rs-50106} Result: [26, 好好, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:35.0, null]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20007, rs-50106} Result: [29, 太好了, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:13.0, null]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20007, rs-50106} Result: [32, <p>feige</p>, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 01:33:26.0, null]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20007, rs-50106} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20007} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} Parameters : [13, 26]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} executed. 5.922661 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50107} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50107} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50107} Result: [27, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:56.0, sss]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50107} Result: [28, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:43:03.0, sss]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50107} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} Parameters : [13, 26]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} executed. 4.859107 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50108} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50108} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50108} Result: [27, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:56.0, sss]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50108} Result: [28, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:43:03.0, sss]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50108} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} Parameters : [13, 27]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} executed. 1.744443 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50109} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50109} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50109} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} Parameters : [13, 27]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} executed. 1.011111 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50110} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50110} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50110} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} Parameters : [13, 29]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} executed. 3.854663 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50111} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50111} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50111} Result: [30, 谢谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:43.0, sss]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50111} Result: [31, 不用谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:47:01.0, sss]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50111} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} Parameters : [13, 29]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} executed. 4.157774 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50112} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50112} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50112} Result: [30, 谢谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:43.0, sss]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50112} Result: [31, 不用谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:47:01.0, sss]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50112} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} Parameters : [13, 30]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} executed. 0.715111 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50113} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50113} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50113} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} Parameters : [13, 30]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} executed. 0.602222 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50114} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50114} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50114} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} Parameters : [13, 32]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} executed. 0.53911 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50115} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50115} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50115} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20009} Parameters : [13]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20009} Types : [INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20009} executed. 1.877332 millis. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog where id=?
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20009, rs-50116} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20009, rs-50116} Header: [id, type_name, title, content, create_time, change_time, author, view]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20009, rs-50116} Result: [13, mybatis, ssm框架整合, # ssm整合

## 1、数据库环境

创建一个存放书籍数据的数据库表

```
CREATE DATABASE `ssmbuild`;

USE `ssmbuild`;

DROP TABLE IF EXISTS `books`;

CREATE TABLE `books` (
  `bookId` INT PRIMARY KEY COMMENT '书id',
  `bookName` VARCHAR(100) NOT NULL COMMENT '书名',
  `bookCounts` INT(11) NOT NULL COMMENT '数量',
  ``ssmbuild``ssmbuild`` VARCHAR(200) NOT NULL COMMENT '描述'
) ENGINE=INNODB DEFAULT CHARSET=utf8

INSERT  INTO `books`(`bookId`,`bookName`,`bookCounts`,`detail`)VALUES 
(1,'Java',1,'从入门到放弃'),
(2,'MySQL',10,'从删库到跑路'),
(3,'Linux',5,'从进门到进牢');

SELECT * FROM books
```

## 2、基本环境搭建

1. 新建一Maven项目！ ssmbuild ， 添加web的支持

   ![image-20200128134359317](https://gitee.com/feigeCode/java_blog/raw/master/java/ssm%E6%95%B4%E5%90%88.assets/image-20200128134359317.png)

2. 导入相关的pom依赖！

   ```
   <dependencies>
       <!--Junit-->
       <dependency>
           <groupId>junit</groupId>
           <artifactId>junit</artifactId>
           <version>4.12</version>
       </dependency>
       <!--数据库驱动-->
       <dependency>
           <groupId>mysql</groupId>
           <artifactId>mysql-connector-java</artifactId>
           <version>5.1.47</version>
       </dependency>
       <!-- 数据库连接池 -->
       <dependency>
           <groupId>com.mchange</groupId>
           <artifactId>c3p0</artifactId>
           <version>0.9.5.2</version>
       </dependency>
   
       <!--Servlet - JSP -->
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>servlet-api</artifactId>
           <version>2.5</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet.jsp</groupId>
           <artifactId>jsp-api</artifactId>
           <version>2.2</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>jstl</artifactId>
           <version>1.2</version>
       </dependency>
   
       <!--Mybatis-->
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis</artifactId>
           <version>3.5.2</version>
       </dependency>
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis-spring</artifactId>
           <version>2.0.2</version>
       </dependency>
   
       <!--Spring-->
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-webmvc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-jdbc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->
       <dependency>
           <groupId>org.projectlombok</groupId>
           <artifactId>lombok</artifactId>
           <version>1.16.10</version>
       </dependency>
   </dependencies>
   ```

3. Maven资源过滤设置

   ```
   <build>
       <resources>
           <resource>
               <directory>src/main/java</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
           <resource>
               <directory>src/main/resources</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
       </resources>
   </build>
   ```

4. 建立基本结构和配置框架！

   - com.feige.pojo

   - com.feige.dao

   - com.feige.service

   - com.feige.controller

     在resources目录下创建

   - mybatis-config.xml

     ```
     <?xml version="1.0" encoding="UTF-8" ?>
     <!DOCTYPE configuration
             PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
             "http://mybatis.org/dtd/mybatis-3-config.dtd">
     <configuration>
     
     </configuration>
     ```

   - applicationContext.xml

     ```
     <?xml version="1.0" encoding="UTF-8"?>
     <beans xmlns="http://www.springframework.org/schema/beans"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://www.springframework.org/schema/beans
             http://www.springframework.org/schema/beans/spring-beans.xsd">
     
     </beans>
     ```

## 3、Mybatis层编写

1. 数据库配置文件 **database.properties**

   ```
   jdbc.driver=com.mysql.jdbc.Driver
   jdbc.url=jdbc:mysql://localhost:3306/ssmbuild?useSSL=true&useUnicode=true&characterEncoding=utf8
   jdbc.username=root
   jdbc.password=hufei169357
   ```

2. IDEA关联数据库

3. 编写MyBatis的核心配置文件

   ```
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE configuration
           PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-config.dtd">
   <configuration>
       
       <typeAliases>
           <package name="com.feige.pojo"/>
       </typeAliases>
       <mappers>
           <mapper resource="com/feige/dao/BookMapper.xml"/>
       </mappers>
   
   </configuration>
   ```

4. 编写数据库对应的实体类 com.feige.pojo.Books 使用lombok插件！

   ```
   package com.kuang.pojo;
   
   import lombok.AllArgsConstructor;
   import lombok.Data;
   import lombok.NoArgsConstructor;
   
   @Data
   @AllArgsConstructor
   @NoArgsConstructor
   public class Books {
       
       private int bookId;
       private String bookName;
       private int bookCounts;
       private String detail;
       
   }
   ```

5. 编写Dao层的 Mapper接口！

   ```
   package com.kuang.dao;
   
   import com.kuang.pojo.Books;
   import java.util.List;
   
   public interface BookMapper {
   
       //增加一个Book
       int addBook(Books book);
   
       //根据id删除一个Book
       int deleteBookById(int id);
   
       //更新Book
       int updateBook(Books books);
   
       //根据id查询,返回一个Book
       Books queryBookById(int id);
   
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   
   }
   ```

6. 编写接口对应的 Mapper.xml 文件。需要导入MyBatis的包；

   ```
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE mapper
           PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
   
   <mapper namespace="com.feige.dao.BooksMapper">
   
       <!--增加一个Book-->
       <insert id="addBook" parameterType="Books">
           insert into books(bookName,bookCounts,detail)
           values (#{bookName}, #{bookCounts}, #{detail})
       </insert>
   
       <!--根据id删除一个Book-->
       <delete id="deleteBookById" parameterType="int">
           delete from books where bookId=#{bookId}
       </delete>
   
       <!--更新Book-->
       <update id="updateBook" parameterType="Books">
           update books
           set bookName = #{bookName},bookCounts = #{bookCounts},detail = #{detail}
           where bookId = #{bookId}
       </update>
   
       <!--根据id查询,返回一个Book-->
       <select id="queryBookById" resultType="Books">
           select * from books
           where bookID = #{bookId}
       </select>
   
       <!--查询全部Book-->
       <select id="queryAllBook" resultType="com.feige.pojo.Books">
           SELECT * from books
       </select>
   
   </mapper>
   ```

7. 编写Service层的接口和实现类 接口：

   ```
   package com.feige.service;
   
   import com.feige.pojo.Books;
   
   import java.util.List;
   
   //BookService:底下需要去实现,调用dao层
   public interface BookService {
       //增加一个Book
       int addBook(Books book);
       //根据id删除一个Book
       int deleteBookById(int id);
       //更新Book
       int updateBook(Books books);
       //根据id查询,返回一个Book
       Books queryBookById(int id);
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   }
   ```

实现类：

```
package com.feige.service;

import com.feige.dao.BookMapper;
import com.feige.pojo.Books;
import java.util.List;

public class BookServiceImpl implements BookService {

    //调用dao层的操作，设置一个set接口，方便Spring管理
    private BookMapper bookMapper;

    public void setBookMapper(BookMapper bookMapper) {
        this.bookMapper = bookMapper;
    }
    
    public int addBook(Books book) {
        return bookMapper.addBook(book);
    }
    
    public int deleteBookById(int id) {
        return bookMapper.deleteBookById(id);
    }
    
    public int updateBook(Books books) {
        return bookMapper.updateBook(books);
    }
    
    public Books queryBookById(int id) {
        return bookMapper.queryBookById(id);
    }
    
    public List<Books> queryAllBook() {
        return bookMapper.queryAllBook();
    }
}
```

**OK，到此，底层需求操作编写完毕！**

## 4、Spring层

1. 配置**Spring整合MyBatis**，我们这里数据源使用c3p0连接池；

2. 我们去编写Spring整合Mybatis的相关的配置文件； spring-dao.xml

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans.xsd
   http://www.springframework.org/schema/context
   https://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 配置整合mybatis -->
       <!-- 1.关联数据库文件 -->
       <context:property-placeholder location="classpath:database.properties"/>
   
       <!-- 2.数据库连接池 -->
       <!--数据库连接池
   dbcp  半自动化操作  不能自动连接
   c3p0  自动化操作（自动的加载配置文件 并且设置到对象里面）
       -->
       <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
   <!-- 配置连接池属性 -->
   <property name="driverClass" value="${jdbc.driver}"/>
   <property name="jdbcUrl" value="${jdbc.url}"/>
   <property name="user" value="${jdbc.username}"/>
   <property name="password" value="${jdbc.password}"/>
   
   <!-- c3p0连接池的私有属性 -->
   <property name="maxPoolSize" value="30"/>
   <property name="minPoolSize" value="10"/>
   <!-- 关闭连接后不自动commit -->
   <property name="autoCommitOnClose" value="false"/>
   <!-- 获取连接超时时间 -->
   <property name="checkoutTimeout" value="10000"/>
   <!-- 当获取连接失败重试次数 -->
   <property name="acquireRetryAttempts" value="2"/>
       </bean>
   
       <!-- 3.配置SqlSessionFactory对象 -->
       <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource"/>
   <!-- 配置MyBaties全局配置文件:mybatis-config.xml -->
   <property name="configLocation" value="classpath:mybatis-config.xml"/>
       </bean>
   
       <!-- 4.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 -->
       <!--解释 ： https://www.cnblogs.com/jpfss/p/7799806.html-->
       <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
   <!-- 注入sqlSessionFactory -->
   <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
   <!-- 给出需要扫描Dao接口包 -->
   <property name="basePackage" value="com.feige.dao"/>
       </bean>
   
   </beans>
   ```

3. **Spring整合service层**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 扫描service相关的bean -->
       <context:component-scan base-package="com.kuang.service" />
   
       <!--BookServiceImpl注入到IOC容器中-->
       <bean id="BookServiceImpl" class="com.kuang.service.BookServiceImpl">
   <property name="bookMapper" ref="bookMapper"/>
       </bean>
   
       <!-- 配置事务管理器 -->
       <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource" />
       </bean>
   
   </beans>
   ```

Spring层搞定！再次理解一下，Spring就是一个大杂烩，一个容器！对吧！

## 5、SpringMVC层

1. **web.xml**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
            version="4.0">
   
       <!--DispatcherServlet-->
       <servlet>
           <servlet-name>DispatcherServlet</servlet-name>
           <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
           <init-param>
               <param-name>contextConfigLocation</param-name>
               <param-value>classpath:applicationContext.xml</param-value>
           </init-param>
           <load-on-startup>1</load-on-startup>
       </servlet>
       <servlet-mapping>
           <servlet-name>DispatcherServlet</servlet-name>
           <url-pattern>/</url-pattern>
       </servlet-mapping>
   
       <!--encodingFilter-->
       <filter>
           <filter-name>encodingFilter</filter-name>
           <filter-class>
               org.springframework.web.filter.CharacterEncodingFilter
           </filter-class>
           <init-param>
               <param-name>encoding</param-name>
               <param-value>utf-8</param-value>
           </init-param>
       </filter>
       <filter-mapping>
           <filter-name>encodingFilter</filter-name>
           <url-pattern>/*</url-pattern>
       </filter-mapping>
       
       <!--Session过期时间-->
       <session-config>
           <session-timeout>15</session-timeout>
       </session-config>
       
   </web-app>
   ```

2. **spring-mvc.xml**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xmlns:mvc="http://www.springframework.org/schema/mvc"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       https://www.springframework.org/schema/mvc/spring-mvc.xsd">
   
       <!-- 配置SpringMVC -->
       <!-- 1.开启SpringMVC注解驱动 -->
       <mvc:annotation-driven>
           <mvc:message-converters register-defaults="true">
               <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                   <constructor-arg value="UTF-8"/>
               </bean>
               <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                   <property name="objectMapper">
                       <bean class="org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean">
                           <property name="failOnEmptyBeans" value="false"/>
                       </bean>
                   </property>
               </bean>
           </mvc:message-converters>
       </mvc:annotation-driven>
       <!--解决跨域问题-->
       <mvc:cors>
       <mvc:mapping path="/**"
                    allowed-origins="http://127.0.0.1:8090,http://localhost:8090"
                    allowed-methods="POST,GET, OPTIONS,DELETE,PUT"
                    allowed-headers="Content-Type,ContentType,Access-Control-Allow-Headers, Authorization, X-Requested-With"
                    allow-credentials="true"/>
       </mvc:cors>
       <!-- 2.静态资源默认servlet配置-->
       <mvc:default-servlet-handler/>
   
       <!-- 3.配置jsp 显示ViewResolver视图解析器 -->
       <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
           <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
           <property name="prefix" value="/WEB-INF/jsp/" />
           <property name="suffix" value=".jsp" />
       </bean>
   
       <!-- 4.扫描web相关的bean -->
       <context:component-scan base-package="com.feige.controller" />
   
   </beans>
   ```

3. **Spring配置整合文件，applicationContext.xml**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd">
   
       <import resource="spring-dao.xml"/>
       <import resource="spring-service.xml"/>
       <import resource="spring-mvc.xml"/>
       
   </beans>
   ```

**配置文件，暂时结束！Controller 和 视图层编写**

1. BookController 类编写 ， 方法一：查询全部书籍

   ```
   @Controller
   @RequestMapping("/book")
   public class BookController {
   
       @Autowired
       @Qualifier("BookServiceImpl")
       private BookService bookService;
   
       @RequestMapping("/allBook")
       public String list(Model model) {
           List<Books> list = bookService.queryAllBook();
           model.addAttribute("list", list);
           return "allBook";
       }
   }
   ```

2. 编写首页 **index.jsp**

   ```
   <%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" %>
   <!DOCTYPE HTML>
   <html>
   <head>
       <title>首页</title>
       <style type="text/css">
           a {
               text-decoration: none;
               color: black;
               font-size: 18px;
           }
           h3 {
               width: 180px;
               height: 38px;
               margin: 100px auto;
               text-align: center;
               line-height: 38px;
               background: deepskyblue;
               border-radius: 4px;
           }
       </style>
   </head>
   <body>
   
   <h3>
       <a href="${pageContext.request.contextPath}/book/allBook">点击进入列表页</a>
   </h3>
   </body>
   </html>
   ```

3. 书籍列表页面 **allbook.jsp**

   ```
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>书籍列表</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>书籍列表 —— 显示所有书籍</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <div class="row">
           <div class="col-md-4 column">
               <a class="btn btn-primary" href="${pageContext.request.contextPath}/book/toAddBook">新增</a>
           </div>
       </div>
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <table class="table table-hover table-striped">
                   <thead>
                   <tr>
                       <th>书籍编号</th>
                       <th>书籍名字</th>
                       <th>书籍数量</th>
                       <th>书籍详情</th>
                       <th>操作</th>
                   </tr>
                   </thead>
   
                   <tbody>
                   <c:forEach var="book" items="${requestScope.get('list')}">
                       <tr>
                           <td>${book.getBookId()}</td>
                           <td>${book.getBookName()}</td>
                           <td>${book.getBookCounts()}</td>
                           <td>${book.getDetail()}</td>
                           <td>
                               <a href="${pageContext.request.contextPath}/book/toUpdateBook?id=${book.getBookId()}">更改</a> |
                               <a href="${pageContext.request.contextPath}/book/del/${book.getBookId()}">删除</a>
                           </td>
                       </tr>
                   </c:forEach>
                   </tbody>
               </table>
           </div>
       </div>
   </div>
   ```

4. BookController 类编写 ， 方法二：添加书籍

   ```
   @RequestMapping("/toAddBook")
   public String toAddPaper() {
       return "addBook";
   }
   
   @RequestMapping("/addBook")
   public String addPaper(Books books) {
       System.out.println(books);
       bookService.addBook(books);
       return "redirect:/book/allBook";
   }
   ```

5. 添加书籍页面：**addBook.jsp**

   ```
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   
   <html>
   <head>
       <title>新增书籍</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>新增书籍</small>
                   </h1>
               </div>
           </div>
       </div>
       <form action="${pageContext.request.contextPath}/book/addBook" method="post">
           书籍名称：<input type="text" name="bookName"><br><br><br>
           书籍数量：<input type="text" name="bookCounts"><br><br><br>
           书籍详情：<input type="text" name="detail"><br><br><br>
           <input type="submit" value="添加">
       </form>
   
   </div>
   ```

6. BookController 类编写 ， 方法三：修改书籍

   ```
   @RequestMapping("/toUpdateBook")
   public String toUpdateBook(Model model, int id) {
       Books books = bookService.queryBookById(id);
       System.out.println(books);
       model.addAttribute("book",books );
       return "updateBook";
   }
   
   @RequestMapping("/updateBook")
   public String updateBook(Model model, Books book) {
       bookService.updateBook(book);
       Books books = bookService.queryBookById(book.getBookID());
       model.addAttribute("books", books);
       return "redirect:/book/allBook";
   }
   ```

7. 修改书籍页面 **updateBook.jsp**

   ```
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>修改信息</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>修改信息</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <form action="${pageContext.request.contextPath}/book/updateBook" method="post">
           <input type="hidden" name="bookID" value="${book.getBookId()}"/>
           书籍名称：<input type="text" name="bookName" value="${book.getBookName()}"/>
           书籍数量：<input type="text" name="bookCounts" value="${book.getBookCounts()}"/>
           书籍详情：<input type="text" name="detail" value="${book.getDetail() }"/>
           <input type="submit" value="提交"/>
       </form>
   
   </div>
   ```

8. BookController 类编写 ， 方法四：删除书籍

   ```
   @RequestMapping("/del/{bookId}")
   public String deleteBook(@PathVariable("bookId") int id) {
       bookService.deleteBookById(id);
       return "redirect:/book/allBook";
   }
   ```

**配置Tomcat，进行运行！**

到目前为止，这个SSM项目整合已经完全的OK了，可以直接运行进行测试！这个练习十分的重要，大家需要保证，不看任何东西，自己也可以完整的实现出来！

## **6、项目结构图**

![1570186854191.png](https://blog.kuangstudy.com/usr/uploads/2019/10/1086489242.png)

![1570186868239.png](https://blog.kuangstudy.com/usr/uploads/2019/10/2326667495.png)

## 7、错误排查

### 1、访问出现404，排查步骤：**

1. 查看控制台输出，看一下是不是缺少了什么jar包。

2. 如果jar包存在，显示无法输出，就在IDEA的项目发布中，添加lib依赖！

   步骤：点击项目结构----->Artifacts----->点击自己的项目(ssm:war exploded)--->(点击工具栏的第一个)在WEB-INF目录下新建一个lib包----->选中lib------>点击工具栏的第三个然后选中第一个---->把里面的包全部选中点击ok---->点击Apply再ok

   ![image-20200128125126368](https://gitee.com/feigeCode/java_blog/raw/master/java/ssm%E6%95%B4%E5%90%88.assets/image-20200128125126368.png)

   ![image-20200128125237179](https://gitee.com/feigeCode/java_blog/raw/master/java/ssm%E6%95%B4%E5%90%88.assets/image-20200128125237179.png)

3. 重启Tomcat 即可解决！

### 2、其他错误

#### 1、bean不存在

 步骤：

 查看bean注入是否成功

 junit单元测试，看我们的代码是否能够查询出来

 问题不在底层，是我们spring出了问题

 springMVC整合时没有调用到service层的bean

 applicationContext.xml没有注册bean

 web.xml也绑定过配置文件要绑定大的applicationContext.xml



## 8、小结及展望

这个是同学们的第一个SSM整合案例，一定要烂熟于心！

SSM框架的重要程度是不言而喻的，学到这里，大家已经可以进行基本网站的单独开发。但是这只是增删改查的基本操作。可以说学到这里，大家才算是真正的步入了后台开发的门。也就是能找一个后台相关工作的底线。

或许很多人，工作就做这些事情，但是对于个人的提高来说，还远远不够！

| 飞哥 | 飞哥 | 飞哥 |
| ---- | ---- | ---- |
| 飞哥 | 飞哥 | 飞哥 |
| 飞哥 | 飞哥 | 飞哥 |
| 飞哥 | 飞哥 | 飞哥 |



~~~java
static class CustomAttributeProvider implements AttributeProvider {

        @Override
        public void setAttributes(Node node, String s, Map<String, String> map) {
            //改变a标签的target属性为_blank
            if(node instanceof Link) {
                map.put("target","_blank");
            }
            if (node instanceof TableBlock) {
                map.put("class","el-table__body-wrapper is-scrolling-none");
            }
            if (node instanceof TableBody) {
                map.put("class","el-table__body");
            }
            if (node instanceof TableRow) {
                map.put("class","el-table__row");
            }
            if (node instanceof TableCell) {
                map.put("class","el-table_13_column_55");
            }
        }
~~~

# feige

, 2020-03-02 07:06:53.0, 2020-03-13 06:59:47.0, admin, 10]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20009, rs-50116} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20009} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20009} Parameters : [13]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20009} Types : [INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20009} executed. 1.85911 millis. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog where id=?
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20009, rs-50117} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20009, rs-50117} Header: [id, type_name, title, content, create_time, change_time, author, view]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20009, rs-50117} Result: [13, mybatis, ssm框架整合, # ssm整合

## 1、数据库环境

创建一个存放书籍数据的数据库表

```
CREATE DATABASE `ssmbuild`;

USE `ssmbuild`;

DROP TABLE IF EXISTS `books`;

CREATE TABLE `books` (
  `bookId` INT PRIMARY KEY COMMENT '书id',
  `bookName` VARCHAR(100) NOT NULL COMMENT '书名',
  `bookCounts` INT(11) NOT NULL COMMENT '数量',
  ``ssmbuild``ssmbuild`` VARCHAR(200) NOT NULL COMMENT '描述'
) ENGINE=INNODB DEFAULT CHARSET=utf8

INSERT  INTO `books`(`bookId`,`bookName`,`bookCounts`,`detail`)VALUES 
(1,'Java',1,'从入门到放弃'),
(2,'MySQL',10,'从删库到跑路'),
(3,'Linux',5,'从进门到进牢');

SELECT * FROM books
```

## 2、基本环境搭建

1. 新建一Maven项目！ ssmbuild ， 添加web的支持

   ![image-20200128134359317](https://gitee.com/feigeCode/java_blog/raw/master/java/ssm%E6%95%B4%E5%90%88.assets/image-20200128134359317.png)

2. 导入相关的pom依赖！

   ```
   <dependencies>
       <!--Junit-->
       <dependency>
           <groupId>junit</groupId>
           <artifactId>junit</artifactId>
           <version>4.12</version>
       </dependency>
       <!--数据库驱动-->
       <dependency>
           <groupId>mysql</groupId>
           <artifactId>mysql-connector-java</artifactId>
           <version>5.1.47</version>
       </dependency>
       <!-- 数据库连接池 -->
       <dependency>
           <groupId>com.mchange</groupId>
           <artifactId>c3p0</artifactId>
           <version>0.9.5.2</version>
       </dependency>
   
       <!--Servlet - JSP -->
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>servlet-api</artifactId>
           <version>2.5</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet.jsp</groupId>
           <artifactId>jsp-api</artifactId>
           <version>2.2</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>jstl</artifactId>
           <version>1.2</version>
       </dependency>
   
       <!--Mybatis-->
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis</artifactId>
           <version>3.5.2</version>
       </dependency>
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis-spring</artifactId>
           <version>2.0.2</version>
       </dependency>
   
       <!--Spring-->
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-webmvc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-jdbc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->
       <dependency>
           <groupId>org.projectlombok</groupId>
           <artifactId>lombok</artifactId>
           <version>1.16.10</version>
       </dependency>
   </dependencies>
   ```

3. Maven资源过滤设置

   ```
   <build>
       <resources>
           <resource>
               <directory>src/main/java</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
           <resource>
               <directory>src/main/resources</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
       </resources>
   </build>
   ```

4. 建立基本结构和配置框架！

   - com.feige.pojo

   - com.feige.dao

   - com.feige.service

   - com.feige.controller

     在resources目录下创建

   - mybatis-config.xml

     ```
     <?xml version="1.0" encoding="UTF-8" ?>
     <!DOCTYPE configuration
             PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
             "http://mybatis.org/dtd/mybatis-3-config.dtd">
     <configuration>
     
     </configuration>
     ```

   - applicationContext.xml

     ```
     <?xml version="1.0" encoding="UTF-8"?>
     <beans xmlns="http://www.springframework.org/schema/beans"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://www.springframework.org/schema/beans
             http://www.springframework.org/schema/beans/spring-beans.xsd">
     
     </beans>
     ```

## 3、Mybatis层编写

1. 数据库配置文件 **database.properties**

   ```
   jdbc.driver=com.mysql.jdbc.Driver
   jdbc.url=jdbc:mysql://localhost:3306/ssmbuild?useSSL=true&useUnicode=true&characterEncoding=utf8
   jdbc.username=root
   jdbc.password=hufei169357
   ```

2. IDEA关联数据库

3. 编写MyBatis的核心配置文件

   ```
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE configuration
           PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-config.dtd">
   <configuration>
       
       <typeAliases>
           <package name="com.feige.pojo"/>
       </typeAliases>
       <mappers>
           <mapper resource="com/feige/dao/BookMapper.xml"/>
       </mappers>
   
   </configuration>
   ```

4. 编写数据库对应的实体类 com.feige.pojo.Books 使用lombok插件！

   ```
   package com.kuang.pojo;
   
   import lombok.AllArgsConstructor;
   import lombok.Data;
   import lombok.NoArgsConstructor;
   
   @Data
   @AllArgsConstructor
   @NoArgsConstructor
   public class Books {
       
       private int bookId;
       private String bookName;
       private int bookCounts;
       private String detail;
       
   }
   ```

5. 编写Dao层的 Mapper接口！

   ```
   package com.kuang.dao;
   
   import com.kuang.pojo.Books;
   import java.util.List;
   
   public interface BookMapper {
   
       //增加一个Book
       int addBook(Books book);
   
       //根据id删除一个Book
       int deleteBookById(int id);
   
       //更新Book
       int updateBook(Books books);
   
       //根据id查询,返回一个Book
       Books queryBookById(int id);
   
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   
   }
   ```

6. 编写接口对应的 Mapper.xml 文件。需要导入MyBatis的包；

   ```
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE mapper
           PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
   
   <mapper namespace="com.feige.dao.BooksMapper">
   
       <!--增加一个Book-->
       <insert id="addBook" parameterType="Books">
           insert into books(bookName,bookCounts,detail)
           values (#{bookName}, #{bookCounts}, #{detail})
       </insert>
   
       <!--根据id删除一个Book-->
       <delete id="deleteBookById" parameterType="int">
           delete from books where bookId=#{bookId}
       </delete>
   
       <!--更新Book-->
       <update id="updateBook" parameterType="Books">
           update books
           set bookName = #{bookName},bookCounts = #{bookCounts},detail = #{detail}
           where bookId = #{bookId}
       </update>
   
       <!--根据id查询,返回一个Book-->
       <select id="queryBookById" resultType="Books">
           select * from books
           where bookID = #{bookId}
       </select>
   
       <!--查询全部Book-->
       <select id="queryAllBook" resultType="com.feige.pojo.Books">
           SELECT * from books
       </select>
   
   </mapper>
   ```

7. 编写Service层的接口和实现类 接口：

   ```
   package com.feige.service;
   
   import com.feige.pojo.Books;
   
   import java.util.List;
   
   //BookService:底下需要去实现,调用dao层
   public interface BookService {
       //增加一个Book
       int addBook(Books book);
       //根据id删除一个Book
       int deleteBookById(int id);
       //更新Book
       int updateBook(Books books);
       //根据id查询,返回一个Book
       Books queryBookById(int id);
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   }
   ```

实现类：

```
package com.feige.service;

import com.feige.dao.BookMapper;
import com.feige.pojo.Books;
import java.util.List;

public class BookServiceImpl implements BookService {

    //调用dao层的操作，设置一个set接口，方便Spring管理
    private BookMapper bookMapper;

    public void setBookMapper(BookMapper bookMapper) {
        this.bookMapper = bookMapper;
    }
    
    public int addBook(Books book) {
        return bookMapper.addBook(book);
    }
    
    public int deleteBookById(int id) {
        return bookMapper.deleteBookById(id);
    }
    
    public int updateBook(Books books) {
        return bookMapper.updateBook(books);
    }
    
    public Books queryBookById(int id) {
        return bookMapper.queryBookById(id);
    }
    
    public List<Books> queryAllBook() {
        return bookMapper.queryAllBook();
    }
}
```

**OK，到此，底层需求操作编写完毕！**

## 4、Spring层

1. 配置**Spring整合MyBatis**，我们这里数据源使用c3p0连接池；

2. 我们去编写Spring整合Mybatis的相关的配置文件； spring-dao.xml

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans.xsd
   http://www.springframework.org/schema/context
   https://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 配置整合mybatis -->
       <!-- 1.关联数据库文件 -->
       <context:property-placeholder location="classpath:database.properties"/>
   
       <!-- 2.数据库连接池 -->
       <!--数据库连接池
   dbcp  半自动化操作  不能自动连接
   c3p0  自动化操作（自动的加载配置文件 并且设置到对象里面）
       -->
       <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
   <!-- 配置连接池属性 -->
   <property name="driverClass" value="${jdbc.driver}"/>
   <property name="jdbcUrl" value="${jdbc.url}"/>
   <property name="user" value="${jdbc.username}"/>
   <property name="password" value="${jdbc.password}"/>
   
   <!-- c3p0连接池的私有属性 -->
   <property name="maxPoolSize" value="30"/>
   <property name="minPoolSize" value="10"/>
   <!-- 关闭连接后不自动commit -->
   <property name="autoCommitOnClose" value="false"/>
   <!-- 获取连接超时时间 -->
   <property name="checkoutTimeout" value="10000"/>
   <!-- 当获取连接失败重试次数 -->
   <property name="acquireRetryAttempts" value="2"/>
       </bean>
   
       <!-- 3.配置SqlSessionFactory对象 -->
       <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource"/>
   <!-- 配置MyBaties全局配置文件:mybatis-config.xml -->
   <property name="configLocation" value="classpath:mybatis-config.xml"/>
       </bean>
   
       <!-- 4.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 -->
       <!--解释 ： https://www.cnblogs.com/jpfss/p/7799806.html-->
       <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
   <!-- 注入sqlSessionFactory -->
   <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
   <!-- 给出需要扫描Dao接口包 -->
   <property name="basePackage" value="com.feige.dao"/>
       </bean>
   
   </beans>
   ```

3. **Spring整合service层**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 扫描service相关的bean -->
       <context:component-scan base-package="com.kuang.service" />
   
       <!--BookServiceImpl注入到IOC容器中-->
       <bean id="BookServiceImpl" class="com.kuang.service.BookServiceImpl">
   <property name="bookMapper" ref="bookMapper"/>
       </bean>
   
       <!-- 配置事务管理器 -->
       <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource" />
       </bean>
   
   </beans>
   ```

Spring层搞定！再次理解一下，Spring就是一个大杂烩，一个容器！对吧！

## 5、SpringMVC层

1. **web.xml**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
            version="4.0">
   
       <!--DispatcherServlet-->
       <servlet>
           <servlet-name>DispatcherServlet</servlet-name>
           <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
           <init-param>
               <param-name>contextConfigLocation</param-name>
               <param-value>classpath:applicationContext.xml</param-value>
           </init-param>
           <load-on-startup>1</load-on-startup>
       </servlet>
       <servlet-mapping>
           <servlet-name>DispatcherServlet</servlet-name>
           <url-pattern>/</url-pattern>
       </servlet-mapping>
   
       <!--encodingFilter-->
       <filter>
           <filter-name>encodingFilter</filter-name>
           <filter-class>
               org.springframework.web.filter.CharacterEncodingFilter
           </filter-class>
           <init-param>
               <param-name>encoding</param-name>
               <param-value>utf-8</param-value>
           </init-param>
       </filter>
       <filter-mapping>
           <filter-name>encodingFilter</filter-name>
           <url-pattern>/*</url-pattern>
       </filter-mapping>
       
       <!--Session过期时间-->
       <session-config>
           <session-timeout>15</session-timeout>
       </session-config>
       
   </web-app>
   ```

2. **spring-mvc.xml**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xmlns:mvc="http://www.springframework.org/schema/mvc"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       https://www.springframework.org/schema/mvc/spring-mvc.xsd">
   
       <!-- 配置SpringMVC -->
       <!-- 1.开启SpringMVC注解驱动 -->
       <mvc:annotation-driven>
           <mvc:message-converters register-defaults="true">
               <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                   <constructor-arg value="UTF-8"/>
               </bean>
               <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                   <property name="objectMapper">
                       <bean class="org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean">
                           <property name="failOnEmptyBeans" value="false"/>
                       </bean>
                   </property>
               </bean>
           </mvc:message-converters>
       </mvc:annotation-driven>
       <!--解决跨域问题-->
       <mvc:cors>
       <mvc:mapping path="/**"
                    allowed-origins="http://127.0.0.1:8090,http://localhost:8090"
                    allowed-methods="POST,GET, OPTIONS,DELETE,PUT"
                    allowed-headers="Content-Type,ContentType,Access-Control-Allow-Headers, Authorization, X-Requested-With"
                    allow-credentials="true"/>
       </mvc:cors>
       <!-- 2.静态资源默认servlet配置-->
       <mvc:default-servlet-handler/>
   
       <!-- 3.配置jsp 显示ViewResolver视图解析器 -->
       <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
           <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
           <property name="prefix" value="/WEB-INF/jsp/" />
           <property name="suffix" value=".jsp" />
       </bean>
   
       <!-- 4.扫描web相关的bean -->
       <context:component-scan base-package="com.feige.controller" />
   
   </beans>
   ```

3. **Spring配置整合文件，applicationContext.xml**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd">
   
       <import resource="spring-dao.xml"/>
       <import resource="spring-service.xml"/>
       <import resource="spring-mvc.xml"/>
       
   </beans>
   ```

**配置文件，暂时结束！Controller 和 视图层编写**

1. BookController 类编写 ， 方法一：查询全部书籍

   ```
   @Controller
   @RequestMapping("/book")
   public class BookController {
   
       @Autowired
       @Qualifier("BookServiceImpl")
       private BookService bookService;
   
       @RequestMapping("/allBook")
       public String list(Model model) {
           List<Books> list = bookService.queryAllBook();
           model.addAttribute("list", list);
           return "allBook";
       }
   }
   ```

2. 编写首页 **index.jsp**

   ```
   <%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" %>
   <!DOCTYPE HTML>
   <html>
   <head>
       <title>首页</title>
       <style type="text/css">
           a {
               text-decoration: none;
               color: black;
               font-size: 18px;
           }
           h3 {
               width: 180px;
               height: 38px;
               margin: 100px auto;
               text-align: center;
               line-height: 38px;
               background: deepskyblue;
               border-radius: 4px;
           }
       </style>
   </head>
   <body>
   
   <h3>
       <a href="${pageContext.request.contextPath}/book/allBook">点击进入列表页</a>
   </h3>
   </body>
   </html>
   ```

3. 书籍列表页面 **allbook.jsp**

   ```
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>书籍列表</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>书籍列表 —— 显示所有书籍</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <div class="row">
           <div class="col-md-4 column">
               <a class="btn btn-primary" href="${pageContext.request.contextPath}/book/toAddBook">新增</a>
           </div>
       </div>
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <table class="table table-hover table-striped">
                   <thead>
                   <tr>
                       <th>书籍编号</th>
                       <th>书籍名字</th>
                       <th>书籍数量</th>
                       <th>书籍详情</th>
                       <th>操作</th>
                   </tr>
                   </thead>
   
                   <tbody>
                   <c:forEach var="book" items="${requestScope.get('list')}">
                       <tr>
                           <td>${book.getBookId()}</td>
                           <td>${book.getBookName()}</td>
                           <td>${book.getBookCounts()}</td>
                           <td>${book.getDetail()}</td>
                           <td>
                               <a href="${pageContext.request.contextPath}/book/toUpdateBook?id=${book.getBookId()}">更改</a> |
                               <a href="${pageContext.request.contextPath}/book/del/${book.getBookId()}">删除</a>
                           </td>
                       </tr>
                   </c:forEach>
                   </tbody>
               </table>
           </div>
       </div>
   </div>
   ```

4. BookController 类编写 ， 方法二：添加书籍

   ```
   @RequestMapping("/toAddBook")
   public String toAddPaper() {
       return "addBook";
   }
   
   @RequestMapping("/addBook")
   public String addPaper(Books books) {
       System.out.println(books);
       bookService.addBook(books);
       return "redirect:/book/allBook";
   }
   ```

5. 添加书籍页面：**addBook.jsp**

   ```
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   
   <html>
   <head>
       <title>新增书籍</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>新增书籍</small>
                   </h1>
               </div>
           </div>
       </div>
       <form action="${pageContext.request.contextPath}/book/addBook" method="post">
           书籍名称：<input type="text" name="bookName"><br><br><br>
           书籍数量：<input type="text" name="bookCounts"><br><br><br>
           书籍详情：<input type="text" name="detail"><br><br><br>
           <input type="submit" value="添加">
       </form>
   
   </div>
   ```

6. BookController 类编写 ， 方法三：修改书籍

   ```
   @RequestMapping("/toUpdateBook")
   public String toUpdateBook(Model model, int id) {
       Books books = bookService.queryBookById(id);
       System.out.println(books);
       model.addAttribute("book",books );
       return "updateBook";
   }
   
   @RequestMapping("/updateBook")
   public String updateBook(Model model, Books book) {
       bookService.updateBook(book);
       Books books = bookService.queryBookById(book.getBookID());
       model.addAttribute("books", books);
       return "redirect:/book/allBook";
   }
   ```

7. 修改书籍页面 **updateBook.jsp**

   ```
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>修改信息</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>修改信息</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <form action="${pageContext.request.contextPath}/book/updateBook" method="post">
           <input type="hidden" name="bookID" value="${book.getBookId()}"/>
           书籍名称：<input type="text" name="bookName" value="${book.getBookName()}"/>
           书籍数量：<input type="text" name="bookCounts" value="${book.getBookCounts()}"/>
           书籍详情：<input type="text" name="detail" value="${book.getDetail() }"/>
           <input type="submit" value="提交"/>
       </form>
   
   </div>
   ```

8. BookController 类编写 ， 方法四：删除书籍

   ```
   @RequestMapping("/del/{bookId}")
   public String deleteBook(@PathVariable("bookId") int id) {
       bookService.deleteBookById(id);
       return "redirect:/book/allBook";
   }
   ```

**配置Tomcat，进行运行！**

到目前为止，这个SSM项目整合已经完全的OK了，可以直接运行进行测试！这个练习十分的重要，大家需要保证，不看任何东西，自己也可以完整的实现出来！

## **6、项目结构图**

![1570186854191.png](https://blog.kuangstudy.com/usr/uploads/2019/10/1086489242.png)

![1570186868239.png](https://blog.kuangstudy.com/usr/uploads/2019/10/2326667495.png)

## 7、错误排查

### 1、访问出现404，排查步骤：**

1. 查看控制台输出，看一下是不是缺少了什么jar包。

2. 如果jar包存在，显示无法输出，就在IDEA的项目发布中，添加lib依赖！

   步骤：点击项目结构----->Artifacts----->点击自己的项目(ssm:war exploded)--->(点击工具栏的第一个)在WEB-INF目录下新建一个lib包----->选中lib------>点击工具栏的第三个然后选中第一个---->把里面的包全部选中点击ok---->点击Apply再ok

   ![image-20200128125126368](https://gitee.com/feigeCode/java_blog/raw/master/java/ssm%E6%95%B4%E5%90%88.assets/image-20200128125126368.png)

   ![image-20200128125237179](https://gitee.com/feigeCode/java_blog/raw/master/java/ssm%E6%95%B4%E5%90%88.assets/image-20200128125237179.png)

3. 重启Tomcat 即可解决！

### 2、其他错误

#### 1、bean不存在

 步骤：

 查看bean注入是否成功

 junit单元测试，看我们的代码是否能够查询出来

 问题不在底层，是我们spring出了问题

 springMVC整合时没有调用到service层的bean

 applicationContext.xml没有注册bean

 web.xml也绑定过配置文件要绑定大的applicationContext.xml



## 8、小结及展望

这个是同学们的第一个SSM整合案例，一定要烂熟于心！

SSM框架的重要程度是不言而喻的，学到这里，大家已经可以进行基本网站的单独开发。但是这只是增删改查的基本操作。可以说学到这里，大家才算是真正的步入了后台开发的门。也就是能找一个后台相关工作的底线。

或许很多人，工作就做这些事情，但是对于个人的提高来说，还远远不够！

| 飞哥 | 飞哥 | 飞哥 |
| ---- | ---- | ---- |
| 飞哥 | 飞哥 | 飞哥 |
| 飞哥 | 飞哥 | 飞哥 |
| 飞哥 | 飞哥 | 飞哥 |



~~~java
static class CustomAttributeProvider implements AttributeProvider {

        @Override
        public void setAttributes(Node node, String s, Map<String, String> map) {
            //改变a标签的target属性为_blank
            if(node instanceof Link) {
                map.put("target","_blank");
            }
            if (node instanceof TableBlock) {
                map.put("class","el-table__body-wrapper is-scrolling-none");
            }
            if (node instanceof TableBody) {
                map.put("class","el-table__body");
            }
            if (node instanceof TableRow) {
                map.put("class","el-table__row");
            }
            if (node instanceof TableCell) {
                map.put("class","el-table_13_column_55");
            }
        }
~~~

# feige

, 2020-03-02 07:06:53.0, 2020-03-13 06:59:47.0, admin, 10]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20009, rs-50117} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20009} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20009} Parameters : [13]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20009} Types : [INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20009} executed. 0.737332 millis. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog where id=?
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20009, rs-50118} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20009, rs-50118} Header: [id, type_name, title, content, create_time, change_time, author, view]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20009, rs-50118} Result: [13, mybatis, ssm框架整合, # ssm整合

## 1、数据库环境

创建一个存放书籍数据的数据库表

```
CREATE DATABASE `ssmbuild`;

USE `ssmbuild`;

DROP TABLE IF EXISTS `books`;

CREATE TABLE `books` (
  `bookId` INT PRIMARY KEY COMMENT '书id',
  `bookName` VARCHAR(100) NOT NULL COMMENT '书名',
  `bookCounts` INT(11) NOT NULL COMMENT '数量',
  ``ssmbuild``ssmbuild`` VARCHAR(200) NOT NULL COMMENT '描述'
) ENGINE=INNODB DEFAULT CHARSET=utf8

INSERT  INTO `books`(`bookId`,`bookName`,`bookCounts`,`detail`)VALUES 
(1,'Java',1,'从入门到放弃'),
(2,'MySQL',10,'从删库到跑路'),
(3,'Linux',5,'从进门到进牢');

SELECT * FROM books
```

## 2、基本环境搭建

1. 新建一Maven项目！ ssmbuild ， 添加web的支持

   ![image-20200128134359317](https://gitee.com/feigeCode/java_blog/raw/master/java/ssm%E6%95%B4%E5%90%88.assets/image-20200128134359317.png)

2. 导入相关的pom依赖！

   ```
   <dependencies>
       <!--Junit-->
       <dependency>
           <groupId>junit</groupId>
           <artifactId>junit</artifactId>
           <version>4.12</version>
       </dependency>
       <!--数据库驱动-->
       <dependency>
           <groupId>mysql</groupId>
           <artifactId>mysql-connector-java</artifactId>
           <version>5.1.47</version>
       </dependency>
       <!-- 数据库连接池 -->
       <dependency>
           <groupId>com.mchange</groupId>
           <artifactId>c3p0</artifactId>
           <version>0.9.5.2</version>
       </dependency>
   
       <!--Servlet - JSP -->
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>servlet-api</artifactId>
           <version>2.5</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet.jsp</groupId>
           <artifactId>jsp-api</artifactId>
           <version>2.2</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>jstl</artifactId>
           <version>1.2</version>
       </dependency>
   
       <!--Mybatis-->
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis</artifactId>
           <version>3.5.2</version>
       </dependency>
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis-spring</artifactId>
           <version>2.0.2</version>
       </dependency>
   
       <!--Spring-->
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-webmvc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-jdbc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->
       <dependency>
           <groupId>org.projectlombok</groupId>
           <artifactId>lombok</artifactId>
           <version>1.16.10</version>
       </dependency>
   </dependencies>
   ```

3. Maven资源过滤设置

   ```
   <build>
       <resources>
           <resource>
               <directory>src/main/java</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
           <resource>
               <directory>src/main/resources</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
       </resources>
   </build>
   ```

4. 建立基本结构和配置框架！

   - com.feige.pojo

   - com.feige.dao

   - com.feige.service

   - com.feige.controller

     在resources目录下创建

   - mybatis-config.xml

     ```
     <?xml version="1.0" encoding="UTF-8" ?>
     <!DOCTYPE configuration
             PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
             "http://mybatis.org/dtd/mybatis-3-config.dtd">
     <configuration>
     
     </configuration>
     ```

   - applicationContext.xml

     ```
     <?xml version="1.0" encoding="UTF-8"?>
     <beans xmlns="http://www.springframework.org/schema/beans"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://www.springframework.org/schema/beans
             http://www.springframework.org/schema/beans/spring-beans.xsd">
     
     </beans>
     ```

## 3、Mybatis层编写

1. 数据库配置文件 **database.properties**

   ```
   jdbc.driver=com.mysql.jdbc.Driver
   jdbc.url=jdbc:mysql://localhost:3306/ssmbuild?useSSL=true&useUnicode=true&characterEncoding=utf8
   jdbc.username=root
   jdbc.password=hufei169357
   ```

2. IDEA关联数据库

3. 编写MyBatis的核心配置文件

   ```
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE configuration
           PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-config.dtd">
   <configuration>
       
       <typeAliases>
           <package name="com.feige.pojo"/>
       </typeAliases>
       <mappers>
           <mapper resource="com/feige/dao/BookMapper.xml"/>
       </mappers>
   
   </configuration>
   ```

4. 编写数据库对应的实体类 com.feige.pojo.Books 使用lombok插件！

   ```
   package com.kuang.pojo;
   
   import lombok.AllArgsConstructor;
   import lombok.Data;
   import lombok.NoArgsConstructor;
   
   @Data
   @AllArgsConstructor
   @NoArgsConstructor
   public class Books {
       
       private int bookId;
       private String bookName;
       private int bookCounts;
       private String detail;
       
   }
   ```

5. 编写Dao层的 Mapper接口！

   ```
   package com.kuang.dao;
   
   import com.kuang.pojo.Books;
   import java.util.List;
   
   public interface BookMapper {
   
       //增加一个Book
       int addBook(Books book);
   
       //根据id删除一个Book
       int deleteBookById(int id);
   
       //更新Book
       int updateBook(Books books);
   
       //根据id查询,返回一个Book
       Books queryBookById(int id);
   
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   
   }
   ```

6. 编写接口对应的 Mapper.xml 文件。需要导入MyBatis的包；

   ```
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE mapper
           PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
   
   <mapper namespace="com.feige.dao.BooksMapper">
   
       <!--增加一个Book-->
       <insert id="addBook" parameterType="Books">
           insert into books(bookName,bookCounts,detail)
           values (#{bookName}, #{bookCounts}, #{detail})
       </insert>
   
       <!--根据id删除一个Book-->
       <delete id="deleteBookById" parameterType="int">
           delete from books where bookId=#{bookId}
       </delete>
   
       <!--更新Book-->
       <update id="updateBook" parameterType="Books">
           update books
           set bookName = #{bookName},bookCounts = #{bookCounts},detail = #{detail}
           where bookId = #{bookId}
       </update>
   
       <!--根据id查询,返回一个Book-->
       <select id="queryBookById" resultType="Books">
           select * from books
           where bookID = #{bookId}
       </select>
   
       <!--查询全部Book-->
       <select id="queryAllBook" resultType="com.feige.pojo.Books">
           SELECT * from books
       </select>
   
   </mapper>
   ```

7. 编写Service层的接口和实现类 接口：

   ```
   package com.feige.service;
   
   import com.feige.pojo.Books;
   
   import java.util.List;
   
   //BookService:底下需要去实现,调用dao层
   public interface BookService {
       //增加一个Book
       int addBook(Books book);
       //根据id删除一个Book
       int deleteBookById(int id);
       //更新Book
       int updateBook(Books books);
       //根据id查询,返回一个Book
       Books queryBookById(int id);
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   }
   ```

实现类：

```
package com.feige.service;

import com.feige.dao.BookMapper;
import com.feige.pojo.Books;
import java.util.List;

public class BookServiceImpl implements BookService {

    //调用dao层的操作，设置一个set接口，方便Spring管理
    private BookMapper bookMapper;

    public void setBookMapper(BookMapper bookMapper) {
        this.bookMapper = bookMapper;
    }
    
    public int addBook(Books book) {
        return bookMapper.addBook(book);
    }
    
    public int deleteBookById(int id) {
        return bookMapper.deleteBookById(id);
    }
    
    public int updateBook(Books books) {
        return bookMapper.updateBook(books);
    }
    
    public Books queryBookById(int id) {
        return bookMapper.queryBookById(id);
    }
    
    public List<Books> queryAllBook() {
        return bookMapper.queryAllBook();
    }
}
```

**OK，到此，底层需求操作编写完毕！**

## 4、Spring层

1. 配置**Spring整合MyBatis**，我们这里数据源使用c3p0连接池；

2. 我们去编写Spring整合Mybatis的相关的配置文件； spring-dao.xml

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans.xsd
   http://www.springframework.org/schema/context
   https://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 配置整合mybatis -->
       <!-- 1.关联数据库文件 -->
       <context:property-placeholder location="classpath:database.properties"/>
   
       <!-- 2.数据库连接池 -->
       <!--数据库连接池
   dbcp  半自动化操作  不能自动连接
   c3p0  自动化操作（自动的加载配置文件 并且设置到对象里面）
       -->
       <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
   <!-- 配置连接池属性 -->
   <property name="driverClass" value="${jdbc.driver}"/>
   <property name="jdbcUrl" value="${jdbc.url}"/>
   <property name="user" value="${jdbc.username}"/>
   <property name="password" value="${jdbc.password}"/>
   
   <!-- c3p0连接池的私有属性 -->
   <property name="maxPoolSize" value="30"/>
   <property name="minPoolSize" value="10"/>
   <!-- 关闭连接后不自动commit -->
   <property name="autoCommitOnClose" value="false"/>
   <!-- 获取连接超时时间 -->
   <property name="checkoutTimeout" value="10000"/>
   <!-- 当获取连接失败重试次数 -->
   <property name="acquireRetryAttempts" value="2"/>
       </bean>
   
       <!-- 3.配置SqlSessionFactory对象 -->
       <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource"/>
   <!-- 配置MyBaties全局配置文件:mybatis-config.xml -->
   <property name="configLocation" value="classpath:mybatis-config.xml"/>
       </bean>
   
       <!-- 4.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 -->
       <!--解释 ： https://www.cnblogs.com/jpfss/p/7799806.html-->
       <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
   <!-- 注入sqlSessionFactory -->
   <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
   <!-- 给出需要扫描Dao接口包 -->
   <property name="basePackage" value="com.feige.dao"/>
       </bean>
   
   </beans>
   ```

3. **Spring整合service层**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 扫描service相关的bean -->
       <context:component-scan base-package="com.kuang.service" />
   
       <!--BookServiceImpl注入到IOC容器中-->
       <bean id="BookServiceImpl" class="com.kuang.service.BookServiceImpl">
   <property name="bookMapper" ref="bookMapper"/>
       </bean>
   
       <!-- 配置事务管理器 -->
       <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource" />
       </bean>
   
   </beans>
   ```

Spring层搞定！再次理解一下，Spring就是一个大杂烩，一个容器！对吧！

## 5、SpringMVC层

1. **web.xml**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
            version="4.0">
   
       <!--DispatcherServlet-->
       <servlet>
           <servlet-name>DispatcherServlet</servlet-name>
           <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
           <init-param>
               <param-name>contextConfigLocation</param-name>
               <param-value>classpath:applicationContext.xml</param-value>
           </init-param>
           <load-on-startup>1</load-on-startup>
       </servlet>
       <servlet-mapping>
           <servlet-name>DispatcherServlet</servlet-name>
           <url-pattern>/</url-pattern>
       </servlet-mapping>
   
       <!--encodingFilter-->
       <filter>
           <filter-name>encodingFilter</filter-name>
           <filter-class>
               org.springframework.web.filter.CharacterEncodingFilter
           </filter-class>
           <init-param>
               <param-name>encoding</param-name>
               <param-value>utf-8</param-value>
           </init-param>
       </filter>
       <filter-mapping>
           <filter-name>encodingFilter</filter-name>
           <url-pattern>/*</url-pattern>
       </filter-mapping>
       
       <!--Session过期时间-->
       <session-config>
           <session-timeout>15</session-timeout>
       </session-config>
       
   </web-app>
   ```

2. **spring-mvc.xml**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xmlns:mvc="http://www.springframework.org/schema/mvc"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       https://www.springframework.org/schema/mvc/spring-mvc.xsd">
   
       <!-- 配置SpringMVC -->
       <!-- 1.开启SpringMVC注解驱动 -->
       <mvc:annotation-driven>
           <mvc:message-converters register-defaults="true">
               <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                   <constructor-arg value="UTF-8"/>
               </bean>
               <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                   <property name="objectMapper">
                       <bean class="org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean">
                           <property name="failOnEmptyBeans" value="false"/>
                       </bean>
                   </property>
               </bean>
           </mvc:message-converters>
       </mvc:annotation-driven>
       <!--解决跨域问题-->
       <mvc:cors>
       <mvc:mapping path="/**"
                    allowed-origins="http://127.0.0.1:8090,http://localhost:8090"
                    allowed-methods="POST,GET, OPTIONS,DELETE,PUT"
                    allowed-headers="Content-Type,ContentType,Access-Control-Allow-Headers, Authorization, X-Requested-With"
                    allow-credentials="true"/>
       </mvc:cors>
       <!-- 2.静态资源默认servlet配置-->
       <mvc:default-servlet-handler/>
   
       <!-- 3.配置jsp 显示ViewResolver视图解析器 -->
       <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
           <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
           <property name="prefix" value="/WEB-INF/jsp/" />
           <property name="suffix" value=".jsp" />
       </bean>
   
       <!-- 4.扫描web相关的bean -->
       <context:component-scan base-package="com.feige.controller" />
   
   </beans>
   ```

3. **Spring配置整合文件，applicationContext.xml**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd">
   
       <import resource="spring-dao.xml"/>
       <import resource="spring-service.xml"/>
       <import resource="spring-mvc.xml"/>
       
   </beans>
   ```

**配置文件，暂时结束！Controller 和 视图层编写**

1. BookController 类编写 ， 方法一：查询全部书籍

   ```
   @Controller
   @RequestMapping("/book")
   public class BookController {
   
       @Autowired
       @Qualifier("BookServiceImpl")
       private BookService bookService;
   
       @RequestMapping("/allBook")
       public String list(Model model) {
           List<Books> list = bookService.queryAllBook();
           model.addAttribute("list", list);
           return "allBook";
       }
   }
   ```

2. 编写首页 **index.jsp**

   ```
   <%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" %>
   <!DOCTYPE HTML>
   <html>
   <head>
       <title>首页</title>
       <style type="text/css">
           a {
               text-decoration: none;
               color: black;
               font-size: 18px;
           }
           h3 {
               width: 180px;
               height: 38px;
               margin: 100px auto;
               text-align: center;
               line-height: 38px;
               background: deepskyblue;
               border-radius: 4px;
           }
       </style>
   </head>
   <body>
   
   <h3>
       <a href="${pageContext.request.contextPath}/book/allBook">点击进入列表页</a>
   </h3>
   </body>
   </html>
   ```

3. 书籍列表页面 **allbook.jsp**

   ```
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>书籍列表</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>书籍列表 —— 显示所有书籍</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <div class="row">
           <div class="col-md-4 column">
               <a class="btn btn-primary" href="${pageContext.request.contextPath}/book/toAddBook">新增</a>
           </div>
       </div>
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <table class="table table-hover table-striped">
                   <thead>
                   <tr>
                       <th>书籍编号</th>
                       <th>书籍名字</th>
                       <th>书籍数量</th>
                       <th>书籍详情</th>
                       <th>操作</th>
                   </tr>
                   </thead>
   
                   <tbody>
                   <c:forEach var="book" items="${requestScope.get('list')}">
                       <tr>
                           <td>${book.getBookId()}</td>
                           <td>${book.getBookName()}</td>
                           <td>${book.getBookCounts()}</td>
                           <td>${book.getDetail()}</td>
                           <td>
                               <a href="${pageContext.request.contextPath}/book/toUpdateBook?id=${book.getBookId()}">更改</a> |
                               <a href="${pageContext.request.contextPath}/book/del/${book.getBookId()}">删除</a>
                           </td>
                       </tr>
                   </c:forEach>
                   </tbody>
               </table>
           </div>
       </div>
   </div>
   ```

4. BookController 类编写 ， 方法二：添加书籍

   ```
   @RequestMapping("/toAddBook")
   public String toAddPaper() {
       return "addBook";
   }
   
   @RequestMapping("/addBook")
   public String addPaper(Books books) {
       System.out.println(books);
       bookService.addBook(books);
       return "redirect:/book/allBook";
   }
   ```

5. 添加书籍页面：**addBook.jsp**

   ```
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   
   <html>
   <head>
       <title>新增书籍</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>新增书籍</small>
                   </h1>
               </div>
           </div>
       </div>
       <form action="${pageContext.request.contextPath}/book/addBook" method="post">
           书籍名称：<input type="text" name="bookName"><br><br><br>
           书籍数量：<input type="text" name="bookCounts"><br><br><br>
           书籍详情：<input type="text" name="detail"><br><br><br>
           <input type="submit" value="添加">
       </form>
   
   </div>
   ```

6. BookController 类编写 ， 方法三：修改书籍

   ```
   @RequestMapping("/toUpdateBook")
   public String toUpdateBook(Model model, int id) {
       Books books = bookService.queryBookById(id);
       System.out.println(books);
       model.addAttribute("book",books );
       return "updateBook";
   }
   
   @RequestMapping("/updateBook")
   public String updateBook(Model model, Books book) {
       bookService.updateBook(book);
       Books books = bookService.queryBookById(book.getBookID());
       model.addAttribute("books", books);
       return "redirect:/book/allBook";
   }
   ```

7. 修改书籍页面 **updateBook.jsp**

   ```
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>修改信息</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>修改信息</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <form action="${pageContext.request.contextPath}/book/updateBook" method="post">
           <input type="hidden" name="bookID" value="${book.getBookId()}"/>
           书籍名称：<input type="text" name="bookName" value="${book.getBookName()}"/>
           书籍数量：<input type="text" name="bookCounts" value="${book.getBookCounts()}"/>
           书籍详情：<input type="text" name="detail" value="${book.getDetail() }"/>
           <input type="submit" value="提交"/>
       </form>
   
   </div>
   ```

8. BookController 类编写 ， 方法四：删除书籍

   ```
   @RequestMapping("/del/{bookId}")
   public String deleteBook(@PathVariable("bookId") int id) {
       bookService.deleteBookById(id);
       return "redirect:/book/allBook";
   }
   ```

**配置Tomcat，进行运行！**

到目前为止，这个SSM项目整合已经完全的OK了，可以直接运行进行测试！这个练习十分的重要，大家需要保证，不看任何东西，自己也可以完整的实现出来！

## **6、项目结构图**

![1570186854191.png](https://blog.kuangstudy.com/usr/uploads/2019/10/1086489242.png)

![1570186868239.png](https://blog.kuangstudy.com/usr/uploads/2019/10/2326667495.png)

## 7、错误排查

### 1、访问出现404，排查步骤：**

1. 查看控制台输出，看一下是不是缺少了什么jar包。

2. 如果jar包存在，显示无法输出，就在IDEA的项目发布中，添加lib依赖！

   步骤：点击项目结构----->Artifacts----->点击自己的项目(ssm:war exploded)--->(点击工具栏的第一个)在WEB-INF目录下新建一个lib包----->选中lib------>点击工具栏的第三个然后选中第一个---->把里面的包全部选中点击ok---->点击Apply再ok

   ![image-20200128125126368](https://gitee.com/feigeCode/java_blog/raw/master/java/ssm%E6%95%B4%E5%90%88.assets/image-20200128125126368.png)

   ![image-20200128125237179](https://gitee.com/feigeCode/java_blog/raw/master/java/ssm%E6%95%B4%E5%90%88.assets/image-20200128125237179.png)

3. 重启Tomcat 即可解决！

### 2、其他错误

#### 1、bean不存在

 步骤：

 查看bean注入是否成功

 junit单元测试，看我们的代码是否能够查询出来

 问题不在底层，是我们spring出了问题

 springMVC整合时没有调用到service层的bean

 applicationContext.xml没有注册bean

 web.xml也绑定过配置文件要绑定大的applicationContext.xml



## 8、小结及展望

这个是同学们的第一个SSM整合案例，一定要烂熟于心！

SSM框架的重要程度是不言而喻的，学到这里，大家已经可以进行基本网站的单独开发。但是这只是增删改查的基本操作。可以说学到这里，大家才算是真正的步入了后台开发的门。也就是能找一个后台相关工作的底线。

或许很多人，工作就做这些事情，但是对于个人的提高来说，还远远不够！

| 飞哥 | 飞哥 | 飞哥 |
| ---- | ---- | ---- |
| 飞哥 | 飞哥 | 飞哥 |
| 飞哥 | 飞哥 | 飞哥 |
| 飞哥 | 飞哥 | 飞哥 |



~~~java
static class CustomAttributeProvider implements AttributeProvider {

        @Override
        public void setAttributes(Node node, String s, Map<String, String> map) {
            //改变a标签的target属性为_blank
            if(node instanceof Link) {
                map.put("target","_blank");
            }
            if (node instanceof TableBlock) {
                map.put("class","el-table__body-wrapper is-scrolling-none");
            }
            if (node instanceof TableBody) {
                map.put("class","el-table__body");
            }
            if (node instanceof TableRow) {
                map.put("class","el-table__row");
            }
            if (node instanceof TableCell) {
                map.put("class","el-table_13_column_55");
            }
        }
~~~

# feige

, 2020-03-02 07:06:53.0, 2020-03-13 06:59:47.0, admin, 10]
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20002} Parameters : [13]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20002} Types : [INTEGER]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20009, rs-50118} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20009} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20002} executed. 2.136442 millis. select distinct count(*) from comments c
        where c.blog_id=? and
        c.parent_id is null;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20002, rs-50119} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20002, rs-50119} Header: [count(*)]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20002, rs-50119} Result: [3]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20002, rs-50119} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20002} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20003} Parameters : [13, 0, 10]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20003} Types : [INTEGER, INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20003} executed. 1.266665 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id  and
        c.parent_id is null limit ?,?;;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20003, rs-50120} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20003, rs-50120} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20003, rs-50120} Result: [26, 好好, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:35.0, null]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20003, rs-50120} Result: [29, 太好了, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:13.0, null]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20003, rs-50120} Result: [32, <p>feige</p>, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 01:33:26.0, null]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20003, rs-50120} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20003} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Parameters : [13, 26]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} executed. 4.079552 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50121} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50121} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50121} Result: [27, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:56.0, sss]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50121} Result: [28, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:43:03.0, sss]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50121} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Parameters : [13, 26]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} executed. 4.659996 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50122} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50122} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50122} Result: [27, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:56.0, sss]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50122} Result: [28, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:43:03.0, sss]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50122} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Parameters : [13, 27]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} executed. 0.65511 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50123} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50123} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50123} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Parameters : [13, 27]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} executed. 0.526222 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50124} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50124} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50124} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Parameters : [13, 29]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} executed. 3.936886 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50125} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50125} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50125} Result: [30, 谢谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:43.0, sss]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50125} Result: [31, 不用谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:47:01.0, sss]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50125} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Parameters : [13, 29]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} executed. 6.53555 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50126} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50126} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50126} Result: [30, 谢谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:43.0, sss]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50126} Result: [31, 不用谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:47:01.0, sss]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50126} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Parameters : [13, 30]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} executed. 1.253777 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50127} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50127} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50127} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Parameters : [13, 30]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} executed. 0.824889 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50128} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50128} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50128} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Parameters : [13, 32]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} executed. 0.535999 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50129} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50129} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50129} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20005} Parameters : [13]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20005} Types : [INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20005} executed. 0.667999 millis. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog where id=?
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50130} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50130} Header: [id, type_name, title, content, create_time, change_time, author, view]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50130} Result: [13, mybatis, ssm框架整合, # ssm整合

## 1、数据库环境

创建一个存放书籍数据的数据库表

```
CREATE DATABASE `ssmbuild`;

USE `ssmbuild`;

DROP TABLE IF EXISTS `books`;

CREATE TABLE `books` (
  `bookId` INT PRIMARY KEY COMMENT '书id',
  `bookName` VARCHAR(100) NOT NULL COMMENT '书名',
  `bookCounts` INT(11) NOT NULL COMMENT '数量',
  ``ssmbuild``ssmbuild`` VARCHAR(200) NOT NULL COMMENT '描述'
) ENGINE=INNODB DEFAULT CHARSET=utf8

INSERT  INTO `books`(`bookId`,`bookName`,`bookCounts`,`detail`)VALUES 
(1,'Java',1,'从入门到放弃'),
(2,'MySQL',10,'从删库到跑路'),
(3,'Linux',5,'从进门到进牢');

SELECT * FROM books
```

## 2、基本环境搭建

1. 新建一Maven项目！ ssmbuild ， 添加web的支持

   ![image-20200128134359317](https://gitee.com/feigeCode/java_blog/raw/master/java/ssm%E6%95%B4%E5%90%88.assets/image-20200128134359317.png)

2. 导入相关的pom依赖！

   ```
   <dependencies>
       <!--Junit-->
       <dependency>
           <groupId>junit</groupId>
           <artifactId>junit</artifactId>
           <version>4.12</version>
       </dependency>
       <!--数据库驱动-->
       <dependency>
           <groupId>mysql</groupId>
           <artifactId>mysql-connector-java</artifactId>
           <version>5.1.47</version>
       </dependency>
       <!-- 数据库连接池 -->
       <dependency>
           <groupId>com.mchange</groupId>
           <artifactId>c3p0</artifactId>
           <version>0.9.5.2</version>
       </dependency>
   
       <!--Servlet - JSP -->
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>servlet-api</artifactId>
           <version>2.5</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet.jsp</groupId>
           <artifactId>jsp-api</artifactId>
           <version>2.2</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>jstl</artifactId>
           <version>1.2</version>
       </dependency>
   
       <!--Mybatis-->
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis</artifactId>
           <version>3.5.2</version>
       </dependency>
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis-spring</artifactId>
           <version>2.0.2</version>
       </dependency>
   
       <!--Spring-->
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-webmvc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-jdbc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->
       <dependency>
           <groupId>org.projectlombok</groupId>
           <artifactId>lombok</artifactId>
           <version>1.16.10</version>
       </dependency>
   </dependencies>
   ```

3. Maven资源过滤设置

   ```
   <build>
       <resources>
           <resource>
               <directory>src/main/java</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
           <resource>
               <directory>src/main/resources</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
       </resources>
   </build>
   ```

4. 建立基本结构和配置框架！

   - com.feige.pojo

   - com.feige.dao

   - com.feige.service

   - com.feige.controller

     在resources目录下创建

   - mybatis-config.xml

     ```
     <?xml version="1.0" encoding="UTF-8" ?>
     <!DOCTYPE configuration
             PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
             "http://mybatis.org/dtd/mybatis-3-config.dtd">
     <configuration>
     
     </configuration>
     ```

   - applicationContext.xml

     ```
     <?xml version="1.0" encoding="UTF-8"?>
     <beans xmlns="http://www.springframework.org/schema/beans"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://www.springframework.org/schema/beans
             http://www.springframework.org/schema/beans/spring-beans.xsd">
     
     </beans>
     ```

## 3、Mybatis层编写

1. 数据库配置文件 **database.properties**

   ```
   jdbc.driver=com.mysql.jdbc.Driver
   jdbc.url=jdbc:mysql://localhost:3306/ssmbuild?useSSL=true&useUnicode=true&characterEncoding=utf8
   jdbc.username=root
   jdbc.password=hufei169357
   ```

2. IDEA关联数据库

3. 编写MyBatis的核心配置文件

   ```
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE configuration
           PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-config.dtd">
   <configuration>
       
       <typeAliases>
           <package name="com.feige.pojo"/>
       </typeAliases>
       <mappers>
           <mapper resource="com/feige/dao/BookMapper.xml"/>
       </mappers>
   
   </configuration>
   ```

4. 编写数据库对应的实体类 com.feige.pojo.Books 使用lombok插件！

   ```
   package com.kuang.pojo;
   
   import lombok.AllArgsConstructor;
   import lombok.Data;
   import lombok.NoArgsConstructor;
   
   @Data
   @AllArgsConstructor
   @NoArgsConstructor
   public class Books {
       
       private int bookId;
       private String bookName;
       private int bookCounts;
       private String detail;
       
   }
   ```

5. 编写Dao层的 Mapper接口！

   ```
   package com.kuang.dao;
   
   import com.kuang.pojo.Books;
   import java.util.List;
   
   public interface BookMapper {
   
       //增加一个Book
       int addBook(Books book);
   
       //根据id删除一个Book
       int deleteBookById(int id);
   
       //更新Book
       int updateBook(Books books);
   
       //根据id查询,返回一个Book
       Books queryBookById(int id);
   
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   
   }
   ```

6. 编写接口对应的 Mapper.xml 文件。需要导入MyBatis的包；

   ```
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE mapper
           PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
   
   <mapper namespace="com.feige.dao.BooksMapper">
   
       <!--增加一个Book-->
       <insert id="addBook" parameterType="Books">
           insert into books(bookName,bookCounts,detail)
           values (#{bookName}, #{bookCounts}, #{detail})
       </insert>
   
       <!--根据id删除一个Book-->
       <delete id="deleteBookById" parameterType="int">
           delete from books where bookId=#{bookId}
       </delete>
   
       <!--更新Book-->
       <update id="updateBook" parameterType="Books">
           update books
           set bookName = #{bookName},bookCounts = #{bookCounts},detail = #{detail}
           where bookId = #{bookId}
       </update>
   
       <!--根据id查询,返回一个Book-->
       <select id="queryBookById" resultType="Books">
           select * from books
           where bookID = #{bookId}
       </select>
   
       <!--查询全部Book-->
       <select id="queryAllBook" resultType="com.feige.pojo.Books">
           SELECT * from books
       </select>
   
   </mapper>
   ```

7. 编写Service层的接口和实现类 接口：

   ```
   package com.feige.service;
   
   import com.feige.pojo.Books;
   
   import java.util.List;
   
   //BookService:底下需要去实现,调用dao层
   public interface BookService {
       //增加一个Book
       int addBook(Books book);
       //根据id删除一个Book
       int deleteBookById(int id);
       //更新Book
       int updateBook(Books books);
       //根据id查询,返回一个Book
       Books queryBookById(int id);
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   }
   ```

实现类：

```
package com.feige.service;

import com.feige.dao.BookMapper;
import com.feige.pojo.Books;
import java.util.List;

public class BookServiceImpl implements BookService {

    //调用dao层的操作，设置一个set接口，方便Spring管理
    private BookMapper bookMapper;

    public void setBookMapper(BookMapper bookMapper) {
        this.bookMapper = bookMapper;
    }
    
    public int addBook(Books book) {
        return bookMapper.addBook(book);
    }
    
    public int deleteBookById(int id) {
        return bookMapper.deleteBookById(id);
    }
    
    public int updateBook(Books books) {
        return bookMapper.updateBook(books);
    }
    
    public Books queryBookById(int id) {
        return bookMapper.queryBookById(id);
    }
    
    public List<Books> queryAllBook() {
        return bookMapper.queryAllBook();
    }
}
```

**OK，到此，底层需求操作编写完毕！**

## 4、Spring层

1. 配置**Spring整合MyBatis**，我们这里数据源使用c3p0连接池；

2. 我们去编写Spring整合Mybatis的相关的配置文件； spring-dao.xml

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans.xsd
   http://www.springframework.org/schema/context
   https://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 配置整合mybatis -->
       <!-- 1.关联数据库文件 -->
       <context:property-placeholder location="classpath:database.properties"/>
   
       <!-- 2.数据库连接池 -->
       <!--数据库连接池
   dbcp  半自动化操作  不能自动连接
   c3p0  自动化操作（自动的加载配置文件 并且设置到对象里面）
       -->
       <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
   <!-- 配置连接池属性 -->
   <property name="driverClass" value="${jdbc.driver}"/>
   <property name="jdbcUrl" value="${jdbc.url}"/>
   <property name="user" value="${jdbc.username}"/>
   <property name="password" value="${jdbc.password}"/>
   
   <!-- c3p0连接池的私有属性 -->
   <property name="maxPoolSize" value="30"/>
   <property name="minPoolSize" value="10"/>
   <!-- 关闭连接后不自动commit -->
   <property name="autoCommitOnClose" value="false"/>
   <!-- 获取连接超时时间 -->
   <property name="checkoutTimeout" value="10000"/>
   <!-- 当获取连接失败重试次数 -->
   <property name="acquireRetryAttempts" value="2"/>
       </bean>
   
       <!-- 3.配置SqlSessionFactory对象 -->
       <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource"/>
   <!-- 配置MyBaties全局配置文件:mybatis-config.xml -->
   <property name="configLocation" value="classpath:mybatis-config.xml"/>
       </bean>
   
       <!-- 4.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 -->
       <!--解释 ： https://www.cnblogs.com/jpfss/p/7799806.html-->
       <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
   <!-- 注入sqlSessionFactory -->
   <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
   <!-- 给出需要扫描Dao接口包 -->
   <property name="basePackage" value="com.feige.dao"/>
       </bean>
   
   </beans>
   ```

3. **Spring整合service层**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 扫描service相关的bean -->
       <context:component-scan base-package="com.kuang.service" />
   
       <!--BookServiceImpl注入到IOC容器中-->
       <bean id="BookServiceImpl" class="com.kuang.service.BookServiceImpl">
   <property name="bookMapper" ref="bookMapper"/>
       </bean>
   
       <!-- 配置事务管理器 -->
       <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource" />
       </bean>
   
   </beans>
   ```

Spring层搞定！再次理解一下，Spring就是一个大杂烩，一个容器！对吧！

## 5、SpringMVC层

1. **web.xml**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
            version="4.0">
   
       <!--DispatcherServlet-->
       <servlet>
           <servlet-name>DispatcherServlet</servlet-name>
           <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
           <init-param>
               <param-name>contextConfigLocation</param-name>
               <param-value>classpath:applicationContext.xml</param-value>
           </init-param>
           <load-on-startup>1</load-on-startup>
       </servlet>
       <servlet-mapping>
           <servlet-name>DispatcherServlet</servlet-name>
           <url-pattern>/</url-pattern>
       </servlet-mapping>
   
       <!--encodingFilter-->
       <filter>
           <filter-name>encodingFilter</filter-name>
           <filter-class>
               org.springframework.web.filter.CharacterEncodingFilter
           </filter-class>
           <init-param>
               <param-name>encoding</param-name>
               <param-value>utf-8</param-value>
           </init-param>
       </filter>
       <filter-mapping>
           <filter-name>encodingFilter</filter-name>
           <url-pattern>/*</url-pattern>
       </filter-mapping>
       
       <!--Session过期时间-->
       <session-config>
           <session-timeout>15</session-timeout>
       </session-config>
       
   </web-app>
   ```

2. **spring-mvc.xml**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xmlns:mvc="http://www.springframework.org/schema/mvc"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       https://www.springframework.org/schema/mvc/spring-mvc.xsd">
   
       <!-- 配置SpringMVC -->
       <!-- 1.开启SpringMVC注解驱动 -->
       <mvc:annotation-driven>
           <mvc:message-converters register-defaults="true">
               <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                   <constructor-arg value="UTF-8"/>
               </bean>
               <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                   <property name="objectMapper">
                       <bean class="org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean">
                           <property name="failOnEmptyBeans" value="false"/>
                       </bean>
                   </property>
               </bean>
           </mvc:message-converters>
       </mvc:annotation-driven>
       <!--解决跨域问题-->
       <mvc:cors>
       <mvc:mapping path="/**"
                    allowed-origins="http://127.0.0.1:8090,http://localhost:8090"
                    allowed-methods="POST,GET, OPTIONS,DELETE,PUT"
                    allowed-headers="Content-Type,ContentType,Access-Control-Allow-Headers, Authorization, X-Requested-With"
                    allow-credentials="true"/>
       </mvc:cors>
       <!-- 2.静态资源默认servlet配置-->
       <mvc:default-servlet-handler/>
   
       <!-- 3.配置jsp 显示ViewResolver视图解析器 -->
       <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
           <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
           <property name="prefix" value="/WEB-INF/jsp/" />
           <property name="suffix" value=".jsp" />
       </bean>
   
       <!-- 4.扫描web相关的bean -->
       <context:component-scan base-package="com.feige.controller" />
   
   </beans>
   ```

3. **Spring配置整合文件，applicationContext.xml**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd">
   
       <import resource="spring-dao.xml"/>
       <import resource="spring-service.xml"/>
       <import resource="spring-mvc.xml"/>
       
   </beans>
   ```

**配置文件，暂时结束！Controller 和 视图层编写**

1. BookController 类编写 ， 方法一：查询全部书籍

   ```
   @Controller
   @RequestMapping("/book")
   public class BookController {
   
       @Autowired
       @Qualifier("BookServiceImpl")
       private BookService bookService;
   
       @RequestMapping("/allBook")
       public String list(Model model) {
           List<Books> list = bookService.queryAllBook();
           model.addAttribute("list", list);
           return "allBook";
       }
   }
   ```

2. 编写首页 **index.jsp**

   ```
   <%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" %>
   <!DOCTYPE HTML>
   <html>
   <head>
       <title>首页</title>
       <style type="text/css">
           a {
               text-decoration: none;
               color: black;
               font-size: 18px;
           }
           h3 {
               width: 180px;
               height: 38px;
               margin: 100px auto;
               text-align: center;
               line-height: 38px;
               background: deepskyblue;
               border-radius: 4px;
           }
       </style>
   </head>
   <body>
   
   <h3>
       <a href="${pageContext.request.contextPath}/book/allBook">点击进入列表页</a>
   </h3>
   </body>
   </html>
   ```

3. 书籍列表页面 **allbook.jsp**

   ```
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>书籍列表</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>书籍列表 —— 显示所有书籍</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <div class="row">
           <div class="col-md-4 column">
               <a class="btn btn-primary" href="${pageContext.request.contextPath}/book/toAddBook">新增</a>
           </div>
       </div>
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <table class="table table-hover table-striped">
                   <thead>
                   <tr>
                       <th>书籍编号</th>
                       <th>书籍名字</th>
                       <th>书籍数量</th>
                       <th>书籍详情</th>
                       <th>操作</th>
                   </tr>
                   </thead>
   
                   <tbody>
                   <c:forEach var="book" items="${requestScope.get('list')}">
                       <tr>
                           <td>${book.getBookId()}</td>
                           <td>${book.getBookName()}</td>
                           <td>${book.getBookCounts()}</td>
                           <td>${book.getDetail()}</td>
                           <td>
                               <a href="${pageContext.request.contextPath}/book/toUpdateBook?id=${book.getBookId()}">更改</a> |
                               <a href="${pageContext.request.contextPath}/book/del/${book.getBookId()}">删除</a>
                           </td>
                       </tr>
                   </c:forEach>
                   </tbody>
               </table>
           </div>
       </div>
   </div>
   ```

4. BookController 类编写 ， 方法二：添加书籍

   ```
   @RequestMapping("/toAddBook")
   public String toAddPaper() {
       return "addBook";
   }
   
   @RequestMapping("/addBook")
   public String addPaper(Books books) {
       System.out.println(books);
       bookService.addBook(books);
       return "redirect:/book/allBook";
   }
   ```

5. 添加书籍页面：**addBook.jsp**

   ```
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   
   <html>
   <head>
       <title>新增书籍</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>新增书籍</small>
                   </h1>
               </div>
           </div>
       </div>
       <form action="${pageContext.request.contextPath}/book/addBook" method="post">
           书籍名称：<input type="text" name="bookName"><br><br><br>
           书籍数量：<input type="text" name="bookCounts"><br><br><br>
           书籍详情：<input type="text" name="detail"><br><br><br>
           <input type="submit" value="添加">
       </form>
   
   </div>
   ```

6. BookController 类编写 ， 方法三：修改书籍

   ```
   @RequestMapping("/toUpdateBook")
   public String toUpdateBook(Model model, int id) {
       Books books = bookService.queryBookById(id);
       System.out.println(books);
       model.addAttribute("book",books );
       return "updateBook";
   }
   
   @RequestMapping("/updateBook")
   public String updateBook(Model model, Books book) {
       bookService.updateBook(book);
       Books books = bookService.queryBookById(book.getBookID());
       model.addAttribute("books", books);
       return "redirect:/book/allBook";
   }
   ```

7. 修改书籍页面 **updateBook.jsp**

   ```
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>修改信息</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>修改信息</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <form action="${pageContext.request.contextPath}/book/updateBook" method="post">
           <input type="hidden" name="bookID" value="${book.getBookId()}"/>
           书籍名称：<input type="text" name="bookName" value="${book.getBookName()}"/>
           书籍数量：<input type="text" name="bookCounts" value="${book.getBookCounts()}"/>
           书籍详情：<input type="text" name="detail" value="${book.getDetail() }"/>
           <input type="submit" value="提交"/>
       </form>
   
   </div>
   ```

8. BookController 类编写 ， 方法四：删除书籍

   ```
   @RequestMapping("/del/{bookId}")
   public String deleteBook(@PathVariable("bookId") int id) {
       bookService.deleteBookById(id);
       return "redirect:/book/allBook";
   }
   ```

**配置Tomcat，进行运行！**

到目前为止，这个SSM项目整合已经完全的OK了，可以直接运行进行测试！这个练习十分的重要，大家需要保证，不看任何东西，自己也可以完整的实现出来！

## **6、项目结构图**

![1570186854191.png](https://blog.kuangstudy.com/usr/uploads/2019/10/1086489242.png)

![1570186868239.png](https://blog.kuangstudy.com/usr/uploads/2019/10/2326667495.png)

## 7、错误排查

### 1、访问出现404，排查步骤：**

1. 查看控制台输出，看一下是不是缺少了什么jar包。

2. 如果jar包存在，显示无法输出，就在IDEA的项目发布中，添加lib依赖！

   步骤：点击项目结构----->Artifacts----->点击自己的项目(ssm:war exploded)--->(点击工具栏的第一个)在WEB-INF目录下新建一个lib包----->选中lib------>点击工具栏的第三个然后选中第一个---->把里面的包全部选中点击ok---->点击Apply再ok

   ![image-20200128125126368](https://gitee.com/feigeCode/java_blog/raw/master/java/ssm%E6%95%B4%E5%90%88.assets/image-20200128125126368.png)

   ![image-20200128125237179](https://gitee.com/feigeCode/java_blog/raw/master/java/ssm%E6%95%B4%E5%90%88.assets/image-20200128125237179.png)

3. 重启Tomcat 即可解决！

### 2、其他错误

#### 1、bean不存在

 步骤：

 查看bean注入是否成功

 junit单元测试，看我们的代码是否能够查询出来

 问题不在底层，是我们spring出了问题

 springMVC整合时没有调用到service层的bean

 applicationContext.xml没有注册bean

 web.xml也绑定过配置文件要绑定大的applicationContext.xml



## 8、小结及展望

这个是同学们的第一个SSM整合案例，一定要烂熟于心！

SSM框架的重要程度是不言而喻的，学到这里，大家已经可以进行基本网站的单独开发。但是这只是增删改查的基本操作。可以说学到这里，大家才算是真正的步入了后台开发的门。也就是能找一个后台相关工作的底线。

或许很多人，工作就做这些事情，但是对于个人的提高来说，还远远不够！

| 飞哥 | 飞哥 | 飞哥 |
| ---- | ---- | ---- |
| 飞哥 | 飞哥 | 飞哥 |
| 飞哥 | 飞哥 | 飞哥 |
| 飞哥 | 飞哥 | 飞哥 |



~~~java
static class CustomAttributeProvider implements AttributeProvider {

        @Override
        public void setAttributes(Node node, String s, Map<String, String> map) {
            //改变a标签的target属性为_blank
            if(node instanceof Link) {
                map.put("target","_blank");
            }
            if (node instanceof TableBlock) {
                map.put("class","el-table__body-wrapper is-scrolling-none");
            }
            if (node instanceof TableBody) {
                map.put("class","el-table__body");
            }
            if (node instanceof TableRow) {
                map.put("class","el-table__row");
            }
            if (node instanceof TableCell) {
                map.put("class","el-table_13_column_55");
            }
        }
~~~

# feige

, 2020-03-02 07:06:53.0, 2020-03-13 06:59:47.0, admin, 10]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50130} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20005} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20005} Parameters : [13]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20005} Types : [INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20005} executed. 0.860444 millis. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog where id=?
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50131} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50131} Header: [id, type_name, title, content, create_time, change_time, author, view]
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20006} Parameters : [13]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20006} Types : [INTEGER]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50131} Result: [13, mybatis, ssm框架整合, # ssm整合

## 1、数据库环境

创建一个存放书籍数据的数据库表

```
CREATE DATABASE `ssmbuild`;

USE `ssmbuild`;

DROP TABLE IF EXISTS `books`;

CREATE TABLE `books` (
  `bookId` INT PRIMARY KEY COMMENT '书id',
  `bookName` VARCHAR(100) NOT NULL COMMENT '书名',
  `bookCounts` INT(11) NOT NULL COMMENT '数量',
  ``ssmbuild``ssmbuild`` VARCHAR(200) NOT NULL COMMENT '描述'
) ENGINE=INNODB DEFAULT CHARSET=utf8

INSERT  INTO `books`(`bookId`,`bookName`,`bookCounts`,`detail`)VALUES 
(1,'Java',1,'从入门到放弃'),
(2,'MySQL',10,'从删库到跑路'),
(3,'Linux',5,'从进门到进牢');

SELECT * FROM books
```

## 2、基本环境搭建

1. 新建一Maven项目！ ssmbuild ， 添加web的支持

   ![image-20200128134359317](https://gitee.com/feigeCode/java_blog/raw/master/java/ssm%E6%95%B4%E5%90%88.assets/image-20200128134359317.png)

2. 导入相关的pom依赖！

   ```
   <dependencies>
       <!--Junit-->
       <dependency>
           <groupId>junit</groupId>
           <artifactId>junit</artifactId>
           <version>4.12</version>
       </dependency>
       <!--数据库驱动-->
       <dependency>
           <groupId>mysql</groupId>
           <artifactId>mysql-connector-java</artifactId>
           <version>5.1.47</version>
       </dependency>
       <!-- 数据库连接池 -->
       <dependency>
           <groupId>com.mchange</groupId>
           <artifactId>c3p0</artifactId>
           <version>0.9.5.2</version>
       </dependency>
   
       <!--Servlet - JSP -->
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>servlet-api</artifactId>
           <version>2.5</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet.jsp</groupId>
           <artifactId>jsp-api</artifactId>
           <version>2.2</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>jstl</artifactId>
           <version>1.2</version>
       </dependency>
   
       <!--Mybatis-->
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis</artifactId>
           <version>3.5.2</version>
       </dependency>
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis-spring</artifactId>
           <version>2.0.2</version>
       </dependency>
   
       <!--Spring-->
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-webmvc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-jdbc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->
       <dependency>
           <groupId>org.projectlombok</groupId>
           <artifactId>lombok</artifactId>
           <version>1.16.10</version>
       </dependency>
   </dependencies>
   ```

3. Maven资源过滤设置

   ```
   <build>
       <resources>
           <resource>
               <directory>src/main/java</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
           <resource>
               <directory>src/main/resources</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
       </resources>
   </build>
   ```

4. 建立基本结构和配置框架！

   - com.feige.pojo

   - com.feige.dao

   - com.feige.service

   - com.feige.controller

     在resources目录下创建

   - mybatis-config.xml

     ```
     <?xml version="1.0" encoding="UTF-8" ?>
     <!DOCTYPE configuration
             PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
             "http://mybatis.org/dtd/mybatis-3-config.dtd">
     <configuration>
     
     </configuration>
     ```

   - applicationContext.xml

     ```
     <?xml version="1.0" encoding="UTF-8"?>
     <beans xmlns="http://www.springframework.org/schema/beans"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://www.springframework.org/schema/beans
             http://www.springframework.org/schema/beans/spring-beans.xsd">
     
     </beans>
     ```

## 3、Mybatis层编写

1. 数据库配置文件 **database.properties**

   ```
   jdbc.driver=com.mysql.jdbc.Driver
   jdbc.url=jdbc:mysql://localhost:3306/ssmbuild?useSSL=true&useUnicode=true&characterEncoding=utf8
   jdbc.username=root
   jdbc.password=hufei169357
   ```

2. IDEA关联数据库

3. 编写MyBatis的核心配置文件

   ```
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE configuration
           PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-config.dtd">
   <configuration>
       
       <typeAliases>
           <package name="com.feige.pojo"/>
       </typeAliases>
       <mappers>
           <mapper resource="com/feige/dao/BookMapper.xml"/>
       </mappers>
   
   </configuration>
   ```

4. 编写数据库对应的实体类 com.feige.pojo.Books 使用lombok插件！

   ```
   package com.kuang.pojo;
   
   import lombok.AllArgsConstructor;
   import lombok.Data;
   import lombok.NoArgsConstructor;
   
   @Data
   @AllArgsConstructor
   @NoArgsConstructor
   public class Books {
       
       private int bookId;
       private String bookName;
       private int bookCounts;
       private String detail;
       
   }
   ```

5. 编写Dao层的 Mapper接口！

   ```
   package com.kuang.dao;
   
   import com.kuang.pojo.Books;
   import java.util.List;
   
   public interface BookMapper {
   
       //增加一个Book
       int addBook(Books book);
   
       //根据id删除一个Book
       int deleteBookById(int id);
   
       //更新Book
       int updateBook(Books books);
   
       //根据id查询,返回一个Book
       Books queryBookById(int id);
   
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   
   }
   ```

6. 编写接口对应的 Mapper.xml 文件。需要导入MyBatis的包；

   ```
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE mapper
           PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
   
   <mapper namespace="com.feige.dao.BooksMapper">
   
       <!--增加一个Book-->
       <insert id="addBook" parameterType="Books">
           insert into books(bookName,bookCounts,detail)
           values (#{bookName}, #{bookCounts}, #{detail})
       </insert>
   
       <!--根据id删除一个Book-->
       <delete id="deleteBookById" parameterType="int">
           delete from books where bookId=#{bookId}
       </delete>
   
       <!--更新Book-->
       <update id="updateBook" parameterType="Books">
           update books
           set bookName = #{bookName},bookCounts = #{bookCounts},detail = #{detail}
           where bookId = #{bookId}
       </update>
   
       <!--根据id查询,返回一个Book-->
       <select id="queryBookById" resultType="Books">
           select * from books
           where bookID = #{bookId}
       </select>
   
       <!--查询全部Book-->
       <select id="queryAllBook" resultType="com.feige.pojo.Books">
           SELECT * from books
       </select>
   
   </mapper>
   ```

7. 编写Service层的接口和实现类 接口：

   ```
   package com.feige.service;
   
   import com.feige.pojo.Books;
   
   import java.util.List;
   
   //BookService:底下需要去实现,调用dao层
   public interface BookService {
       //增加一个Book
       int addBook(Books book);
       //根据id删除一个Book
       int deleteBookById(int id);
       //更新Book
       int updateBook(Books books);
       //根据id查询,返回一个Book
       Books queryBookById(int id);
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   }
   ```

实现类：

```
package com.feige.service;

import com.feige.dao.BookMapper;
import com.feige.pojo.Books;
import java.util.List;

public class BookServiceImpl implements BookService {

    //调用dao层的操作，设置一个set接口，方便Spring管理
    private BookMapper bookMapper;

    public void setBookMapper(BookMapper bookMapper) {
        this.bookMapper = bookMapper;
    }
    
    public int addBook(Books book) {
        return bookMapper.addBook(book);
    }
    
    public int deleteBookById(int id) {
        return bookMapper.deleteBookById(id);
    }
    
    public int updateBook(Books books) {
        return bookMapper.updateBook(books);
    }
    
    public Books queryBookById(int id) {
        return bookMapper.queryBookById(id);
    }
    
    public List<Books> queryAllBook() {
        return bookMapper.queryAllBook();
    }
}
```

**OK，到此，底层需求操作编写完毕！**

## 4、Spring层

1. 配置**Spring整合MyBatis**，我们这里数据源使用c3p0连接池；

2. 我们去编写Spring整合Mybatis的相关的配置文件； spring-dao.xml

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans.xsd
   http://www.springframework.org/schema/context
   https://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 配置整合mybatis -->
       <!-- 1.关联数据库文件 -->
       <context:property-placeholder location="classpath:database.properties"/>
   
       <!-- 2.数据库连接池 -->
       <!--数据库连接池
   dbcp  半自动化操作  不能自动连接
   c3p0  自动化操作（自动的加载配置文件 并且设置到对象里面）
       -->
       <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
   <!-- 配置连接池属性 -->
   <property name="driverClass" value="${jdbc.driver}"/>
   <property name="jdbcUrl" value="${jdbc.url}"/>
   <property name="user" value="${jdbc.username}"/>
   <property name="password" value="${jdbc.password}"/>
   
   <!-- c3p0连接池的私有属性 -->
   <property name="maxPoolSize" value="30"/>
   <property name="minPoolSize" value="10"/>
   <!-- 关闭连接后不自动commit -->
   <property name="autoCommitOnClose" value="false"/>
   <!-- 获取连接超时时间 -->
   <property name="checkoutTimeout" value="10000"/>
   <!-- 当获取连接失败重试次数 -->
   <property name="acquireRetryAttempts" value="2"/>
       </bean>
   
       <!-- 3.配置SqlSessionFactory对象 -->
       <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource"/>
   <!-- 配置MyBaties全局配置文件:mybatis-config.xml -->
   <property name="configLocation" value="classpath:mybatis-config.xml"/>
       </bean>
   
       <!-- 4.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 -->
       <!--解释 ： https://www.cnblogs.com/jpfss/p/7799806.html-->
       <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
   <!-- 注入sqlSessionFactory -->
   <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
   <!-- 给出需要扫描Dao接口包 -->
   <property name="basePackage" value="com.feige.dao"/>
       </bean>
   
   </beans>
   ```

3. **Spring整合service层**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 扫描service相关的bean -->
       <context:component-scan base-package="com.kuang.service" />
   
       <!--BookServiceImpl注入到IOC容器中-->
       <bean id="BookServiceImpl" class="com.kuang.service.BookServiceImpl">
   <property name="bookMapper" ref="bookMapper"/>
       </bean>
   
       <!-- 配置事务管理器 -->
       <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource" />
       </bean>
   
   </beans>
   ```

Spring层搞定！再次理解一下，Spring就是一个大杂烩，一个容器！对吧！

## 5、SpringMVC层

1. **web.xml**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
            version="4.0">
   
       <!--DispatcherServlet-->
       <servlet>
           <servlet-name>DispatcherServlet</servlet-name>
           <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
           <init-param>
               <param-name>contextConfigLocation</param-name>
               <param-value>classpath:applicationContext.xml</param-value>
           </init-param>
           <load-on-startup>1</load-on-startup>
       </servlet>
       <servlet-mapping>
           <servlet-name>DispatcherServlet</servlet-name>
           <url-pattern>/</url-pattern>
       </servlet-mapping>
   
       <!--encodingFilter-->
       <filter>
           <filter-name>encodingFilter</filter-name>
           <filter-class>
               org.springframework.web.filter.CharacterEncodingFilter
           </filter-class>
           <init-param>
               <param-name>encoding</param-name>
               <param-value>utf-8</param-value>
           </init-param>
       </filter>
       <filter-mapping>
           <filter-name>encodingFilter</filter-name>
           <url-pattern>/*</url-pattern>
       </filter-mapping>
       
       <!--Session过期时间-->
       <session-config>
           <session-timeout>15</session-timeout>
       </session-config>
       
   </web-app>
   ```

2. **spring-mvc.xml**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xmlns:mvc="http://www.springframework.org/schema/mvc"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       https://www.springframework.org/schema/mvc/spring-mvc.xsd">
   
       <!-- 配置SpringMVC -->
       <!-- 1.开启SpringMVC注解驱动 -->
       <mvc:annotation-driven>
           <mvc:message-converters register-defaults="true">
               <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                   <constructor-arg value="UTF-8"/>
               </bean>
               <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                   <property name="objectMapper">
                       <bean class="org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean">
                           <property name="failOnEmptyBeans" value="false"/>
                       </bean>
                   </property>
               </bean>
           </mvc:message-converters>
       </mvc:annotation-driven>
       <!--解决跨域问题-->
       <mvc:cors>
       <mvc:mapping path="/**"
                    allowed-origins="http://127.0.0.1:8090,http://localhost:8090"
                    allowed-methods="POST,GET, OPTIONS,DELETE,PUT"
                    allowed-headers="Content-Type,ContentType,Access-Control-Allow-Headers, Authorization, X-Requested-With"
                    allow-credentials="true"/>
       </mvc:cors>
       <!-- 2.静态资源默认servlet配置-->
       <mvc:default-servlet-handler/>
   
       <!-- 3.配置jsp 显示ViewResolver视图解析器 -->
       <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
           <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
           <property name="prefix" value="/WEB-INF/jsp/" />
           <property name="suffix" value=".jsp" />
       </bean>
   
       <!-- 4.扫描web相关的bean -->
       <context:component-scan base-package="com.feige.controller" />
   
   </beans>
   ```

3. **Spring配置整合文件，applicationContext.xml**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd">
   
       <import resource="spring-dao.xml"/>
       <import resource="spring-service.xml"/>
       <import resource="spring-mvc.xml"/>
       
   </beans>
   ```

**配置文件，暂时结束！Controller 和 视图层编写**

1. BookController 类编写 ， 方法一：查询全部书籍

   ```
   @Controller
   @RequestMapping("/book")
   public class BookController {
   
       @Autowired
       @Qualifier("BookServiceImpl")
       private BookService bookService;
   
       @RequestMapping("/allBook")
       public String list(Model model) {
           List<Books> list = bookService.queryAllBook();
           model.addAttribute("list", list);
           return "allBook";
       }
   }
   ```

2. 编写首页 **index.jsp**

   ```
   <%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" %>
   <!DOCTYPE HTML>
   <html>
   <head>
       <title>首页</title>
       <style type="text/css">
           a {
               text-decoration: none;
               color: black;
               font-size: 18px;
           }
           h3 {
               width: 180px;
               height: 38px;
               margin: 100px auto;
               text-align: center;
               line-height: 38px;
               background: deepskyblue;
               border-radius: 4px;
           }
       </style>
   </head>
   <body>
   
   <h3>
       <a href="${pageContext.request.contextPath}/book/allBook">点击进入列表页</a>
   </h3>
   </body>
   </html>
   ```

3. 书籍列表页面 **allbook.jsp**

   ```
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>书籍列表</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>书籍列表 —— 显示所有书籍</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <div class="row">
           <div class="col-md-4 column">
               <a class="btn btn-primary" href="${pageContext.request.contextPath}/book/toAddBook">新增</a>
           </div>
       </div>
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <table class="table table-hover table-striped">
                   <thead>
                   <tr>
                       <th>书籍编号</th>
                       <th>书籍名字</th>
                       <th>书籍数量</th>
                       <th>书籍详情</th>
                       <th>操作</th>
                   </tr>
                   </thead>
   
                   <tbody>
                   <c:forEach var="book" items="${requestScope.get('list')}">
                       <tr>
                           <td>${book.getBookId()}</td>
                           <td>${book.getBookName()}</td>
                           <td>${book.getBookCounts()}</td>
                           <td>${book.getDetail()}</td>
                           <td>
                               <a href="${pageContext.request.contextPath}/book/toUpdateBook?id=${book.getBookId()}">更改</a> |
                               <a href="${pageContext.request.contextPath}/book/del/${book.getBookId()}">删除</a>
                           </td>
                       </tr>
                   </c:forEach>
                   </tbody>
               </table>
           </div>
       </div>
   </div>
   ```

4. BookController 类编写 ， 方法二：添加书籍

   ```
   @RequestMapping("/toAddBook")
   public String toAddPaper() {
       return "addBook";
   }
   
   @RequestMapping("/addBook")
   public String addPaper(Books books) {
       System.out.println(books);
       bookService.addBook(books);
       return "redirect:/book/allBook";
   }
   ```

5. 添加书籍页面：**addBook.jsp**

   ```
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   
   <html>
   <head>
       <title>新增书籍</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>新增书籍</small>
                   </h1>
               </div>
           </div>
       </div>
       <form action="${pageContext.request.contextPath}/book/addBook" method="post">
           书籍名称：<input type="text" name="bookName"><br><br><br>
           书籍数量：<input type="text" name="bookCounts"><br><br><br>
           书籍详情：<input type="text" name="detail"><br><br><br>
           <input type="submit" value="添加">
       </form>
   
   </div>
   ```

6. BookController 类编写 ， 方法三：修改书籍

   ```
   @RequestMapping("/toUpdateBook")
   public String toUpdateBook(Model model, int id) {
       Books books = bookService.queryBookById(id);
       System.out.println(books);
       model.addAttribute("book",books );
       return "updateBook";
   }
   
   @RequestMapping("/updateBook")
   public String updateBook(Model model, Books book) {
       bookService.updateBook(book);
       Books books = bookService.queryBookById(book.getBookID());
       model.addAttribute("books", books);
       return "redirect:/book/allBook";
   }
   ```

7. 修改书籍页面 **updateBook.jsp**

   ```
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>修改信息</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>修改信息</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <form action="${pageContext.request.contextPath}/book/updateBook" method="post">
           <input type="hidden" name="bookID" value="${book.getBookId()}"/>
           书籍名称：<input type="text" name="bookName" value="${book.getBookName()}"/>
           书籍数量：<input type="text" name="bookCounts" value="${book.getBookCounts()}"/>
           书籍详情：<input type="text" name="detail" value="${book.getDetail() }"/>
           <input type="submit" value="提交"/>
       </form>
   
   </div>
   ```

8. BookController 类编写 ， 方法四：删除书籍

   ```
   @RequestMapping("/del/{bookId}")
   public String deleteBook(@PathVariable("bookId") int id) {
       bookService.deleteBookById(id);
       return "redirect:/book/allBook";
   }
   ```

**配置Tomcat，进行运行！**

到目前为止，这个SSM项目整合已经完全的OK了，可以直接运行进行测试！这个练习十分的重要，大家需要保证，不看任何东西，自己也可以完整的实现出来！

## **6、项目结构图**

![1570186854191.png](https://blog.kuangstudy.com/usr/uploads/2019/10/1086489242.png)

![1570186868239.png](https://blog.kuangstudy.com/usr/uploads/2019/10/2326667495.png)

## 7、错误排查

### 1、访问出现404，排查步骤：**

1. 查看控制台输出，看一下是不是缺少了什么jar包。

2. 如果jar包存在，显示无法输出，就在IDEA的项目发布中，添加lib依赖！

   步骤：点击项目结构----->Artifacts----->点击自己的项目(ssm:war exploded)--->(点击工具栏的第一个)在WEB-INF目录下新建一个lib包----->选中lib------>点击工具栏的第三个然后选中第一个---->把里面的包全部选中点击ok---->点击Apply再ok

   ![image-20200128125126368](https://gitee.com/feigeCode/java_blog/raw/master/java/ssm%E6%95%B4%E5%90%88.assets/image-20200128125126368.png)

   ![image-20200128125237179](https://gitee.com/feigeCode/java_blog/raw/master/java/ssm%E6%95%B4%E5%90%88.assets/image-20200128125237179.png)

3. 重启Tomcat 即可解决！

### 2、其他错误

#### 1、bean不存在

 步骤：

 查看bean注入是否成功

 junit单元测试，看我们的代码是否能够查询出来

 问题不在底层，是我们spring出了问题

 springMVC整合时没有调用到service层的bean

 applicationContext.xml没有注册bean

 web.xml也绑定过配置文件要绑定大的applicationContext.xml



## 8、小结及展望

这个是同学们的第一个SSM整合案例，一定要烂熟于心！

SSM框架的重要程度是不言而喻的，学到这里，大家已经可以进行基本网站的单独开发。但是这只是增删改查的基本操作。可以说学到这里，大家才算是真正的步入了后台开发的门。也就是能找一个后台相关工作的底线。

或许很多人，工作就做这些事情，但是对于个人的提高来说，还远远不够！

| 飞哥 | 飞哥 | 飞哥 |
| ---- | ---- | ---- |
| 飞哥 | 飞哥 | 飞哥 |
| 飞哥 | 飞哥 | 飞哥 |
| 飞哥 | 飞哥 | 飞哥 |



~~~java
static class CustomAttributeProvider implements AttributeProvider {

        @Override
        public void setAttributes(Node node, String s, Map<String, String> map) {
            //改变a标签的target属性为_blank
            if(node instanceof Link) {
                map.put("target","_blank");
            }
            if (node instanceof TableBlock) {
                map.put("class","el-table__body-wrapper is-scrolling-none");
            }
            if (node instanceof TableBody) {
                map.put("class","el-table__body");
            }
            if (node instanceof TableRow) {
                map.put("class","el-table__row");
            }
            if (node instanceof TableCell) {
                map.put("class","el-table_13_column_55");
            }
        }
~~~

# feige

, 2020-03-02 07:06:53.0, 2020-03-13 06:59:47.0, admin, 10]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20006} executed. 3.441775 millis. select distinct count(*) from comments c
        where c.blog_id=? and
        c.parent_id is null;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20006, rs-50132} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20006, rs-50132} Header: [count(*)]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20006, rs-50132} Result: [3]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20006, rs-50132} closed
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50131} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20006} clearParameters. 
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20005} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20003} Parameters : [13, 0, 10]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20003} Types : [INTEGER, INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20003} executed. 10.451991 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id  and
        c.parent_id is null limit ?,?;;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20003, rs-50133} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20003, rs-50133} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20003, rs-50133} Result: [26, 好好, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:35.0, null]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20003, rs-50133} Result: [29, 太好了, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:13.0, null]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20003, rs-50133} Result: [32, <p>feige</p>, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 01:33:26.0, null]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20003, rs-50133} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20003} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Parameters : [13, 26]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} executed. 3.280886 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50134} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50134} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50134} Result: [27, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:56.0, sss]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50134} Result: [28, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:43:03.0, sss]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50134} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Parameters : [13, 26]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} executed. 3.339997 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50135} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50135} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50135} Result: [27, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:56.0, sss]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50135} Result: [28, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:43:03.0, sss]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50135} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Parameters : [13, 27]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} executed. 0.632444 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50136} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50136} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50136} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Parameters : [13, 27]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} executed. 0.79111 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50137} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50137} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50137} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Parameters : [13, 29]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} executed. 6.642216 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50138} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50138} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50138} Result: [30, 谢谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:43.0, sss]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50138} Result: [31, 不用谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:47:01.0, sss]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50138} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Parameters : [13, 29]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} executed. 3.583553 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50139} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50139} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50139} Result: [30, 谢谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:43.0, sss]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50139} Result: [31, 不用谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:47:01.0, sss]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50139} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Parameters : [13, 30]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} executed. 1.430221 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50140} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50140} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50140} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Parameters : [13, 30]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} executed. 1.943554 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50141} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50141} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50141} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Parameters : [13, 32]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} executed. 0.884889 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50142} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50142} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50142} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20005} Parameters : [13]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20005} Types : [INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20005} executed. 2.656886 millis. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog where id=?
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50143} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50143} Header: [id, type_name, title, content, create_time, change_time, author, view]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50143} Result: [13, mybatis, ssm框架整合, # ssm整合

## 1、数据库环境

创建一个存放书籍数据的数据库表

```
CREATE DATABASE `ssmbuild`;

USE `ssmbuild`;

DROP TABLE IF EXISTS `books`;

CREATE TABLE `books` (
  `bookId` INT PRIMARY KEY COMMENT '书id',
  `bookName` VARCHAR(100) NOT NULL COMMENT '书名',
  `bookCounts` INT(11) NOT NULL COMMENT '数量',
  ``ssmbuild``ssmbuild`` VARCHAR(200) NOT NULL COMMENT '描述'
) ENGINE=INNODB DEFAULT CHARSET=utf8

INSERT  INTO `books`(`bookId`,`bookName`,`bookCounts`,`detail`)VALUES 
(1,'Java',1,'从入门到放弃'),
(2,'MySQL',10,'从删库到跑路'),
(3,'Linux',5,'从进门到进牢');

SELECT * FROM books
```

## 2、基本环境搭建

1. 新建一Maven项目！ ssmbuild ， 添加web的支持

   ![image-20200128134359317](https://gitee.com/feigeCode/java_blog/raw/master/java/ssm%E6%95%B4%E5%90%88.assets/image-20200128134359317.png)

2. 导入相关的pom依赖！

   ```
   <dependencies>
       <!--Junit-->
       <dependency>
           <groupId>junit</groupId>
           <artifactId>junit</artifactId>
           <version>4.12</version>
       </dependency>
       <!--数据库驱动-->
       <dependency>
           <groupId>mysql</groupId>
           <artifactId>mysql-connector-java</artifactId>
           <version>5.1.47</version>
       </dependency>
       <!-- 数据库连接池 -->
       <dependency>
           <groupId>com.mchange</groupId>
           <artifactId>c3p0</artifactId>
           <version>0.9.5.2</version>
       </dependency>
   
       <!--Servlet - JSP -->
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>servlet-api</artifactId>
           <version>2.5</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet.jsp</groupId>
           <artifactId>jsp-api</artifactId>
           <version>2.2</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>jstl</artifactId>
           <version>1.2</version>
       </dependency>
   
       <!--Mybatis-->
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis</artifactId>
           <version>3.5.2</version>
       </dependency>
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis-spring</artifactId>
           <version>2.0.2</version>
       </dependency>
   
       <!--Spring-->
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-webmvc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-jdbc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->
       <dependency>
           <groupId>org.projectlombok</groupId>
           <artifactId>lombok</artifactId>
           <version>1.16.10</version>
       </dependency>
   </dependencies>
   ```

3. Maven资源过滤设置

   ```
   <build>
       <resources>
           <resource>
               <directory>src/main/java</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
           <resource>
               <directory>src/main/resources</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
       </resources>
   </build>
   ```

4. 建立基本结构和配置框架！

   - com.feige.pojo

   - com.feige.dao

   - com.feige.service

   - com.feige.controller

     在resources目录下创建

   - mybatis-config.xml

     ```
     <?xml version="1.0" encoding="UTF-8" ?>
     <!DOCTYPE configuration
             PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
             "http://mybatis.org/dtd/mybatis-3-config.dtd">
     <configuration>
     
     </configuration>
     ```

   - applicationContext.xml

     ```
     <?xml version="1.0" encoding="UTF-8"?>
     <beans xmlns="http://www.springframework.org/schema/beans"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://www.springframework.org/schema/beans
             http://www.springframework.org/schema/beans/spring-beans.xsd">
     
     </beans>
     ```

## 3、Mybatis层编写

1. 数据库配置文件 **database.properties**

   ```
   jdbc.driver=com.mysql.jdbc.Driver
   jdbc.url=jdbc:mysql://localhost:3306/ssmbuild?useSSL=true&useUnicode=true&characterEncoding=utf8
   jdbc.username=root
   jdbc.password=hufei169357
   ```

2. IDEA关联数据库

3. 编写MyBatis的核心配置文件

   ```
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE configuration
           PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-config.dtd">
   <configuration>
       
       <typeAliases>
           <package name="com.feige.pojo"/>
       </typeAliases>
       <mappers>
           <mapper resource="com/feige/dao/BookMapper.xml"/>
       </mappers>
   
   </configuration>
   ```

4. 编写数据库对应的实体类 com.feige.pojo.Books 使用lombok插件！

   ```
   package com.kuang.pojo;
   
   import lombok.AllArgsConstructor;
   import lombok.Data;
   import lombok.NoArgsConstructor;
   
   @Data
   @AllArgsConstructor
   @NoArgsConstructor
   public class Books {
       
       private int bookId;
       private String bookName;
       private int bookCounts;
       private String detail;
       
   }
   ```

5. 编写Dao层的 Mapper接口！

   ```
   package com.kuang.dao;
   
   import com.kuang.pojo.Books;
   import java.util.List;
   
   public interface BookMapper {
   
       //增加一个Book
       int addBook(Books book);
   
       //根据id删除一个Book
       int deleteBookById(int id);
   
       //更新Book
       int updateBook(Books books);
   
       //根据id查询,返回一个Book
       Books queryBookById(int id);
   
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   
   }
   ```

6. 编写接口对应的 Mapper.xml 文件。需要导入MyBatis的包；

   ```
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE mapper
           PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
   
   <mapper namespace="com.feige.dao.BooksMapper">
   
       <!--增加一个Book-->
       <insert id="addBook" parameterType="Books">
           insert into books(bookName,bookCounts,detail)
           values (#{bookName}, #{bookCounts}, #{detail})
       </insert>
   
       <!--根据id删除一个Book-->
       <delete id="deleteBookById" parameterType="int">
           delete from books where bookId=#{bookId}
       </delete>
   
       <!--更新Book-->
       <update id="updateBook" parameterType="Books">
           update books
           set bookName = #{bookName},bookCounts = #{bookCounts},detail = #{detail}
           where bookId = #{bookId}
       </update>
   
       <!--根据id查询,返回一个Book-->
       <select id="queryBookById" resultType="Books">
           select * from books
           where bookID = #{bookId}
       </select>
   
       <!--查询全部Book-->
       <select id="queryAllBook" resultType="com.feige.pojo.Books">
           SELECT * from books
       </select>
   
   </mapper>
   ```

7. 编写Service层的接口和实现类 接口：

   ```
   package com.feige.service;
   
   import com.feige.pojo.Books;
   
   import java.util.List;
   
   //BookService:底下需要去实现,调用dao层
   public interface BookService {
       //增加一个Book
       int addBook(Books book);
       //根据id删除一个Book
       int deleteBookById(int id);
       //更新Book
       int updateBook(Books books);
       //根据id查询,返回一个Book
       Books queryBookById(int id);
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   }
   ```

实现类：

```
package com.feige.service;

import com.feige.dao.BookMapper;
import com.feige.pojo.Books;
import java.util.List;

public class BookServiceImpl implements BookService {

    //调用dao层的操作，设置一个set接口，方便Spring管理
    private BookMapper bookMapper;

    public void setBookMapper(BookMapper bookMapper) {
        this.bookMapper = bookMapper;
    }
    
    public int addBook(Books book) {
        return bookMapper.addBook(book);
    }
    
    public int deleteBookById(int id) {
        return bookMapper.deleteBookById(id);
    }
    
    public int updateBook(Books books) {
        return bookMapper.updateBook(books);
    }
    
    public Books queryBookById(int id) {
        return bookMapper.queryBookById(id);
    }
    
    public List<Books> queryAllBook() {
        return bookMapper.queryAllBook();
    }
}
```

**OK，到此，底层需求操作编写完毕！**

## 4、Spring层

1. 配置**Spring整合MyBatis**，我们这里数据源使用c3p0连接池；

2. 我们去编写Spring整合Mybatis的相关的配置文件； spring-dao.xml

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans.xsd
   http://www.springframework.org/schema/context
   https://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 配置整合mybatis -->
       <!-- 1.关联数据库文件 -->
       <context:property-placeholder location="classpath:database.properties"/>
   
       <!-- 2.数据库连接池 -->
       <!--数据库连接池
   dbcp  半自动化操作  不能自动连接
   c3p0  自动化操作（自动的加载配置文件 并且设置到对象里面）
       -->
       <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
   <!-- 配置连接池属性 -->
   <property name="driverClass" value="${jdbc.driver}"/>
   <property name="jdbcUrl" value="${jdbc.url}"/>
   <property name="user" value="${jdbc.username}"/>
   <property name="password" value="${jdbc.password}"/>
   
   <!-- c3p0连接池的私有属性 -->
   <property name="maxPoolSize" value="30"/>
   <property name="minPoolSize" value="10"/>
   <!-- 关闭连接后不自动commit -->
   <property name="autoCommitOnClose" value="false"/>
   <!-- 获取连接超时时间 -->
   <property name="checkoutTimeout" value="10000"/>
   <!-- 当获取连接失败重试次数 -->
   <property name="acquireRetryAttempts" value="2"/>
       </bean>
   
       <!-- 3.配置SqlSessionFactory对象 -->
       <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource"/>
   <!-- 配置MyBaties全局配置文件:mybatis-config.xml -->
   <property name="configLocation" value="classpath:mybatis-config.xml"/>
       </bean>
   
       <!-- 4.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 -->
       <!--解释 ： https://www.cnblogs.com/jpfss/p/7799806.html-->
       <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
   <!-- 注入sqlSessionFactory -->
   <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
   <!-- 给出需要扫描Dao接口包 -->
   <property name="basePackage" value="com.feige.dao"/>
       </bean>
   
   </beans>
   ```

3. **Spring整合service层**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 扫描service相关的bean -->
       <context:component-scan base-package="com.kuang.service" />
   
       <!--BookServiceImpl注入到IOC容器中-->
       <bean id="BookServiceImpl" class="com.kuang.service.BookServiceImpl">
   <property name="bookMapper" ref="bookMapper"/>
       </bean>
   
       <!-- 配置事务管理器 -->
       <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource" />
       </bean>
   
   </beans>
   ```

Spring层搞定！再次理解一下，Spring就是一个大杂烩，一个容器！对吧！

## 5、SpringMVC层

1. **web.xml**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
            version="4.0">
   
       <!--DispatcherServlet-->
       <servlet>
           <servlet-name>DispatcherServlet</servlet-name>
           <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
           <init-param>
               <param-name>contextConfigLocation</param-name>
               <param-value>classpath:applicationContext.xml</param-value>
           </init-param>
           <load-on-startup>1</load-on-startup>
       </servlet>
       <servlet-mapping>
           <servlet-name>DispatcherServlet</servlet-name>
           <url-pattern>/</url-pattern>
       </servlet-mapping>
   
       <!--encodingFilter-->
       <filter>
           <filter-name>encodingFilter</filter-name>
           <filter-class>
               org.springframework.web.filter.CharacterEncodingFilter
           </filter-class>
           <init-param>
               <param-name>encoding</param-name>
               <param-value>utf-8</param-value>
           </init-param>
       </filter>
       <filter-mapping>
           <filter-name>encodingFilter</filter-name>
           <url-pattern>/*</url-pattern>
       </filter-mapping>
       
       <!--Session过期时间-->
       <session-config>
           <session-timeout>15</session-timeout>
       </session-config>
       
   </web-app>
   ```

2. **spring-mvc.xml**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xmlns:mvc="http://www.springframework.org/schema/mvc"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       https://www.springframework.org/schema/mvc/spring-mvc.xsd">
   
       <!-- 配置SpringMVC -->
       <!-- 1.开启SpringMVC注解驱动 -->
       <mvc:annotation-driven>
           <mvc:message-converters register-defaults="true">
               <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                   <constructor-arg value="UTF-8"/>
               </bean>
               <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                   <property name="objectMapper">
                       <bean class="org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean">
                           <property name="failOnEmptyBeans" value="false"/>
                       </bean>
                   </property>
               </bean>
           </mvc:message-converters>
       </mvc:annotation-driven>
       <!--解决跨域问题-->
       <mvc:cors>
       <mvc:mapping path="/**"
                    allowed-origins="http://127.0.0.1:8090,http://localhost:8090"
                    allowed-methods="POST,GET, OPTIONS,DELETE,PUT"
                    allowed-headers="Content-Type,ContentType,Access-Control-Allow-Headers, Authorization, X-Requested-With"
                    allow-credentials="true"/>
       </mvc:cors>
       <!-- 2.静态资源默认servlet配置-->
       <mvc:default-servlet-handler/>
   
       <!-- 3.配置jsp 显示ViewResolver视图解析器 -->
       <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
           <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
           <property name="prefix" value="/WEB-INF/jsp/" />
           <property name="suffix" value=".jsp" />
       </bean>
   
       <!-- 4.扫描web相关的bean -->
       <context:component-scan base-package="com.feige.controller" />
   
   </beans>
   ```

3. **Spring配置整合文件，applicationContext.xml**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd">
   
       <import resource="spring-dao.xml"/>
       <import resource="spring-service.xml"/>
       <import resource="spring-mvc.xml"/>
       
   </beans>
   ```

**配置文件，暂时结束！Controller 和 视图层编写**

1. BookController 类编写 ， 方法一：查询全部书籍

   ```
   @Controller
   @RequestMapping("/book")
   public class BookController {
   
       @Autowired
       @Qualifier("BookServiceImpl")
       private BookService bookService;
   
       @RequestMapping("/allBook")
       public String list(Model model) {
           List<Books> list = bookService.queryAllBook();
           model.addAttribute("list", list);
           return "allBook";
       }
   }
   ```

2. 编写首页 **index.jsp**

   ```
   <%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" %>
   <!DOCTYPE HTML>
   <html>
   <head>
       <title>首页</title>
       <style type="text/css">
           a {
               text-decoration: none;
               color: black;
               font-size: 18px;
           }
           h3 {
               width: 180px;
               height: 38px;
               margin: 100px auto;
               text-align: center;
               line-height: 38px;
               background: deepskyblue;
               border-radius: 4px;
           }
       </style>
   </head>
   <body>
   
   <h3>
       <a href="${pageContext.request.contextPath}/book/allBook">点击进入列表页</a>
   </h3>
   </body>
   </html>
   ```

3. 书籍列表页面 **allbook.jsp**

   ```
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>书籍列表</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>书籍列表 —— 显示所有书籍</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <div class="row">
           <div class="col-md-4 column">
               <a class="btn btn-primary" href="${pageContext.request.contextPath}/book/toAddBook">新增</a>
           </div>
       </div>
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <table class="table table-hover table-striped">
                   <thead>
                   <tr>
                       <th>书籍编号</th>
                       <th>书籍名字</th>
                       <th>书籍数量</th>
                       <th>书籍详情</th>
                       <th>操作</th>
                   </tr>
                   </thead>
   
                   <tbody>
                   <c:forEach var="book" items="${requestScope.get('list')}">
                       <tr>
                           <td>${book.getBookId()}</td>
                           <td>${book.getBookName()}</td>
                           <td>${book.getBookCounts()}</td>
                           <td>${book.getDetail()}</td>
                           <td>
                               <a href="${pageContext.request.contextPath}/book/toUpdateBook?id=${book.getBookId()}">更改</a> |
                               <a href="${pageContext.request.contextPath}/book/del/${book.getBookId()}">删除</a>
                           </td>
                       </tr>
                   </c:forEach>
                   </tbody>
               </table>
           </div>
       </div>
   </div>
   ```

4. BookController 类编写 ， 方法二：添加书籍

   ```
   @RequestMapping("/toAddBook")
   public String toAddPaper() {
       return "addBook";
   }
   
   @RequestMapping("/addBook")
   public String addPaper(Books books) {
       System.out.println(books);
       bookService.addBook(books);
       return "redirect:/book/allBook";
   }
   ```

5. 添加书籍页面：**addBook.jsp**

   ```
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   
   <html>
   <head>
       <title>新增书籍</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>新增书籍</small>
                   </h1>
               </div>
           </div>
       </div>
       <form action="${pageContext.request.contextPath}/book/addBook" method="post">
           书籍名称：<input type="text" name="bookName"><br><br><br>
           书籍数量：<input type="text" name="bookCounts"><br><br><br>
           书籍详情：<input type="text" name="detail"><br><br><br>
           <input type="submit" value="添加">
       </form>
   
   </div>
   ```

6. BookController 类编写 ， 方法三：修改书籍

   ```
   @RequestMapping("/toUpdateBook")
   public String toUpdateBook(Model model, int id) {
       Books books = bookService.queryBookById(id);
       System.out.println(books);
       model.addAttribute("book",books );
       return "updateBook";
   }
   
   @RequestMapping("/updateBook")
   public String updateBook(Model model, Books book) {
       bookService.updateBook(book);
       Books books = bookService.queryBookById(book.getBookID());
       model.addAttribute("books", books);
       return "redirect:/book/allBook";
   }
   ```

7. 修改书籍页面 **updateBook.jsp**

   ```
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>修改信息</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>修改信息</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <form action="${pageContext.request.contextPath}/book/updateBook" method="post">
           <input type="hidden" name="bookID" value="${book.getBookId()}"/>
           书籍名称：<input type="text" name="bookName" value="${book.getBookName()}"/>
           书籍数量：<input type="text" name="bookCounts" value="${book.getBookCounts()}"/>
           书籍详情：<input type="text" name="detail" value="${book.getDetail() }"/>
           <input type="submit" value="提交"/>
       </form>
   
   </div>
   ```

8. BookController 类编写 ， 方法四：删除书籍

   ```
   @RequestMapping("/del/{bookId}")
   public String deleteBook(@PathVariable("bookId") int id) {
       bookService.deleteBookById(id);
       return "redirect:/book/allBook";
   }
   ```

**配置Tomcat，进行运行！**

到目前为止，这个SSM项目整合已经完全的OK了，可以直接运行进行测试！这个练习十分的重要，大家需要保证，不看任何东西，自己也可以完整的实现出来！

## **6、项目结构图**

![1570186854191.png](https://blog.kuangstudy.com/usr/uploads/2019/10/1086489242.png)

![1570186868239.png](https://blog.kuangstudy.com/usr/uploads/2019/10/2326667495.png)

## 7、错误排查

### 1、访问出现404，排查步骤：**

1. 查看控制台输出，看一下是不是缺少了什么jar包。

2. 如果jar包存在，显示无法输出，就在IDEA的项目发布中，添加lib依赖！

   步骤：点击项目结构----->Artifacts----->点击自己的项目(ssm:war exploded)--->(点击工具栏的第一个)在WEB-INF目录下新建一个lib包----->选中lib------>点击工具栏的第三个然后选中第一个---->把里面的包全部选中点击ok---->点击Apply再ok

   ![image-20200128125126368](https://gitee.com/feigeCode/java_blog/raw/master/java/ssm%E6%95%B4%E5%90%88.assets/image-20200128125126368.png)

   ![image-20200128125237179](https://gitee.com/feigeCode/java_blog/raw/master/java/ssm%E6%95%B4%E5%90%88.assets/image-20200128125237179.png)

3. 重启Tomcat 即可解决！

### 2、其他错误

#### 1、bean不存在

 步骤：

 查看bean注入是否成功

 junit单元测试，看我们的代码是否能够查询出来

 问题不在底层，是我们spring出了问题

 springMVC整合时没有调用到service层的bean

 applicationContext.xml没有注册bean

 web.xml也绑定过配置文件要绑定大的applicationContext.xml



## 8、小结及展望

这个是同学们的第一个SSM整合案例，一定要烂熟于心！

SSM框架的重要程度是不言而喻的，学到这里，大家已经可以进行基本网站的单独开发。但是这只是增删改查的基本操作。可以说学到这里，大家才算是真正的步入了后台开发的门。也就是能找一个后台相关工作的底线。

或许很多人，工作就做这些事情，但是对于个人的提高来说，还远远不够！

| 飞哥 | 飞哥 | 飞哥 |
| ---- | ---- | ---- |
| 飞哥 | 飞哥 | 飞哥 |
| 飞哥 | 飞哥 | 飞哥 |
| 飞哥 | 飞哥 | 飞哥 |



~~~java
static class CustomAttributeProvider implements AttributeProvider {

        @Override
        public void setAttributes(Node node, String s, Map<String, String> map) {
            //改变a标签的target属性为_blank
            if(node instanceof Link) {
                map.put("target","_blank");
            }
            if (node instanceof TableBlock) {
                map.put("class","el-table__body-wrapper is-scrolling-none");
            }
            if (node instanceof TableBody) {
                map.put("class","el-table__body");
            }
            if (node instanceof TableRow) {
                map.put("class","el-table__row");
            }
            if (node instanceof TableCell) {
                map.put("class","el-table_13_column_55");
            }
        }
~~~

# feige

, 2020-03-02 07:06:53.0, 2020-03-13 06:59:47.0, admin, 10]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50143} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20005} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20005} Parameters : [13]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20005} Types : [INTEGER]
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20006} Parameters : [13]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20005} executed. 0.671999 millis. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog where id=?
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20006} Types : [INTEGER]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50144} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50144} Header: [id, type_name, title, content, create_time, change_time, author, view]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50144} Result: [13, mybatis, ssm框架整合, # ssm整合

## 1、数据库环境

创建一个存放书籍数据的数据库表

```
CREATE DATABASE `ssmbuild`;

USE `ssmbuild`;

DROP TABLE IF EXISTS `books`;

CREATE TABLE `books` (
  `bookId` INT PRIMARY KEY COMMENT '书id',
  `bookName` VARCHAR(100) NOT NULL COMMENT '书名',
  `bookCounts` INT(11) NOT NULL COMMENT '数量',
  ``ssmbuild``ssmbuild`` VARCHAR(200) NOT NULL COMMENT '描述'
) ENGINE=INNODB DEFAULT CHARSET=utf8

INSERT  INTO `books`(`bookId`,`bookName`,`bookCounts`,`detail`)VALUES 
(1,'Java',1,'从入门到放弃'),
(2,'MySQL',10,'从删库到跑路'),
(3,'Linux',5,'从进门到进牢');

SELECT * FROM books
```

## 2、基本环境搭建

1. 新建一Maven项目！ ssmbuild ， 添加web的支持

   ![image-20200128134359317](https://gitee.com/feigeCode/java_blog/raw/master/java/ssm%E6%95%B4%E5%90%88.assets/image-20200128134359317.png)

2. 导入相关的pom依赖！

   ```
   <dependencies>
       <!--Junit-->
       <dependency>
           <groupId>junit</groupId>
           <artifactId>junit</artifactId>
           <version>4.12</version>
       </dependency>
       <!--数据库驱动-->
       <dependency>
           <groupId>mysql</groupId>
           <artifactId>mysql-connector-java</artifactId>
           <version>5.1.47</version>
       </dependency>
       <!-- 数据库连接池 -->
       <dependency>
           <groupId>com.mchange</groupId>
           <artifactId>c3p0</artifactId>
           <version>0.9.5.2</version>
       </dependency>
   
       <!--Servlet - JSP -->
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>servlet-api</artifactId>
           <version>2.5</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet.jsp</groupId>
           <artifactId>jsp-api</artifactId>
           <version>2.2</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>jstl</artifactId>
           <version>1.2</version>
       </dependency>
   
       <!--Mybatis-->
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis</artifactId>
           <version>3.5.2</version>
       </dependency>
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis-spring</artifactId>
           <version>2.0.2</version>
       </dependency>
   
       <!--Spring-->
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-webmvc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-jdbc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->
       <dependency>
           <groupId>org.projectlombok</groupId>
           <artifactId>lombok</artifactId>
           <version>1.16.10</version>
       </dependency>
   </dependencies>
   ```

3. Maven资源过滤设置

   ```
   <build>
       <resources>
           <resource>
               <directory>src/main/java</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
           <resource>
               <directory>src/main/resources</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
       </resources>
   </build>
   ```

4. 建立基本结构和配置框架！

   - com.feige.pojo

   - com.feige.dao

   - com.feige.service

   - com.feige.controller

     在resources目录下创建

   - mybatis-config.xml

     ```
     <?xml version="1.0" encoding="UTF-8" ?>
     <!DOCTYPE configuration
             PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
             "http://mybatis.org/dtd/mybatis-3-config.dtd">
     <configuration>
     
     </configuration>
     ```

   - applicationContext.xml

     ```
     <?xml version="1.0" encoding="UTF-8"?>
     <beans xmlns="http://www.springframework.org/schema/beans"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://www.springframework.org/schema/beans
             http://www.springframework.org/schema/beans/spring-beans.xsd">
     
     </beans>
     ```

## 3、Mybatis层编写

1. 数据库配置文件 **database.properties**

   ```
   jdbc.driver=com.mysql.jdbc.Driver
   jdbc.url=jdbc:mysql://localhost:3306/ssmbuild?useSSL=true&useUnicode=true&characterEncoding=utf8
   jdbc.username=root
   jdbc.password=hufei169357
   ```

2. IDEA关联数据库

3. 编写MyBatis的核心配置文件

   ```
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE configuration
           PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-config.dtd">
   <configuration>
       
       <typeAliases>
           <package name="com.feige.pojo"/>
       </typeAliases>
       <mappers>
           <mapper resource="com/feige/dao/BookMapper.xml"/>
       </mappers>
   
   </configuration>
   ```

4. 编写数据库对应的实体类 com.feige.pojo.Books 使用lombok插件！

   ```
   package com.kuang.pojo;
   
   import lombok.AllArgsConstructor;
   import lombok.Data;
   import lombok.NoArgsConstructor;
   
   @Data
   @AllArgsConstructor
   @NoArgsConstructor
   public class Books {
       
       private int bookId;
       private String bookName;
       private int bookCounts;
       private String detail;
       
   }
   ```

5. 编写Dao层的 Mapper接口！

   ```
   package com.kuang.dao;
   
   import com.kuang.pojo.Books;
   import java.util.List;
   
   public interface BookMapper {
   
       //增加一个Book
       int addBook(Books book);
   
       //根据id删除一个Book
       int deleteBookById(int id);
   
       //更新Book
       int updateBook(Books books);
   
       //根据id查询,返回一个Book
       Books queryBookById(int id);
   
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   
   }
   ```

6. 编写接口对应的 Mapper.xml 文件。需要导入MyBatis的包；

   ```
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE mapper
           PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
   
   <mapper namespace="com.feige.dao.BooksMapper">
   
       <!--增加一个Book-->
       <insert id="addBook" parameterType="Books">
           insert into books(bookName,bookCounts,detail)
           values (#{bookName}, #{bookCounts}, #{detail})
       </insert>
   
       <!--根据id删除一个Book-->
       <delete id="deleteBookById" parameterType="int">
           delete from books where bookId=#{bookId}
       </delete>
   
       <!--更新Book-->
       <update id="updateBook" parameterType="Books">
           update books
           set bookName = #{bookName},bookCounts = #{bookCounts},detail = #{detail}
           where bookId = #{bookId}
       </update>
   
       <!--根据id查询,返回一个Book-->
       <select id="queryBookById" resultType="Books">
           select * from books
           where bookID = #{bookId}
       </select>
   
       <!--查询全部Book-->
       <select id="queryAllBook" resultType="com.feige.pojo.Books">
           SELECT * from books
       </select>
   
   </mapper>
   ```

7. 编写Service层的接口和实现类 接口：

   ```
   package com.feige.service;
   
   import com.feige.pojo.Books;
   
   import java.util.List;
   
   //BookService:底下需要去实现,调用dao层
   public interface BookService {
       //增加一个Book
       int addBook(Books book);
       //根据id删除一个Book
       int deleteBookById(int id);
       //更新Book
       int updateBook(Books books);
       //根据id查询,返回一个Book
       Books queryBookById(int id);
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   }
   ```

实现类：

```
package com.feige.service;

import com.feige.dao.BookMapper;
import com.feige.pojo.Books;
import java.util.List;

public class BookServiceImpl implements BookService {

    //调用dao层的操作，设置一个set接口，方便Spring管理
    private BookMapper bookMapper;

    public void setBookMapper(BookMapper bookMapper) {
        this.bookMapper = bookMapper;
    }
    
    public int addBook(Books book) {
        return bookMapper.addBook(book);
    }
    
    public int deleteBookById(int id) {
        return bookMapper.deleteBookById(id);
    }
    
    public int updateBook(Books books) {
        return bookMapper.updateBook(books);
    }
    
    public Books queryBookById(int id) {
        return bookMapper.queryBookById(id);
    }
    
    public List<Books> queryAllBook() {
        return bookMapper.queryAllBook();
    }
}
```

**OK，到此，底层需求操作编写完毕！**

## 4、Spring层

1. 配置**Spring整合MyBatis**，我们这里数据源使用c3p0连接池；

2. 我们去编写Spring整合Mybatis的相关的配置文件； spring-dao.xml

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans.xsd
   http://www.springframework.org/schema/context
   https://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 配置整合mybatis -->
       <!-- 1.关联数据库文件 -->
       <context:property-placeholder location="classpath:database.properties"/>
   
       <!-- 2.数据库连接池 -->
       <!--数据库连接池
   dbcp  半自动化操作  不能自动连接
   c3p0  自动化操作（自动的加载配置文件 并且设置到对象里面）
       -->
       <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
   <!-- 配置连接池属性 -->
   <property name="driverClass" value="${jdbc.driver}"/>
   <property name="jdbcUrl" value="${jdbc.url}"/>
   <property name="user" value="${jdbc.username}"/>
   <property name="password" value="${jdbc.password}"/>
   
   <!-- c3p0连接池的私有属性 -->
   <property name="maxPoolSize" value="30"/>
   <property name="minPoolSize" value="10"/>
   <!-- 关闭连接后不自动commit -->
   <property name="autoCommitOnClose" value="false"/>
   <!-- 获取连接超时时间 -->
   <property name="checkoutTimeout" value="10000"/>
   <!-- 当获取连接失败重试次数 -->
   <property name="acquireRetryAttempts" value="2"/>
       </bean>
   
       <!-- 3.配置SqlSessionFactory对象 -->
       <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource"/>
   <!-- 配置MyBaties全局配置文件:mybatis-config.xml -->
   <property name="configLocation" value="classpath:mybatis-config.xml"/>
       </bean>
   
       <!-- 4.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 -->
       <!--解释 ： https://www.cnblogs.com/jpfss/p/7799806.html-->
       <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
   <!-- 注入sqlSessionFactory -->
   <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
   <!-- 给出需要扫描Dao接口包 -->
   <property name="basePackage" value="com.feige.dao"/>
       </bean>
   
   </beans>
   ```

3. **Spring整合service层**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 扫描service相关的bean -->
       <context:component-scan base-package="com.kuang.service" />
   
       <!--BookServiceImpl注入到IOC容器中-->
       <bean id="BookServiceImpl" class="com.kuang.service.BookServiceImpl">
   <property name="bookMapper" ref="bookMapper"/>
       </bean>
   
       <!-- 配置事务管理器 -->
       <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource" />
       </bean>
   
   </beans>
   ```

Spring层搞定！再次理解一下，Spring就是一个大杂烩，一个容器！对吧！

## 5、SpringMVC层

1. **web.xml**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
            version="4.0">
   
       <!--DispatcherServlet-->
       <servlet>
           <servlet-name>DispatcherServlet</servlet-name>
           <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
           <init-param>
               <param-name>contextConfigLocation</param-name>
               <param-value>classpath:applicationContext.xml</param-value>
           </init-param>
           <load-on-startup>1</load-on-startup>
       </servlet>
       <servlet-mapping>
           <servlet-name>DispatcherServlet</servlet-name>
           <url-pattern>/</url-pattern>
       </servlet-mapping>
   
       <!--encodingFilter-->
       <filter>
           <filter-name>encodingFilter</filter-name>
           <filter-class>
               org.springframework.web.filter.CharacterEncodingFilter
           </filter-class>
           <init-param>
               <param-name>encoding</param-name>
               <param-value>utf-8</param-value>
           </init-param>
       </filter>
       <filter-mapping>
           <filter-name>encodingFilter</filter-name>
           <url-pattern>/*</url-pattern>
       </filter-mapping>
       
       <!--Session过期时间-->
       <session-config>
           <session-timeout>15</session-timeout>
       </session-config>
       
   </web-app>
   ```

2. **spring-mvc.xml**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xmlns:mvc="http://www.springframework.org/schema/mvc"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       https://www.springframework.org/schema/mvc/spring-mvc.xsd">
   
       <!-- 配置SpringMVC -->
       <!-- 1.开启SpringMVC注解驱动 -->
       <mvc:annotation-driven>
           <mvc:message-converters register-defaults="true">
               <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                   <constructor-arg value="UTF-8"/>
               </bean>
               <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                   <property name="objectMapper">
                       <bean class="org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean">
                           <property name="failOnEmptyBeans" value="false"/>
                       </bean>
                   </property>
               </bean>
           </mvc:message-converters>
       </mvc:annotation-driven>
       <!--解决跨域问题-->
       <mvc:cors>
       <mvc:mapping path="/**"
                    allowed-origins="http://127.0.0.1:8090,http://localhost:8090"
                    allowed-methods="POST,GET, OPTIONS,DELETE,PUT"
                    allowed-headers="Content-Type,ContentType,Access-Control-Allow-Headers, Authorization, X-Requested-With"
                    allow-credentials="true"/>
       </mvc:cors>
       <!-- 2.静态资源默认servlet配置-->
       <mvc:default-servlet-handler/>
   
       <!-- 3.配置jsp 显示ViewResolver视图解析器 -->
       <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
           <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
           <property name="prefix" value="/WEB-INF/jsp/" />
           <property name="suffix" value=".jsp" />
       </bean>
   
       <!-- 4.扫描web相关的bean -->
       <context:component-scan base-package="com.feige.controller" />
   
   </beans>
   ```

3. **Spring配置整合文件，applicationContext.xml**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd">
   
       <import resource="spring-dao.xml"/>
       <import resource="spring-service.xml"/>
       <import resource="spring-mvc.xml"/>
       
   </beans>
   ```

**配置文件，暂时结束！Controller 和 视图层编写**

1. BookController 类编写 ， 方法一：查询全部书籍

   ```
   @Controller
   @RequestMapping("/book")
   public class BookController {
   
       @Autowired
       @Qualifier("BookServiceImpl")
       private BookService bookService;
   
       @RequestMapping("/allBook")
       public String list(Model model) {
           List<Books> list = bookService.queryAllBook();
           model.addAttribute("list", list);
           return "allBook";
       }
   }
   ```

2. 编写首页 **index.jsp**

   ```
   <%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" %>
   <!DOCTYPE HTML>
   <html>
   <head>
       <title>首页</title>
       <style type="text/css">
           a {
               text-decoration: none;
               color: black;
               font-size: 18px;
           }
           h3 {
               width: 180px;
               height: 38px;
               margin: 100px auto;
               text-align: center;
               line-height: 38px;
               background: deepskyblue;
               border-radius: 4px;
           }
       </style>
   </head>
   <body>
   
   <h3>
       <a href="${pageContext.request.contextPath}/book/allBook">点击进入列表页</a>
   </h3>
   </body>
   </html>
   ```

3. 书籍列表页面 **allbook.jsp**

   ```
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>书籍列表</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>书籍列表 —— 显示所有书籍</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <div class="row">
           <div class="col-md-4 column">
               <a class="btn btn-primary" href="${pageContext.request.contextPath}/book/toAddBook">新增</a>
           </div>
       </div>
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <table class="table table-hover table-striped">
                   <thead>
                   <tr>
                       <th>书籍编号</th>
                       <th>书籍名字</th>
                       <th>书籍数量</th>
                       <th>书籍详情</th>
                       <th>操作</th>
                   </tr>
                   </thead>
   
                   <tbody>
                   <c:forEach var="book" items="${requestScope.get('list')}">
                       <tr>
                           <td>${book.getBookId()}</td>
                           <td>${book.getBookName()}</td>
                           <td>${book.getBookCounts()}</td>
                           <td>${book.getDetail()}</td>
                           <td>
                               <a href="${pageContext.request.contextPath}/book/toUpdateBook?id=${book.getBookId()}">更改</a> |
                               <a href="${pageContext.request.contextPath}/book/del/${book.getBookId()}">删除</a>
                           </td>
                       </tr>
                   </c:forEach>
                   </tbody>
               </table>
           </div>
       </div>
   </div>
   ```

4. BookController 类编写 ， 方法二：添加书籍

   ```
   @RequestMapping("/toAddBook")
   public String toAddPaper() {
       return "addBook";
   }
   
   @RequestMapping("/addBook")
   public String addPaper(Books books) {
       System.out.println(books);
       bookService.addBook(books);
       return "redirect:/book/allBook";
   }
   ```

5. 添加书籍页面：**addBook.jsp**

   ```
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   
   <html>
   <head>
       <title>新增书籍</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>新增书籍</small>
                   </h1>
               </div>
           </div>
       </div>
       <form action="${pageContext.request.contextPath}/book/addBook" method="post">
           书籍名称：<input type="text" name="bookName"><br><br><br>
           书籍数量：<input type="text" name="bookCounts"><br><br><br>
           书籍详情：<input type="text" name="detail"><br><br><br>
           <input type="submit" value="添加">
       </form>
   
   </div>
   ```

6. BookController 类编写 ， 方法三：修改书籍

   ```
   @RequestMapping("/toUpdateBook")
   public String toUpdateBook(Model model, int id) {
       Books books = bookService.queryBookById(id);
       System.out.println(books);
       model.addAttribute("book",books );
       return "updateBook";
   }
   
   @RequestMapping("/updateBook")
   public String updateBook(Model model, Books book) {
       bookService.updateBook(book);
       Books books = bookService.queryBookById(book.getBookID());
       model.addAttribute("books", books);
       return "redirect:/book/allBook";
   }
   ```

7. 修改书籍页面 **updateBook.jsp**

   ```
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>修改信息</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>修改信息</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <form action="${pageContext.request.contextPath}/book/updateBook" method="post">
           <input type="hidden" name="bookID" value="${book.getBookId()}"/>
           书籍名称：<input type="text" name="bookName" value="${book.getBookName()}"/>
           书籍数量：<input type="text" name="bookCounts" value="${book.getBookCounts()}"/>
           书籍详情：<input type="text" name="detail" value="${book.getDetail() }"/>
           <input type="submit" value="提交"/>
       </form>
   
   </div>
   ```

8. BookController 类编写 ， 方法四：删除书籍

   ```
   @RequestMapping("/del/{bookId}")
   public String deleteBook(@PathVariable("bookId") int id) {
       bookService.deleteBookById(id);
       return "redirect:/book/allBook";
   }
   ```

**配置Tomcat，进行运行！**

到目前为止，这个SSM项目整合已经完全的OK了，可以直接运行进行测试！这个练习十分的重要，大家需要保证，不看任何东西，自己也可以完整的实现出来！

## **6、项目结构图**

![1570186854191.png](https://blog.kuangstudy.com/usr/uploads/2019/10/1086489242.png)

![1570186868239.png](https://blog.kuangstudy.com/usr/uploads/2019/10/2326667495.png)

## 7、错误排查

### 1、访问出现404，排查步骤：**

1. 查看控制台输出，看一下是不是缺少了什么jar包。

2. 如果jar包存在，显示无法输出，就在IDEA的项目发布中，添加lib依赖！

   步骤：点击项目结构----->Artifacts----->点击自己的项目(ssm:war exploded)--->(点击工具栏的第一个)在WEB-INF目录下新建一个lib包----->选中lib------>点击工具栏的第三个然后选中第一个---->把里面的包全部选中点击ok---->点击Apply再ok

   ![image-20200128125126368](https://gitee.com/feigeCode/java_blog/raw/master/java/ssm%E6%95%B4%E5%90%88.assets/image-20200128125126368.png)

   ![image-20200128125237179](https://gitee.com/feigeCode/java_blog/raw/master/java/ssm%E6%95%B4%E5%90%88.assets/image-20200128125237179.png)

3. 重启Tomcat 即可解决！

### 2、其他错误

#### 1、bean不存在

 步骤：

 查看bean注入是否成功

 junit单元测试，看我们的代码是否能够查询出来

 问题不在底层，是我们spring出了问题

 springMVC整合时没有调用到service层的bean

 applicationContext.xml没有注册bean

 web.xml也绑定过配置文件要绑定大的applicationContext.xml



## 8、小结及展望

这个是同学们的第一个SSM整合案例，一定要烂熟于心！

SSM框架的重要程度是不言而喻的，学到这里，大家已经可以进行基本网站的单独开发。但是这只是增删改查的基本操作。可以说学到这里，大家才算是真正的步入了后台开发的门。也就是能找一个后台相关工作的底线。

或许很多人，工作就做这些事情，但是对于个人的提高来说，还远远不够！

| 飞哥 | 飞哥 | 飞哥 |
| ---- | ---- | ---- |
| 飞哥 | 飞哥 | 飞哥 |
| 飞哥 | 飞哥 | 飞哥 |
| 飞哥 | 飞哥 | 飞哥 |



~~~java
static class CustomAttributeProvider implements AttributeProvider {

        @Override
        public void setAttributes(Node node, String s, Map<String, String> map) {
            //改变a标签的target属性为_blank
            if(node instanceof Link) {
                map.put("target","_blank");
            }
            if (node instanceof TableBlock) {
                map.put("class","el-table__body-wrapper is-scrolling-none");
            }
            if (node instanceof TableBody) {
                map.put("class","el-table__body");
            }
            if (node instanceof TableRow) {
                map.put("class","el-table__row");
            }
            if (node instanceof TableCell) {
                map.put("class","el-table_13_column_55");
            }
        }
~~~

# feige

, 2020-03-02 07:06:53.0, 2020-03-13 06:59:47.0, admin, 10]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50144} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20006} executed. 4.208441 millis. select distinct count(*) from comments c
        where c.blog_id=? and
        c.parent_id is null;
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20005} clearParameters. 
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20006, rs-50145} open
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20006, rs-50145} Header: [count(*)]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20006, rs-50145} Result: [3]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20006, rs-50145} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20006} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20007} Parameters : [13, 0, 10]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20007} Types : [INTEGER, INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20007} executed. 1.043999 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id  and
        c.parent_id is null limit ?,?;;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20007, rs-50146} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20007, rs-50146} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20007, rs-50146} Result: [26, 好好, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:35.0, null]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20007, rs-50146} Result: [29, 太好了, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:13.0, null]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20007, rs-50146} Result: [32, <p>feige</p>, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 01:33:26.0, null]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20007, rs-50146} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20007} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} Parameters : [13, 26]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} executed. 4.089774 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50147} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50147} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50147} Result: [27, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:56.0, sss]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50147} Result: [28, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:43:03.0, sss]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50147} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} Parameters : [13, 26]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} executed. 3.84133 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50148} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50148} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50148} Result: [27, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:56.0, sss]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50148} Result: [28, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:43:03.0, sss]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50148} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} Parameters : [13, 27]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} executed. 0.576889 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50149} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50149} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50149} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} Parameters : [13, 27]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} executed. 0.510222 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50150} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50150} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50150} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} Parameters : [13, 29]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} executed. 3.253331 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50151} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50151} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50151} Result: [30, 谢谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:43.0, sss]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50151} Result: [31, 不用谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:47:01.0, sss]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50151} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} Parameters : [13, 29]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} executed. 3.54133 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50152} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50152} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50152} Result: [30, 谢谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:43.0, sss]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50152} Result: [31, 不用谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:47:01.0, sss]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50152} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} Parameters : [13, 30]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} executed. 1.186666 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50153} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50153} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50153} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} Parameters : [13, 30]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} executed. 0.862221 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50154} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50154} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50154} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} Parameters : [13, 32]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} executed. 0.572888 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50155} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50155} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50155} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20008} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20009} Parameters : [13]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20009} Types : [INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20009} executed. 1.451555 millis. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog where id=?
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20009, rs-50156} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20009, rs-50156} Header: [id, type_name, title, content, create_time, change_time, author, view]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20009, rs-50156} Result: [13, mybatis, ssm框架整合, # ssm整合

## 1、数据库环境

创建一个存放书籍数据的数据库表

```
CREATE DATABASE `ssmbuild`;

USE `ssmbuild`;

DROP TABLE IF EXISTS `books`;

CREATE TABLE `books` (
  `bookId` INT PRIMARY KEY COMMENT '书id',
  `bookName` VARCHAR(100) NOT NULL COMMENT '书名',
  `bookCounts` INT(11) NOT NULL COMMENT '数量',
  ``ssmbuild``ssmbuild`` VARCHAR(200) NOT NULL COMMENT '描述'
) ENGINE=INNODB DEFAULT CHARSET=utf8

INSERT  INTO `books`(`bookId`,`bookName`,`bookCounts`,`detail`)VALUES 
(1,'Java',1,'从入门到放弃'),
(2,'MySQL',10,'从删库到跑路'),
(3,'Linux',5,'从进门到进牢');

SELECT * FROM books
```

## 2、基本环境搭建

1. 新建一Maven项目！ ssmbuild ， 添加web的支持

   ![image-20200128134359317](https://gitee.com/feigeCode/java_blog/raw/master/java/ssm%E6%95%B4%E5%90%88.assets/image-20200128134359317.png)

2. 导入相关的pom依赖！

   ```
   <dependencies>
       <!--Junit-->
       <dependency>
           <groupId>junit</groupId>
           <artifactId>junit</artifactId>
           <version>4.12</version>
       </dependency>
       <!--数据库驱动-->
       <dependency>
           <groupId>mysql</groupId>
           <artifactId>mysql-connector-java</artifactId>
           <version>5.1.47</version>
       </dependency>
       <!-- 数据库连接池 -->
       <dependency>
           <groupId>com.mchange</groupId>
           <artifactId>c3p0</artifactId>
           <version>0.9.5.2</version>
       </dependency>
   
       <!--Servlet - JSP -->
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>servlet-api</artifactId>
           <version>2.5</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet.jsp</groupId>
           <artifactId>jsp-api</artifactId>
           <version>2.2</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>jstl</artifactId>
           <version>1.2</version>
       </dependency>
   
       <!--Mybatis-->
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis</artifactId>
           <version>3.5.2</version>
       </dependency>
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis-spring</artifactId>
           <version>2.0.2</version>
       </dependency>
   
       <!--Spring-->
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-webmvc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-jdbc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->
       <dependency>
           <groupId>org.projectlombok</groupId>
           <artifactId>lombok</artifactId>
           <version>1.16.10</version>
       </dependency>
   </dependencies>
   ```

3. Maven资源过滤设置

   ```
   <build>
       <resources>
           <resource>
               <directory>src/main/java</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
           <resource>
               <directory>src/main/resources</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
       </resources>
   </build>
   ```

4. 建立基本结构和配置框架！

   - com.feige.pojo

   - com.feige.dao

   - com.feige.service

   - com.feige.controller

     在resources目录下创建

   - mybatis-config.xml

     ```
     <?xml version="1.0" encoding="UTF-8" ?>
     <!DOCTYPE configuration
             PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
             "http://mybatis.org/dtd/mybatis-3-config.dtd">
     <configuration>
     
     </configuration>
     ```

   - applicationContext.xml

     ```
     <?xml version="1.0" encoding="UTF-8"?>
     <beans xmlns="http://www.springframework.org/schema/beans"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://www.springframework.org/schema/beans
             http://www.springframework.org/schema/beans/spring-beans.xsd">
     
     </beans>
     ```

## 3、Mybatis层编写

1. 数据库配置文件 **database.properties**

   ```
   jdbc.driver=com.mysql.jdbc.Driver
   jdbc.url=jdbc:mysql://localhost:3306/ssmbuild?useSSL=true&useUnicode=true&characterEncoding=utf8
   jdbc.username=root
   jdbc.password=hufei169357
   ```

2. IDEA关联数据库

3. 编写MyBatis的核心配置文件

   ```
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE configuration
           PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-config.dtd">
   <configuration>
       
       <typeAliases>
           <package name="com.feige.pojo"/>
       </typeAliases>
       <mappers>
           <mapper resource="com/feige/dao/BookMapper.xml"/>
       </mappers>
   
   </configuration>
   ```

4. 编写数据库对应的实体类 com.feige.pojo.Books 使用lombok插件！

   ```
   package com.kuang.pojo;
   
   import lombok.AllArgsConstructor;
   import lombok.Data;
   import lombok.NoArgsConstructor;
   
   @Data
   @AllArgsConstructor
   @NoArgsConstructor
   public class Books {
       
       private int bookId;
       private String bookName;
       private int bookCounts;
       private String detail;
       
   }
   ```

5. 编写Dao层的 Mapper接口！

   ```
   package com.kuang.dao;
   
   import com.kuang.pojo.Books;
   import java.util.List;
   
   public interface BookMapper {
   
       //增加一个Book
       int addBook(Books book);
   
       //根据id删除一个Book
       int deleteBookById(int id);
   
       //更新Book
       int updateBook(Books books);
   
       //根据id查询,返回一个Book
       Books queryBookById(int id);
   
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   
   }
   ```

6. 编写接口对应的 Mapper.xml 文件。需要导入MyBatis的包；

   ```
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE mapper
           PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
   
   <mapper namespace="com.feige.dao.BooksMapper">
   
       <!--增加一个Book-->
       <insert id="addBook" parameterType="Books">
           insert into books(bookName,bookCounts,detail)
           values (#{bookName}, #{bookCounts}, #{detail})
       </insert>
   
       <!--根据id删除一个Book-->
       <delete id="deleteBookById" parameterType="int">
           delete from books where bookId=#{bookId}
       </delete>
   
       <!--更新Book-->
       <update id="updateBook" parameterType="Books">
           update books
           set bookName = #{bookName},bookCounts = #{bookCounts},detail = #{detail}
           where bookId = #{bookId}
       </update>
   
       <!--根据id查询,返回一个Book-->
       <select id="queryBookById" resultType="Books">
           select * from books
           where bookID = #{bookId}
       </select>
   
       <!--查询全部Book-->
       <select id="queryAllBook" resultType="com.feige.pojo.Books">
           SELECT * from books
       </select>
   
   </mapper>
   ```

7. 编写Service层的接口和实现类 接口：

   ```
   package com.feige.service;
   
   import com.feige.pojo.Books;
   
   import java.util.List;
   
   //BookService:底下需要去实现,调用dao层
   public interface BookService {
       //增加一个Book
       int addBook(Books book);
       //根据id删除一个Book
       int deleteBookById(int id);
       //更新Book
       int updateBook(Books books);
       //根据id查询,返回一个Book
       Books queryBookById(int id);
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   }
   ```

实现类：

```
package com.feige.service;

import com.feige.dao.BookMapper;
import com.feige.pojo.Books;
import java.util.List;

public class BookServiceImpl implements BookService {

    //调用dao层的操作，设置一个set接口，方便Spring管理
    private BookMapper bookMapper;

    public void setBookMapper(BookMapper bookMapper) {
        this.bookMapper = bookMapper;
    }
    
    public int addBook(Books book) {
        return bookMapper.addBook(book);
    }
    
    public int deleteBookById(int id) {
        return bookMapper.deleteBookById(id);
    }
    
    public int updateBook(Books books) {
        return bookMapper.updateBook(books);
    }
    
    public Books queryBookById(int id) {
        return bookMapper.queryBookById(id);
    }
    
    public List<Books> queryAllBook() {
        return bookMapper.queryAllBook();
    }
}
```

**OK，到此，底层需求操作编写完毕！**

## 4、Spring层

1. 配置**Spring整合MyBatis**，我们这里数据源使用c3p0连接池；

2. 我们去编写Spring整合Mybatis的相关的配置文件； spring-dao.xml

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans.xsd
   http://www.springframework.org/schema/context
   https://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 配置整合mybatis -->
       <!-- 1.关联数据库文件 -->
       <context:property-placeholder location="classpath:database.properties"/>
   
       <!-- 2.数据库连接池 -->
       <!--数据库连接池
   dbcp  半自动化操作  不能自动连接
   c3p0  自动化操作（自动的加载配置文件 并且设置到对象里面）
       -->
       <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
   <!-- 配置连接池属性 -->
   <property name="driverClass" value="${jdbc.driver}"/>
   <property name="jdbcUrl" value="${jdbc.url}"/>
   <property name="user" value="${jdbc.username}"/>
   <property name="password" value="${jdbc.password}"/>
   
   <!-- c3p0连接池的私有属性 -->
   <property name="maxPoolSize" value="30"/>
   <property name="minPoolSize" value="10"/>
   <!-- 关闭连接后不自动commit -->
   <property name="autoCommitOnClose" value="false"/>
   <!-- 获取连接超时时间 -->
   <property name="checkoutTimeout" value="10000"/>
   <!-- 当获取连接失败重试次数 -->
   <property name="acquireRetryAttempts" value="2"/>
       </bean>
   
       <!-- 3.配置SqlSessionFactory对象 -->
       <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource"/>
   <!-- 配置MyBaties全局配置文件:mybatis-config.xml -->
   <property name="configLocation" value="classpath:mybatis-config.xml"/>
       </bean>
   
       <!-- 4.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 -->
       <!--解释 ： https://www.cnblogs.com/jpfss/p/7799806.html-->
       <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
   <!-- 注入sqlSessionFactory -->
   <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
   <!-- 给出需要扫描Dao接口包 -->
   <property name="basePackage" value="com.feige.dao"/>
       </bean>
   
   </beans>
   ```

3. **Spring整合service层**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 扫描service相关的bean -->
       <context:component-scan base-package="com.kuang.service" />
   
       <!--BookServiceImpl注入到IOC容器中-->
       <bean id="BookServiceImpl" class="com.kuang.service.BookServiceImpl">
   <property name="bookMapper" ref="bookMapper"/>
       </bean>
   
       <!-- 配置事务管理器 -->
       <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource" />
       </bean>
   
   </beans>
   ```

Spring层搞定！再次理解一下，Spring就是一个大杂烩，一个容器！对吧！

## 5、SpringMVC层

1. **web.xml**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
            version="4.0">
   
       <!--DispatcherServlet-->
       <servlet>
           <servlet-name>DispatcherServlet</servlet-name>
           <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
           <init-param>
               <param-name>contextConfigLocation</param-name>
               <param-value>classpath:applicationContext.xml</param-value>
           </init-param>
           <load-on-startup>1</load-on-startup>
       </servlet>
       <servlet-mapping>
           <servlet-name>DispatcherServlet</servlet-name>
           <url-pattern>/</url-pattern>
       </servlet-mapping>
   
       <!--encodingFilter-->
       <filter>
           <filter-name>encodingFilter</filter-name>
           <filter-class>
               org.springframework.web.filter.CharacterEncodingFilter
           </filter-class>
           <init-param>
               <param-name>encoding</param-name>
               <param-value>utf-8</param-value>
           </init-param>
       </filter>
       <filter-mapping>
           <filter-name>encodingFilter</filter-name>
           <url-pattern>/*</url-pattern>
       </filter-mapping>
       
       <!--Session过期时间-->
       <session-config>
           <session-timeout>15</session-timeout>
       </session-config>
       
   </web-app>
   ```

2. **spring-mvc.xml**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xmlns:mvc="http://www.springframework.org/schema/mvc"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       https://www.springframework.org/schema/mvc/spring-mvc.xsd">
   
       <!-- 配置SpringMVC -->
       <!-- 1.开启SpringMVC注解驱动 -->
       <mvc:annotation-driven>
           <mvc:message-converters register-defaults="true">
               <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                   <constructor-arg value="UTF-8"/>
               </bean>
               <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                   <property name="objectMapper">
                       <bean class="org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean">
                           <property name="failOnEmptyBeans" value="false"/>
                       </bean>
                   </property>
               </bean>
           </mvc:message-converters>
       </mvc:annotation-driven>
       <!--解决跨域问题-->
       <mvc:cors>
       <mvc:mapping path="/**"
                    allowed-origins="http://127.0.0.1:8090,http://localhost:8090"
                    allowed-methods="POST,GET, OPTIONS,DELETE,PUT"
                    allowed-headers="Content-Type,ContentType,Access-Control-Allow-Headers, Authorization, X-Requested-With"
                    allow-credentials="true"/>
       </mvc:cors>
       <!-- 2.静态资源默认servlet配置-->
       <mvc:default-servlet-handler/>
   
       <!-- 3.配置jsp 显示ViewResolver视图解析器 -->
       <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
           <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
           <property name="prefix" value="/WEB-INF/jsp/" />
           <property name="suffix" value=".jsp" />
       </bean>
   
       <!-- 4.扫描web相关的bean -->
       <context:component-scan base-package="com.feige.controller" />
   
   </beans>
   ```

3. **Spring配置整合文件，applicationContext.xml**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd">
   
       <import resource="spring-dao.xml"/>
       <import resource="spring-service.xml"/>
       <import resource="spring-mvc.xml"/>
       
   </beans>
   ```

**配置文件，暂时结束！Controller 和 视图层编写**

1. BookController 类编写 ， 方法一：查询全部书籍

   ```
   @Controller
   @RequestMapping("/book")
   public class BookController {
   
       @Autowired
       @Qualifier("BookServiceImpl")
       private BookService bookService;
   
       @RequestMapping("/allBook")
       public String list(Model model) {
           List<Books> list = bookService.queryAllBook();
           model.addAttribute("list", list);
           return "allBook";
       }
   }
   ```

2. 编写首页 **index.jsp**

   ```
   <%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" %>
   <!DOCTYPE HTML>
   <html>
   <head>
       <title>首页</title>
       <style type="text/css">
           a {
               text-decoration: none;
               color: black;
               font-size: 18px;
           }
           h3 {
               width: 180px;
               height: 38px;
               margin: 100px auto;
               text-align: center;
               line-height: 38px;
               background: deepskyblue;
               border-radius: 4px;
           }
       </style>
   </head>
   <body>
   
   <h3>
       <a href="${pageContext.request.contextPath}/book/allBook">点击进入列表页</a>
   </h3>
   </body>
   </html>
   ```

3. 书籍列表页面 **allbook.jsp**

   ```
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>书籍列表</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>书籍列表 —— 显示所有书籍</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <div class="row">
           <div class="col-md-4 column">
               <a class="btn btn-primary" href="${pageContext.request.contextPath}/book/toAddBook">新增</a>
           </div>
       </div>
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <table class="table table-hover table-striped">
                   <thead>
                   <tr>
                       <th>书籍编号</th>
                       <th>书籍名字</th>
                       <th>书籍数量</th>
                       <th>书籍详情</th>
                       <th>操作</th>
                   </tr>
                   </thead>
   
                   <tbody>
                   <c:forEach var="book" items="${requestScope.get('list')}">
                       <tr>
                           <td>${book.getBookId()}</td>
                           <td>${book.getBookName()}</td>
                           <td>${book.getBookCounts()}</td>
                           <td>${book.getDetail()}</td>
                           <td>
                               <a href="${pageContext.request.contextPath}/book/toUpdateBook?id=${book.getBookId()}">更改</a> |
                               <a href="${pageContext.request.contextPath}/book/del/${book.getBookId()}">删除</a>
                           </td>
                       </tr>
                   </c:forEach>
                   </tbody>
               </table>
           </div>
       </div>
   </div>
   ```

4. BookController 类编写 ， 方法二：添加书籍

   ```
   @RequestMapping("/toAddBook")
   public String toAddPaper() {
       return "addBook";
   }
   
   @RequestMapping("/addBook")
   public String addPaper(Books books) {
       System.out.println(books);
       bookService.addBook(books);
       return "redirect:/book/allBook";
   }
   ```

5. 添加书籍页面：**addBook.jsp**

   ```
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   
   <html>
   <head>
       <title>新增书籍</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>新增书籍</small>
                   </h1>
               </div>
           </div>
       </div>
       <form action="${pageContext.request.contextPath}/book/addBook" method="post">
           书籍名称：<input type="text" name="bookName"><br><br><br>
           书籍数量：<input type="text" name="bookCounts"><br><br><br>
           书籍详情：<input type="text" name="detail"><br><br><br>
           <input type="submit" value="添加">
       </form>
   
   </div>
   ```

6. BookController 类编写 ， 方法三：修改书籍

   ```
   @RequestMapping("/toUpdateBook")
   public String toUpdateBook(Model model, int id) {
       Books books = bookService.queryBookById(id);
       System.out.println(books);
       model.addAttribute("book",books );
       return "updateBook";
   }
   
   @RequestMapping("/updateBook")
   public String updateBook(Model model, Books book) {
       bookService.updateBook(book);
       Books books = bookService.queryBookById(book.getBookID());
       model.addAttribute("books", books);
       return "redirect:/book/allBook";
   }
   ```

7. 修改书籍页面 **updateBook.jsp**

   ```
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>修改信息</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>修改信息</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <form action="${pageContext.request.contextPath}/book/updateBook" method="post">
           <input type="hidden" name="bookID" value="${book.getBookId()}"/>
           书籍名称：<input type="text" name="bookName" value="${book.getBookName()}"/>
           书籍数量：<input type="text" name="bookCounts" value="${book.getBookCounts()}"/>
           书籍详情：<input type="text" name="detail" value="${book.getDetail() }"/>
           <input type="submit" value="提交"/>
       </form>
   
   </div>
   ```

8. BookController 类编写 ， 方法四：删除书籍

   ```
   @RequestMapping("/del/{bookId}")
   public String deleteBook(@PathVariable("bookId") int id) {
       bookService.deleteBookById(id);
       return "redirect:/book/allBook";
   }
   ```

**配置Tomcat，进行运行！**

到目前为止，这个SSM项目整合已经完全的OK了，可以直接运行进行测试！这个练习十分的重要，大家需要保证，不看任何东西，自己也可以完整的实现出来！

## **6、项目结构图**

![1570186854191.png](https://blog.kuangstudy.com/usr/uploads/2019/10/1086489242.png)

![1570186868239.png](https://blog.kuangstudy.com/usr/uploads/2019/10/2326667495.png)

## 7、错误排查

### 1、访问出现404，排查步骤：**

1. 查看控制台输出，看一下是不是缺少了什么jar包。

2. 如果jar包存在，显示无法输出，就在IDEA的项目发布中，添加lib依赖！

   步骤：点击项目结构----->Artifacts----->点击自己的项目(ssm:war exploded)--->(点击工具栏的第一个)在WEB-INF目录下新建一个lib包----->选中lib------>点击工具栏的第三个然后选中第一个---->把里面的包全部选中点击ok---->点击Apply再ok

   ![image-20200128125126368](https://gitee.com/feigeCode/java_blog/raw/master/java/ssm%E6%95%B4%E5%90%88.assets/image-20200128125126368.png)

   ![image-20200128125237179](https://gitee.com/feigeCode/java_blog/raw/master/java/ssm%E6%95%B4%E5%90%88.assets/image-20200128125237179.png)

3. 重启Tomcat 即可解决！

### 2、其他错误

#### 1、bean不存在

 步骤：

 查看bean注入是否成功

 junit单元测试，看我们的代码是否能够查询出来

 问题不在底层，是我们spring出了问题

 springMVC整合时没有调用到service层的bean

 applicationContext.xml没有注册bean

 web.xml也绑定过配置文件要绑定大的applicationContext.xml



## 8、小结及展望

这个是同学们的第一个SSM整合案例，一定要烂熟于心！

SSM框架的重要程度是不言而喻的，学到这里，大家已经可以进行基本网站的单独开发。但是这只是增删改查的基本操作。可以说学到这里，大家才算是真正的步入了后台开发的门。也就是能找一个后台相关工作的底线。

或许很多人，工作就做这些事情，但是对于个人的提高来说，还远远不够！

| 飞哥 | 飞哥 | 飞哥 |
| ---- | ---- | ---- |
| 飞哥 | 飞哥 | 飞哥 |
| 飞哥 | 飞哥 | 飞哥 |
| 飞哥 | 飞哥 | 飞哥 |



~~~java
static class CustomAttributeProvider implements AttributeProvider {

        @Override
        public void setAttributes(Node node, String s, Map<String, String> map) {
            //改变a标签的target属性为_blank
            if(node instanceof Link) {
                map.put("target","_blank");
            }
            if (node instanceof TableBlock) {
                map.put("class","el-table__body-wrapper is-scrolling-none");
            }
            if (node instanceof TableBody) {
                map.put("class","el-table__body");
            }
            if (node instanceof TableRow) {
                map.put("class","el-table__row");
            }
            if (node instanceof TableCell) {
                map.put("class","el-table_13_column_55");
            }
        }
~~~

# feige

, 2020-03-02 07:06:53.0, 2020-03-13 06:59:47.0, admin, 10]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20009, rs-50156} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20009} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20009} Parameters : [13]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20009} Types : [INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20009} executed. 0.873332 millis. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog where id=?
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20009, rs-50157} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20009, rs-50157} Header: [id, type_name, title, content, create_time, change_time, author, view]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20009, rs-50157} Result: [13, mybatis, ssm框架整合, # ssm整合

## 1、数据库环境

创建一个存放书籍数据的数据库表

```
CREATE DATABASE `ssmbuild`;

USE `ssmbuild`;

DROP TABLE IF EXISTS `books`;

CREATE TABLE `books` (
  `bookId` INT PRIMARY KEY COMMENT '书id',
  `bookName` VARCHAR(100) NOT NULL COMMENT '书名',
  `bookCounts` INT(11) NOT NULL COMMENT '数量',
  ``ssmbuild``ssmbuild`` VARCHAR(200) NOT NULL COMMENT '描述'
) ENGINE=INNODB DEFAULT CHARSET=utf8

INSERT  INTO `books`(`bookId`,`bookName`,`bookCounts`,`detail`)VALUES 
(1,'Java',1,'从入门到放弃'),
(2,'MySQL',10,'从删库到跑路'),
(3,'Linux',5,'从进门到进牢');

SELECT * FROM books
```

## 2、基本环境搭建

1. 新建一Maven项目！ ssmbuild ， 添加web的支持

   ![image-20200128134359317](https://gitee.com/feigeCode/java_blog/raw/master/java/ssm%E6%95%B4%E5%90%88.assets/image-20200128134359317.png)

2. 导入相关的pom依赖！

   ```
   <dependencies>
       <!--Junit-->
       <dependency>
           <groupId>junit</groupId>
           <artifactId>junit</artifactId>
           <version>4.12</version>
       </dependency>
       <!--数据库驱动-->
       <dependency>
           <groupId>mysql</groupId>
           <artifactId>mysql-connector-java</artifactId>
           <version>5.1.47</version>
       </dependency>
       <!-- 数据库连接池 -->
       <dependency>
           <groupId>com.mchange</groupId>
           <artifactId>c3p0</artifactId>
           <version>0.9.5.2</version>
       </dependency>
   
       <!--Servlet - JSP -->
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>servlet-api</artifactId>
           <version>2.5</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet.jsp</groupId>
           <artifactId>jsp-api</artifactId>
           <version>2.2</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>jstl</artifactId>
           <version>1.2</version>
       </dependency>
   
       <!--Mybatis-->
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis</artifactId>
           <version>3.5.2</version>
       </dependency>
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis-spring</artifactId>
           <version>2.0.2</version>
       </dependency>
   
       <!--Spring-->
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-webmvc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-jdbc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->
       <dependency>
           <groupId>org.projectlombok</groupId>
           <artifactId>lombok</artifactId>
           <version>1.16.10</version>
       </dependency>
   </dependencies>
   ```

3. Maven资源过滤设置

   ```
   <build>
       <resources>
           <resource>
               <directory>src/main/java</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
           <resource>
               <directory>src/main/resources</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
       </resources>
   </build>
   ```

4. 建立基本结构和配置框架！

   - com.feige.pojo

   - com.feige.dao

   - com.feige.service

   - com.feige.controller

     在resources目录下创建

   - mybatis-config.xml

     ```
     <?xml version="1.0" encoding="UTF-8" ?>
     <!DOCTYPE configuration
             PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
             "http://mybatis.org/dtd/mybatis-3-config.dtd">
     <configuration>
     
     </configuration>
     ```

   - applicationContext.xml

     ```
     <?xml version="1.0" encoding="UTF-8"?>
     <beans xmlns="http://www.springframework.org/schema/beans"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://www.springframework.org/schema/beans
             http://www.springframework.org/schema/beans/spring-beans.xsd">
     
     </beans>
     ```

## 3、Mybatis层编写

1. 数据库配置文件 **database.properties**

   ```
   jdbc.driver=com.mysql.jdbc.Driver
   jdbc.url=jdbc:mysql://localhost:3306/ssmbuild?useSSL=true&useUnicode=true&characterEncoding=utf8
   jdbc.username=root
   jdbc.password=hufei169357
   ```

2. IDEA关联数据库

3. 编写MyBatis的核心配置文件

   ```
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE configuration
           PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-config.dtd">
   <configuration>
       
       <typeAliases>
           <package name="com.feige.pojo"/>
       </typeAliases>
       <mappers>
           <mapper resource="com/feige/dao/BookMapper.xml"/>
       </mappers>
   
   </configuration>
   ```

4. 编写数据库对应的实体类 com.feige.pojo.Books 使用lombok插件！

   ```
   package com.kuang.pojo;
   
   import lombok.AllArgsConstructor;
   import lombok.Data;
   import lombok.NoArgsConstructor;
   
   @Data
   @AllArgsConstructor
   @NoArgsConstructor
   public class Books {
       
       private int bookId;
       private String bookName;
       private int bookCounts;
       private String detail;
       
   }
   ```

5. 编写Dao层的 Mapper接口！

   ```
   package com.kuang.dao;
   
   import com.kuang.pojo.Books;
   import java.util.List;
   
   public interface BookMapper {
   
       //增加一个Book
       int addBook(Books book);
   
       //根据id删除一个Book
       int deleteBookById(int id);
   
       //更新Book
       int updateBook(Books books);
   
       //根据id查询,返回一个Book
       Books queryBookById(int id);
   
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   
   }
   ```

6. 编写接口对应的 Mapper.xml 文件。需要导入MyBatis的包；

   ```
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE mapper
           PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
   
   <mapper namespace="com.feige.dao.BooksMapper">
   
       <!--增加一个Book-->
       <insert id="addBook" parameterType="Books">
           insert into books(bookName,bookCounts,detail)
           values (#{bookName}, #{bookCounts}, #{detail})
       </insert>
   
       <!--根据id删除一个Book-->
       <delete id="deleteBookById" parameterType="int">
           delete from books where bookId=#{bookId}
       </delete>
   
       <!--更新Book-->
       <update id="updateBook" parameterType="Books">
           update books
           set bookName = #{bookName},bookCounts = #{bookCounts},detail = #{detail}
           where bookId = #{bookId}
       </update>
   
       <!--根据id查询,返回一个Book-->
       <select id="queryBookById" resultType="Books">
           select * from books
           where bookID = #{bookId}
       </select>
   
       <!--查询全部Book-->
       <select id="queryAllBook" resultType="com.feige.pojo.Books">
           SELECT * from books
       </select>
   
   </mapper>
   ```

7. 编写Service层的接口和实现类 接口：

   ```
   package com.feige.service;
   
   import com.feige.pojo.Books;
   
   import java.util.List;
   
   //BookService:底下需要去实现,调用dao层
   public interface BookService {
       //增加一个Book
       int addBook(Books book);
       //根据id删除一个Book
       int deleteBookById(int id);
       //更新Book
       int updateBook(Books books);
       //根据id查询,返回一个Book
       Books queryBookById(int id);
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   }
   ```

实现类：

```
package com.feige.service;

import com.feige.dao.BookMapper;
import com.feige.pojo.Books;
import java.util.List;

public class BookServiceImpl implements BookService {

    //调用dao层的操作，设置一个set接口，方便Spring管理
    private BookMapper bookMapper;

    public void setBookMapper(BookMapper bookMapper) {
        this.bookMapper = bookMapper;
    }
    
    public int addBook(Books book) {
        return bookMapper.addBook(book);
    }
    
    public int deleteBookById(int id) {
        return bookMapper.deleteBookById(id);
    }
    
    public int updateBook(Books books) {
        return bookMapper.updateBook(books);
    }
    
    public Books queryBookById(int id) {
        return bookMapper.queryBookById(id);
    }
    
    public List<Books> queryAllBook() {
        return bookMapper.queryAllBook();
    }
}
```

**OK，到此，底层需求操作编写完毕！**

## 4、Spring层

1. 配置**Spring整合MyBatis**，我们这里数据源使用c3p0连接池；

2. 我们去编写Spring整合Mybatis的相关的配置文件； spring-dao.xml

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans.xsd
   http://www.springframework.org/schema/context
   https://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 配置整合mybatis -->
       <!-- 1.关联数据库文件 -->
       <context:property-placeholder location="classpath:database.properties"/>
   
       <!-- 2.数据库连接池 -->
       <!--数据库连接池
   dbcp  半自动化操作  不能自动连接
   c3p0  自动化操作（自动的加载配置文件 并且设置到对象里面）
       -->
       <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
   <!-- 配置连接池属性 -->
   <property name="driverClass" value="${jdbc.driver}"/>
   <property name="jdbcUrl" value="${jdbc.url}"/>
   <property name="user" value="${jdbc.username}"/>
   <property name="password" value="${jdbc.password}"/>
   
   <!-- c3p0连接池的私有属性 -->
   <property name="maxPoolSize" value="30"/>
   <property name="minPoolSize" value="10"/>
   <!-- 关闭连接后不自动commit -->
   <property name="autoCommitOnClose" value="false"/>
   <!-- 获取连接超时时间 -->
   <property name="checkoutTimeout" value="10000"/>
   <!-- 当获取连接失败重试次数 -->
   <property name="acquireRetryAttempts" value="2"/>
       </bean>
   
       <!-- 3.配置SqlSessionFactory对象 -->
       <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource"/>
   <!-- 配置MyBaties全局配置文件:mybatis-config.xml -->
   <property name="configLocation" value="classpath:mybatis-config.xml"/>
       </bean>
   
       <!-- 4.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 -->
       <!--解释 ： https://www.cnblogs.com/jpfss/p/7799806.html-->
       <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
   <!-- 注入sqlSessionFactory -->
   <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
   <!-- 给出需要扫描Dao接口包 -->
   <property name="basePackage" value="com.feige.dao"/>
       </bean>
   
   </beans>
   ```

3. **Spring整合service层**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 扫描service相关的bean -->
       <context:component-scan base-package="com.kuang.service" />
   
       <!--BookServiceImpl注入到IOC容器中-->
       <bean id="BookServiceImpl" class="com.kuang.service.BookServiceImpl">
   <property name="bookMapper" ref="bookMapper"/>
       </bean>
   
       <!-- 配置事务管理器 -->
       <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource" />
       </bean>
   
   </beans>
   ```

Spring层搞定！再次理解一下，Spring就是一个大杂烩，一个容器！对吧！

## 5、SpringMVC层

1. **web.xml**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
            version="4.0">
   
       <!--DispatcherServlet-->
       <servlet>
           <servlet-name>DispatcherServlet</servlet-name>
           <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
           <init-param>
               <param-name>contextConfigLocation</param-name>
               <param-value>classpath:applicationContext.xml</param-value>
           </init-param>
           <load-on-startup>1</load-on-startup>
       </servlet>
       <servlet-mapping>
           <servlet-name>DispatcherServlet</servlet-name>
           <url-pattern>/</url-pattern>
       </servlet-mapping>
   
       <!--encodingFilter-->
       <filter>
           <filter-name>encodingFilter</filter-name>
           <filter-class>
               org.springframework.web.filter.CharacterEncodingFilter
           </filter-class>
           <init-param>
               <param-name>encoding</param-name>
               <param-value>utf-8</param-value>
           </init-param>
       </filter>
       <filter-mapping>
           <filter-name>encodingFilter</filter-name>
           <url-pattern>/*</url-pattern>
       </filter-mapping>
       
       <!--Session过期时间-->
       <session-config>
           <session-timeout>15</session-timeout>
       </session-config>
       
   </web-app>
   ```

2. **spring-mvc.xml**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xmlns:mvc="http://www.springframework.org/schema/mvc"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       https://www.springframework.org/schema/mvc/spring-mvc.xsd">
   
       <!-- 配置SpringMVC -->
       <!-- 1.开启SpringMVC注解驱动 -->
       <mvc:annotation-driven>
           <mvc:message-converters register-defaults="true">
               <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                   <constructor-arg value="UTF-8"/>
               </bean>
               <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                   <property name="objectMapper">
                       <bean class="org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean">
                           <property name="failOnEmptyBeans" value="false"/>
                       </bean>
                   </property>
               </bean>
           </mvc:message-converters>
       </mvc:annotation-driven>
       <!--解决跨域问题-->
       <mvc:cors>
       <mvc:mapping path="/**"
                    allowed-origins="http://127.0.0.1:8090,http://localhost:8090"
                    allowed-methods="POST,GET, OPTIONS,DELETE,PUT"
                    allowed-headers="Content-Type,ContentType,Access-Control-Allow-Headers, Authorization, X-Requested-With"
                    allow-credentials="true"/>
       </mvc:cors>
       <!-- 2.静态资源默认servlet配置-->
       <mvc:default-servlet-handler/>
   
       <!-- 3.配置jsp 显示ViewResolver视图解析器 -->
       <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
           <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
           <property name="prefix" value="/WEB-INF/jsp/" />
           <property name="suffix" value=".jsp" />
       </bean>
   
       <!-- 4.扫描web相关的bean -->
       <context:component-scan base-package="com.feige.controller" />
   
   </beans>
   ```

3. **Spring配置整合文件，applicationContext.xml**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd">
   
       <import resource="spring-dao.xml"/>
       <import resource="spring-service.xml"/>
       <import resource="spring-mvc.xml"/>
       
   </beans>
   ```

**配置文件，暂时结束！Controller 和 视图层编写**

1. BookController 类编写 ， 方法一：查询全部书籍

   ```
   @Controller
   @RequestMapping("/book")
   public class BookController {
   
       @Autowired
       @Qualifier("BookServiceImpl")
       private BookService bookService;
   
       @RequestMapping("/allBook")
       public String list(Model model) {
           List<Books> list = bookService.queryAllBook();
           model.addAttribute("list", list);
           return "allBook";
       }
   }
   ```

2. 编写首页 **index.jsp**

   ```
   <%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" %>
   <!DOCTYPE HTML>
   <html>
   <head>
       <title>首页</title>
       <style type="text/css">
           a {
               text-decoration: none;
               color: black;
               font-size: 18px;
           }
           h3 {
               width: 180px;
               height: 38px;
               margin: 100px auto;
               text-align: center;
               line-height: 38px;
               background: deepskyblue;
               border-radius: 4px;
           }
       </style>
   </head>
   <body>
   
   <h3>
       <a href="${pageContext.request.contextPath}/book/allBook">点击进入列表页</a>
   </h3>
   </body>
   </html>
   ```

3. 书籍列表页面 **allbook.jsp**

   ```
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>书籍列表</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>书籍列表 —— 显示所有书籍</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <div class="row">
           <div class="col-md-4 column">
               <a class="btn btn-primary" href="${pageContext.request.contextPath}/book/toAddBook">新增</a>
           </div>
       </div>
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <table class="table table-hover table-striped">
                   <thead>
                   <tr>
                       <th>书籍编号</th>
                       <th>书籍名字</th>
                       <th>书籍数量</th>
                       <th>书籍详情</th>
                       <th>操作</th>
                   </tr>
                   </thead>
   
                   <tbody>
                   <c:forEach var="book" items="${requestScope.get('list')}">
                       <tr>
                           <td>${book.getBookId()}</td>
                           <td>${book.getBookName()}</td>
                           <td>${book.getBookCounts()}</td>
                           <td>${book.getDetail()}</td>
                           <td>
                               <a href="${pageContext.request.contextPath}/book/toUpdateBook?id=${book.getBookId()}">更改</a> |
                               <a href="${pageContext.request.contextPath}/book/del/${book.getBookId()}">删除</a>
                           </td>
                       </tr>
                   </c:forEach>
                   </tbody>
               </table>
           </div>
       </div>
   </div>
   ```

4. BookController 类编写 ， 方法二：添加书籍

   ```
   @RequestMapping("/toAddBook")
   public String toAddPaper() {
       return "addBook";
   }
   
   @RequestMapping("/addBook")
   public String addPaper(Books books) {
       System.out.println(books);
       bookService.addBook(books);
       return "redirect:/book/allBook";
   }
   ```

5. 添加书籍页面：**addBook.jsp**

   ```
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   
   <html>
   <head>
       <title>新增书籍</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>新增书籍</small>
                   </h1>
               </div>
           </div>
       </div>
       <form action="${pageContext.request.contextPath}/book/addBook" method="post">
           书籍名称：<input type="text" name="bookName"><br><br><br>
           书籍数量：<input type="text" name="bookCounts"><br><br><br>
           书籍详情：<input type="text" name="detail"><br><br><br>
           <input type="submit" value="添加">
       </form>
   
   </div>
   ```

6. BookController 类编写 ， 方法三：修改书籍

   ```
   @RequestMapping("/toUpdateBook")
   public String toUpdateBook(Model model, int id) {
       Books books = bookService.queryBookById(id);
       System.out.println(books);
       model.addAttribute("book",books );
       return "updateBook";
   }
   
   @RequestMapping("/updateBook")
   public String updateBook(Model model, Books book) {
       bookService.updateBook(book);
       Books books = bookService.queryBookById(book.getBookID());
       model.addAttribute("books", books);
       return "redirect:/book/allBook";
   }
   ```

7. 修改书籍页面 **updateBook.jsp**

   ```
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>修改信息</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>修改信息</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <form action="${pageContext.request.contextPath}/book/updateBook" method="post">
           <input type="hidden" name="bookID" value="${book.getBookId()}"/>
           书籍名称：<input type="text" name="bookName" value="${book.getBookName()}"/>
           书籍数量：<input type="text" name="bookCounts" value="${book.getBookCounts()}"/>
           书籍详情：<input type="text" name="detail" value="${book.getDetail() }"/>
           <input type="submit" value="提交"/>
       </form>
   
   </div>
   ```

8. BookController 类编写 ， 方法四：删除书籍

   ```
   @RequestMapping("/del/{bookId}")
   public String deleteBook(@PathVariable("bookId") int id) {
       bookService.deleteBookById(id);
       return "redirect:/book/allBook";
   }
   ```

**配置Tomcat，进行运行！**

到目前为止，这个SSM项目整合已经完全的OK了，可以直接运行进行测试！这个练习十分的重要，大家需要保证，不看任何东西，自己也可以完整的实现出来！

## **6、项目结构图**

![1570186854191.png](https://blog.kuangstudy.com/usr/uploads/2019/10/1086489242.png)

![1570186868239.png](https://blog.kuangstudy.com/usr/uploads/2019/10/2326667495.png)

## 7、错误排查

### 1、访问出现404，排查步骤：**

1. 查看控制台输出，看一下是不是缺少了什么jar包。

2. 如果jar包存在，显示无法输出，就在IDEA的项目发布中，添加lib依赖！

   步骤：点击项目结构----->Artifacts----->点击自己的项目(ssm:war exploded)--->(点击工具栏的第一个)在WEB-INF目录下新建一个lib包----->选中lib------>点击工具栏的第三个然后选中第一个---->把里面的包全部选中点击ok---->点击Apply再ok

   ![image-20200128125126368](https://gitee.com/feigeCode/java_blog/raw/master/java/ssm%E6%95%B4%E5%90%88.assets/image-20200128125126368.png)

   ![image-20200128125237179](https://gitee.com/feigeCode/java_blog/raw/master/java/ssm%E6%95%B4%E5%90%88.assets/image-20200128125237179.png)

3. 重启Tomcat 即可解决！

### 2、其他错误

#### 1、bean不存在

 步骤：

 查看bean注入是否成功

 junit单元测试，看我们的代码是否能够查询出来

 问题不在底层，是我们spring出了问题

 springMVC整合时没有调用到service层的bean

 applicationContext.xml没有注册bean

 web.xml也绑定过配置文件要绑定大的applicationContext.xml



## 8、小结及展望

这个是同学们的第一个SSM整合案例，一定要烂熟于心！

SSM框架的重要程度是不言而喻的，学到这里，大家已经可以进行基本网站的单独开发。但是这只是增删改查的基本操作。可以说学到这里，大家才算是真正的步入了后台开发的门。也就是能找一个后台相关工作的底线。

或许很多人，工作就做这些事情，但是对于个人的提高来说，还远远不够！

| 飞哥 | 飞哥 | 飞哥 |
| ---- | ---- | ---- |
| 飞哥 | 飞哥 | 飞哥 |
| 飞哥 | 飞哥 | 飞哥 |
| 飞哥 | 飞哥 | 飞哥 |



~~~java
static class CustomAttributeProvider implements AttributeProvider {

        @Override
        public void setAttributes(Node node, String s, Map<String, String> map) {
            //改变a标签的target属性为_blank
            if(node instanceof Link) {
                map.put("target","_blank");
            }
            if (node instanceof TableBlock) {
                map.put("class","el-table__body-wrapper is-scrolling-none");
            }
            if (node instanceof TableBody) {
                map.put("class","el-table__body");
            }
            if (node instanceof TableRow) {
                map.put("class","el-table__row");
            }
            if (node instanceof TableCell) {
                map.put("class","el-table_13_column_55");
            }
        }
~~~

# feige

, 2020-03-02 07:06:53.0, 2020-03-13 06:59:47.0, admin, 10]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20009, rs-50157} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20009} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20002} Parameters : [13]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20002} Types : [INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20002} executed. 3.116887 millis. select distinct count(*) from comments c
        where c.blog_id=? and
        c.parent_id is null;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20002, rs-50158} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20002, rs-50158} Header: [count(*)]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20002, rs-50158} Result: [3]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20002, rs-50158} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20002} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20003} Parameters : [13, 0, 10]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20003} Types : [INTEGER, INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20003} executed. 3.60533 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id  and
        c.parent_id is null limit ?,?;;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20003, rs-50159} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20003, rs-50159} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20003, rs-50159} Result: [26, 好好, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:35.0, null]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20003, rs-50159} Result: [29, 太好了, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:13.0, null]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20003, rs-50159} Result: [32, <p>feige</p>, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 01:33:26.0, null]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20003, rs-50159} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20003} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Parameters : [13, 26]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} executed. 4.319107 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50160} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50160} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50160} Result: [27, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:56.0, sss]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50160} Result: [28, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:43:03.0, sss]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50160} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Parameters : [13, 26]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} executed. 3.347997 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50161} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50161} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50161} Result: [27, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:56.0, sss]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50161} Result: [28, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:43:03.0, sss]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50161} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Parameters : [13, 27]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} executed. 1.49911 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50162} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50162} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50162} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Parameters : [13, 27]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} executed. 0.853777 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50163} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50163} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50163} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Parameters : [13, 29]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} executed. 4.492885 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50164} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50164} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50164} Result: [30, 谢谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:43.0, sss]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50164} Result: [31, 不用谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:47:01.0, sss]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50164} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Parameters : [13, 29]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} executed. 4.176885 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50165} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50165} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50165} Result: [30, 谢谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:43.0, sss]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50165} Result: [31, 不用谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:47:01.0, sss]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50165} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Parameters : [13, 30]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} executed. 0.699555 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50166} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50166} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50166} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Parameters : [13, 30]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} executed. 0.785332 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50167} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50167} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50167} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Parameters : [13, 32]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} executed. 0.730222 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50168} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50168} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50168} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20005} Parameters : [13]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20005} Types : [INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20005} executed. 1.25511 millis. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog where id=?
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50169} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50169} Header: [id, type_name, title, content, create_time, change_time, author, view]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50169} Result: [13, mybatis, ssm框架整合, # ssm整合

## 1、数据库环境

创建一个存放书籍数据的数据库表

```
CREATE DATABASE `ssmbuild`;

USE `ssmbuild`;

DROP TABLE IF EXISTS `books`;

CREATE TABLE `books` (
  `bookId` INT PRIMARY KEY COMMENT '书id',
  `bookName` VARCHAR(100) NOT NULL COMMENT '书名',
  `bookCounts` INT(11) NOT NULL COMMENT '数量',
  ``ssmbuild``ssmbuild`` VARCHAR(200) NOT NULL COMMENT '描述'
) ENGINE=INNODB DEFAULT CHARSET=utf8

INSERT  INTO `books`(`bookId`,`bookName`,`bookCounts`,`detail`)VALUES 
(1,'Java',1,'从入门到放弃'),
(2,'MySQL',10,'从删库到跑路'),
(3,'Linux',5,'从进门到进牢');

SELECT * FROM books
```

## 2、基本环境搭建

1. 新建一Maven项目！ ssmbuild ， 添加web的支持

   ![image-20200128134359317](https://gitee.com/feigeCode/java_blog/raw/master/java/ssm%E6%95%B4%E5%90%88.assets/image-20200128134359317.png)

2. 导入相关的pom依赖！

   ```
   <dependencies>
       <!--Junit-->
       <dependency>
           <groupId>junit</groupId>
           <artifactId>junit</artifactId>
           <version>4.12</version>
       </dependency>
       <!--数据库驱动-->
       <dependency>
           <groupId>mysql</groupId>
           <artifactId>mysql-connector-java</artifactId>
           <version>5.1.47</version>
       </dependency>
       <!-- 数据库连接池 -->
       <dependency>
           <groupId>com.mchange</groupId>
           <artifactId>c3p0</artifactId>
           <version>0.9.5.2</version>
       </dependency>
   
       <!--Servlet - JSP -->
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>servlet-api</artifactId>
           <version>2.5</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet.jsp</groupId>
           <artifactId>jsp-api</artifactId>
           <version>2.2</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>jstl</artifactId>
           <version>1.2</version>
       </dependency>
   
       <!--Mybatis-->
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis</artifactId>
           <version>3.5.2</version>
       </dependency>
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis-spring</artifactId>
           <version>2.0.2</version>
       </dependency>
   
       <!--Spring-->
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-webmvc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-jdbc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->
       <dependency>
           <groupId>org.projectlombok</groupId>
           <artifactId>lombok</artifactId>
           <version>1.16.10</version>
       </dependency>
   </dependencies>
   ```

3. Maven资源过滤设置

   ```
   <build>
       <resources>
           <resource>
               <directory>src/main/java</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
           <resource>
               <directory>src/main/resources</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
       </resources>
   </build>
   ```

4. 建立基本结构和配置框架！

   - com.feige.pojo

   - com.feige.dao

   - com.feige.service

   - com.feige.controller

     在resources目录下创建

   - mybatis-config.xml

     ```
     <?xml version="1.0" encoding="UTF-8" ?>
     <!DOCTYPE configuration
             PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
             "http://mybatis.org/dtd/mybatis-3-config.dtd">
     <configuration>
     
     </configuration>
     ```

   - applicationContext.xml

     ```
     <?xml version="1.0" encoding="UTF-8"?>
     <beans xmlns="http://www.springframework.org/schema/beans"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://www.springframework.org/schema/beans
             http://www.springframework.org/schema/beans/spring-beans.xsd">
     
     </beans>
     ```

## 3、Mybatis层编写

1. 数据库配置文件 **database.properties**

   ```
   jdbc.driver=com.mysql.jdbc.Driver
   jdbc.url=jdbc:mysql://localhost:3306/ssmbuild?useSSL=true&useUnicode=true&characterEncoding=utf8
   jdbc.username=root
   jdbc.password=hufei169357
   ```

2. IDEA关联数据库

3. 编写MyBatis的核心配置文件

   ```
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE configuration
           PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-config.dtd">
   <configuration>
       
       <typeAliases>
           <package name="com.feige.pojo"/>
       </typeAliases>
       <mappers>
           <mapper resource="com/feige/dao/BookMapper.xml"/>
       </mappers>
   
   </configuration>
   ```

4. 编写数据库对应的实体类 com.feige.pojo.Books 使用lombok插件！

   ```
   package com.kuang.pojo;
   
   import lombok.AllArgsConstructor;
   import lombok.Data;
   import lombok.NoArgsConstructor;
   
   @Data
   @AllArgsConstructor
   @NoArgsConstructor
   public class Books {
       
       private int bookId;
       private String bookName;
       private int bookCounts;
       private String detail;
       
   }
   ```

5. 编写Dao层的 Mapper接口！

   ```
   package com.kuang.dao;
   
   import com.kuang.pojo.Books;
   import java.util.List;
   
   public interface BookMapper {
   
       //增加一个Book
       int addBook(Books book);
   
       //根据id删除一个Book
       int deleteBookById(int id);
   
       //更新Book
       int updateBook(Books books);
   
       //根据id查询,返回一个Book
       Books queryBookById(int id);
   
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   
   }
   ```

6. 编写接口对应的 Mapper.xml 文件。需要导入MyBatis的包；

   ```
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE mapper
           PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
   
   <mapper namespace="com.feige.dao.BooksMapper">
   
       <!--增加一个Book-->
       <insert id="addBook" parameterType="Books">
           insert into books(bookName,bookCounts,detail)
           values (#{bookName}, #{bookCounts}, #{detail})
       </insert>
   
       <!--根据id删除一个Book-->
       <delete id="deleteBookById" parameterType="int">
           delete from books where bookId=#{bookId}
       </delete>
   
       <!--更新Book-->
       <update id="updateBook" parameterType="Books">
           update books
           set bookName = #{bookName},bookCounts = #{bookCounts},detail = #{detail}
           where bookId = #{bookId}
       </update>
   
       <!--根据id查询,返回一个Book-->
       <select id="queryBookById" resultType="Books">
           select * from books
           where bookID = #{bookId}
       </select>
   
       <!--查询全部Book-->
       <select id="queryAllBook" resultType="com.feige.pojo.Books">
           SELECT * from books
       </select>
   
   </mapper>
   ```

7. 编写Service层的接口和实现类 接口：

   ```
   package com.feige.service;
   
   import com.feige.pojo.Books;
   
   import java.util.List;
   
   //BookService:底下需要去实现,调用dao层
   public interface BookService {
       //增加一个Book
       int addBook(Books book);
       //根据id删除一个Book
       int deleteBookById(int id);
       //更新Book
       int updateBook(Books books);
       //根据id查询,返回一个Book
       Books queryBookById(int id);
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   }
   ```

实现类：

```
package com.feige.service;

import com.feige.dao.BookMapper;
import com.feige.pojo.Books;
import java.util.List;

public class BookServiceImpl implements BookService {

    //调用dao层的操作，设置一个set接口，方便Spring管理
    private BookMapper bookMapper;

    public void setBookMapper(BookMapper bookMapper) {
        this.bookMapper = bookMapper;
    }
    
    public int addBook(Books book) {
        return bookMapper.addBook(book);
    }
    
    public int deleteBookById(int id) {
        return bookMapper.deleteBookById(id);
    }
    
    public int updateBook(Books books) {
        return bookMapper.updateBook(books);
    }
    
    public Books queryBookById(int id) {
        return bookMapper.queryBookById(id);
    }
    
    public List<Books> queryAllBook() {
        return bookMapper.queryAllBook();
    }
}
```

**OK，到此，底层需求操作编写完毕！**

## 4、Spring层

1. 配置**Spring整合MyBatis**，我们这里数据源使用c3p0连接池；

2. 我们去编写Spring整合Mybatis的相关的配置文件； spring-dao.xml

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans.xsd
   http://www.springframework.org/schema/context
   https://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 配置整合mybatis -->
       <!-- 1.关联数据库文件 -->
       <context:property-placeholder location="classpath:database.properties"/>
   
       <!-- 2.数据库连接池 -->
       <!--数据库连接池
   dbcp  半自动化操作  不能自动连接
   c3p0  自动化操作（自动的加载配置文件 并且设置到对象里面）
       -->
       <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
   <!-- 配置连接池属性 -->
   <property name="driverClass" value="${jdbc.driver}"/>
   <property name="jdbcUrl" value="${jdbc.url}"/>
   <property name="user" value="${jdbc.username}"/>
   <property name="password" value="${jdbc.password}"/>
   
   <!-- c3p0连接池的私有属性 -->
   <property name="maxPoolSize" value="30"/>
   <property name="minPoolSize" value="10"/>
   <!-- 关闭连接后不自动commit -->
   <property name="autoCommitOnClose" value="false"/>
   <!-- 获取连接超时时间 -->
   <property name="checkoutTimeout" value="10000"/>
   <!-- 当获取连接失败重试次数 -->
   <property name="acquireRetryAttempts" value="2"/>
       </bean>
   
       <!-- 3.配置SqlSessionFactory对象 -->
       <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource"/>
   <!-- 配置MyBaties全局配置文件:mybatis-config.xml -->
   <property name="configLocation" value="classpath:mybatis-config.xml"/>
       </bean>
   
       <!-- 4.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 -->
       <!--解释 ： https://www.cnblogs.com/jpfss/p/7799806.html-->
       <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
   <!-- 注入sqlSessionFactory -->
   <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
   <!-- 给出需要扫描Dao接口包 -->
   <property name="basePackage" value="com.feige.dao"/>
       </bean>
   
   </beans>
   ```

3. **Spring整合service层**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 扫描service相关的bean -->
       <context:component-scan base-package="com.kuang.service" />
   
       <!--BookServiceImpl注入到IOC容器中-->
       <bean id="BookServiceImpl" class="com.kuang.service.BookServiceImpl">
   <property name="bookMapper" ref="bookMapper"/>
       </bean>
   
       <!-- 配置事务管理器 -->
       <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource" />
       </bean>
   
   </beans>
   ```

Spring层搞定！再次理解一下，Spring就是一个大杂烩，一个容器！对吧！

## 5、SpringMVC层

1. **web.xml**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
            version="4.0">
   
       <!--DispatcherServlet-->
       <servlet>
           <servlet-name>DispatcherServlet</servlet-name>
           <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
           <init-param>
               <param-name>contextConfigLocation</param-name>
               <param-value>classpath:applicationContext.xml</param-value>
           </init-param>
           <load-on-startup>1</load-on-startup>
       </servlet>
       <servlet-mapping>
           <servlet-name>DispatcherServlet</servlet-name>
           <url-pattern>/</url-pattern>
       </servlet-mapping>
   
       <!--encodingFilter-->
       <filter>
           <filter-name>encodingFilter</filter-name>
           <filter-class>
               org.springframework.web.filter.CharacterEncodingFilter
           </filter-class>
           <init-param>
               <param-name>encoding</param-name>
               <param-value>utf-8</param-value>
           </init-param>
       </filter>
       <filter-mapping>
           <filter-name>encodingFilter</filter-name>
           <url-pattern>/*</url-pattern>
       </filter-mapping>
       
       <!--Session过期时间-->
       <session-config>
           <session-timeout>15</session-timeout>
       </session-config>
       
   </web-app>
   ```

2. **spring-mvc.xml**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xmlns:mvc="http://www.springframework.org/schema/mvc"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       https://www.springframework.org/schema/mvc/spring-mvc.xsd">
   
       <!-- 配置SpringMVC -->
       <!-- 1.开启SpringMVC注解驱动 -->
       <mvc:annotation-driven>
           <mvc:message-converters register-defaults="true">
               <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                   <constructor-arg value="UTF-8"/>
               </bean>
               <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                   <property name="objectMapper">
                       <bean class="org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean">
                           <property name="failOnEmptyBeans" value="false"/>
                       </bean>
                   </property>
               </bean>
           </mvc:message-converters>
       </mvc:annotation-driven>
       <!--解决跨域问题-->
       <mvc:cors>
       <mvc:mapping path="/**"
                    allowed-origins="http://127.0.0.1:8090,http://localhost:8090"
                    allowed-methods="POST,GET, OPTIONS,DELETE,PUT"
                    allowed-headers="Content-Type,ContentType,Access-Control-Allow-Headers, Authorization, X-Requested-With"
                    allow-credentials="true"/>
       </mvc:cors>
       <!-- 2.静态资源默认servlet配置-->
       <mvc:default-servlet-handler/>
   
       <!-- 3.配置jsp 显示ViewResolver视图解析器 -->
       <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
           <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
           <property name="prefix" value="/WEB-INF/jsp/" />
           <property name="suffix" value=".jsp" />
       </bean>
   
       <!-- 4.扫描web相关的bean -->
       <context:component-scan base-package="com.feige.controller" />
   
   </beans>
   ```

3. **Spring配置整合文件，applicationContext.xml**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd">
   
       <import resource="spring-dao.xml"/>
       <import resource="spring-service.xml"/>
       <import resource="spring-mvc.xml"/>
       
   </beans>
   ```

**配置文件，暂时结束！Controller 和 视图层编写**

1. BookController 类编写 ， 方法一：查询全部书籍

   ```
   @Controller
   @RequestMapping("/book")
   public class BookController {
   
       @Autowired
       @Qualifier("BookServiceImpl")
       private BookService bookService;
   
       @RequestMapping("/allBook")
       public String list(Model model) {
           List<Books> list = bookService.queryAllBook();
           model.addAttribute("list", list);
           return "allBook";
       }
   }
   ```

2. 编写首页 **index.jsp**

   ```
   <%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" %>
   <!DOCTYPE HTML>
   <html>
   <head>
       <title>首页</title>
       <style type="text/css">
           a {
               text-decoration: none;
               color: black;
               font-size: 18px;
           }
           h3 {
               width: 180px;
               height: 38px;
               margin: 100px auto;
               text-align: center;
               line-height: 38px;
               background: deepskyblue;
               border-radius: 4px;
           }
       </style>
   </head>
   <body>
   
   <h3>
       <a href="${pageContext.request.contextPath}/book/allBook">点击进入列表页</a>
   </h3>
   </body>
   </html>
   ```

3. 书籍列表页面 **allbook.jsp**

   ```
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>书籍列表</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>书籍列表 —— 显示所有书籍</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <div class="row">
           <div class="col-md-4 column">
               <a class="btn btn-primary" href="${pageContext.request.contextPath}/book/toAddBook">新增</a>
           </div>
       </div>
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <table class="table table-hover table-striped">
                   <thead>
                   <tr>
                       <th>书籍编号</th>
                       <th>书籍名字</th>
                       <th>书籍数量</th>
                       <th>书籍详情</th>
                       <th>操作</th>
                   </tr>
                   </thead>
   
                   <tbody>
                   <c:forEach var="book" items="${requestScope.get('list')}">
                       <tr>
                           <td>${book.getBookId()}</td>
                           <td>${book.getBookName()}</td>
                           <td>${book.getBookCounts()}</td>
                           <td>${book.getDetail()}</td>
                           <td>
                               <a href="${pageContext.request.contextPath}/book/toUpdateBook?id=${book.getBookId()}">更改</a> |
                               <a href="${pageContext.request.contextPath}/book/del/${book.getBookId()}">删除</a>
                           </td>
                       </tr>
                   </c:forEach>
                   </tbody>
               </table>
           </div>
       </div>
   </div>
   ```

4. BookController 类编写 ， 方法二：添加书籍

   ```
   @RequestMapping("/toAddBook")
   public String toAddPaper() {
       return "addBook";
   }
   
   @RequestMapping("/addBook")
   public String addPaper(Books books) {
       System.out.println(books);
       bookService.addBook(books);
       return "redirect:/book/allBook";
   }
   ```

5. 添加书籍页面：**addBook.jsp**

   ```
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   
   <html>
   <head>
       <title>新增书籍</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>新增书籍</small>
                   </h1>
               </div>
           </div>
       </div>
       <form action="${pageContext.request.contextPath}/book/addBook" method="post">
           书籍名称：<input type="text" name="bookName"><br><br><br>
           书籍数量：<input type="text" name="bookCounts"><br><br><br>
           书籍详情：<input type="text" name="detail"><br><br><br>
           <input type="submit" value="添加">
       </form>
   
   </div>
   ```

6. BookController 类编写 ， 方法三：修改书籍

   ```
   @RequestMapping("/toUpdateBook")
   public String toUpdateBook(Model model, int id) {
       Books books = bookService.queryBookById(id);
       System.out.println(books);
       model.addAttribute("book",books );
       return "updateBook";
   }
   
   @RequestMapping("/updateBook")
   public String updateBook(Model model, Books book) {
       bookService.updateBook(book);
       Books books = bookService.queryBookById(book.getBookID());
       model.addAttribute("books", books);
       return "redirect:/book/allBook";
   }
   ```

7. 修改书籍页面 **updateBook.jsp**

   ```
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>修改信息</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>修改信息</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <form action="${pageContext.request.contextPath}/book/updateBook" method="post">
           <input type="hidden" name="bookID" value="${book.getBookId()}"/>
           书籍名称：<input type="text" name="bookName" value="${book.getBookName()}"/>
           书籍数量：<input type="text" name="bookCounts" value="${book.getBookCounts()}"/>
           书籍详情：<input type="text" name="detail" value="${book.getDetail() }"/>
           <input type="submit" value="提交"/>
       </form>
   
   </div>
   ```

8. BookController 类编写 ， 方法四：删除书籍

   ```
   @RequestMapping("/del/{bookId}")
   public String deleteBook(@PathVariable("bookId") int id) {
       bookService.deleteBookById(id);
       return "redirect:/book/allBook";
   }
   ```

**配置Tomcat，进行运行！**

到目前为止，这个SSM项目整合已经完全的OK了，可以直接运行进行测试！这个练习十分的重要，大家需要保证，不看任何东西，自己也可以完整的实现出来！

## **6、项目结构图**

![1570186854191.png](https://blog.kuangstudy.com/usr/uploads/2019/10/1086489242.png)

![1570186868239.png](https://blog.kuangstudy.com/usr/uploads/2019/10/2326667495.png)

## 7、错误排查

### 1、访问出现404，排查步骤：**

1. 查看控制台输出，看一下是不是缺少了什么jar包。

2. 如果jar包存在，显示无法输出，就在IDEA的项目发布中，添加lib依赖！

   步骤：点击项目结构----->Artifacts----->点击自己的项目(ssm:war exploded)--->(点击工具栏的第一个)在WEB-INF目录下新建一个lib包----->选中lib------>点击工具栏的第三个然后选中第一个---->把里面的包全部选中点击ok---->点击Apply再ok

   ![image-20200128125126368](https://gitee.com/feigeCode/java_blog/raw/master/java/ssm%E6%95%B4%E5%90%88.assets/image-20200128125126368.png)

   ![image-20200128125237179](https://gitee.com/feigeCode/java_blog/raw/master/java/ssm%E6%95%B4%E5%90%88.assets/image-20200128125237179.png)

3. 重启Tomcat 即可解决！

### 2、其他错误

#### 1、bean不存在

 步骤：

 查看bean注入是否成功

 junit单元测试，看我们的代码是否能够查询出来

 问题不在底层，是我们spring出了问题

 springMVC整合时没有调用到service层的bean

 applicationContext.xml没有注册bean

 web.xml也绑定过配置文件要绑定大的applicationContext.xml



## 8、小结及展望

这个是同学们的第一个SSM整合案例，一定要烂熟于心！

SSM框架的重要程度是不言而喻的，学到这里，大家已经可以进行基本网站的单独开发。但是这只是增删改查的基本操作。可以说学到这里，大家才算是真正的步入了后台开发的门。也就是能找一个后台相关工作的底线。

或许很多人，工作就做这些事情，但是对于个人的提高来说，还远远不够！

| 飞哥 | 飞哥 | 飞哥 |
| ---- | ---- | ---- |
| 飞哥 | 飞哥 | 飞哥 |
| 飞哥 | 飞哥 | 飞哥 |
| 飞哥 | 飞哥 | 飞哥 |



~~~java
static class CustomAttributeProvider implements AttributeProvider {

        @Override
        public void setAttributes(Node node, String s, Map<String, String> map) {
            //改变a标签的target属性为_blank
            if(node instanceof Link) {
                map.put("target","_blank");
            }
            if (node instanceof TableBlock) {
                map.put("class","el-table__body-wrapper is-scrolling-none");
            }
            if (node instanceof TableBody) {
                map.put("class","el-table__body");
            }
            if (node instanceof TableRow) {
                map.put("class","el-table__row");
            }
            if (node instanceof TableCell) {
                map.put("class","el-table_13_column_55");
            }
        }
~~~

# feige

, 2020-03-02 07:06:53.0, 2020-03-13 06:59:47.0, admin, 10]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50169} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20005} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20005} Parameters : [13]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20005} Types : [INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20005} executed. 1.085332 millis. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog where id=?
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50170} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50170} Header: [id, type_name, title, content, create_time, change_time, author, view]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50170} Result: [13, mybatis, ssm框架整合, # ssm整合

## 1、数据库环境

创建一个存放书籍数据的数据库表

```
CREATE DATABASE `ssmbuild`;

USE `ssmbuild`;

DROP TABLE IF EXISTS `books`;

CREATE TABLE `books` (
  `bookId` INT PRIMARY KEY COMMENT '书id',
  `bookName` VARCHAR(100) NOT NULL COMMENT '书名',
  `bookCounts` INT(11) NOT NULL COMMENT '数量',
  ``ssmbuild``ssmbuild`` VARCHAR(200) NOT NULL COMMENT '描述'
) ENGINE=INNODB DEFAULT CHARSET=utf8

INSERT  INTO `books`(`bookId`,`bookName`,`bookCounts`,`detail`)VALUES 
(1,'Java',1,'从入门到放弃'),
(2,'MySQL',10,'从删库到跑路'),
(3,'Linux',5,'从进门到进牢');

SELECT * FROM books
```

## 2、基本环境搭建

1. 新建一Maven项目！ ssmbuild ， 添加web的支持

   ![image-20200128134359317](https://gitee.com/feigeCode/java_blog/raw/master/java/ssm%E6%95%B4%E5%90%88.assets/image-20200128134359317.png)

2. 导入相关的pom依赖！

   ```
   <dependencies>
       <!--Junit-->
       <dependency>
           <groupId>junit</groupId>
           <artifactId>junit</artifactId>
           <version>4.12</version>
       </dependency>
       <!--数据库驱动-->
       <dependency>
           <groupId>mysql</groupId>
           <artifactId>mysql-connector-java</artifactId>
           <version>5.1.47</version>
       </dependency>
       <!-- 数据库连接池 -->
       <dependency>
           <groupId>com.mchange</groupId>
           <artifactId>c3p0</artifactId>
           <version>0.9.5.2</version>
       </dependency>
   
       <!--Servlet - JSP -->
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>servlet-api</artifactId>
           <version>2.5</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet.jsp</groupId>
           <artifactId>jsp-api</artifactId>
           <version>2.2</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>jstl</artifactId>
           <version>1.2</version>
       </dependency>
   
       <!--Mybatis-->
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis</artifactId>
           <version>3.5.2</version>
       </dependency>
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis-spring</artifactId>
           <version>2.0.2</version>
       </dependency>
   
       <!--Spring-->
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-webmvc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-jdbc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->
       <dependency>
           <groupId>org.projectlombok</groupId>
           <artifactId>lombok</artifactId>
           <version>1.16.10</version>
       </dependency>
   </dependencies>
   ```

3. Maven资源过滤设置

   ```
   <build>
       <resources>
           <resource>
               <directory>src/main/java</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
           <resource>
               <directory>src/main/resources</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
       </resources>
   </build>
   ```

4. 建立基本结构和配置框架！

   - com.feige.pojo

   - com.feige.dao

   - com.feige.service

   - com.feige.controller

     在resources目录下创建

   - mybatis-config.xml

     ```
     <?xml version="1.0" encoding="UTF-8" ?>
     <!DOCTYPE configuration
             PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
             "http://mybatis.org/dtd/mybatis-3-config.dtd">
     <configuration>
     
     </configuration>
     ```

   - applicationContext.xml

     ```
     <?xml version="1.0" encoding="UTF-8"?>
     <beans xmlns="http://www.springframework.org/schema/beans"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://www.springframework.org/schema/beans
             http://www.springframework.org/schema/beans/spring-beans.xsd">
     
     </beans>
     ```

## 3、Mybatis层编写

1. 数据库配置文件 **database.properties**

   ```
   jdbc.driver=com.mysql.jdbc.Driver
   jdbc.url=jdbc:mysql://localhost:3306/ssmbuild?useSSL=true&useUnicode=true&characterEncoding=utf8
   jdbc.username=root
   jdbc.password=hufei169357
   ```

2. IDEA关联数据库

3. 编写MyBatis的核心配置文件

   ```
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE configuration
           PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-config.dtd">
   <configuration>
       
       <typeAliases>
           <package name="com.feige.pojo"/>
       </typeAliases>
       <mappers>
           <mapper resource="com/feige/dao/BookMapper.xml"/>
       </mappers>
   
   </configuration>
   ```

4. 编写数据库对应的实体类 com.feige.pojo.Books 使用lombok插件！

   ```
   package com.kuang.pojo;
   
   import lombok.AllArgsConstructor;
   import lombok.Data;
   import lombok.NoArgsConstructor;
   
   @Data
   @AllArgsConstructor
   @NoArgsConstructor
   public class Books {
       
       private int bookId;
       private String bookName;
       private int bookCounts;
       private String detail;
       
   }
   ```

5. 编写Dao层的 Mapper接口！

   ```
   package com.kuang.dao;
   
   import com.kuang.pojo.Books;
   import java.util.List;
   
   public interface BookMapper {
   
       //增加一个Book
       int addBook(Books book);
   
       //根据id删除一个Book
       int deleteBookById(int id);
   
       //更新Book
       int updateBook(Books books);
   
       //根据id查询,返回一个Book
       Books queryBookById(int id);
   
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   
   }
   ```

6. 编写接口对应的 Mapper.xml 文件。需要导入MyBatis的包；

   ```
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE mapper
           PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
   
   <mapper namespace="com.feige.dao.BooksMapper">
   
       <!--增加一个Book-->
       <insert id="addBook" parameterType="Books">
           insert into books(bookName,bookCounts,detail)
           values (#{bookName}, #{bookCounts}, #{detail})
       </insert>
   
       <!--根据id删除一个Book-->
       <delete id="deleteBookById" parameterType="int">
           delete from books where bookId=#{bookId}
       </delete>
   
       <!--更新Book-->
       <update id="updateBook" parameterType="Books">
           update books
           set bookName = #{bookName},bookCounts = #{bookCounts},detail = #{detail}
           where bookId = #{bookId}
       </update>
   
       <!--根据id查询,返回一个Book-->
       <select id="queryBookById" resultType="Books">
           select * from books
           where bookID = #{bookId}
       </select>
   
       <!--查询全部Book-->
       <select id="queryAllBook" resultType="com.feige.pojo.Books">
           SELECT * from books
       </select>
   
   </mapper>
   ```

7. 编写Service层的接口和实现类 接口：

   ```
   package com.feige.service;
   
   import com.feige.pojo.Books;
   
   import java.util.List;
   
   //BookService:底下需要去实现,调用dao层
   public interface BookService {
       //增加一个Book
       int addBook(Books book);
       //根据id删除一个Book
       int deleteBookById(int id);
       //更新Book
       int updateBook(Books books);
       //根据id查询,返回一个Book
       Books queryBookById(int id);
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   }
   ```

实现类：

```
package com.feige.service;

import com.feige.dao.BookMapper;
import com.feige.pojo.Books;
import java.util.List;

public class BookServiceImpl implements BookService {

    //调用dao层的操作，设置一个set接口，方便Spring管理
    private BookMapper bookMapper;

    public void setBookMapper(BookMapper bookMapper) {
        this.bookMapper = bookMapper;
    }
    
    public int addBook(Books book) {
        return bookMapper.addBook(book);
    }
    
    public int deleteBookById(int id) {
        return bookMapper.deleteBookById(id);
    }
    
    public int updateBook(Books books) {
        return bookMapper.updateBook(books);
    }
    
    public Books queryBookById(int id) {
        return bookMapper.queryBookById(id);
    }
    
    public List<Books> queryAllBook() {
        return bookMapper.queryAllBook();
    }
}
```

**OK，到此，底层需求操作编写完毕！**

## 4、Spring层

1. 配置**Spring整合MyBatis**，我们这里数据源使用c3p0连接池；

2. 我们去编写Spring整合Mybatis的相关的配置文件； spring-dao.xml

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans.xsd
   http://www.springframework.org/schema/context
   https://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 配置整合mybatis -->
       <!-- 1.关联数据库文件 -->
       <context:property-placeholder location="classpath:database.properties"/>
   
       <!-- 2.数据库连接池 -->
       <!--数据库连接池
   dbcp  半自动化操作  不能自动连接
   c3p0  自动化操作（自动的加载配置文件 并且设置到对象里面）
       -->
       <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
   <!-- 配置连接池属性 -->
   <property name="driverClass" value="${jdbc.driver}"/>
   <property name="jdbcUrl" value="${jdbc.url}"/>
   <property name="user" value="${jdbc.username}"/>
   <property name="password" value="${jdbc.password}"/>
   
   <!-- c3p0连接池的私有属性 -->
   <property name="maxPoolSize" value="30"/>
   <property name="minPoolSize" value="10"/>
   <!-- 关闭连接后不自动commit -->
   <property name="autoCommitOnClose" value="false"/>
   <!-- 获取连接超时时间 -->
   <property name="checkoutTimeout" value="10000"/>
   <!-- 当获取连接失败重试次数 -->
   <property name="acquireRetryAttempts" value="2"/>
       </bean>
   
       <!-- 3.配置SqlSessionFactory对象 -->
       <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource"/>
   <!-- 配置MyBaties全局配置文件:mybatis-config.xml -->
   <property name="configLocation" value="classpath:mybatis-config.xml"/>
       </bean>
   
       <!-- 4.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 -->
       <!--解释 ： https://www.cnblogs.com/jpfss/p/7799806.html-->
       <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
   <!-- 注入sqlSessionFactory -->
   <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
   <!-- 给出需要扫描Dao接口包 -->
   <property name="basePackage" value="com.feige.dao"/>
       </bean>
   
   </beans>
   ```

3. **Spring整合service层**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 扫描service相关的bean -->
       <context:component-scan base-package="com.kuang.service" />
   
       <!--BookServiceImpl注入到IOC容器中-->
       <bean id="BookServiceImpl" class="com.kuang.service.BookServiceImpl">
   <property name="bookMapper" ref="bookMapper"/>
       </bean>
   
       <!-- 配置事务管理器 -->
       <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource" />
       </bean>
   
   </beans>
   ```

Spring层搞定！再次理解一下，Spring就是一个大杂烩，一个容器！对吧！

## 5、SpringMVC层

1. **web.xml**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
            version="4.0">
   
       <!--DispatcherServlet-->
       <servlet>
           <servlet-name>DispatcherServlet</servlet-name>
           <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
           <init-param>
               <param-name>contextConfigLocation</param-name>
               <param-value>classpath:applicationContext.xml</param-value>
           </init-param>
           <load-on-startup>1</load-on-startup>
       </servlet>
       <servlet-mapping>
           <servlet-name>DispatcherServlet</servlet-name>
           <url-pattern>/</url-pattern>
       </servlet-mapping>
   
       <!--encodingFilter-->
       <filter>
           <filter-name>encodingFilter</filter-name>
           <filter-class>
               org.springframework.web.filter.CharacterEncodingFilter
           </filter-class>
           <init-param>
               <param-name>encoding</param-name>
               <param-value>utf-8</param-value>
           </init-param>
       </filter>
       <filter-mapping>
           <filter-name>encodingFilter</filter-name>
           <url-pattern>/*</url-pattern>
       </filter-mapping>
       
       <!--Session过期时间-->
       <session-config>
           <session-timeout>15</session-timeout>
       </session-config>
       
   </web-app>
   ```

2. **spring-mvc.xml**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xmlns:mvc="http://www.springframework.org/schema/mvc"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       https://www.springframework.org/schema/mvc/spring-mvc.xsd">
   
       <!-- 配置SpringMVC -->
       <!-- 1.开启SpringMVC注解驱动 -->
       <mvc:annotation-driven>
           <mvc:message-converters register-defaults="true">
               <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                   <constructor-arg value="UTF-8"/>
               </bean>
               <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                   <property name="objectMapper">
                       <bean class="org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean">
                           <property name="failOnEmptyBeans" value="false"/>
                       </bean>
                   </property>
               </bean>
           </mvc:message-converters>
       </mvc:annotation-driven>
       <!--解决跨域问题-->
       <mvc:cors>
       <mvc:mapping path="/**"
                    allowed-origins="http://127.0.0.1:8090,http://localhost:8090"
                    allowed-methods="POST,GET, OPTIONS,DELETE,PUT"
                    allowed-headers="Content-Type,ContentType,Access-Control-Allow-Headers, Authorization, X-Requested-With"
                    allow-credentials="true"/>
       </mvc:cors>
       <!-- 2.静态资源默认servlet配置-->
       <mvc:default-servlet-handler/>
   
       <!-- 3.配置jsp 显示ViewResolver视图解析器 -->
       <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
           <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
           <property name="prefix" value="/WEB-INF/jsp/" />
           <property name="suffix" value=".jsp" />
       </bean>
   
       <!-- 4.扫描web相关的bean -->
       <context:component-scan base-package="com.feige.controller" />
   
   </beans>
   ```

3. **Spring配置整合文件，applicationContext.xml**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd">
   
       <import resource="spring-dao.xml"/>
       <import resource="spring-service.xml"/>
       <import resource="spring-mvc.xml"/>
       
   </beans>
   ```

**配置文件，暂时结束！Controller 和 视图层编写**

1. BookController 类编写 ， 方法一：查询全部书籍

   ```
   @Controller
   @RequestMapping("/book")
   public class BookController {
   
       @Autowired
       @Qualifier("BookServiceImpl")
       private BookService bookService;
   
       @RequestMapping("/allBook")
       public String list(Model model) {
           List<Books> list = bookService.queryAllBook();
           model.addAttribute("list", list);
           return "allBook";
       }
   }
   ```

2. 编写首页 **index.jsp**

   ```
   <%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" %>
   <!DOCTYPE HTML>
   <html>
   <head>
       <title>首页</title>
       <style type="text/css">
           a {
               text-decoration: none;
               color: black;
               font-size: 18px;
           }
           h3 {
               width: 180px;
               height: 38px;
               margin: 100px auto;
               text-align: center;
               line-height: 38px;
               background: deepskyblue;
               border-radius: 4px;
           }
       </style>
   </head>
   <body>
   
   <h3>
       <a href="${pageContext.request.contextPath}/book/allBook">点击进入列表页</a>
   </h3>
   </body>
   </html>
   ```

3. 书籍列表页面 **allbook.jsp**

   ```
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>书籍列表</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>书籍列表 —— 显示所有书籍</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <div class="row">
           <div class="col-md-4 column">
               <a class="btn btn-primary" href="${pageContext.request.contextPath}/book/toAddBook">新增</a>
           </div>
       </div>
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <table class="table table-hover table-striped">
                   <thead>
                   <tr>
                       <th>书籍编号</th>
                       <th>书籍名字</th>
                       <th>书籍数量</th>
                       <th>书籍详情</th>
                       <th>操作</th>
                   </tr>
                   </thead>
   
                   <tbody>
                   <c:forEach var="book" items="${requestScope.get('list')}">
                       <tr>
                           <td>${book.getBookId()}</td>
                           <td>${book.getBookName()}</td>
                           <td>${book.getBookCounts()}</td>
                           <td>${book.getDetail()}</td>
                           <td>
                               <a href="${pageContext.request.contextPath}/book/toUpdateBook?id=${book.getBookId()}">更改</a> |
                               <a href="${pageContext.request.contextPath}/book/del/${book.getBookId()}">删除</a>
                           </td>
                       </tr>
                   </c:forEach>
                   </tbody>
               </table>
           </div>
       </div>
   </div>
   ```

4. BookController 类编写 ， 方法二：添加书籍

   ```
   @RequestMapping("/toAddBook")
   public String toAddPaper() {
       return "addBook";
   }
   
   @RequestMapping("/addBook")
   public String addPaper(Books books) {
       System.out.println(books);
       bookService.addBook(books);
       return "redirect:/book/allBook";
   }
   ```

5. 添加书籍页面：**addBook.jsp**

   ```
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   
   <html>
   <head>
       <title>新增书籍</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>新增书籍</small>
                   </h1>
               </div>
           </div>
       </div>
       <form action="${pageContext.request.contextPath}/book/addBook" method="post">
           书籍名称：<input type="text" name="bookName"><br><br><br>
           书籍数量：<input type="text" name="bookCounts"><br><br><br>
           书籍详情：<input type="text" name="detail"><br><br><br>
           <input type="submit" value="添加">
       </form>
   
   </div>
   ```

6. BookController 类编写 ， 方法三：修改书籍

   ```
   @RequestMapping("/toUpdateBook")
   public String toUpdateBook(Model model, int id) {
       Books books = bookService.queryBookById(id);
       System.out.println(books);
       model.addAttribute("book",books );
       return "updateBook";
   }
   
   @RequestMapping("/updateBook")
   public String updateBook(Model model, Books book) {
       bookService.updateBook(book);
       Books books = bookService.queryBookById(book.getBookID());
       model.addAttribute("books", books);
       return "redirect:/book/allBook";
   }
   ```

7. 修改书籍页面 **updateBook.jsp**

   ```
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>修改信息</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>修改信息</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <form action="${pageContext.request.contextPath}/book/updateBook" method="post">
           <input type="hidden" name="bookID" value="${book.getBookId()}"/>
           书籍名称：<input type="text" name="bookName" value="${book.getBookName()}"/>
           书籍数量：<input type="text" name="bookCounts" value="${book.getBookCounts()}"/>
           书籍详情：<input type="text" name="detail" value="${book.getDetail() }"/>
           <input type="submit" value="提交"/>
       </form>
   
   </div>
   ```

8. BookController 类编写 ， 方法四：删除书籍

   ```
   @RequestMapping("/del/{bookId}")
   public String deleteBook(@PathVariable("bookId") int id) {
       bookService.deleteBookById(id);
       return "redirect:/book/allBook";
   }
   ```

**配置Tomcat，进行运行！**

到目前为止，这个SSM项目整合已经完全的OK了，可以直接运行进行测试！这个练习十分的重要，大家需要保证，不看任何东西，自己也可以完整的实现出来！

## **6、项目结构图**

![1570186854191.png](https://blog.kuangstudy.com/usr/uploads/2019/10/1086489242.png)

![1570186868239.png](https://blog.kuangstudy.com/usr/uploads/2019/10/2326667495.png)

## 7、错误排查

### 1、访问出现404，排查步骤：**

1. 查看控制台输出，看一下是不是缺少了什么jar包。

2. 如果jar包存在，显示无法输出，就在IDEA的项目发布中，添加lib依赖！

   步骤：点击项目结构----->Artifacts----->点击自己的项目(ssm:war exploded)--->(点击工具栏的第一个)在WEB-INF目录下新建一个lib包----->选中lib------>点击工具栏的第三个然后选中第一个---->把里面的包全部选中点击ok---->点击Apply再ok

   ![image-20200128125126368](https://gitee.com/feigeCode/java_blog/raw/master/java/ssm%E6%95%B4%E5%90%88.assets/image-20200128125126368.png)

   ![image-20200128125237179](https://gitee.com/feigeCode/java_blog/raw/master/java/ssm%E6%95%B4%E5%90%88.assets/image-20200128125237179.png)

3. 重启Tomcat 即可解决！

### 2、其他错误

#### 1、bean不存在

 步骤：

 查看bean注入是否成功

 junit单元测试，看我们的代码是否能够查询出来

 问题不在底层，是我们spring出了问题

 springMVC整合时没有调用到service层的bean

 applicationContext.xml没有注册bean

 web.xml也绑定过配置文件要绑定大的applicationContext.xml



## 8、小结及展望

这个是同学们的第一个SSM整合案例，一定要烂熟于心！

SSM框架的重要程度是不言而喻的，学到这里，大家已经可以进行基本网站的单独开发。但是这只是增删改查的基本操作。可以说学到这里，大家才算是真正的步入了后台开发的门。也就是能找一个后台相关工作的底线。

或许很多人，工作就做这些事情，但是对于个人的提高来说，还远远不够！

| 飞哥 | 飞哥 | 飞哥 |
| ---- | ---- | ---- |
| 飞哥 | 飞哥 | 飞哥 |
| 飞哥 | 飞哥 | 飞哥 |
| 飞哥 | 飞哥 | 飞哥 |



~~~java
static class CustomAttributeProvider implements AttributeProvider {

        @Override
        public void setAttributes(Node node, String s, Map<String, String> map) {
            //改变a标签的target属性为_blank
            if(node instanceof Link) {
                map.put("target","_blank");
            }
            if (node instanceof TableBlock) {
                map.put("class","el-table__body-wrapper is-scrolling-none");
            }
            if (node instanceof TableBody) {
                map.put("class","el-table__body");
            }
            if (node instanceof TableRow) {
                map.put("class","el-table__row");
            }
            if (node instanceof TableCell) {
                map.put("class","el-table_13_column_55");
            }
        }
~~~

# feige

, 2020-03-02 07:06:53.0, 2020-03-13 06:59:47.0, admin, 10]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50170} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20005} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20005} Parameters : [13]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20005} Types : [INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20005} executed. 1.831554 millis. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog where id=?
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50171} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50171} Header: [id, type_name, title, content, create_time, change_time, author, view]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50171} Result: [13, mybatis, ssm框架整合, # ssm整合

## 1、数据库环境

创建一个存放书籍数据的数据库表

```
CREATE DATABASE `ssmbuild`;

USE `ssmbuild`;

DROP TABLE IF EXISTS `books`;

CREATE TABLE `books` (
  `bookId` INT PRIMARY KEY COMMENT '书id',
  `bookName` VARCHAR(100) NOT NULL COMMENT '书名',
  `bookCounts` INT(11) NOT NULL COMMENT '数量',
  ``ssmbuild``ssmbuild`` VARCHAR(200) NOT NULL COMMENT '描述'
) ENGINE=INNODB DEFAULT CHARSET=utf8

INSERT  INTO `books`(`bookId`,`bookName`,`bookCounts`,`detail`)VALUES 
(1,'Java',1,'从入门到放弃'),
(2,'MySQL',10,'从删库到跑路'),
(3,'Linux',5,'从进门到进牢');

SELECT * FROM books
```

## 2、基本环境搭建

1. 新建一Maven项目！ ssmbuild ， 添加web的支持

   ![image-20200128134359317](https://gitee.com/feigeCode/java_blog/raw/master/java/ssm%E6%95%B4%E5%90%88.assets/image-20200128134359317.png)

2. 导入相关的pom依赖！

   ```
   <dependencies>
       <!--Junit-->
       <dependency>
           <groupId>junit</groupId>
           <artifactId>junit</artifactId>
           <version>4.12</version>
       </dependency>
       <!--数据库驱动-->
       <dependency>
           <groupId>mysql</groupId>
           <artifactId>mysql-connector-java</artifactId>
           <version>5.1.47</version>
       </dependency>
       <!-- 数据库连接池 -->
       <dependency>
           <groupId>com.mchange</groupId>
           <artifactId>c3p0</artifactId>
           <version>0.9.5.2</version>
       </dependency>
   
       <!--Servlet - JSP -->
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>servlet-api</artifactId>
           <version>2.5</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet.jsp</groupId>
           <artifactId>jsp-api</artifactId>
           <version>2.2</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>jstl</artifactId>
           <version>1.2</version>
       </dependency>
   
       <!--Mybatis-->
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis</artifactId>
           <version>3.5.2</version>
       </dependency>
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis-spring</artifactId>
           <version>2.0.2</version>
       </dependency>
   
       <!--Spring-->
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-webmvc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-jdbc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->
       <dependency>
           <groupId>org.projectlombok</groupId>
           <artifactId>lombok</artifactId>
           <version>1.16.10</version>
       </dependency>
   </dependencies>
   ```

3. Maven资源过滤设置

   ```
   <build>
       <resources>
           <resource>
               <directory>src/main/java</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
           <resource>
               <directory>src/main/resources</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
       </resources>
   </build>
   ```

4. 建立基本结构和配置框架！

   - com.feige.pojo

   - com.feige.dao

   - com.feige.service

   - com.feige.controller

     在resources目录下创建

   - mybatis-config.xml

     ```
     <?xml version="1.0" encoding="UTF-8" ?>
     <!DOCTYPE configuration
             PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
             "http://mybatis.org/dtd/mybatis-3-config.dtd">
     <configuration>
     
     </configuration>
     ```

   - applicationContext.xml

     ```
     <?xml version="1.0" encoding="UTF-8"?>
     <beans xmlns="http://www.springframework.org/schema/beans"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://www.springframework.org/schema/beans
             http://www.springframework.org/schema/beans/spring-beans.xsd">
     
     </beans>
     ```

## 3、Mybatis层编写

1. 数据库配置文件 **database.properties**

   ```
   jdbc.driver=com.mysql.jdbc.Driver
   jdbc.url=jdbc:mysql://localhost:3306/ssmbuild?useSSL=true&useUnicode=true&characterEncoding=utf8
   jdbc.username=root
   jdbc.password=hufei169357
   ```

2. IDEA关联数据库

3. 编写MyBatis的核心配置文件

   ```
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE configuration
           PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-config.dtd">
   <configuration>
       
       <typeAliases>
           <package name="com.feige.pojo"/>
       </typeAliases>
       <mappers>
           <mapper resource="com/feige/dao/BookMapper.xml"/>
       </mappers>
   
   </configuration>
   ```

4. 编写数据库对应的实体类 com.feige.pojo.Books 使用lombok插件！

   ```
   package com.kuang.pojo;
   
   import lombok.AllArgsConstructor;
   import lombok.Data;
   import lombok.NoArgsConstructor;
   
   @Data
   @AllArgsConstructor
   @NoArgsConstructor
   public class Books {
       
       private int bookId;
       private String bookName;
       private int bookCounts;
       private String detail;
       
   }
   ```

5. 编写Dao层的 Mapper接口！

   ```
   package com.kuang.dao;
   
   import com.kuang.pojo.Books;
   import java.util.List;
   
   public interface BookMapper {
   
       //增加一个Book
       int addBook(Books book);
   
       //根据id删除一个Book
       int deleteBookById(int id);
   
       //更新Book
       int updateBook(Books books);
   
       //根据id查询,返回一个Book
       Books queryBookById(int id);
   
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   
   }
   ```

6. 编写接口对应的 Mapper.xml 文件。需要导入MyBatis的包；

   ```
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE mapper
           PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
   
   <mapper namespace="com.feige.dao.BooksMapper">
   
       <!--增加一个Book-->
       <insert id="addBook" parameterType="Books">
           insert into books(bookName,bookCounts,detail)
           values (#{bookName}, #{bookCounts}, #{detail})
       </insert>
   
       <!--根据id删除一个Book-->
       <delete id="deleteBookById" parameterType="int">
           delete from books where bookId=#{bookId}
       </delete>
   
       <!--更新Book-->
       <update id="updateBook" parameterType="Books">
           update books
           set bookName = #{bookName},bookCounts = #{bookCounts},detail = #{detail}
           where bookId = #{bookId}
       </update>
   
       <!--根据id查询,返回一个Book-->
       <select id="queryBookById" resultType="Books">
           select * from books
           where bookID = #{bookId}
       </select>
   
       <!--查询全部Book-->
       <select id="queryAllBook" resultType="com.feige.pojo.Books">
           SELECT * from books
       </select>
   
   </mapper>
   ```

7. 编写Service层的接口和实现类 接口：

   ```
   package com.feige.service;
   
   import com.feige.pojo.Books;
   
   import java.util.List;
   
   //BookService:底下需要去实现,调用dao层
   public interface BookService {
       //增加一个Book
       int addBook(Books book);
       //根据id删除一个Book
       int deleteBookById(int id);
       //更新Book
       int updateBook(Books books);
       //根据id查询,返回一个Book
       Books queryBookById(int id);
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   }
   ```

实现类：

```
package com.feige.service;

import com.feige.dao.BookMapper;
import com.feige.pojo.Books;
import java.util.List;

public class BookServiceImpl implements BookService {

    //调用dao层的操作，设置一个set接口，方便Spring管理
    private BookMapper bookMapper;

    public void setBookMapper(BookMapper bookMapper) {
        this.bookMapper = bookMapper;
    }
    
    public int addBook(Books book) {
        return bookMapper.addBook(book);
    }
    
    public int deleteBookById(int id) {
        return bookMapper.deleteBookById(id);
    }
    
    public int updateBook(Books books) {
        return bookMapper.updateBook(books);
    }
    
    public Books queryBookById(int id) {
        return bookMapper.queryBookById(id);
    }
    
    public List<Books> queryAllBook() {
        return bookMapper.queryAllBook();
    }
}
```

**OK，到此，底层需求操作编写完毕！**

## 4、Spring层

1. 配置**Spring整合MyBatis**，我们这里数据源使用c3p0连接池；

2. 我们去编写Spring整合Mybatis的相关的配置文件； spring-dao.xml

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans.xsd
   http://www.springframework.org/schema/context
   https://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 配置整合mybatis -->
       <!-- 1.关联数据库文件 -->
       <context:property-placeholder location="classpath:database.properties"/>
   
       <!-- 2.数据库连接池 -->
       <!--数据库连接池
   dbcp  半自动化操作  不能自动连接
   c3p0  自动化操作（自动的加载配置文件 并且设置到对象里面）
       -->
       <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
   <!-- 配置连接池属性 -->
   <property name="driverClass" value="${jdbc.driver}"/>
   <property name="jdbcUrl" value="${jdbc.url}"/>
   <property name="user" value="${jdbc.username}"/>
   <property name="password" value="${jdbc.password}"/>
   
   <!-- c3p0连接池的私有属性 -->
   <property name="maxPoolSize" value="30"/>
   <property name="minPoolSize" value="10"/>
   <!-- 关闭连接后不自动commit -->
   <property name="autoCommitOnClose" value="false"/>
   <!-- 获取连接超时时间 -->
   <property name="checkoutTimeout" value="10000"/>
   <!-- 当获取连接失败重试次数 -->
   <property name="acquireRetryAttempts" value="2"/>
       </bean>
   
       <!-- 3.配置SqlSessionFactory对象 -->
       <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource"/>
   <!-- 配置MyBaties全局配置文件:mybatis-config.xml -->
   <property name="configLocation" value="classpath:mybatis-config.xml"/>
       </bean>
   
       <!-- 4.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 -->
       <!--解释 ： https://www.cnblogs.com/jpfss/p/7799806.html-->
       <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
   <!-- 注入sqlSessionFactory -->
   <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
   <!-- 给出需要扫描Dao接口包 -->
   <property name="basePackage" value="com.feige.dao"/>
       </bean>
   
   </beans>
   ```

3. **Spring整合service层**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 扫描service相关的bean -->
       <context:component-scan base-package="com.kuang.service" />
   
       <!--BookServiceImpl注入到IOC容器中-->
       <bean id="BookServiceImpl" class="com.kuang.service.BookServiceImpl">
   <property name="bookMapper" ref="bookMapper"/>
       </bean>
   
       <!-- 配置事务管理器 -->
       <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource" />
       </bean>
   
   </beans>
   ```

Spring层搞定！再次理解一下，Spring就是一个大杂烩，一个容器！对吧！

## 5、SpringMVC层

1. **web.xml**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
            version="4.0">
   
       <!--DispatcherServlet-->
       <servlet>
           <servlet-name>DispatcherServlet</servlet-name>
           <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
           <init-param>
               <param-name>contextConfigLocation</param-name>
               <param-value>classpath:applicationContext.xml</param-value>
           </init-param>
           <load-on-startup>1</load-on-startup>
       </servlet>
       <servlet-mapping>
           <servlet-name>DispatcherServlet</servlet-name>
           <url-pattern>/</url-pattern>
       </servlet-mapping>
   
       <!--encodingFilter-->
       <filter>
           <filter-name>encodingFilter</filter-name>
           <filter-class>
               org.springframework.web.filter.CharacterEncodingFilter
           </filter-class>
           <init-param>
               <param-name>encoding</param-name>
               <param-value>utf-8</param-value>
           </init-param>
       </filter>
       <filter-mapping>
           <filter-name>encodingFilter</filter-name>
           <url-pattern>/*</url-pattern>
       </filter-mapping>
       
       <!--Session过期时间-->
       <session-config>
           <session-timeout>15</session-timeout>
       </session-config>
       
   </web-app>
   ```

2. **spring-mvc.xml**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xmlns:mvc="http://www.springframework.org/schema/mvc"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       https://www.springframework.org/schema/mvc/spring-mvc.xsd">
   
       <!-- 配置SpringMVC -->
       <!-- 1.开启SpringMVC注解驱动 -->
       <mvc:annotation-driven>
           <mvc:message-converters register-defaults="true">
               <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                   <constructor-arg value="UTF-8"/>
               </bean>
               <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                   <property name="objectMapper">
                       <bean class="org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean">
                           <property name="failOnEmptyBeans" value="false"/>
                       </bean>
                   </property>
               </bean>
           </mvc:message-converters>
       </mvc:annotation-driven>
       <!--解决跨域问题-->
       <mvc:cors>
       <mvc:mapping path="/**"
                    allowed-origins="http://127.0.0.1:8090,http://localhost:8090"
                    allowed-methods="POST,GET, OPTIONS,DELETE,PUT"
                    allowed-headers="Content-Type,ContentType,Access-Control-Allow-Headers, Authorization, X-Requested-With"
                    allow-credentials="true"/>
       </mvc:cors>
       <!-- 2.静态资源默认servlet配置-->
       <mvc:default-servlet-handler/>
   
       <!-- 3.配置jsp 显示ViewResolver视图解析器 -->
       <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
           <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
           <property name="prefix" value="/WEB-INF/jsp/" />
           <property name="suffix" value=".jsp" />
       </bean>
   
       <!-- 4.扫描web相关的bean -->
       <context:component-scan base-package="com.feige.controller" />
   
   </beans>
   ```

3. **Spring配置整合文件，applicationContext.xml**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd">
   
       <import resource="spring-dao.xml"/>
       <import resource="spring-service.xml"/>
       <import resource="spring-mvc.xml"/>
       
   </beans>
   ```

**配置文件，暂时结束！Controller 和 视图层编写**

1. BookController 类编写 ， 方法一：查询全部书籍

   ```
   @Controller
   @RequestMapping("/book")
   public class BookController {
   
       @Autowired
       @Qualifier("BookServiceImpl")
       private BookService bookService;
   
       @RequestMapping("/allBook")
       public String list(Model model) {
           List<Books> list = bookService.queryAllBook();
           model.addAttribute("list", list);
           return "allBook";
       }
   }
   ```

2. 编写首页 **index.jsp**

   ```
   <%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" %>
   <!DOCTYPE HTML>
   <html>
   <head>
       <title>首页</title>
       <style type="text/css">
           a {
               text-decoration: none;
               color: black;
               font-size: 18px;
           }
           h3 {
               width: 180px;
               height: 38px;
               margin: 100px auto;
               text-align: center;
               line-height: 38px;
               background: deepskyblue;
               border-radius: 4px;
           }
       </style>
   </head>
   <body>
   
   <h3>
       <a href="${pageContext.request.contextPath}/book/allBook">点击进入列表页</a>
   </h3>
   </body>
   </html>
   ```

3. 书籍列表页面 **allbook.jsp**

   ```
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>书籍列表</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>书籍列表 —— 显示所有书籍</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <div class="row">
           <div class="col-md-4 column">
               <a class="btn btn-primary" href="${pageContext.request.contextPath}/book/toAddBook">新增</a>
           </div>
       </div>
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <table class="table table-hover table-striped">
                   <thead>
                   <tr>
                       <th>书籍编号</th>
                       <th>书籍名字</th>
                       <th>书籍数量</th>
                       <th>书籍详情</th>
                       <th>操作</th>
                   </tr>
                   </thead>
   
                   <tbody>
                   <c:forEach var="book" items="${requestScope.get('list')}">
                       <tr>
                           <td>${book.getBookId()}</td>
                           <td>${book.getBookName()}</td>
                           <td>${book.getBookCounts()}</td>
                           <td>${book.getDetail()}</td>
                           <td>
                               <a href="${pageContext.request.contextPath}/book/toUpdateBook?id=${book.getBookId()}">更改</a> |
                               <a href="${pageContext.request.contextPath}/book/del/${book.getBookId()}">删除</a>
                           </td>
                       </tr>
                   </c:forEach>
                   </tbody>
               </table>
           </div>
       </div>
   </div>
   ```

4. BookController 类编写 ， 方法二：添加书籍

   ```
   @RequestMapping("/toAddBook")
   public String toAddPaper() {
       return "addBook";
   }
   
   @RequestMapping("/addBook")
   public String addPaper(Books books) {
       System.out.println(books);
       bookService.addBook(books);
       return "redirect:/book/allBook";
   }
   ```

5. 添加书籍页面：**addBook.jsp**

   ```
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   
   <html>
   <head>
       <title>新增书籍</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>新增书籍</small>
                   </h1>
               </div>
           </div>
       </div>
       <form action="${pageContext.request.contextPath}/book/addBook" method="post">
           书籍名称：<input type="text" name="bookName"><br><br><br>
           书籍数量：<input type="text" name="bookCounts"><br><br><br>
           书籍详情：<input type="text" name="detail"><br><br><br>
           <input type="submit" value="添加">
       </form>
   
   </div>
   ```

6. BookController 类编写 ， 方法三：修改书籍

   ```
   @RequestMapping("/toUpdateBook")
   public String toUpdateBook(Model model, int id) {
       Books books = bookService.queryBookById(id);
       System.out.println(books);
       model.addAttribute("book",books );
       return "updateBook";
   }
   
   @RequestMapping("/updateBook")
   public String updateBook(Model model, Books book) {
       bookService.updateBook(book);
       Books books = bookService.queryBookById(book.getBookID());
       model.addAttribute("books", books);
       return "redirect:/book/allBook";
   }
   ```

7. 修改书籍页面 **updateBook.jsp**

   ```
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>修改信息</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>修改信息</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <form action="${pageContext.request.contextPath}/book/updateBook" method="post">
           <input type="hidden" name="bookID" value="${book.getBookId()}"/>
           书籍名称：<input type="text" name="bookName" value="${book.getBookName()}"/>
           书籍数量：<input type="text" name="bookCounts" value="${book.getBookCounts()}"/>
           书籍详情：<input type="text" name="detail" value="${book.getDetail() }"/>
           <input type="submit" value="提交"/>
       </form>
   
   </div>
   ```

8. BookController 类编写 ， 方法四：删除书籍

   ```
   @RequestMapping("/del/{bookId}")
   public String deleteBook(@PathVariable("bookId") int id) {
       bookService.deleteBookById(id);
       return "redirect:/book/allBook";
   }
   ```

**配置Tomcat，进行运行！**

到目前为止，这个SSM项目整合已经完全的OK了，可以直接运行进行测试！这个练习十分的重要，大家需要保证，不看任何东西，自己也可以完整的实现出来！

## **6、项目结构图**

![1570186854191.png](https://blog.kuangstudy.com/usr/uploads/2019/10/1086489242.png)

![1570186868239.png](https://blog.kuangstudy.com/usr/uploads/2019/10/2326667495.png)

## 7、错误排查

### 1、访问出现404，排查步骤：**

1. 查看控制台输出，看一下是不是缺少了什么jar包。

2. 如果jar包存在，显示无法输出，就在IDEA的项目发布中，添加lib依赖！

   步骤：点击项目结构----->Artifacts----->点击自己的项目(ssm:war exploded)--->(点击工具栏的第一个)在WEB-INF目录下新建一个lib包----->选中lib------>点击工具栏的第三个然后选中第一个---->把里面的包全部选中点击ok---->点击Apply再ok

   ![image-20200128125126368](https://gitee.com/feigeCode/java_blog/raw/master/java/ssm%E6%95%B4%E5%90%88.assets/image-20200128125126368.png)

   ![image-20200128125237179](https://gitee.com/feigeCode/java_blog/raw/master/java/ssm%E6%95%B4%E5%90%88.assets/image-20200128125237179.png)

3. 重启Tomcat 即可解决！

### 2、其他错误

#### 1、bean不存在

 步骤：

 查看bean注入是否成功

 junit单元测试，看我们的代码是否能够查询出来

 问题不在底层，是我们spring出了问题

 springMVC整合时没有调用到service层的bean

 applicationContext.xml没有注册bean

 web.xml也绑定过配置文件要绑定大的applicationContext.xml



## 8、小结及展望

这个是同学们的第一个SSM整合案例，一定要烂熟于心！

SSM框架的重要程度是不言而喻的，学到这里，大家已经可以进行基本网站的单独开发。但是这只是增删改查的基本操作。可以说学到这里，大家才算是真正的步入了后台开发的门。也就是能找一个后台相关工作的底线。

或许很多人，工作就做这些事情，但是对于个人的提高来说，还远远不够！

| 飞哥 | 飞哥 | 飞哥 |
| ---- | ---- | ---- |
| 飞哥 | 飞哥 | 飞哥 |
| 飞哥 | 飞哥 | 飞哥 |
| 飞哥 | 飞哥 | 飞哥 |



~~~java
static class CustomAttributeProvider implements AttributeProvider {

        @Override
        public void setAttributes(Node node, String s, Map<String, String> map) {
            //改变a标签的target属性为_blank
            if(node instanceof Link) {
                map.put("target","_blank");
            }
            if (node instanceof TableBlock) {
                map.put("class","el-table__body-wrapper is-scrolling-none");
            }
            if (node instanceof TableBody) {
                map.put("class","el-table__body");
            }
            if (node instanceof TableRow) {
                map.put("class","el-table__row");
            }
            if (node instanceof TableCell) {
                map.put("class","el-table_13_column_55");
            }
        }
~~~

# feige

, 2020-03-02 07:06:53.0, 2020-03-13 06:59:47.0, admin, 10]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50171} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20005} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} Parameters : [0, 10]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} executed. 0.840444 millis. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog
         
            limit ?,?
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50172} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50172} Header: [id, type_name, title, content, create_time, change_time, author, view]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50172} Result: [1, springboot, springboot入门, springb自动装配, 2020-02-23 21:43:36.0, 2020-02-24 03:06:48.0, admin, 0]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50172} Result: [2, mybatis, 配置, 得到的, 2020-02-24 02:05:36.0, 2020-03-13 06:39:47.0, admin, 3]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50172} Result: [4, springMVC, mybatis-plus, ##飞哥, 2020-02-24 02:10:09.0, 2020-02-25 22:42:23.0, admin, 111]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50172} Result: [5, springboot, 人, 嗯嗯, 2020-02-24 03:07:20.0, 2020-02-24 03:07:20.0, admin, 2]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50172} Result: [6, mybatis, mybatis入门, <h2>1、Mybatis简介</h2>
<p><img src="https://blog.kuangstudy.com/usr/uploads/2019/10/1296229149.png" referrerpolicy="no-referrer" alt="1567007421329.png"></p>
<h3>什么是MyBatis</h3>
<ul>
<li>MyBatis 是一款优秀的<strong>持久层框架</strong></li>
<li>MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集的过程</li>
<li>MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 实体类 【Plain Old Java Objects,普通的 Java对象】映射成数据库中的记录。</li>
<li>MyBatis 本是apache的一个开源项目ibatis, 2010年这个项目由apache 迁移到了google code，并且改名为MyBatis 。</li>
<li>2013年11月迁移到<strong>Github</strong> .</li>
<li>Mybatis官方文档 : <a href='http://www.mybatis.org/mybatis-3/zh/index.html' target='_blank' class='url'>http://www.mybatis.org/mybatis-3/zh/index.html</a></li>
<li>GitHub : <a href='https://github.com/mybatis/mybatis-3' target='_blank' class='url'>https://github.com/mybatis/mybatis-3</a></li>

</ul>
<h3>持久化</h3>
<ul>
<li><p><strong>持久化是将程序数据在持久状态和瞬时状态间转换的机制。</strong></p>
<ul>
<li>即把数据（如内存中的对象）保存到可永久保存的存储设备中（如磁盘）。持久化的主要应用是将内存中的对象存储在数据库中，或者存储在磁盘文件中、XML数据文件中等等。</li>
<li>JDBC就是一种持久化机制。文件IO也是一种持久化机制。</li>
<li>在生活中 : 将鲜肉冷藏，吃的时候再解冻的方法也是。将水果做成罐头的方法也是。</li>

</ul>
</li>
<li><p><strong>为什么需要持久化服务呢？那是由于内存本身的缺陷引起的</strong></p>
<ul>
<li>内存断电后数据会丢失，但有一些对象是无论如何都不能丢失的，比如银行账号等，遗憾的是，人们还无法保证内存永不掉电。</li>
<li>内存过于昂贵，与硬盘、光盘等外存相比，内存的价格要高2~3个数量级，而且维持成本也高，至少需要一直供电吧。所以即使对象不需要永久保存，也会因为内存的容量限制不能一直呆在内存中，需要持久化来缓存到外存。</li>

</ul>
</li>

</ul>
<h3>持久层</h3>
<ul>
<li><p>什么是持久层？</p>
<ul>
<li>完成持久化工作的代码块 . ----&gt; dao层 【DAO (Data Access Object) 数据访问对象】</li>
<li>大多数情况下特别是企业级应用，数据持久化往往也就意味着将内存中的数据保存到磁盘上加以固化，而持久化的实现过程则大多通过各种<strong>关系数据库</strong>来完成。</li>
<li>不过这里有一个字需要特别强调，也就是所谓的“层”。对于应用系统而言，数据持久功能大多是必不可少的组成部分。也就是说，我们的系统中，已经天然的具备了“持久层”概念？也许是，但也许实际情况并非如此。之所以要独立出一个“持久层”的概念,而不是“持久模块”，“持久单元”，也就意味着，我们的系统架构中，应该有一个相对独立的逻辑层面，专著于数据持久化逻辑的实现.</li>
<li>与系统其他部分相对而言，这个层面应该具有一个较为清晰和严格的逻辑边界。 【说白了就是用来操作数据库存在的！】</li>

</ul>
</li>

</ul>
<h3>为什么需要Mybatis</h3>
<ul>
<li><p>Mybatis就是帮助程序猿将数据存入数据库中 , 和从数据库中取数据 .</p>
</li>
<li><p>传统的jdbc操作 , 有很多重复代码块 .比如 : 数据取出时的封装 , 数据库的建立连接等等... , 通过框架可以减少重复代码,提高开发效率 .</p>
</li>
<li><p>MyBatis 是一个半自动化的<strong>ORM框架 (Object Relationship Mapping) --&gt;对象关系映射</strong></p>
</li>
<li><p>所有的事情，不用Mybatis依旧可以做到，只是用了它，所有实现会更加简单！<strong>技术没有高低之分，只有使用这个技术的人有高低之别</strong></p>
</li>
<li><p>MyBatis的优点</p>
<ul>
<li>简单易学：本身就很小且简单。没有任何第三方依赖，最简单安装只要两个jar文件+配置几个sql映射文件就可以了，易于学习，易于使用，通过文档和源代码，可以比较完全的掌握它的设计思路和实现。</li>
<li>灵活：mybatis不会对应用程序或者数据库的现有设计强加任何影响。 sql写在xml里，便于统一管理和优化。通过sql语句可以满足操作数据库的所有需求。</li>
<li>解除sql与程序代码的耦合：通过提供DAO层，将业务逻辑和数据访问逻辑分离，使系统的设计更清晰，更易维护，更易单元测试。sql和代码的分离，提高了可维护性。</li>
<li>提供xml标签，支持编写动态sql。</li>
<li>.......</li>

</ul>
</li>
<li><p>最重要的一点，使用的人多！公司需要！</p>
</li>
<li><p>环境说明：</p>
<ul>
<li>jdk 8 +</li>
<li>MySQL 5.7.19</li>
<li>maven-3.6.0</li>
<li>IDEA</li>

</ul>
<p>学习前需要掌握：</p>
<ul>
<li>JDBC</li>
<li>MySQL</li>
<li>Java 基础</li>
<li>Maven</li>
<li>Junit</li>

</ul>
</li>

</ul>
<h2>2、mybatis crud（实现增删改查）</h2>
<h4>1.1、创建一个maven项目</h4>
<p>		导入依赖</p>
<pre><code class='language-xml' lang='xml'>&lt;dependencies&gt;
    &lt;!--mysql驱动--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;mysql&lt;/groupId&gt;
        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
        &lt;version&gt;5.1.47&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;!--mybatis支持--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.mybatis&lt;/groupId&gt;
        &lt;artifactId&gt;mybatis&lt;/artifactId&gt;
        &lt;version&gt;3.5.2&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;!--junit支持--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;junit&lt;/groupId&gt;
        &lt;artifactId&gt;junit&lt;/artifactId&gt;
        &lt;version&gt;4.12&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
</code></pre>
<p>注意点 : pom文件的设置中需要设置资源过滤 , 否则会有资源文件打包不成功问题，导致项目无法运行；</p>
<pre><code class='language-xml' lang='xml'>&lt;build&gt;
    &lt;resources&gt;
        &lt;resource&gt;
            &lt;directory&gt;src/main/java&lt;/directory&gt;
            &lt;includes&gt;
                &lt;include&gt;**/*.properties&lt;/include&gt;
                &lt;include&gt;**/*.xml&lt;/include&gt;
            &lt;/includes&gt;
            &lt;filtering&gt;true&lt;/filtering&gt;
        &lt;/resource&gt;
    &lt;/resources&gt;
&lt;/build&gt;
</code></pre>
<p>&nbsp;</p>
<h4>1.2、创建数据库和表</h4>
<pre><code class='language-sql' lang='sql'>CREATE DATABASE mybatis CHARACTER SET utf8;
CREATE TABLE USER(
	id INT PRIMARY KEY,
	username VARCHAR(15) NOT NULL,
	pwd VARCHAR(20) NOT NULL
)
INSERT INTO USER VALUES(2018143114,&#39;张三&#39;,&#39;123456&#39;),(2018143115,&#39;李四&#39;,&#39;1234567&#39;),(2018143116,&#39;王五&#39;,&#39;147258&#39;);
SELECT * FROM USER;
</code></pre>
<h4>1.3、编写mybatis配置文件</h4>
<p>在resource里新建一个mybatis-config.xml文件</p>
<pre><code class='language-xml' lang='xml'>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE configuration
        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;
&lt;configuration&gt;
    &lt;environments default=&quot;development&quot;&gt;
        &lt;environment id=&quot;development&quot;&gt;
            &lt;transactionManager type=&quot;JDBC&quot;/&gt;
            &lt;dataSource type=&quot;POOLED&quot;&gt;
                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;
                &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;amp;useUnicode=true&amp;amp;characterEncoding=utf8&quot;/&gt;
                &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;
                &lt;property name=&quot;password&quot; value=&quot;hufei169357&quot;/&gt;
            &lt;/dataSource&gt;
        &lt;/environment&gt;
    &lt;/environments&gt;
    &lt;mappers&gt;
        &lt;mapper resource=&quot;com/feige/dao/userMapper.xml&quot;/&gt;
    &lt;/mappers&gt;
&lt;/configuration&gt;
</code></pre>
<h4>1.4、新建一个工具类用来获取SqlSession对象</h4>
<pre><code class='language-java' lang='java'>package com.feige.utils;

import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import java.io.IOException;
import java.io.InputStream;
//sqlSessionFactory-sqlSession
public class MybatisUtils {
    private static SqlSessionFactory sqlSessionFactory;
    static {
        try {
            //使用mybatis第一步：获取sqlSessionFactory对象
            String resource = &quot;mybatis-config.xml&quot;;
            InputStream inputStream = Resources.getResourceAsStream(resource);
            sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    //既然有了sqlSessionFactory，顾名思义，我们就可以从中获得sqlSession的实例
    public static SqlSession getSqlSessioon(){
        return sqlSessionFactory.openSession();
    }
}

</code></pre>
<p>&nbsp;</p>
<h4>1.5、编写一个pojo（实体类）</h4>
<pre><code class='language-java' lang='java'>package com.feige.pojo;

public class User {
    private int id;
    private String username;
    private String pwd;

    public User() {
    }

    public User(int id, String username, String pwd) {
        this.id = id;
        this.username = username;
        this.pwd = pwd;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getPwd() {
        return pwd;
    }

    public void setPwd(String pwd) {
        this.pwd = pwd;
    }
    @Override
    public String toString() {
        return &quot;User{&quot; +
                &quot;id=&quot; + id +
                &quot;, username=&#39;&quot; + username + &#39;\&#39;&#39; +
                &quot;, pwd=&#39;&quot; + pwd + &#39;\&#39;&#39; +
                &#39;}&#39;;
    }
}

</code></pre>
<h4>1.6、新建一个userMapper接口</h4>
<pre><code class='language-java' lang='java'>package com.feige.dao;

import com.feige.pojo.User;

import java.util.List;
import java.util.Map;

public interface UserMapper {
    //查询全部用户
    List&lt;User&gt; getAllUser();
    //通过一个id查询一个用户
    User getUserById(int id);
    //通过id修改一个用户
    int updateUserById(Map map);
    //通过id删除一个用户
    int deleteUserById(int id);
    //插入一条数据
    int insertUser(User user);
}

</code></pre>
<h4>1.7、新建一个userMapper.xml文件</h4>
<pre><code class='language-xml' lang='xml'>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE mapper
        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;com.feige.dao.UserMapper&quot;&gt;
    &lt;!--每个语句要对应相应的标签select对应&lt;select&gt; delete 对应&lt;delete&gt; update 对应&lt;update&gt; insert 对应&lt;insert&gt;--&gt;
    &lt;select id=&quot;getAllUser&quot; resultType=&quot;com.feige.pojo.User&quot;&gt;
        select * from user
    &lt;/select&gt;
    &lt;select id=&quot;getUserById&quot; resultType=&quot;com.feige.pojo.User&quot; parameterType=&quot;int&quot;&gt;
        select * from user where id=#{id}
    &lt;/select&gt;
    &lt;update id=&quot;updateUserById&quot; parameterType=&quot;map&quot;&gt;
        update user set pwd=#{pwd} where id=#{id}
    &lt;/update&gt;
    &lt;delete id=&quot;deleteUserById&quot; parameterType=&quot;int&quot;&gt;
        delete from user where id=#{id}
    &lt;/delete&gt;
    &lt;insert id=&quot;insertUser&quot; parameterType=&quot;com.feige.pojo.User&quot;&gt;
        insert into user values (#{id},#{username},#{pwd})
    &lt;/insert&gt;
&lt;/mapper&gt;
</code></pre>
<h4>1.8、测试代码</h4>
<pre><code class='language-java' lang='java'>package com.feige.mybatisTest;

import com.feige.dao.UserMapper;
import com.feige.pojo.User;
import com.feige.utils.MybatisUtils;
import org.apache.ibatis.session.SqlSession;
import org.junit.Test;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MybatisTest {
    @Test
    public void mybatisTest1(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        List&lt;User&gt; allUser = mapper.getAllUser();
        for (User user : allUser) {
            System.out.println(user);
        }
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest2(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        User userById = mapper.getUserById(2018143114);
        System.out.println(userById);
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest3() {
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        //使用万能map传参
        Map&lt;String,Object&gt; map = new HashMap&lt;String, Object&gt;();
        map.put(&quot;pwd&quot;,2018143114);
        map.put(&quot;id&quot;,2018143114);

        int i = mapper.updateUserById(map);
        if (i &gt; 0) {
            System.out.println(&quot;修改成功！&quot;+i);
        }
        //增删改需要提交事务
        sqlSessioon.commit();

        sqlSessioon.close();

    }
    @Test
    public void mybatisTest4(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        int i = mapper.deleteUserById(2018143117);
        if (i &gt; 0) {
            System.out.println(&quot;删除成功！&quot;+i);
        }
        sqlSessioon.commit();
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest5(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        User user = new User(2018143117, &quot;杨帆东&quot;, &quot;2018143117&quot;);
        int i = mapper.insertUser(user);
        if (i &gt; 0) {
            System.out.println(&quot;插入成功！&quot;+i);
        }
        sqlSessioon.commit();
        sqlSessioon.close();

    }
}

</code></pre>
<p>&nbsp;</p>
<p>		</p>, 2020-02-24 03:15:45.0, 2020-02-24 03:15:50.0, admin, 0]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50172} Result: [7, mybatis, mybatis啊, 作者, 2020-02-24 03:27:18.0, 2020-02-24 03:27:18.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50172} Result: [8, springboot, aaa, [TOC]
                            #### Disabled options

                            - TeX (Based on KaTeX);
                            - Emoji;
                            - Task lists;
                            - HTML tags decode;
                            - Flowchart and Sequence Diagram;
                            #### Editor.md directory

                                editor.md/
                                        lib/
                                        css/
                                        scss/
                                        tests/
                                        fonts/
                                        images/
                                        plugins/
                                        examples/
                                        languages/
                                        editormd.js
                                        ...

                            ```html
                            <!-- English -->
                            <script src="../dist/js/languages/en.js"></script>

                            <!-- 繁體中文 -->
                            <script src="../dist/js/languages/zh-tw.js"></script>
                            ```
                        , 2020-02-25 03:39:36.0, 2020-02-25 22:38:07.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50172} Result: [9, mybatis, bbb, [TOC]

                            #### Disabled options

                            - TeX (Based on KaTeX);
                            - Emoji;
                            - Task lists;
                            - HTML tags decode;
                            - Flowchart and Sequence Diagram;

                            #### Editor.md directory

                                editor.md/
                                        lib/
                                        css/
                                        scss/
                                        tests/
                                        fonts/
                                        images/
                                        plugins/
                                        examples/
                                        languages/
                                        editormd.js
                                        ...

                            ```html
                            <!-- English -->
                            <script src="../dist/js/languages/en.js"></script>

                            <!-- 繁體中文 -->
                            <script src="../dist/js/languages/zh-tw.js"></script>
                            ```
                        , 2020-02-25 03:44:09.0, 2020-02-25 03:44:09.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50172} Result: [10, springboot, 飞哥, #大哥的Markdown, 2020-02-25 22:43:28.0, 2020-02-25 22:43:28.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50172} Result: [11, mybatis, 大哥, #飞哥的博客后台管理系统, 2020-02-25 22:49:26.0, 2020-02-25 22:49:26.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50172} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20000} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} Parameters : []
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} Types : []
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} executed. 0.431111 millis. select count(*) from `blog`
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50173} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50173} Header: [count(*)]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50173} Result: [13]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50173} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20001} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20005} Parameters : [4]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20005} Types : [INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20005} executed. 1.413333 millis. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog where id=?
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50174} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50174} Header: [id, type_name, title, content, create_time, change_time, author, view]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50174} Result: [4, springMVC, mybatis-plus, ##飞哥, 2020-02-24 02:10:09.0, 2020-02-25 22:42:23.0, admin, 111]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50174} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20005} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20006} Parameters : [4]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20006} Types : [INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20006} executed. 1.417776 millis. select distinct count(*) from comments c
        where c.blog_id=? and
        c.parent_id is null;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20006, rs-50175} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20006, rs-50175} Header: [count(*)]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20006, rs-50175} Result: [0]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20006, rs-50175} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20006} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20007} Parameters : [4, 0, 10]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20007} Types : [INTEGER, INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20007} executed. 2.295109 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id  and
        c.parent_id is null limit ?,?;;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20007, rs-50176} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20007, rs-50176} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20007, rs-50176} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20007} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20010} created. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog
         
            limit ?,?
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20010} Parameters : [0, 10]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20010} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20010} executed. 0.665777 millis. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog
         
            limit ?,?
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20010, rs-50177} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20010, rs-50177} Header: [id, type_name, title, content, create_time, change_time, author, view]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20010, rs-50177} Result: [1, springboot, springboot入门, springb自动装配, 2020-02-23 21:43:36.0, 2020-02-24 03:06:48.0, admin, 0]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20010, rs-50177} Result: [2, mybatis, 配置, 得到的, 2020-02-24 02:05:36.0, 2020-03-13 06:39:47.0, admin, 3]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20010, rs-50177} Result: [4, springMVC, mybatis-plus, ##飞哥, 2020-02-24 02:10:09.0, 2020-02-25 22:42:23.0, admin, 111]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20010, rs-50177} Result: [5, springboot, 人, 嗯嗯, 2020-02-24 03:07:20.0, 2020-02-24 03:07:20.0, admin, 2]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20010, rs-50177} Result: [6, mybatis, mybatis入门, <h2>1、Mybatis简介</h2>
<p><img src="https://blog.kuangstudy.com/usr/uploads/2019/10/1296229149.png" referrerpolicy="no-referrer" alt="1567007421329.png"></p>
<h3>什么是MyBatis</h3>
<ul>
<li>MyBatis 是一款优秀的<strong>持久层框架</strong></li>
<li>MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集的过程</li>
<li>MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 实体类 【Plain Old Java Objects,普通的 Java对象】映射成数据库中的记录。</li>
<li>MyBatis 本是apache的一个开源项目ibatis, 2010年这个项目由apache 迁移到了google code，并且改名为MyBatis 。</li>
<li>2013年11月迁移到<strong>Github</strong> .</li>
<li>Mybatis官方文档 : <a href='http://www.mybatis.org/mybatis-3/zh/index.html' target='_blank' class='url'>http://www.mybatis.org/mybatis-3/zh/index.html</a></li>
<li>GitHub : <a href='https://github.com/mybatis/mybatis-3' target='_blank' class='url'>https://github.com/mybatis/mybatis-3</a></li>

</ul>
<h3>持久化</h3>
<ul>
<li><p><strong>持久化是将程序数据在持久状态和瞬时状态间转换的机制。</strong></p>
<ul>
<li>即把数据（如内存中的对象）保存到可永久保存的存储设备中（如磁盘）。持久化的主要应用是将内存中的对象存储在数据库中，或者存储在磁盘文件中、XML数据文件中等等。</li>
<li>JDBC就是一种持久化机制。文件IO也是一种持久化机制。</li>
<li>在生活中 : 将鲜肉冷藏，吃的时候再解冻的方法也是。将水果做成罐头的方法也是。</li>

</ul>
</li>
<li><p><strong>为什么需要持久化服务呢？那是由于内存本身的缺陷引起的</strong></p>
<ul>
<li>内存断电后数据会丢失，但有一些对象是无论如何都不能丢失的，比如银行账号等，遗憾的是，人们还无法保证内存永不掉电。</li>
<li>内存过于昂贵，与硬盘、光盘等外存相比，内存的价格要高2~3个数量级，而且维持成本也高，至少需要一直供电吧。所以即使对象不需要永久保存，也会因为内存的容量限制不能一直呆在内存中，需要持久化来缓存到外存。</li>

</ul>
</li>

</ul>
<h3>持久层</h3>
<ul>
<li><p>什么是持久层？</p>
<ul>
<li>完成持久化工作的代码块 . ----&gt; dao层 【DAO (Data Access Object) 数据访问对象】</li>
<li>大多数情况下特别是企业级应用，数据持久化往往也就意味着将内存中的数据保存到磁盘上加以固化，而持久化的实现过程则大多通过各种<strong>关系数据库</strong>来完成。</li>
<li>不过这里有一个字需要特别强调，也就是所谓的“层”。对于应用系统而言，数据持久功能大多是必不可少的组成部分。也就是说，我们的系统中，已经天然的具备了“持久层”概念？也许是，但也许实际情况并非如此。之所以要独立出一个“持久层”的概念,而不是“持久模块”，“持久单元”，也就意味着，我们的系统架构中，应该有一个相对独立的逻辑层面，专著于数据持久化逻辑的实现.</li>
<li>与系统其他部分相对而言，这个层面应该具有一个较为清晰和严格的逻辑边界。 【说白了就是用来操作数据库存在的！】</li>

</ul>
</li>

</ul>
<h3>为什么需要Mybatis</h3>
<ul>
<li><p>Mybatis就是帮助程序猿将数据存入数据库中 , 和从数据库中取数据 .</p>
</li>
<li><p>传统的jdbc操作 , 有很多重复代码块 .比如 : 数据取出时的封装 , 数据库的建立连接等等... , 通过框架可以减少重复代码,提高开发效率 .</p>
</li>
<li><p>MyBatis 是一个半自动化的<strong>ORM框架 (Object Relationship Mapping) --&gt;对象关系映射</strong></p>
</li>
<li><p>所有的事情，不用Mybatis依旧可以做到，只是用了它，所有实现会更加简单！<strong>技术没有高低之分，只有使用这个技术的人有高低之别</strong></p>
</li>
<li><p>MyBatis的优点</p>
<ul>
<li>简单易学：本身就很小且简单。没有任何第三方依赖，最简单安装只要两个jar文件+配置几个sql映射文件就可以了，易于学习，易于使用，通过文档和源代码，可以比较完全的掌握它的设计思路和实现。</li>
<li>灵活：mybatis不会对应用程序或者数据库的现有设计强加任何影响。 sql写在xml里，便于统一管理和优化。通过sql语句可以满足操作数据库的所有需求。</li>
<li>解除sql与程序代码的耦合：通过提供DAO层，将业务逻辑和数据访问逻辑分离，使系统的设计更清晰，更易维护，更易单元测试。sql和代码的分离，提高了可维护性。</li>
<li>提供xml标签，支持编写动态sql。</li>
<li>.......</li>

</ul>
</li>
<li><p>最重要的一点，使用的人多！公司需要！</p>
</li>
<li><p>环境说明：</p>
<ul>
<li>jdk 8 +</li>
<li>MySQL 5.7.19</li>
<li>maven-3.6.0</li>
<li>IDEA</li>

</ul>
<p>学习前需要掌握：</p>
<ul>
<li>JDBC</li>
<li>MySQL</li>
<li>Java 基础</li>
<li>Maven</li>
<li>Junit</li>

</ul>
</li>

</ul>
<h2>2、mybatis crud（实现增删改查）</h2>
<h4>1.1、创建一个maven项目</h4>
<p>		导入依赖</p>
<pre><code class='language-xml' lang='xml'>&lt;dependencies&gt;
    &lt;!--mysql驱动--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;mysql&lt;/groupId&gt;
        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
        &lt;version&gt;5.1.47&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;!--mybatis支持--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.mybatis&lt;/groupId&gt;
        &lt;artifactId&gt;mybatis&lt;/artifactId&gt;
        &lt;version&gt;3.5.2&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;!--junit支持--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;junit&lt;/groupId&gt;
        &lt;artifactId&gt;junit&lt;/artifactId&gt;
        &lt;version&gt;4.12&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
</code></pre>
<p>注意点 : pom文件的设置中需要设置资源过滤 , 否则会有资源文件打包不成功问题，导致项目无法运行；</p>
<pre><code class='language-xml' lang='xml'>&lt;build&gt;
    &lt;resources&gt;
        &lt;resource&gt;
            &lt;directory&gt;src/main/java&lt;/directory&gt;
            &lt;includes&gt;
                &lt;include&gt;**/*.properties&lt;/include&gt;
                &lt;include&gt;**/*.xml&lt;/include&gt;
            &lt;/includes&gt;
            &lt;filtering&gt;true&lt;/filtering&gt;
        &lt;/resource&gt;
    &lt;/resources&gt;
&lt;/build&gt;
</code></pre>
<p>&nbsp;</p>
<h4>1.2、创建数据库和表</h4>
<pre><code class='language-sql' lang='sql'>CREATE DATABASE mybatis CHARACTER SET utf8;
CREATE TABLE USER(
	id INT PRIMARY KEY,
	username VARCHAR(15) NOT NULL,
	pwd VARCHAR(20) NOT NULL
)
INSERT INTO USER VALUES(2018143114,&#39;张三&#39;,&#39;123456&#39;),(2018143115,&#39;李四&#39;,&#39;1234567&#39;),(2018143116,&#39;王五&#39;,&#39;147258&#39;);
SELECT * FROM USER;
</code></pre>
<h4>1.3、编写mybatis配置文件</h4>
<p>在resource里新建一个mybatis-config.xml文件</p>
<pre><code class='language-xml' lang='xml'>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE configuration
        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;
&lt;configuration&gt;
    &lt;environments default=&quot;development&quot;&gt;
        &lt;environment id=&quot;development&quot;&gt;
            &lt;transactionManager type=&quot;JDBC&quot;/&gt;
            &lt;dataSource type=&quot;POOLED&quot;&gt;
                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;
                &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;amp;useUnicode=true&amp;amp;characterEncoding=utf8&quot;/&gt;
                &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;
                &lt;property name=&quot;password&quot; value=&quot;hufei169357&quot;/&gt;
            &lt;/dataSource&gt;
        &lt;/environment&gt;
    &lt;/environments&gt;
    &lt;mappers&gt;
        &lt;mapper resource=&quot;com/feige/dao/userMapper.xml&quot;/&gt;
    &lt;/mappers&gt;
&lt;/configuration&gt;
</code></pre>
<h4>1.4、新建一个工具类用来获取SqlSession对象</h4>
<pre><code class='language-java' lang='java'>package com.feige.utils;

import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import java.io.IOException;
import java.io.InputStream;
//sqlSessionFactory-sqlSession
public class MybatisUtils {
    private static SqlSessionFactory sqlSessionFactory;
    static {
        try {
            //使用mybatis第一步：获取sqlSessionFactory对象
            String resource = &quot;mybatis-config.xml&quot;;
            InputStream inputStream = Resources.getResourceAsStream(resource);
            sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    //既然有了sqlSessionFactory，顾名思义，我们就可以从中获得sqlSession的实例
    public static SqlSession getSqlSessioon(){
        return sqlSessionFactory.openSession();
    }
}

</code></pre>
<p>&nbsp;</p>
<h4>1.5、编写一个pojo（实体类）</h4>
<pre><code class='language-java' lang='java'>package com.feige.pojo;

public class User {
    private int id;
    private String username;
    private String pwd;

    public User() {
    }

    public User(int id, String username, String pwd) {
        this.id = id;
        this.username = username;
        this.pwd = pwd;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getPwd() {
        return pwd;
    }

    public void setPwd(String pwd) {
        this.pwd = pwd;
    }
    @Override
    public String toString() {
        return &quot;User{&quot; +
                &quot;id=&quot; + id +
                &quot;, username=&#39;&quot; + username + &#39;\&#39;&#39; +
                &quot;, pwd=&#39;&quot; + pwd + &#39;\&#39;&#39; +
                &#39;}&#39;;
    }
}

</code></pre>
<h4>1.6、新建一个userMapper接口</h4>
<pre><code class='language-java' lang='java'>package com.feige.dao;

import com.feige.pojo.User;

import java.util.List;
import java.util.Map;

public interface UserMapper {
    //查询全部用户
    List&lt;User&gt; getAllUser();
    //通过一个id查询一个用户
    User getUserById(int id);
    //通过id修改一个用户
    int updateUserById(Map map);
    //通过id删除一个用户
    int deleteUserById(int id);
    //插入一条数据
    int insertUser(User user);
}

</code></pre>
<h4>1.7、新建一个userMapper.xml文件</h4>
<pre><code class='language-xml' lang='xml'>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE mapper
        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;com.feige.dao.UserMapper&quot;&gt;
    &lt;!--每个语句要对应相应的标签select对应&lt;select&gt; delete 对应&lt;delete&gt; update 对应&lt;update&gt; insert 对应&lt;insert&gt;--&gt;
    &lt;select id=&quot;getAllUser&quot; resultType=&quot;com.feige.pojo.User&quot;&gt;
        select * from user
    &lt;/select&gt;
    &lt;select id=&quot;getUserById&quot; resultType=&quot;com.feige.pojo.User&quot; parameterType=&quot;int&quot;&gt;
        select * from user where id=#{id}
    &lt;/select&gt;
    &lt;update id=&quot;updateUserById&quot; parameterType=&quot;map&quot;&gt;
        update user set pwd=#{pwd} where id=#{id}
    &lt;/update&gt;
    &lt;delete id=&quot;deleteUserById&quot; parameterType=&quot;int&quot;&gt;
        delete from user where id=#{id}
    &lt;/delete&gt;
    &lt;insert id=&quot;insertUser&quot; parameterType=&quot;com.feige.pojo.User&quot;&gt;
        insert into user values (#{id},#{username},#{pwd})
    &lt;/insert&gt;
&lt;/mapper&gt;
</code></pre>
<h4>1.8、测试代码</h4>
<pre><code class='language-java' lang='java'>package com.feige.mybatisTest;

import com.feige.dao.UserMapper;
import com.feige.pojo.User;
import com.feige.utils.MybatisUtils;
import org.apache.ibatis.session.SqlSession;
import org.junit.Test;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MybatisTest {
    @Test
    public void mybatisTest1(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        List&lt;User&gt; allUser = mapper.getAllUser();
        for (User user : allUser) {
            System.out.println(user);
        }
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest2(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        User userById = mapper.getUserById(2018143114);
        System.out.println(userById);
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest3() {
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        //使用万能map传参
        Map&lt;String,Object&gt; map = new HashMap&lt;String, Object&gt;();
        map.put(&quot;pwd&quot;,2018143114);
        map.put(&quot;id&quot;,2018143114);

        int i = mapper.updateUserById(map);
        if (i &gt; 0) {
            System.out.println(&quot;修改成功！&quot;+i);
        }
        //增删改需要提交事务
        sqlSessioon.commit();

        sqlSessioon.close();

    }
    @Test
    public void mybatisTest4(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        int i = mapper.deleteUserById(2018143117);
        if (i &gt; 0) {
            System.out.println(&quot;删除成功！&quot;+i);
        }
        sqlSessioon.commit();
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest5(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        User user = new User(2018143117, &quot;杨帆东&quot;, &quot;2018143117&quot;);
        int i = mapper.insertUser(user);
        if (i &gt; 0) {
            System.out.println(&quot;插入成功！&quot;+i);
        }
        sqlSessioon.commit();
        sqlSessioon.close();

    }
}

</code></pre>
<p>&nbsp;</p>
<p>		</p>, 2020-02-24 03:15:45.0, 2020-02-24 03:15:50.0, admin, 0]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20010, rs-50177} Result: [7, mybatis, mybatis啊, 作者, 2020-02-24 03:27:18.0, 2020-02-24 03:27:18.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20010, rs-50177} Result: [8, springboot, aaa, [TOC]
                            #### Disabled options

                            - TeX (Based on KaTeX);
                            - Emoji;
                            - Task lists;
                            - HTML tags decode;
                            - Flowchart and Sequence Diagram;
                            #### Editor.md directory

                                editor.md/
                                        lib/
                                        css/
                                        scss/
                                        tests/
                                        fonts/
                                        images/
                                        plugins/
                                        examples/
                                        languages/
                                        editormd.js
                                        ...

                            ```html
                            <!-- English -->
                            <script src="../dist/js/languages/en.js"></script>

                            <!-- 繁體中文 -->
                            <script src="../dist/js/languages/zh-tw.js"></script>
                            ```
                        , 2020-02-25 03:39:36.0, 2020-02-25 22:38:07.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20010, rs-50177} Result: [9, mybatis, bbb, [TOC]

                            #### Disabled options

                            - TeX (Based on KaTeX);
                            - Emoji;
                            - Task lists;
                            - HTML tags decode;
                            - Flowchart and Sequence Diagram;

                            #### Editor.md directory

                                editor.md/
                                        lib/
                                        css/
                                        scss/
                                        tests/
                                        fonts/
                                        images/
                                        plugins/
                                        examples/
                                        languages/
                                        editormd.js
                                        ...

                            ```html
                            <!-- English -->
                            <script src="../dist/js/languages/en.js"></script>

                            <!-- 繁體中文 -->
                            <script src="../dist/js/languages/zh-tw.js"></script>
                            ```
                        , 2020-02-25 03:44:09.0, 2020-02-25 03:44:09.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20010, rs-50177} Result: [10, springboot, 飞哥, #大哥的Markdown, 2020-02-25 22:43:28.0, 2020-02-25 22:43:28.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20010, rs-50177} Result: [11, mybatis, 大哥, #飞哥的博客后台管理系统, 2020-02-25 22:49:26.0, 2020-02-25 22:49:26.0, admin, 1]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20010, rs-50177} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20010} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20011} created. select count(*) from `blog`
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20011} Parameters : []
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20011} Types : []
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20011} executed. 1.140888 millis. select count(*) from `blog`
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20011, rs-50178} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20011, rs-50178} Header: [count(*)]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20011, rs-50178} Result: [13]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20011, rs-50178} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20011} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20010} Parameters : [10, 10]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20010} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20010} executed. 1.118666 millis. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog
         
            limit ?,?
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20010, rs-50179} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20010, rs-50179} Header: [id, type_name, title, content, create_time, change_time, author, view]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20010, rs-50179} Result: [12, mybatis, 56, ##等待, 2020-02-25 22:50:53.0, 2020-02-25 22:50:53.0, admin, 5]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20010, rs-50179} Result: [13, mybatis, ssm框架整合, # ssm整合

## 1、数据库环境

创建一个存放书籍数据的数据库表

```
CREATE DATABASE `ssmbuild`;

USE `ssmbuild`;

DROP TABLE IF EXISTS `books`;

CREATE TABLE `books` (
  `bookId` INT PRIMARY KEY COMMENT '书id',
  `bookName` VARCHAR(100) NOT NULL COMMENT '书名',
  `bookCounts` INT(11) NOT NULL COMMENT '数量',
  ``ssmbuild``ssmbuild`` VARCHAR(200) NOT NULL COMMENT '描述'
) ENGINE=INNODB DEFAULT CHARSET=utf8

INSERT  INTO `books`(`bookId`,`bookName`,`bookCounts`,`detail`)VALUES 
(1,'Java',1,'从入门到放弃'),
(2,'MySQL',10,'从删库到跑路'),
(3,'Linux',5,'从进门到进牢');

SELECT * FROM books
```

## 2、基本环境搭建

1. 新建一Maven项目！ ssmbuild ， 添加web的支持

   ![image-20200128134359317](https://gitee.com/feigeCode/java_blog/raw/master/java/ssm%E6%95%B4%E5%90%88.assets/image-20200128134359317.png)

2. 导入相关的pom依赖！

   ```
   <dependencies>
       <!--Junit-->
       <dependency>
           <groupId>junit</groupId>
           <artifactId>junit</artifactId>
           <version>4.12</version>
       </dependency>
       <!--数据库驱动-->
       <dependency>
           <groupId>mysql</groupId>
           <artifactId>mysql-connector-java</artifactId>
           <version>5.1.47</version>
       </dependency>
       <!-- 数据库连接池 -->
       <dependency>
           <groupId>com.mchange</groupId>
           <artifactId>c3p0</artifactId>
           <version>0.9.5.2</version>
       </dependency>
   
       <!--Servlet - JSP -->
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>servlet-api</artifactId>
           <version>2.5</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet.jsp</groupId>
           <artifactId>jsp-api</artifactId>
           <version>2.2</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>jstl</artifactId>
           <version>1.2</version>
       </dependency>
   
       <!--Mybatis-->
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis</artifactId>
           <version>3.5.2</version>
       </dependency>
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis-spring</artifactId>
           <version>2.0.2</version>
       </dependency>
   
       <!--Spring-->
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-webmvc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-jdbc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->
       <dependency>
           <groupId>org.projectlombok</groupId>
           <artifactId>lombok</artifactId>
           <version>1.16.10</version>
       </dependency>
   </dependencies>
   ```

3. Maven资源过滤设置

   ```
   <build>
       <resources>
           <resource>
               <directory>src/main/java</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
           <resource>
               <directory>src/main/resources</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
       </resources>
   </build>
   ```

4. 建立基本结构和配置框架！

   - com.feige.pojo

   - com.feige.dao

   - com.feige.service

   - com.feige.controller

     在resources目录下创建

   - mybatis-config.xml

     ```
     <?xml version="1.0" encoding="UTF-8" ?>
     <!DOCTYPE configuration
             PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
             "http://mybatis.org/dtd/mybatis-3-config.dtd">
     <configuration>
     
     </configuration>
     ```

   - applicationContext.xml

     ```
     <?xml version="1.0" encoding="UTF-8"?>
     <beans xmlns="http://www.springframework.org/schema/beans"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://www.springframework.org/schema/beans
             http://www.springframework.org/schema/beans/spring-beans.xsd">
     
     </beans>
     ```

## 3、Mybatis层编写

1. 数据库配置文件 **database.properties**

   ```
   jdbc.driver=com.mysql.jdbc.Driver
   jdbc.url=jdbc:mysql://localhost:3306/ssmbuild?useSSL=true&useUnicode=true&characterEncoding=utf8
   jdbc.username=root
   jdbc.password=hufei169357
   ```

2. IDEA关联数据库

3. 编写MyBatis的核心配置文件

   ```
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE configuration
           PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-config.dtd">
   <configuration>
       
       <typeAliases>
           <package name="com.feige.pojo"/>
       </typeAliases>
       <mappers>
           <mapper resource="com/feige/dao/BookMapper.xml"/>
       </mappers>
   
   </configuration>
   ```

4. 编写数据库对应的实体类 com.feige.pojo.Books 使用lombok插件！

   ```
   package com.kuang.pojo;
   
   import lombok.AllArgsConstructor;
   import lombok.Data;
   import lombok.NoArgsConstructor;
   
   @Data
   @AllArgsConstructor
   @NoArgsConstructor
   public class Books {
       
       private int bookId;
       private String bookName;
       private int bookCounts;
       private String detail;
       
   }
   ```

5. 编写Dao层的 Mapper接口！

   ```
   package com.kuang.dao;
   
   import com.kuang.pojo.Books;
   import java.util.List;
   
   public interface BookMapper {
   
       //增加一个Book
       int addBook(Books book);
   
       //根据id删除一个Book
       int deleteBookById(int id);
   
       //更新Book
       int updateBook(Books books);
   
       //根据id查询,返回一个Book
       Books queryBookById(int id);
   
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   
   }
   ```

6. 编写接口对应的 Mapper.xml 文件。需要导入MyBatis的包；

   ```
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE mapper
           PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
   
   <mapper namespace="com.feige.dao.BooksMapper">
   
       <!--增加一个Book-->
       <insert id="addBook" parameterType="Books">
           insert into books(bookName,bookCounts,detail)
           values (#{bookName}, #{bookCounts}, #{detail})
       </insert>
   
       <!--根据id删除一个Book-->
       <delete id="deleteBookById" parameterType="int">
           delete from books where bookId=#{bookId}
       </delete>
   
       <!--更新Book-->
       <update id="updateBook" parameterType="Books">
           update books
           set bookName = #{bookName},bookCounts = #{bookCounts},detail = #{detail}
           where bookId = #{bookId}
       </update>
   
       <!--根据id查询,返回一个Book-->
       <select id="queryBookById" resultType="Books">
           select * from books
           where bookID = #{bookId}
       </select>
   
       <!--查询全部Book-->
       <select id="queryAllBook" resultType="com.feige.pojo.Books">
           SELECT * from books
       </select>
   
   </mapper>
   ```

7. 编写Service层的接口和实现类 接口：

   ```
   package com.feige.service;
   
   import com.feige.pojo.Books;
   
   import java.util.List;
   
   //BookService:底下需要去实现,调用dao层
   public interface BookService {
       //增加一个Book
       int addBook(Books book);
       //根据id删除一个Book
       int deleteBookById(int id);
       //更新Book
       int updateBook(Books books);
       //根据id查询,返回一个Book
       Books queryBookById(int id);
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   }
   ```

实现类：

```
package com.feige.service;

import com.feige.dao.BookMapper;
import com.feige.pojo.Books;
import java.util.List;

public class BookServiceImpl implements BookService {

    //调用dao层的操作，设置一个set接口，方便Spring管理
    private BookMapper bookMapper;

    public void setBookMapper(BookMapper bookMapper) {
        this.bookMapper = bookMapper;
    }
    
    public int addBook(Books book) {
        return bookMapper.addBook(book);
    }
    
    public int deleteBookById(int id) {
        return bookMapper.deleteBookById(id);
    }
    
    public int updateBook(Books books) {
        return bookMapper.updateBook(books);
    }
    
    public Books queryBookById(int id) {
        return bookMapper.queryBookById(id);
    }
    
    public List<Books> queryAllBook() {
        return bookMapper.queryAllBook();
    }
}
```

**OK，到此，底层需求操作编写完毕！**

## 4、Spring层

1. 配置**Spring整合MyBatis**，我们这里数据源使用c3p0连接池；

2. 我们去编写Spring整合Mybatis的相关的配置文件； spring-dao.xml

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans.xsd
   http://www.springframework.org/schema/context
   https://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 配置整合mybatis -->
       <!-- 1.关联数据库文件 -->
       <context:property-placeholder location="classpath:database.properties"/>
   
       <!-- 2.数据库连接池 -->
       <!--数据库连接池
   dbcp  半自动化操作  不能自动连接
   c3p0  自动化操作（自动的加载配置文件 并且设置到对象里面）
       -->
       <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
   <!-- 配置连接池属性 -->
   <property name="driverClass" value="${jdbc.driver}"/>
   <property name="jdbcUrl" value="${jdbc.url}"/>
   <property name="user" value="${jdbc.username}"/>
   <property name="password" value="${jdbc.password}"/>
   
   <!-- c3p0连接池的私有属性 -->
   <property name="maxPoolSize" value="30"/>
   <property name="minPoolSize" value="10"/>
   <!-- 关闭连接后不自动commit -->
   <property name="autoCommitOnClose" value="false"/>
   <!-- 获取连接超时时间 -->
   <property name="checkoutTimeout" value="10000"/>
   <!-- 当获取连接失败重试次数 -->
   <property name="acquireRetryAttempts" value="2"/>
       </bean>
   
       <!-- 3.配置SqlSessionFactory对象 -->
       <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource"/>
   <!-- 配置MyBaties全局配置文件:mybatis-config.xml -->
   <property name="configLocation" value="classpath:mybatis-config.xml"/>
       </bean>
   
       <!-- 4.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 -->
       <!--解释 ： https://www.cnblogs.com/jpfss/p/7799806.html-->
       <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
   <!-- 注入sqlSessionFactory -->
   <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
   <!-- 给出需要扫描Dao接口包 -->
   <property name="basePackage" value="com.feige.dao"/>
       </bean>
   
   </beans>
   ```

3. **Spring整合service层**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 扫描service相关的bean -->
       <context:component-scan base-package="com.kuang.service" />
   
       <!--BookServiceImpl注入到IOC容器中-->
       <bean id="BookServiceImpl" class="com.kuang.service.BookServiceImpl">
   <property name="bookMapper" ref="bookMapper"/>
       </bean>
   
       <!-- 配置事务管理器 -->
       <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource" />
       </bean>
   
   </beans>
   ```

Spring层搞定！再次理解一下，Spring就是一个大杂烩，一个容器！对吧！

## 5、SpringMVC层

1. **web.xml**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
            version="4.0">
   
       <!--DispatcherServlet-->
       <servlet>
           <servlet-name>DispatcherServlet</servlet-name>
           <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
           <init-param>
               <param-name>contextConfigLocation</param-name>
               <param-value>classpath:applicationContext.xml</param-value>
           </init-param>
           <load-on-startup>1</load-on-startup>
       </servlet>
       <servlet-mapping>
           <servlet-name>DispatcherServlet</servlet-name>
           <url-pattern>/</url-pattern>
       </servlet-mapping>
   
       <!--encodingFilter-->
       <filter>
           <filter-name>encodingFilter</filter-name>
           <filter-class>
               org.springframework.web.filter.CharacterEncodingFilter
           </filter-class>
           <init-param>
               <param-name>encoding</param-name>
               <param-value>utf-8</param-value>
           </init-param>
       </filter>
       <filter-mapping>
           <filter-name>encodingFilter</filter-name>
           <url-pattern>/*</url-pattern>
       </filter-mapping>
       
       <!--Session过期时间-->
       <session-config>
           <session-timeout>15</session-timeout>
       </session-config>
       
   </web-app>
   ```

2. **spring-mvc.xml**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xmlns:mvc="http://www.springframework.org/schema/mvc"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       https://www.springframework.org/schema/mvc/spring-mvc.xsd">
   
       <!-- 配置SpringMVC -->
       <!-- 1.开启SpringMVC注解驱动 -->
       <mvc:annotation-driven>
           <mvc:message-converters register-defaults="true">
               <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                   <constructor-arg value="UTF-8"/>
               </bean>
               <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                   <property name="objectMapper">
                       <bean class="org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean">
                           <property name="failOnEmptyBeans" value="false"/>
                       </bean>
                   </property>
               </bean>
           </mvc:message-converters>
       </mvc:annotation-driven>
       <!--解决跨域问题-->
       <mvc:cors>
       <mvc:mapping path="/**"
                    allowed-origins="http://127.0.0.1:8090,http://localhost:8090"
                    allowed-methods="POST,GET, OPTIONS,DELETE,PUT"
                    allowed-headers="Content-Type,ContentType,Access-Control-Allow-Headers, Authorization, X-Requested-With"
                    allow-credentials="true"/>
       </mvc:cors>
       <!-- 2.静态资源默认servlet配置-->
       <mvc:default-servlet-handler/>
   
       <!-- 3.配置jsp 显示ViewResolver视图解析器 -->
       <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
           <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
           <property name="prefix" value="/WEB-INF/jsp/" />
           <property name="suffix" value=".jsp" />
       </bean>
   
       <!-- 4.扫描web相关的bean -->
       <context:component-scan base-package="com.feige.controller" />
   
   </beans>
   ```

3. **Spring配置整合文件，applicationContext.xml**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd">
   
       <import resource="spring-dao.xml"/>
       <import resource="spring-service.xml"/>
       <import resource="spring-mvc.xml"/>
       
   </beans>
   ```

**配置文件，暂时结束！Controller 和 视图层编写**

1. BookController 类编写 ， 方法一：查询全部书籍

   ```
   @Controller
   @RequestMapping("/book")
   public class BookController {
   
       @Autowired
       @Qualifier("BookServiceImpl")
       private BookService bookService;
   
       @RequestMapping("/allBook")
       public String list(Model model) {
           List<Books> list = bookService.queryAllBook();
           model.addAttribute("list", list);
           return "allBook";
       }
   }
   ```

2. 编写首页 **index.jsp**

   ```
   <%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" %>
   <!DOCTYPE HTML>
   <html>
   <head>
       <title>首页</title>
       <style type="text/css">
           a {
               text-decoration: none;
               color: black;
               font-size: 18px;
           }
           h3 {
               width: 180px;
               height: 38px;
               margin: 100px auto;
               text-align: center;
               line-height: 38px;
               background: deepskyblue;
               border-radius: 4px;
           }
       </style>
   </head>
   <body>
   
   <h3>
       <a href="${pageContext.request.contextPath}/book/allBook">点击进入列表页</a>
   </h3>
   </body>
   </html>
   ```

3. 书籍列表页面 **allbook.jsp**

   ```
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>书籍列表</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>书籍列表 —— 显示所有书籍</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <div class="row">
           <div class="col-md-4 column">
               <a class="btn btn-primary" href="${pageContext.request.contextPath}/book/toAddBook">新增</a>
           </div>
       </div>
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <table class="table table-hover table-striped">
                   <thead>
                   <tr>
                       <th>书籍编号</th>
                       <th>书籍名字</th>
                       <th>书籍数量</th>
                       <th>书籍详情</th>
                       <th>操作</th>
                   </tr>
                   </thead>
   
                   <tbody>
                   <c:forEach var="book" items="${requestScope.get('list')}">
                       <tr>
                           <td>${book.getBookId()}</td>
                           <td>${book.getBookName()}</td>
                           <td>${book.getBookCounts()}</td>
                           <td>${book.getDetail()}</td>
                           <td>
                               <a href="${pageContext.request.contextPath}/book/toUpdateBook?id=${book.getBookId()}">更改</a> |
                               <a href="${pageContext.request.contextPath}/book/del/${book.getBookId()}">删除</a>
                           </td>
                       </tr>
                   </c:forEach>
                   </tbody>
               </table>
           </div>
       </div>
   </div>
   ```

4. BookController 类编写 ， 方法二：添加书籍

   ```
   @RequestMapping("/toAddBook")
   public String toAddPaper() {
       return "addBook";
   }
   
   @RequestMapping("/addBook")
   public String addPaper(Books books) {
       System.out.println(books);
       bookService.addBook(books);
       return "redirect:/book/allBook";
   }
   ```

5. 添加书籍页面：**addBook.jsp**

   ```
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   
   <html>
   <head>
       <title>新增书籍</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>新增书籍</small>
                   </h1>
               </div>
           </div>
       </div>
       <form action="${pageContext.request.contextPath}/book/addBook" method="post">
           书籍名称：<input type="text" name="bookName"><br><br><br>
           书籍数量：<input type="text" name="bookCounts"><br><br><br>
           书籍详情：<input type="text" name="detail"><br><br><br>
           <input type="submit" value="添加">
       </form>
   
   </div>
   ```

6. BookController 类编写 ， 方法三：修改书籍

   ```
   @RequestMapping("/toUpdateBook")
   public String toUpdateBook(Model model, int id) {
       Books books = bookService.queryBookById(id);
       System.out.println(books);
       model.addAttribute("book",books );
       return "updateBook";
   }
   
   @RequestMapping("/updateBook")
   public String updateBook(Model model, Books book) {
       bookService.updateBook(book);
       Books books = bookService.queryBookById(book.getBookID());
       model.addAttribute("books", books);
       return "redirect:/book/allBook";
   }
   ```

7. 修改书籍页面 **updateBook.jsp**

   ```
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>修改信息</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>修改信息</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <form action="${pageContext.request.contextPath}/book/updateBook" method="post">
           <input type="hidden" name="bookID" value="${book.getBookId()}"/>
           书籍名称：<input type="text" name="bookName" value="${book.getBookName()}"/>
           书籍数量：<input type="text" name="bookCounts" value="${book.getBookCounts()}"/>
           书籍详情：<input type="text" name="detail" value="${book.getDetail() }"/>
           <input type="submit" value="提交"/>
       </form>
   
   </div>
   ```

8. BookController 类编写 ， 方法四：删除书籍

   ```
   @RequestMapping("/del/{bookId}")
   public String deleteBook(@PathVariable("bookId") int id) {
       bookService.deleteBookById(id);
       return "redirect:/book/allBook";
   }
   ```

**配置Tomcat，进行运行！**

到目前为止，这个SSM项目整合已经完全的OK了，可以直接运行进行测试！这个练习十分的重要，大家需要保证，不看任何东西，自己也可以完整的实现出来！

## **6、项目结构图**

![1570186854191.png](https://blog.kuangstudy.com/usr/uploads/2019/10/1086489242.png)

![1570186868239.png](https://blog.kuangstudy.com/usr/uploads/2019/10/2326667495.png)

## 7、错误排查

### 1、访问出现404，排查步骤：**

1. 查看控制台输出，看一下是不是缺少了什么jar包。

2. 如果jar包存在，显示无法输出，就在IDEA的项目发布中，添加lib依赖！

   步骤：点击项目结构----->Artifacts----->点击自己的项目(ssm:war exploded)--->(点击工具栏的第一个)在WEB-INF目录下新建一个lib包----->选中lib------>点击工具栏的第三个然后选中第一个---->把里面的包全部选中点击ok---->点击Apply再ok

   ![image-20200128125126368](https://gitee.com/feigeCode/java_blog/raw/master/java/ssm%E6%95%B4%E5%90%88.assets/image-20200128125126368.png)

   ![image-20200128125237179](https://gitee.com/feigeCode/java_blog/raw/master/java/ssm%E6%95%B4%E5%90%88.assets/image-20200128125237179.png)

3. 重启Tomcat 即可解决！

### 2、其他错误

#### 1、bean不存在

 步骤：

 查看bean注入是否成功

 junit单元测试，看我们的代码是否能够查询出来

 问题不在底层，是我们spring出了问题

 springMVC整合时没有调用到service层的bean

 applicationContext.xml没有注册bean

 web.xml也绑定过配置文件要绑定大的applicationContext.xml



## 8、小结及展望

这个是同学们的第一个SSM整合案例，一定要烂熟于心！

SSM框架的重要程度是不言而喻的，学到这里，大家已经可以进行基本网站的单独开发。但是这只是增删改查的基本操作。可以说学到这里，大家才算是真正的步入了后台开发的门。也就是能找一个后台相关工作的底线。

或许很多人，工作就做这些事情，但是对于个人的提高来说，还远远不够！

| 飞哥 | 飞哥 | 飞哥 |
| ---- | ---- | ---- |
| 飞哥 | 飞哥 | 飞哥 |
| 飞哥 | 飞哥 | 飞哥 |
| 飞哥 | 飞哥 | 飞哥 |



~~~java
static class CustomAttributeProvider implements AttributeProvider {

        @Override
        public void setAttributes(Node node, String s, Map<String, String> map) {
            //改变a标签的target属性为_blank
            if(node instanceof Link) {
                map.put("target","_blank");
            }
            if (node instanceof TableBlock) {
                map.put("class","el-table__body-wrapper is-scrolling-none");
            }
            if (node instanceof TableBody) {
                map.put("class","el-table__body");
            }
            if (node instanceof TableRow) {
                map.put("class","el-table__row");
            }
            if (node instanceof TableCell) {
                map.put("class","el-table_13_column_55");
            }
        }
~~~

# feige

, 2020-03-02 07:06:53.0, 2020-03-13 06:59:47.0, admin, 10]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20010, rs-50179} Result: [17, springboot, ss, ss, 2020-02-24 03:07:20.0, 2020-03-20 00:07:13.0, admin, 11]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20010, rs-50179} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20010} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20011} Parameters : []
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20011} Types : []
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20011} executed. 0.710221 millis. select count(*) from `blog`
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20011, rs-50180} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20011, rs-50180} Header: [count(*)]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20011, rs-50180} Result: [13]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20011, rs-50180} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20011} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20006} Parameters : [13]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20006} Types : [INTEGER]
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20005} Parameters : [13]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20005} Types : [INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20005} executed. 0.913333 millis. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog where id=?
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50181} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50181} Header: [id, type_name, title, content, create_time, change_time, author, view]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50181} Result: [13, mybatis, ssm框架整合, # ssm整合

## 1、数据库环境

创建一个存放书籍数据的数据库表

```
CREATE DATABASE `ssmbuild`;

USE `ssmbuild`;

DROP TABLE IF EXISTS `books`;

CREATE TABLE `books` (
  `bookId` INT PRIMARY KEY COMMENT '书id',
  `bookName` VARCHAR(100) NOT NULL COMMENT '书名',
  `bookCounts` INT(11) NOT NULL COMMENT '数量',
  ``ssmbuild``ssmbuild`` VARCHAR(200) NOT NULL COMMENT '描述'
) ENGINE=INNODB DEFAULT CHARSET=utf8

INSERT  INTO `books`(`bookId`,`bookName`,`bookCounts`,`detail`)VALUES 
(1,'Java',1,'从入门到放弃'),
(2,'MySQL',10,'从删库到跑路'),
(3,'Linux',5,'从进门到进牢');

SELECT * FROM books
```

## 2、基本环境搭建

1. 新建一Maven项目！ ssmbuild ， 添加web的支持

   ![image-20200128134359317](https://gitee.com/feigeCode/java_blog/raw/master/java/ssm%E6%95%B4%E5%90%88.assets/image-20200128134359317.png)

2. 导入相关的pom依赖！

   ```
   <dependencies>
       <!--Junit-->
       <dependency>
           <groupId>junit</groupId>
           <artifactId>junit</artifactId>
           <version>4.12</version>
       </dependency>
       <!--数据库驱动-->
       <dependency>
           <groupId>mysql</groupId>
           <artifactId>mysql-connector-java</artifactId>
           <version>5.1.47</version>
       </dependency>
       <!-- 数据库连接池 -->
       <dependency>
           <groupId>com.mchange</groupId>
           <artifactId>c3p0</artifactId>
           <version>0.9.5.2</version>
       </dependency>
   
       <!--Servlet - JSP -->
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>servlet-api</artifactId>
           <version>2.5</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet.jsp</groupId>
           <artifactId>jsp-api</artifactId>
           <version>2.2</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>jstl</artifactId>
           <version>1.2</version>
       </dependency>
   
       <!--Mybatis-->
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis</artifactId>
           <version>3.5.2</version>
       </dependency>
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis-spring</artifactId>
           <version>2.0.2</version>
       </dependency>
   
       <!--Spring-->
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-webmvc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-jdbc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->
       <dependency>
           <groupId>org.projectlombok</groupId>
           <artifactId>lombok</artifactId>
           <version>1.16.10</version>
       </dependency>
   </dependencies>
   ```

3. Maven资源过滤设置

   ```
   <build>
       <resources>
           <resource>
               <directory>src/main/java</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
           <resource>
               <directory>src/main/resources</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
       </resources>
   </build>
   ```

4. 建立基本结构和配置框架！

   - com.feige.pojo

   - com.feige.dao

   - com.feige.service

   - com.feige.controller

     在resources目录下创建

   - mybatis-config.xml

     ```
     <?xml version="1.0" encoding="UTF-8" ?>
     <!DOCTYPE configuration
             PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
             "http://mybatis.org/dtd/mybatis-3-config.dtd">
     <configuration>
     
     </configuration>
     ```

   - applicationContext.xml

     ```
     <?xml version="1.0" encoding="UTF-8"?>
     <beans xmlns="http://www.springframework.org/schema/beans"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://www.springframework.org/schema/beans
             http://www.springframework.org/schema/beans/spring-beans.xsd">
     
     </beans>
     ```

## 3、Mybatis层编写

1. 数据库配置文件 **database.properties**

   ```
   jdbc.driver=com.mysql.jdbc.Driver
   jdbc.url=jdbc:mysql://localhost:3306/ssmbuild?useSSL=true&useUnicode=true&characterEncoding=utf8
   jdbc.username=root
   jdbc.password=hufei169357
   ```

2. IDEA关联数据库

3. 编写MyBatis的核心配置文件

   ```
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE configuration
           PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-config.dtd">
   <configuration>
       
       <typeAliases>
           <package name="com.feige.pojo"/>
       </typeAliases>
       <mappers>
           <mapper resource="com/feige/dao/BookMapper.xml"/>
       </mappers>
   
   </configuration>
   ```

4. 编写数据库对应的实体类 com.feige.pojo.Books 使用lombok插件！

   ```
   package com.kuang.pojo;
   
   import lombok.AllArgsConstructor;
   import lombok.Data;
   import lombok.NoArgsConstructor;
   
   @Data
   @AllArgsConstructor
   @NoArgsConstructor
   public class Books {
       
       private int bookId;
       private String bookName;
       private int bookCounts;
       private String detail;
       
   }
   ```

5. 编写Dao层的 Mapper接口！

   ```
   package com.kuang.dao;
   
   import com.kuang.pojo.Books;
   import java.util.List;
   
   public interface BookMapper {
   
       //增加一个Book
       int addBook(Books book);
   
       //根据id删除一个Book
       int deleteBookById(int id);
   
       //更新Book
       int updateBook(Books books);
   
       //根据id查询,返回一个Book
       Books queryBookById(int id);
   
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   
   }
   ```

6. 编写接口对应的 Mapper.xml 文件。需要导入MyBatis的包；

   ```
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE mapper
           PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
   
   <mapper namespace="com.feige.dao.BooksMapper">
   
       <!--增加一个Book-->
       <insert id="addBook" parameterType="Books">
           insert into books(bookName,bookCounts,detail)
           values (#{bookName}, #{bookCounts}, #{detail})
       </insert>
   
       <!--根据id删除一个Book-->
       <delete id="deleteBookById" parameterType="int">
           delete from books where bookId=#{bookId}
       </delete>
   
       <!--更新Book-->
       <update id="updateBook" parameterType="Books">
           update books
           set bookName = #{bookName},bookCounts = #{bookCounts},detail = #{detail}
           where bookId = #{bookId}
       </update>
   
       <!--根据id查询,返回一个Book-->
       <select id="queryBookById" resultType="Books">
           select * from books
           where bookID = #{bookId}
       </select>
   
       <!--查询全部Book-->
       <select id="queryAllBook" resultType="com.feige.pojo.Books">
           SELECT * from books
       </select>
   
   </mapper>
   ```

7. 编写Service层的接口和实现类 接口：

   ```
   package com.feige.service;
   
   import com.feige.pojo.Books;
   
   import java.util.List;
   
   //BookService:底下需要去实现,调用dao层
   public interface BookService {
       //增加一个Book
       int addBook(Books book);
       //根据id删除一个Book
       int deleteBookById(int id);
       //更新Book
       int updateBook(Books books);
       //根据id查询,返回一个Book
       Books queryBookById(int id);
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   }
   ```

实现类：

```
package com.feige.service;

import com.feige.dao.BookMapper;
import com.feige.pojo.Books;
import java.util.List;

public class BookServiceImpl implements BookService {

    //调用dao层的操作，设置一个set接口，方便Spring管理
    private BookMapper bookMapper;

    public void setBookMapper(BookMapper bookMapper) {
        this.bookMapper = bookMapper;
    }
    
    public int addBook(Books book) {
        return bookMapper.addBook(book);
    }
    
    public int deleteBookById(int id) {
        return bookMapper.deleteBookById(id);
    }
    
    public int updateBook(Books books) {
        return bookMapper.updateBook(books);
    }
    
    public Books queryBookById(int id) {
        return bookMapper.queryBookById(id);
    }
    
    public List<Books> queryAllBook() {
        return bookMapper.queryAllBook();
    }
}
```

**OK，到此，底层需求操作编写完毕！**

## 4、Spring层

1. 配置**Spring整合MyBatis**，我们这里数据源使用c3p0连接池；

2. 我们去编写Spring整合Mybatis的相关的配置文件； spring-dao.xml

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans.xsd
   http://www.springframework.org/schema/context
   https://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 配置整合mybatis -->
       <!-- 1.关联数据库文件 -->
       <context:property-placeholder location="classpath:database.properties"/>
   
       <!-- 2.数据库连接池 -->
       <!--数据库连接池
   dbcp  半自动化操作  不能自动连接
   c3p0  自动化操作（自动的加载配置文件 并且设置到对象里面）
       -->
       <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
   <!-- 配置连接池属性 -->
   <property name="driverClass" value="${jdbc.driver}"/>
   <property name="jdbcUrl" value="${jdbc.url}"/>
   <property name="user" value="${jdbc.username}"/>
   <property name="password" value="${jdbc.password}"/>
   
   <!-- c3p0连接池的私有属性 -->
   <property name="maxPoolSize" value="30"/>
   <property name="minPoolSize" value="10"/>
   <!-- 关闭连接后不自动commit -->
   <property name="autoCommitOnClose" value="false"/>
   <!-- 获取连接超时时间 -->
   <property name="checkoutTimeout" value="10000"/>
   <!-- 当获取连接失败重试次数 -->
   <property name="acquireRetryAttempts" value="2"/>
       </bean>
   
       <!-- 3.配置SqlSessionFactory对象 -->
       <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource"/>
   <!-- 配置MyBaties全局配置文件:mybatis-config.xml -->
   <property name="configLocation" value="classpath:mybatis-config.xml"/>
       </bean>
   
       <!-- 4.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 -->
       <!--解释 ： https://www.cnblogs.com/jpfss/p/7799806.html-->
       <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
   <!-- 注入sqlSessionFactory -->
   <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
   <!-- 给出需要扫描Dao接口包 -->
   <property name="basePackage" value="com.feige.dao"/>
       </bean>
   
   </beans>
   ```

3. **Spring整合service层**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 扫描service相关的bean -->
       <context:component-scan base-package="com.kuang.service" />
   
       <!--BookServiceImpl注入到IOC容器中-->
       <bean id="BookServiceImpl" class="com.kuang.service.BookServiceImpl">
   <property name="bookMapper" ref="bookMapper"/>
       </bean>
   
       <!-- 配置事务管理器 -->
       <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource" />
       </bean>
   
   </beans>
   ```

Spring层搞定！再次理解一下，Spring就是一个大杂烩，一个容器！对吧！

## 5、SpringMVC层

1. **web.xml**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
            version="4.0">
   
       <!--DispatcherServlet-->
       <servlet>
           <servlet-name>DispatcherServlet</servlet-name>
           <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
           <init-param>
               <param-name>contextConfigLocation</param-name>
               <param-value>classpath:applicationContext.xml</param-value>
           </init-param>
           <load-on-startup>1</load-on-startup>
       </servlet>
       <servlet-mapping>
           <servlet-name>DispatcherServlet</servlet-name>
           <url-pattern>/</url-pattern>
       </servlet-mapping>
   
       <!--encodingFilter-->
       <filter>
           <filter-name>encodingFilter</filter-name>
           <filter-class>
               org.springframework.web.filter.CharacterEncodingFilter
           </filter-class>
           <init-param>
               <param-name>encoding</param-name>
               <param-value>utf-8</param-value>
           </init-param>
       </filter>
       <filter-mapping>
           <filter-name>encodingFilter</filter-name>
           <url-pattern>/*</url-pattern>
       </filter-mapping>
       
       <!--Session过期时间-->
       <session-config>
           <session-timeout>15</session-timeout>
       </session-config>
       
   </web-app>
   ```

2. **spring-mvc.xml**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xmlns:mvc="http://www.springframework.org/schema/mvc"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       https://www.springframework.org/schema/mvc/spring-mvc.xsd">
   
       <!-- 配置SpringMVC -->
       <!-- 1.开启SpringMVC注解驱动 -->
       <mvc:annotation-driven>
           <mvc:message-converters register-defaults="true">
               <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                   <constructor-arg value="UTF-8"/>
               </bean>
               <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                   <property name="objectMapper">
                       <bean class="org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean">
                           <property name="failOnEmptyBeans" value="false"/>
                       </bean>
                   </property>
               </bean>
           </mvc:message-converters>
       </mvc:annotation-driven>
       <!--解决跨域问题-->
       <mvc:cors>
       <mvc:mapping path="/**"
                    allowed-origins="http://127.0.0.1:8090,http://localhost:8090"
                    allowed-methods="POST,GET, OPTIONS,DELETE,PUT"
                    allowed-headers="Content-Type,ContentType,Access-Control-Allow-Headers, Authorization, X-Requested-With"
                    allow-credentials="true"/>
       </mvc:cors>
       <!-- 2.静态资源默认servlet配置-->
       <mvc:default-servlet-handler/>
   
       <!-- 3.配置jsp 显示ViewResolver视图解析器 -->
       <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
           <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
           <property name="prefix" value="/WEB-INF/jsp/" />
           <property name="suffix" value=".jsp" />
       </bean>
   
       <!-- 4.扫描web相关的bean -->
       <context:component-scan base-package="com.feige.controller" />
   
   </beans>
   ```

3. **Spring配置整合文件，applicationContext.xml**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd">
   
       <import resource="spring-dao.xml"/>
       <import resource="spring-service.xml"/>
       <import resource="spring-mvc.xml"/>
       
   </beans>
   ```

**配置文件，暂时结束！Controller 和 视图层编写**

1. BookController 类编写 ， 方法一：查询全部书籍

   ```
   @Controller
   @RequestMapping("/book")
   public class BookController {
   
       @Autowired
       @Qualifier("BookServiceImpl")
       private BookService bookService;
   
       @RequestMapping("/allBook")
       public String list(Model model) {
           List<Books> list = bookService.queryAllBook();
           model.addAttribute("list", list);
           return "allBook";
       }
   }
   ```

2. 编写首页 **index.jsp**

   ```
   <%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" %>
   <!DOCTYPE HTML>
   <html>
   <head>
       <title>首页</title>
       <style type="text/css">
           a {
               text-decoration: none;
               color: black;
               font-size: 18px;
           }
           h3 {
               width: 180px;
               height: 38px;
               margin: 100px auto;
               text-align: center;
               line-height: 38px;
               background: deepskyblue;
               border-radius: 4px;
           }
       </style>
   </head>
   <body>
   
   <h3>
       <a href="${pageContext.request.contextPath}/book/allBook">点击进入列表页</a>
   </h3>
   </body>
   </html>
   ```

3. 书籍列表页面 **allbook.jsp**

   ```
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>书籍列表</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>书籍列表 —— 显示所有书籍</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <div class="row">
           <div class="col-md-4 column">
               <a class="btn btn-primary" href="${pageContext.request.contextPath}/book/toAddBook">新增</a>
           </div>
       </div>
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <table class="table table-hover table-striped">
                   <thead>
                   <tr>
                       <th>书籍编号</th>
                       <th>书籍名字</th>
                       <th>书籍数量</th>
                       <th>书籍详情</th>
                       <th>操作</th>
                   </tr>
                   </thead>
   
                   <tbody>
                   <c:forEach var="book" items="${requestScope.get('list')}">
                       <tr>
                           <td>${book.getBookId()}</td>
                           <td>${book.getBookName()}</td>
                           <td>${book.getBookCounts()}</td>
                           <td>${book.getDetail()}</td>
                           <td>
                               <a href="${pageContext.request.contextPath}/book/toUpdateBook?id=${book.getBookId()}">更改</a> |
                               <a href="${pageContext.request.contextPath}/book/del/${book.getBookId()}">删除</a>
                           </td>
                       </tr>
                   </c:forEach>
                   </tbody>
               </table>
           </div>
       </div>
   </div>
   ```

4. BookController 类编写 ， 方法二：添加书籍

   ```
   @RequestMapping("/toAddBook")
   public String toAddPaper() {
       return "addBook";
   }
   
   @RequestMapping("/addBook")
   public String addPaper(Books books) {
       System.out.println(books);
       bookService.addBook(books);
       return "redirect:/book/allBook";
   }
   ```

5. 添加书籍页面：**addBook.jsp**

   ```
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   
   <html>
   <head>
       <title>新增书籍</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>新增书籍</small>
                   </h1>
               </div>
           </div>
       </div>
       <form action="${pageContext.request.contextPath}/book/addBook" method="post">
           书籍名称：<input type="text" name="bookName"><br><br><br>
           书籍数量：<input type="text" name="bookCounts"><br><br><br>
           书籍详情：<input type="text" name="detail"><br><br><br>
           <input type="submit" value="添加">
       </form>
   
   </div>
   ```

6. BookController 类编写 ， 方法三：修改书籍

   ```
   @RequestMapping("/toUpdateBook")
   public String toUpdateBook(Model model, int id) {
       Books books = bookService.queryBookById(id);
       System.out.println(books);
       model.addAttribute("book",books );
       return "updateBook";
   }
   
   @RequestMapping("/updateBook")
   public String updateBook(Model model, Books book) {
       bookService.updateBook(book);
       Books books = bookService.queryBookById(book.getBookID());
       model.addAttribute("books", books);
       return "redirect:/book/allBook";
   }
   ```

7. 修改书籍页面 **updateBook.jsp**

   ```
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>修改信息</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>修改信息</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <form action="${pageContext.request.contextPath}/book/updateBook" method="post">
           <input type="hidden" name="bookID" value="${book.getBookId()}"/>
           书籍名称：<input type="text" name="bookName" value="${book.getBookName()}"/>
           书籍数量：<input type="text" name="bookCounts" value="${book.getBookCounts()}"/>
           书籍详情：<input type="text" name="detail" value="${book.getDetail() }"/>
           <input type="submit" value="提交"/>
       </form>
   
   </div>
   ```

8. BookController 类编写 ， 方法四：删除书籍

   ```
   @RequestMapping("/del/{bookId}")
   public String deleteBook(@PathVariable("bookId") int id) {
       bookService.deleteBookById(id);
       return "redirect:/book/allBook";
   }
   ```

**配置Tomcat，进行运行！**

到目前为止，这个SSM项目整合已经完全的OK了，可以直接运行进行测试！这个练习十分的重要，大家需要保证，不看任何东西，自己也可以完整的实现出来！

## **6、项目结构图**

![1570186854191.png](https://blog.kuangstudy.com/usr/uploads/2019/10/1086489242.png)

![1570186868239.png](https://blog.kuangstudy.com/usr/uploads/2019/10/2326667495.png)

## 7、错误排查

### 1、访问出现404，排查步骤：**

1. 查看控制台输出，看一下是不是缺少了什么jar包。

2. 如果jar包存在，显示无法输出，就在IDEA的项目发布中，添加lib依赖！

   步骤：点击项目结构----->Artifacts----->点击自己的项目(ssm:war exploded)--->(点击工具栏的第一个)在WEB-INF目录下新建一个lib包----->选中lib------>点击工具栏的第三个然后选中第一个---->把里面的包全部选中点击ok---->点击Apply再ok

   ![image-20200128125126368](https://gitee.com/feigeCode/java_blog/raw/master/java/ssm%E6%95%B4%E5%90%88.assets/image-20200128125126368.png)

   ![image-20200128125237179](https://gitee.com/feigeCode/java_blog/raw/master/java/ssm%E6%95%B4%E5%90%88.assets/image-20200128125237179.png)

3. 重启Tomcat 即可解决！

### 2、其他错误

#### 1、bean不存在

 步骤：

 查看bean注入是否成功

 junit单元测试，看我们的代码是否能够查询出来

 问题不在底层，是我们spring出了问题

 springMVC整合时没有调用到service层的bean

 applicationContext.xml没有注册bean

 web.xml也绑定过配置文件要绑定大的applicationContext.xml



## 8、小结及展望

这个是同学们的第一个SSM整合案例，一定要烂熟于心！

SSM框架的重要程度是不言而喻的，学到这里，大家已经可以进行基本网站的单独开发。但是这只是增删改查的基本操作。可以说学到这里，大家才算是真正的步入了后台开发的门。也就是能找一个后台相关工作的底线。

或许很多人，工作就做这些事情，但是对于个人的提高来说，还远远不够！

| 飞哥 | 飞哥 | 飞哥 |
| ---- | ---- | ---- |
| 飞哥 | 飞哥 | 飞哥 |
| 飞哥 | 飞哥 | 飞哥 |
| 飞哥 | 飞哥 | 飞哥 |



~~~java
static class CustomAttributeProvider implements AttributeProvider {

        @Override
        public void setAttributes(Node node, String s, Map<String, String> map) {
            //改变a标签的target属性为_blank
            if(node instanceof Link) {
                map.put("target","_blank");
            }
            if (node instanceof TableBlock) {
                map.put("class","el-table__body-wrapper is-scrolling-none");
            }
            if (node instanceof TableBody) {
                map.put("class","el-table__body");
            }
            if (node instanceof TableRow) {
                map.put("class","el-table__row");
            }
            if (node instanceof TableCell) {
                map.put("class","el-table_13_column_55");
            }
        }
~~~

# feige

, 2020-03-02 07:06:53.0, 2020-03-13 06:59:47.0, admin, 10]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20006} executed. 3.592441 millis. select distinct count(*) from comments c
        where c.blog_id=? and
        c.parent_id is null;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20006, rs-50182} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20006, rs-50182} Header: [count(*)]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20006, rs-50182} Result: [3]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10004, pstmt-20006, rs-50182} closed
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50181} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10004, pstmt-20006} clearParameters. 
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20005} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20003} Parameters : [13, 0, 10]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20003} Types : [INTEGER, INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20003} executed. 1.128443 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id  and
        c.parent_id is null limit ?,?;;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20003, rs-50183} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20003, rs-50183} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20003, rs-50183} Result: [26, 好好, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:35.0, null]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20003, rs-50183} Result: [29, 太好了, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:13.0, null]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20003, rs-50183} Result: [32, <p>feige</p>, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 01:33:26.0, null]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20003, rs-50183} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20003} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Parameters : [13, 26]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} executed. 8.143993 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50184} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50184} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50184} Result: [27, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:56.0, sss]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50184} Result: [28, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:43:03.0, sss]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50184} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Parameters : [13, 26]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} executed. 5.16044 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50185} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50185} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50185} Result: [27, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:56.0, sss]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50185} Result: [28, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:43:03.0, sss]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50185} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Parameters : [13, 27]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} executed. 0.725777 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50186} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50186} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50186} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Parameters : [13, 27]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} executed. 0.559111 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50187} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50187} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50187} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Parameters : [13, 29]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} executed. 4.38933 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50188} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50188} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50188} Result: [30, 谢谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:43.0, sss]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50188} Result: [31, 不用谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:47:01.0, sss]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50188} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Parameters : [13, 29]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} executed. 3.239108 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50189} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50189} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50189} Result: [30, 谢谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:43.0, sss]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50189} Result: [31, 不用谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:47:01.0, sss]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50189} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Parameters : [13, 30]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} executed. 0.578222 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50190} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50190} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50190} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Parameters : [13, 30]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} executed. 0.587111 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50191} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50191} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50191} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Parameters : [13, 32]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} executed. 0.712 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50192} open
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50192} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-22][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50192} closed
[DEBUG][20-03-22][druid.sql.Statement]{conn-10005, pstmt-20004} clearParameters. 
[DEBUG][20-03-22][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10001} connected
[DEBUG][20-03-23][druid.sql.Connection]{conn-10002} connected
[DEBUG][20-03-23][druid.sql.Connection]{conn-10003} connected
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} connected
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} connected
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} created. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog
         
            limit ?,?
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} Parameters : [0, 10]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} executed. 10.827991 millis. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog
         
            limit ?,?
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Header: [id, type_name, title, content, create_time, change_time, author, view]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [1, springboot, springboot入门, springb自动装配, 2020-02-23 21:43:36.0, 2020-02-24 03:06:48.0, admin, 0]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [2, mybatis, 配置, 得到的, 2020-02-24 02:05:36.0, 2020-03-13 06:39:47.0, admin, 3]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [4, springMVC, mybatis-plus, ##飞哥, 2020-02-24 02:10:09.0, 2020-02-25 22:42:23.0, admin, 111]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [5, springboot, 人, 嗯嗯, 2020-02-24 03:07:20.0, 2020-02-24 03:07:20.0, admin, 2]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [6, mybatis, mybatis入门, <h2>1、Mybatis简介</h2>
<p><img src="https://blog.kuangstudy.com/usr/uploads/2019/10/1296229149.png" referrerpolicy="no-referrer" alt="1567007421329.png"></p>
<h3>什么是MyBatis</h3>
<ul>
<li>MyBatis 是一款优秀的<strong>持久层框架</strong></li>
<li>MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集的过程</li>
<li>MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 实体类 【Plain Old Java Objects,普通的 Java对象】映射成数据库中的记录。</li>
<li>MyBatis 本是apache的一个开源项目ibatis, 2010年这个项目由apache 迁移到了google code，并且改名为MyBatis 。</li>
<li>2013年11月迁移到<strong>Github</strong> .</li>
<li>Mybatis官方文档 : <a href='http://www.mybatis.org/mybatis-3/zh/index.html' target='_blank' class='url'>http://www.mybatis.org/mybatis-3/zh/index.html</a></li>
<li>GitHub : <a href='https://github.com/mybatis/mybatis-3' target='_blank' class='url'>https://github.com/mybatis/mybatis-3</a></li>

</ul>
<h3>持久化</h3>
<ul>
<li><p><strong>持久化是将程序数据在持久状态和瞬时状态间转换的机制。</strong></p>
<ul>
<li>即把数据（如内存中的对象）保存到可永久保存的存储设备中（如磁盘）。持久化的主要应用是将内存中的对象存储在数据库中，或者存储在磁盘文件中、XML数据文件中等等。</li>
<li>JDBC就是一种持久化机制。文件IO也是一种持久化机制。</li>
<li>在生活中 : 将鲜肉冷藏，吃的时候再解冻的方法也是。将水果做成罐头的方法也是。</li>

</ul>
</li>
<li><p><strong>为什么需要持久化服务呢？那是由于内存本身的缺陷引起的</strong></p>
<ul>
<li>内存断电后数据会丢失，但有一些对象是无论如何都不能丢失的，比如银行账号等，遗憾的是，人们还无法保证内存永不掉电。</li>
<li>内存过于昂贵，与硬盘、光盘等外存相比，内存的价格要高2~3个数量级，而且维持成本也高，至少需要一直供电吧。所以即使对象不需要永久保存，也会因为内存的容量限制不能一直呆在内存中，需要持久化来缓存到外存。</li>

</ul>
</li>

</ul>
<h3>持久层</h3>
<ul>
<li><p>什么是持久层？</p>
<ul>
<li>完成持久化工作的代码块 . ----&gt; dao层 【DAO (Data Access Object) 数据访问对象】</li>
<li>大多数情况下特别是企业级应用，数据持久化往往也就意味着将内存中的数据保存到磁盘上加以固化，而持久化的实现过程则大多通过各种<strong>关系数据库</strong>来完成。</li>
<li>不过这里有一个字需要特别强调，也就是所谓的“层”。对于应用系统而言，数据持久功能大多是必不可少的组成部分。也就是说，我们的系统中，已经天然的具备了“持久层”概念？也许是，但也许实际情况并非如此。之所以要独立出一个“持久层”的概念,而不是“持久模块”，“持久单元”，也就意味着，我们的系统架构中，应该有一个相对独立的逻辑层面，专著于数据持久化逻辑的实现.</li>
<li>与系统其他部分相对而言，这个层面应该具有一个较为清晰和严格的逻辑边界。 【说白了就是用来操作数据库存在的！】</li>

</ul>
</li>

</ul>
<h3>为什么需要Mybatis</h3>
<ul>
<li><p>Mybatis就是帮助程序猿将数据存入数据库中 , 和从数据库中取数据 .</p>
</li>
<li><p>传统的jdbc操作 , 有很多重复代码块 .比如 : 数据取出时的封装 , 数据库的建立连接等等... , 通过框架可以减少重复代码,提高开发效率 .</p>
</li>
<li><p>MyBatis 是一个半自动化的<strong>ORM框架 (Object Relationship Mapping) --&gt;对象关系映射</strong></p>
</li>
<li><p>所有的事情，不用Mybatis依旧可以做到，只是用了它，所有实现会更加简单！<strong>技术没有高低之分，只有使用这个技术的人有高低之别</strong></p>
</li>
<li><p>MyBatis的优点</p>
<ul>
<li>简单易学：本身就很小且简单。没有任何第三方依赖，最简单安装只要两个jar文件+配置几个sql映射文件就可以了，易于学习，易于使用，通过文档和源代码，可以比较完全的掌握它的设计思路和实现。</li>
<li>灵活：mybatis不会对应用程序或者数据库的现有设计强加任何影响。 sql写在xml里，便于统一管理和优化。通过sql语句可以满足操作数据库的所有需求。</li>
<li>解除sql与程序代码的耦合：通过提供DAO层，将业务逻辑和数据访问逻辑分离，使系统的设计更清晰，更易维护，更易单元测试。sql和代码的分离，提高了可维护性。</li>
<li>提供xml标签，支持编写动态sql。</li>
<li>.......</li>

</ul>
</li>
<li><p>最重要的一点，使用的人多！公司需要！</p>
</li>
<li><p>环境说明：</p>
<ul>
<li>jdk 8 +</li>
<li>MySQL 5.7.19</li>
<li>maven-3.6.0</li>
<li>IDEA</li>

</ul>
<p>学习前需要掌握：</p>
<ul>
<li>JDBC</li>
<li>MySQL</li>
<li>Java 基础</li>
<li>Maven</li>
<li>Junit</li>

</ul>
</li>

</ul>
<h2>2、mybatis crud（实现增删改查）</h2>
<h4>1.1、创建一个maven项目</h4>
<p>		导入依赖</p>
<pre><code class='language-xml' lang='xml'>&lt;dependencies&gt;
    &lt;!--mysql驱动--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;mysql&lt;/groupId&gt;
        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
        &lt;version&gt;5.1.47&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;!--mybatis支持--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.mybatis&lt;/groupId&gt;
        &lt;artifactId&gt;mybatis&lt;/artifactId&gt;
        &lt;version&gt;3.5.2&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;!--junit支持--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;junit&lt;/groupId&gt;
        &lt;artifactId&gt;junit&lt;/artifactId&gt;
        &lt;version&gt;4.12&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
</code></pre>
<p>注意点 : pom文件的设置中需要设置资源过滤 , 否则会有资源文件打包不成功问题，导致项目无法运行；</p>
<pre><code class='language-xml' lang='xml'>&lt;build&gt;
    &lt;resources&gt;
        &lt;resource&gt;
            &lt;directory&gt;src/main/java&lt;/directory&gt;
            &lt;includes&gt;
                &lt;include&gt;**/*.properties&lt;/include&gt;
                &lt;include&gt;**/*.xml&lt;/include&gt;
            &lt;/includes&gt;
            &lt;filtering&gt;true&lt;/filtering&gt;
        &lt;/resource&gt;
    &lt;/resources&gt;
&lt;/build&gt;
</code></pre>
<p>&nbsp;</p>
<h4>1.2、创建数据库和表</h4>
<pre><code class='language-sql' lang='sql'>CREATE DATABASE mybatis CHARACTER SET utf8;
CREATE TABLE USER(
	id INT PRIMARY KEY,
	username VARCHAR(15) NOT NULL,
	pwd VARCHAR(20) NOT NULL
)
INSERT INTO USER VALUES(2018143114,&#39;张三&#39;,&#39;123456&#39;),(2018143115,&#39;李四&#39;,&#39;1234567&#39;),(2018143116,&#39;王五&#39;,&#39;147258&#39;);
SELECT * FROM USER;
</code></pre>
<h4>1.3、编写mybatis配置文件</h4>
<p>在resource里新建一个mybatis-config.xml文件</p>
<pre><code class='language-xml' lang='xml'>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE configuration
        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;
&lt;configuration&gt;
    &lt;environments default=&quot;development&quot;&gt;
        &lt;environment id=&quot;development&quot;&gt;
            &lt;transactionManager type=&quot;JDBC&quot;/&gt;
            &lt;dataSource type=&quot;POOLED&quot;&gt;
                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;
                &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;amp;useUnicode=true&amp;amp;characterEncoding=utf8&quot;/&gt;
                &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;
                &lt;property name=&quot;password&quot; value=&quot;hufei169357&quot;/&gt;
            &lt;/dataSource&gt;
        &lt;/environment&gt;
    &lt;/environments&gt;
    &lt;mappers&gt;
        &lt;mapper resource=&quot;com/feige/dao/userMapper.xml&quot;/&gt;
    &lt;/mappers&gt;
&lt;/configuration&gt;
</code></pre>
<h4>1.4、新建一个工具类用来获取SqlSession对象</h4>
<pre><code class='language-java' lang='java'>package com.feige.utils;

import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import java.io.IOException;
import java.io.InputStream;
//sqlSessionFactory-sqlSession
public class MybatisUtils {
    private static SqlSessionFactory sqlSessionFactory;
    static {
        try {
            //使用mybatis第一步：获取sqlSessionFactory对象
            String resource = &quot;mybatis-config.xml&quot;;
            InputStream inputStream = Resources.getResourceAsStream(resource);
            sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    //既然有了sqlSessionFactory，顾名思义，我们就可以从中获得sqlSession的实例
    public static SqlSession getSqlSessioon(){
        return sqlSessionFactory.openSession();
    }
}

</code></pre>
<p>&nbsp;</p>
<h4>1.5、编写一个pojo（实体类）</h4>
<pre><code class='language-java' lang='java'>package com.feige.pojo;

public class User {
    private int id;
    private String username;
    private String pwd;

    public User() {
    }

    public User(int id, String username, String pwd) {
        this.id = id;
        this.username = username;
        this.pwd = pwd;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getPwd() {
        return pwd;
    }

    public void setPwd(String pwd) {
        this.pwd = pwd;
    }
    @Override
    public String toString() {
        return &quot;User{&quot; +
                &quot;id=&quot; + id +
                &quot;, username=&#39;&quot; + username + &#39;\&#39;&#39; +
                &quot;, pwd=&#39;&quot; + pwd + &#39;\&#39;&#39; +
                &#39;}&#39;;
    }
}

</code></pre>
<h4>1.6、新建一个userMapper接口</h4>
<pre><code class='language-java' lang='java'>package com.feige.dao;

import com.feige.pojo.User;

import java.util.List;
import java.util.Map;

public interface UserMapper {
    //查询全部用户
    List&lt;User&gt; getAllUser();
    //通过一个id查询一个用户
    User getUserById(int id);
    //通过id修改一个用户
    int updateUserById(Map map);
    //通过id删除一个用户
    int deleteUserById(int id);
    //插入一条数据
    int insertUser(User user);
}

</code></pre>
<h4>1.7、新建一个userMapper.xml文件</h4>
<pre><code class='language-xml' lang='xml'>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE mapper
        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;com.feige.dao.UserMapper&quot;&gt;
    &lt;!--每个语句要对应相应的标签select对应&lt;select&gt; delete 对应&lt;delete&gt; update 对应&lt;update&gt; insert 对应&lt;insert&gt;--&gt;
    &lt;select id=&quot;getAllUser&quot; resultType=&quot;com.feige.pojo.User&quot;&gt;
        select * from user
    &lt;/select&gt;
    &lt;select id=&quot;getUserById&quot; resultType=&quot;com.feige.pojo.User&quot; parameterType=&quot;int&quot;&gt;
        select * from user where id=#{id}
    &lt;/select&gt;
    &lt;update id=&quot;updateUserById&quot; parameterType=&quot;map&quot;&gt;
        update user set pwd=#{pwd} where id=#{id}
    &lt;/update&gt;
    &lt;delete id=&quot;deleteUserById&quot; parameterType=&quot;int&quot;&gt;
        delete from user where id=#{id}
    &lt;/delete&gt;
    &lt;insert id=&quot;insertUser&quot; parameterType=&quot;com.feige.pojo.User&quot;&gt;
        insert into user values (#{id},#{username},#{pwd})
    &lt;/insert&gt;
&lt;/mapper&gt;
</code></pre>
<h4>1.8、测试代码</h4>
<pre><code class='language-java' lang='java'>package com.feige.mybatisTest;

import com.feige.dao.UserMapper;
import com.feige.pojo.User;
import com.feige.utils.MybatisUtils;
import org.apache.ibatis.session.SqlSession;
import org.junit.Test;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MybatisTest {
    @Test
    public void mybatisTest1(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        List&lt;User&gt; allUser = mapper.getAllUser();
        for (User user : allUser) {
            System.out.println(user);
        }
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest2(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        User userById = mapper.getUserById(2018143114);
        System.out.println(userById);
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest3() {
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        //使用万能map传参
        Map&lt;String,Object&gt; map = new HashMap&lt;String, Object&gt;();
        map.put(&quot;pwd&quot;,2018143114);
        map.put(&quot;id&quot;,2018143114);

        int i = mapper.updateUserById(map);
        if (i &gt; 0) {
            System.out.println(&quot;修改成功！&quot;+i);
        }
        //增删改需要提交事务
        sqlSessioon.commit();

        sqlSessioon.close();

    }
    @Test
    public void mybatisTest4(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        int i = mapper.deleteUserById(2018143117);
        if (i &gt; 0) {
            System.out.println(&quot;删除成功！&quot;+i);
        }
        sqlSessioon.commit();
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest5(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        User user = new User(2018143117, &quot;杨帆东&quot;, &quot;2018143117&quot;);
        int i = mapper.insertUser(user);
        if (i &gt; 0) {
            System.out.println(&quot;插入成功！&quot;+i);
        }
        sqlSessioon.commit();
        sqlSessioon.close();

    }
}

</code></pre>
<p>&nbsp;</p>
<p>		</p>, 2020-02-24 03:15:45.0, 2020-02-24 03:15:50.0, admin, 0]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [7, mybatis, mybatis啊, 作者, 2020-02-24 03:27:18.0, 2020-02-24 03:27:18.0, admin, 1]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [8, springboot, aaa, [TOC]
                            #### Disabled options

                            - TeX (Based on KaTeX);
                            - Emoji;
                            - Task lists;
                            - HTML tags decode;
                            - Flowchart and Sequence Diagram;
                            #### Editor.md directory

                                editor.md/
                                        lib/
                                        css/
                                        scss/
                                        tests/
                                        fonts/
                                        images/
                                        plugins/
                                        examples/
                                        languages/
                                        editormd.js
                                        ...

                            ```html
                            <!-- English -->
                            <script src="../dist/js/languages/en.js"></script>

                            <!-- 繁體中文 -->
                            <script src="../dist/js/languages/zh-tw.js"></script>
                            ```
                        , 2020-02-25 03:39:36.0, 2020-02-25 22:38:07.0, admin, 1]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [9, mybatis, bbb, [TOC]

                            #### Disabled options

                            - TeX (Based on KaTeX);
                            - Emoji;
                            - Task lists;
                            - HTML tags decode;
                            - Flowchart and Sequence Diagram;

                            #### Editor.md directory

                                editor.md/
                                        lib/
                                        css/
                                        scss/
                                        tests/
                                        fonts/
                                        images/
                                        plugins/
                                        examples/
                                        languages/
                                        editormd.js
                                        ...

                            ```html
                            <!-- English -->
                            <script src="../dist/js/languages/en.js"></script>

                            <!-- 繁體中文 -->
                            <script src="../dist/js/languages/zh-tw.js"></script>
                            ```
                        , 2020-02-25 03:44:09.0, 2020-02-25 03:44:09.0, admin, 1]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [10, springboot, 飞哥, #大哥的Markdown, 2020-02-25 22:43:28.0, 2020-02-25 22:43:28.0, admin, 1]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [11, mybatis, 大哥, #飞哥的博客后台管理系统, 2020-02-25 22:49:26.0, 2020-02-25 22:49:26.0, admin, 1]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20001} created. select count(*) from `blog`
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20001} Parameters : []
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20001} Types : []
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20001} executed. 1.020444 millis. select count(*) from `blog`
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50001} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50001} Header: [count(*)]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50001} Result: [13]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50001} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20001} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} Parameters : [10, 10]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} executed. 1.605776 millis. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog
         
            limit ?,?
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50002} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50002} Header: [id, type_name, title, content, create_time, change_time, author, view]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50002} Result: [12, mybatis, 56, ##等待, 2020-02-25 22:50:53.0, 2020-02-25 22:50:53.0, admin, 5]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50002} Result: [13, mybatis, ssm框架整合, # ssm整合

## 1、数据库环境

创建一个存放书籍数据的数据库表

```
CREATE DATABASE `ssmbuild`;

USE `ssmbuild`;

DROP TABLE IF EXISTS `books`;

CREATE TABLE `books` (
  `bookId` INT PRIMARY KEY COMMENT '书id',
  `bookName` VARCHAR(100) NOT NULL COMMENT '书名',
  `bookCounts` INT(11) NOT NULL COMMENT '数量',
  ``ssmbuild``ssmbuild`` VARCHAR(200) NOT NULL COMMENT '描述'
) ENGINE=INNODB DEFAULT CHARSET=utf8

INSERT  INTO `books`(`bookId`,`bookName`,`bookCounts`,`detail`)VALUES 
(1,'Java',1,'从入门到放弃'),
(2,'MySQL',10,'从删库到跑路'),
(3,'Linux',5,'从进门到进牢');

SELECT * FROM books
```

## 2、基本环境搭建

1. 新建一Maven项目！ ssmbuild ， 添加web的支持

   ![image-20200128134359317](https://gitee.com/feigeCode/java_blog/raw/master/java/ssm%E6%95%B4%E5%90%88.assets/image-20200128134359317.png)

2. 导入相关的pom依赖！

   ```
   <dependencies>
       <!--Junit-->
       <dependency>
           <groupId>junit</groupId>
           <artifactId>junit</artifactId>
           <version>4.12</version>
       </dependency>
       <!--数据库驱动-->
       <dependency>
           <groupId>mysql</groupId>
           <artifactId>mysql-connector-java</artifactId>
           <version>5.1.47</version>
       </dependency>
       <!-- 数据库连接池 -->
       <dependency>
           <groupId>com.mchange</groupId>
           <artifactId>c3p0</artifactId>
           <version>0.9.5.2</version>
       </dependency>
   
       <!--Servlet - JSP -->
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>servlet-api</artifactId>
           <version>2.5</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet.jsp</groupId>
           <artifactId>jsp-api</artifactId>
           <version>2.2</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>jstl</artifactId>
           <version>1.2</version>
       </dependency>
   
       <!--Mybatis-->
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis</artifactId>
           <version>3.5.2</version>
       </dependency>
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis-spring</artifactId>
           <version>2.0.2</version>
       </dependency>
   
       <!--Spring-->
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-webmvc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-jdbc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->
       <dependency>
           <groupId>org.projectlombok</groupId>
           <artifactId>lombok</artifactId>
           <version>1.16.10</version>
       </dependency>
   </dependencies>
   ```

3. Maven资源过滤设置

   ```
   <build>
       <resources>
           <resource>
               <directory>src/main/java</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
           <resource>
               <directory>src/main/resources</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
       </resources>
   </build>
   ```

4. 建立基本结构和配置框架！

   - com.feige.pojo

   - com.feige.dao

   - com.feige.service

   - com.feige.controller

     在resources目录下创建

   - mybatis-config.xml

     ```
     <?xml version="1.0" encoding="UTF-8" ?>
     <!DOCTYPE configuration
             PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
             "http://mybatis.org/dtd/mybatis-3-config.dtd">
     <configuration>
     
     </configuration>
     ```

   - applicationContext.xml

     ```
     <?xml version="1.0" encoding="UTF-8"?>
     <beans xmlns="http://www.springframework.org/schema/beans"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://www.springframework.org/schema/beans
             http://www.springframework.org/schema/beans/spring-beans.xsd">
     
     </beans>
     ```

## 3、Mybatis层编写

1. 数据库配置文件 **database.properties**

   ```
   jdbc.driver=com.mysql.jdbc.Driver
   jdbc.url=jdbc:mysql://localhost:3306/ssmbuild?useSSL=true&useUnicode=true&characterEncoding=utf8
   jdbc.username=root
   jdbc.password=hufei169357
   ```

2. IDEA关联数据库

3. 编写MyBatis的核心配置文件

   ```
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE configuration
           PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-config.dtd">
   <configuration>
       
       <typeAliases>
           <package name="com.feige.pojo"/>
       </typeAliases>
       <mappers>
           <mapper resource="com/feige/dao/BookMapper.xml"/>
       </mappers>
   
   </configuration>
   ```

4. 编写数据库对应的实体类 com.feige.pojo.Books 使用lombok插件！

   ```
   package com.kuang.pojo;
   
   import lombok.AllArgsConstructor;
   import lombok.Data;
   import lombok.NoArgsConstructor;
   
   @Data
   @AllArgsConstructor
   @NoArgsConstructor
   public class Books {
       
       private int bookId;
       private String bookName;
       private int bookCounts;
       private String detail;
       
   }
   ```

5. 编写Dao层的 Mapper接口！

   ```
   package com.kuang.dao;
   
   import com.kuang.pojo.Books;
   import java.util.List;
   
   public interface BookMapper {
   
       //增加一个Book
       int addBook(Books book);
   
       //根据id删除一个Book
       int deleteBookById(int id);
   
       //更新Book
       int updateBook(Books books);
   
       //根据id查询,返回一个Book
       Books queryBookById(int id);
   
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   
   }
   ```

6. 编写接口对应的 Mapper.xml 文件。需要导入MyBatis的包；

   ```
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE mapper
           PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
   
   <mapper namespace="com.feige.dao.BooksMapper">
   
       <!--增加一个Book-->
       <insert id="addBook" parameterType="Books">
           insert into books(bookName,bookCounts,detail)
           values (#{bookName}, #{bookCounts}, #{detail})
       </insert>
   
       <!--根据id删除一个Book-->
       <delete id="deleteBookById" parameterType="int">
           delete from books where bookId=#{bookId}
       </delete>
   
       <!--更新Book-->
       <update id="updateBook" parameterType="Books">
           update books
           set bookName = #{bookName},bookCounts = #{bookCounts},detail = #{detail}
           where bookId = #{bookId}
       </update>
   
       <!--根据id查询,返回一个Book-->
       <select id="queryBookById" resultType="Books">
           select * from books
           where bookID = #{bookId}
       </select>
   
       <!--查询全部Book-->
       <select id="queryAllBook" resultType="com.feige.pojo.Books">
           SELECT * from books
       </select>
   
   </mapper>
   ```

7. 编写Service层的接口和实现类 接口：

   ```
   package com.feige.service;
   
   import com.feige.pojo.Books;
   
   import java.util.List;
   
   //BookService:底下需要去实现,调用dao层
   public interface BookService {
       //增加一个Book
       int addBook(Books book);
       //根据id删除一个Book
       int deleteBookById(int id);
       //更新Book
       int updateBook(Books books);
       //根据id查询,返回一个Book
       Books queryBookById(int id);
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   }
   ```

实现类：

```
package com.feige.service;

import com.feige.dao.BookMapper;
import com.feige.pojo.Books;
import java.util.List;

public class BookServiceImpl implements BookService {

    //调用dao层的操作，设置一个set接口，方便Spring管理
    private BookMapper bookMapper;

    public void setBookMapper(BookMapper bookMapper) {
        this.bookMapper = bookMapper;
    }
    
    public int addBook(Books book) {
        return bookMapper.addBook(book);
    }
    
    public int deleteBookById(int id) {
        return bookMapper.deleteBookById(id);
    }
    
    public int updateBook(Books books) {
        return bookMapper.updateBook(books);
    }
    
    public Books queryBookById(int id) {
        return bookMapper.queryBookById(id);
    }
    
    public List<Books> queryAllBook() {
        return bookMapper.queryAllBook();
    }
}
```

**OK，到此，底层需求操作编写完毕！**

## 4、Spring层

1. 配置**Spring整合MyBatis**，我们这里数据源使用c3p0连接池；

2. 我们去编写Spring整合Mybatis的相关的配置文件； spring-dao.xml

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans.xsd
   http://www.springframework.org/schema/context
   https://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 配置整合mybatis -->
       <!-- 1.关联数据库文件 -->
       <context:property-placeholder location="classpath:database.properties"/>
   
       <!-- 2.数据库连接池 -->
       <!--数据库连接池
   dbcp  半自动化操作  不能自动连接
   c3p0  自动化操作（自动的加载配置文件 并且设置到对象里面）
       -->
       <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
   <!-- 配置连接池属性 -->
   <property name="driverClass" value="${jdbc.driver}"/>
   <property name="jdbcUrl" value="${jdbc.url}"/>
   <property name="user" value="${jdbc.username}"/>
   <property name="password" value="${jdbc.password}"/>
   
   <!-- c3p0连接池的私有属性 -->
   <property name="maxPoolSize" value="30"/>
   <property name="minPoolSize" value="10"/>
   <!-- 关闭连接后不自动commit -->
   <property name="autoCommitOnClose" value="false"/>
   <!-- 获取连接超时时间 -->
   <property name="checkoutTimeout" value="10000"/>
   <!-- 当获取连接失败重试次数 -->
   <property name="acquireRetryAttempts" value="2"/>
       </bean>
   
       <!-- 3.配置SqlSessionFactory对象 -->
       <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource"/>
   <!-- 配置MyBaties全局配置文件:mybatis-config.xml -->
   <property name="configLocation" value="classpath:mybatis-config.xml"/>
       </bean>
   
       <!-- 4.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 -->
       <!--解释 ： https://www.cnblogs.com/jpfss/p/7799806.html-->
       <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
   <!-- 注入sqlSessionFactory -->
   <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
   <!-- 给出需要扫描Dao接口包 -->
   <property name="basePackage" value="com.feige.dao"/>
       </bean>
   
   </beans>
   ```

3. **Spring整合service层**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 扫描service相关的bean -->
       <context:component-scan base-package="com.kuang.service" />
   
       <!--BookServiceImpl注入到IOC容器中-->
       <bean id="BookServiceImpl" class="com.kuang.service.BookServiceImpl">
   <property name="bookMapper" ref="bookMapper"/>
       </bean>
   
       <!-- 配置事务管理器 -->
       <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource" />
       </bean>
   
   </beans>
   ```

Spring层搞定！再次理解一下，Spring就是一个大杂烩，一个容器！对吧！

## 5、SpringMVC层

1. **web.xml**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
            version="4.0">
   
       <!--DispatcherServlet-->
       <servlet>
           <servlet-name>DispatcherServlet</servlet-name>
           <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
           <init-param>
               <param-name>contextConfigLocation</param-name>
               <param-value>classpath:applicationContext.xml</param-value>
           </init-param>
           <load-on-startup>1</load-on-startup>
       </servlet>
       <servlet-mapping>
           <servlet-name>DispatcherServlet</servlet-name>
           <url-pattern>/</url-pattern>
       </servlet-mapping>
   
       <!--encodingFilter-->
       <filter>
           <filter-name>encodingFilter</filter-name>
           <filter-class>
               org.springframework.web.filter.CharacterEncodingFilter
           </filter-class>
           <init-param>
               <param-name>encoding</param-name>
               <param-value>utf-8</param-value>
           </init-param>
       </filter>
       <filter-mapping>
           <filter-name>encodingFilter</filter-name>
           <url-pattern>/*</url-pattern>
       </filter-mapping>
       
       <!--Session过期时间-->
       <session-config>
           <session-timeout>15</session-timeout>
       </session-config>
       
   </web-app>
   ```

2. **spring-mvc.xml**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xmlns:mvc="http://www.springframework.org/schema/mvc"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       https://www.springframework.org/schema/mvc/spring-mvc.xsd">
   
       <!-- 配置SpringMVC -->
       <!-- 1.开启SpringMVC注解驱动 -->
       <mvc:annotation-driven>
           <mvc:message-converters register-defaults="true">
               <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                   <constructor-arg value="UTF-8"/>
               </bean>
               <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                   <property name="objectMapper">
                       <bean class="org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean">
                           <property name="failOnEmptyBeans" value="false"/>
                       </bean>
                   </property>
               </bean>
           </mvc:message-converters>
       </mvc:annotation-driven>
       <!--解决跨域问题-->
       <mvc:cors>
       <mvc:mapping path="/**"
                    allowed-origins="http://127.0.0.1:8090,http://localhost:8090"
                    allowed-methods="POST,GET, OPTIONS,DELETE,PUT"
                    allowed-headers="Content-Type,ContentType,Access-Control-Allow-Headers, Authorization, X-Requested-With"
                    allow-credentials="true"/>
       </mvc:cors>
       <!-- 2.静态资源默认servlet配置-->
       <mvc:default-servlet-handler/>
   
       <!-- 3.配置jsp 显示ViewResolver视图解析器 -->
       <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
           <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
           <property name="prefix" value="/WEB-INF/jsp/" />
           <property name="suffix" value=".jsp" />
       </bean>
   
       <!-- 4.扫描web相关的bean -->
       <context:component-scan base-package="com.feige.controller" />
   
   </beans>
   ```

3. **Spring配置整合文件，applicationContext.xml**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd">
   
       <import resource="spring-dao.xml"/>
       <import resource="spring-service.xml"/>
       <import resource="spring-mvc.xml"/>
       
   </beans>
   ```

**配置文件，暂时结束！Controller 和 视图层编写**

1. BookController 类编写 ， 方法一：查询全部书籍

   ```
   @Controller
   @RequestMapping("/book")
   public class BookController {
   
       @Autowired
       @Qualifier("BookServiceImpl")
       private BookService bookService;
   
       @RequestMapping("/allBook")
       public String list(Model model) {
           List<Books> list = bookService.queryAllBook();
           model.addAttribute("list", list);
           return "allBook";
       }
   }
   ```

2. 编写首页 **index.jsp**

   ```
   <%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" %>
   <!DOCTYPE HTML>
   <html>
   <head>
       <title>首页</title>
       <style type="text/css">
           a {
               text-decoration: none;
               color: black;
               font-size: 18px;
           }
           h3 {
               width: 180px;
               height: 38px;
               margin: 100px auto;
               text-align: center;
               line-height: 38px;
               background: deepskyblue;
               border-radius: 4px;
           }
       </style>
   </head>
   <body>
   
   <h3>
       <a href="${pageContext.request.contextPath}/book/allBook">点击进入列表页</a>
   </h3>
   </body>
   </html>
   ```

3. 书籍列表页面 **allbook.jsp**

   ```
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>书籍列表</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>书籍列表 —— 显示所有书籍</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <div class="row">
           <div class="col-md-4 column">
               <a class="btn btn-primary" href="${pageContext.request.contextPath}/book/toAddBook">新增</a>
           </div>
       </div>
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <table class="table table-hover table-striped">
                   <thead>
                   <tr>
                       <th>书籍编号</th>
                       <th>书籍名字</th>
                       <th>书籍数量</th>
                       <th>书籍详情</th>
                       <th>操作</th>
                   </tr>
                   </thead>
   
                   <tbody>
                   <c:forEach var="book" items="${requestScope.get('list')}">
                       <tr>
                           <td>${book.getBookId()}</td>
                           <td>${book.getBookName()}</td>
                           <td>${book.getBookCounts()}</td>
                           <td>${book.getDetail()}</td>
                           <td>
                               <a href="${pageContext.request.contextPath}/book/toUpdateBook?id=${book.getBookId()}">更改</a> |
                               <a href="${pageContext.request.contextPath}/book/del/${book.getBookId()}">删除</a>
                           </td>
                       </tr>
                   </c:forEach>
                   </tbody>
               </table>
           </div>
       </div>
   </div>
   ```

4. BookController 类编写 ， 方法二：添加书籍

   ```
   @RequestMapping("/toAddBook")
   public String toAddPaper() {
       return "addBook";
   }
   
   @RequestMapping("/addBook")
   public String addPaper(Books books) {
       System.out.println(books);
       bookService.addBook(books);
       return "redirect:/book/allBook";
   }
   ```

5. 添加书籍页面：**addBook.jsp**

   ```
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   
   <html>
   <head>
       <title>新增书籍</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>新增书籍</small>
                   </h1>
               </div>
           </div>
       </div>
       <form action="${pageContext.request.contextPath}/book/addBook" method="post">
           书籍名称：<input type="text" name="bookName"><br><br><br>
           书籍数量：<input type="text" name="bookCounts"><br><br><br>
           书籍详情：<input type="text" name="detail"><br><br><br>
           <input type="submit" value="添加">
       </form>
   
   </div>
   ```

6. BookController 类编写 ， 方法三：修改书籍

   ```
   @RequestMapping("/toUpdateBook")
   public String toUpdateBook(Model model, int id) {
       Books books = bookService.queryBookById(id);
       System.out.println(books);
       model.addAttribute("book",books );
       return "updateBook";
   }
   
   @RequestMapping("/updateBook")
   public String updateBook(Model model, Books book) {
       bookService.updateBook(book);
       Books books = bookService.queryBookById(book.getBookID());
       model.addAttribute("books", books);
       return "redirect:/book/allBook";
   }
   ```

7. 修改书籍页面 **updateBook.jsp**

   ```
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>修改信息</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>修改信息</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <form action="${pageContext.request.contextPath}/book/updateBook" method="post">
           <input type="hidden" name="bookID" value="${book.getBookId()}"/>
           书籍名称：<input type="text" name="bookName" value="${book.getBookName()}"/>
           书籍数量：<input type="text" name="bookCounts" value="${book.getBookCounts()}"/>
           书籍详情：<input type="text" name="detail" value="${book.getDetail() }"/>
           <input type="submit" value="提交"/>
       </form>
   
   </div>
   ```

8. BookController 类编写 ， 方法四：删除书籍

   ```
   @RequestMapping("/del/{bookId}")
   public String deleteBook(@PathVariable("bookId") int id) {
       bookService.deleteBookById(id);
       return "redirect:/book/allBook";
   }
   ```

**配置Tomcat，进行运行！**

到目前为止，这个SSM项目整合已经完全的OK了，可以直接运行进行测试！这个练习十分的重要，大家需要保证，不看任何东西，自己也可以完整的实现出来！

## **6、项目结构图**

![1570186854191.png](https://blog.kuangstudy.com/usr/uploads/2019/10/1086489242.png)

![1570186868239.png](https://blog.kuangstudy.com/usr/uploads/2019/10/2326667495.png)

## 7、错误排查

### 1、访问出现404，排查步骤：**

1. 查看控制台输出，看一下是不是缺少了什么jar包。

2. 如果jar包存在，显示无法输出，就在IDEA的项目发布中，添加lib依赖！

   步骤：点击项目结构----->Artifacts----->点击自己的项目(ssm:war exploded)--->(点击工具栏的第一个)在WEB-INF目录下新建一个lib包----->选中lib------>点击工具栏的第三个然后选中第一个---->把里面的包全部选中点击ok---->点击Apply再ok

   ![image-20200128125126368](https://gitee.com/feigeCode/java_blog/raw/master/java/ssm%E6%95%B4%E5%90%88.assets/image-20200128125126368.png)

   ![image-20200128125237179](https://gitee.com/feigeCode/java_blog/raw/master/java/ssm%E6%95%B4%E5%90%88.assets/image-20200128125237179.png)

3. 重启Tomcat 即可解决！

### 2、其他错误

#### 1、bean不存在

 步骤：

 查看bean注入是否成功

 junit单元测试，看我们的代码是否能够查询出来

 问题不在底层，是我们spring出了问题

 springMVC整合时没有调用到service层的bean

 applicationContext.xml没有注册bean

 web.xml也绑定过配置文件要绑定大的applicationContext.xml



## 8、小结及展望

这个是同学们的第一个SSM整合案例，一定要烂熟于心！

SSM框架的重要程度是不言而喻的，学到这里，大家已经可以进行基本网站的单独开发。但是这只是增删改查的基本操作。可以说学到这里，大家才算是真正的步入了后台开发的门。也就是能找一个后台相关工作的底线。

或许很多人，工作就做这些事情，但是对于个人的提高来说，还远远不够！

| 飞哥 | 飞哥 | 飞哥 |
| ---- | ---- | ---- |
| 飞哥 | 飞哥 | 飞哥 |
| 飞哥 | 飞哥 | 飞哥 |
| 飞哥 | 飞哥 | 飞哥 |



~~~java
static class CustomAttributeProvider implements AttributeProvider {

        @Override
        public void setAttributes(Node node, String s, Map<String, String> map) {
            //改变a标签的target属性为_blank
            if(node instanceof Link) {
                map.put("target","_blank");
            }
            if (node instanceof TableBlock) {
                map.put("class","el-table__body-wrapper is-scrolling-none");
            }
            if (node instanceof TableBody) {
                map.put("class","el-table__body");
            }
            if (node instanceof TableRow) {
                map.put("class","el-table__row");
            }
            if (node instanceof TableCell) {
                map.put("class","el-table_13_column_55");
            }
        }
~~~

# feige

, 2020-03-02 07:06:53.0, 2020-03-13 06:59:47.0, admin, 10]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50002} Result: [17, springboot, ss, ss, 2020-02-24 03:07:20.0, 2020-03-20 00:07:13.0, admin, 11]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50002} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20001} Parameters : []
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20001} Types : []
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20001} executed. 0.791999 millis. select count(*) from `blog`
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50003} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50003} Header: [count(*)]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50003} Result: [13]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50003} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20001} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20002} created. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog where id=?
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20003} created. select distinct count(*) from comments c
        where c.blog_id=? and
        c.parent_id is null;
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20002} Parameters : [13]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20003} Parameters : [13]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20002} Types : [INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20003} Types : [INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20002} executed. 4.612885 millis. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog where id=?
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20002, rs-50004} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20002, rs-50004} Header: [id, type_name, title, content, create_time, change_time, author, view]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20002, rs-50004} Result: [13, mybatis, ssm框架整合, # ssm整合

## 1、数据库环境

创建一个存放书籍数据的数据库表

```
CREATE DATABASE `ssmbuild`;

USE `ssmbuild`;

DROP TABLE IF EXISTS `books`;

CREATE TABLE `books` (
  `bookId` INT PRIMARY KEY COMMENT '书id',
  `bookName` VARCHAR(100) NOT NULL COMMENT '书名',
  `bookCounts` INT(11) NOT NULL COMMENT '数量',
  ``ssmbuild``ssmbuild`` VARCHAR(200) NOT NULL COMMENT '描述'
) ENGINE=INNODB DEFAULT CHARSET=utf8

INSERT  INTO `books`(`bookId`,`bookName`,`bookCounts`,`detail`)VALUES 
(1,'Java',1,'从入门到放弃'),
(2,'MySQL',10,'从删库到跑路'),
(3,'Linux',5,'从进门到进牢');

SELECT * FROM books
```

## 2、基本环境搭建

1. 新建一Maven项目！ ssmbuild ， 添加web的支持

   ![image-20200128134359317](https://gitee.com/feigeCode/java_blog/raw/master/java/ssm%E6%95%B4%E5%90%88.assets/image-20200128134359317.png)

2. 导入相关的pom依赖！

   ```
   <dependencies>
       <!--Junit-->
       <dependency>
           <groupId>junit</groupId>
           <artifactId>junit</artifactId>
           <version>4.12</version>
       </dependency>
       <!--数据库驱动-->
       <dependency>
           <groupId>mysql</groupId>
           <artifactId>mysql-connector-java</artifactId>
           <version>5.1.47</version>
       </dependency>
       <!-- 数据库连接池 -->
       <dependency>
           <groupId>com.mchange</groupId>
           <artifactId>c3p0</artifactId>
           <version>0.9.5.2</version>
       </dependency>
   
       <!--Servlet - JSP -->
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>servlet-api</artifactId>
           <version>2.5</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet.jsp</groupId>
           <artifactId>jsp-api</artifactId>
           <version>2.2</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>jstl</artifactId>
           <version>1.2</version>
       </dependency>
   
       <!--Mybatis-->
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis</artifactId>
           <version>3.5.2</version>
       </dependency>
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis-spring</artifactId>
           <version>2.0.2</version>
       </dependency>
   
       <!--Spring-->
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-webmvc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-jdbc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->
       <dependency>
           <groupId>org.projectlombok</groupId>
           <artifactId>lombok</artifactId>
           <version>1.16.10</version>
       </dependency>
   </dependencies>
   ```

3. Maven资源过滤设置

   ```
   <build>
       <resources>
           <resource>
               <directory>src/main/java</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
           <resource>
               <directory>src/main/resources</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
       </resources>
   </build>
   ```

4. 建立基本结构和配置框架！

   - com.feige.pojo

   - com.feige.dao

   - com.feige.service

   - com.feige.controller

     在resources目录下创建

   - mybatis-config.xml

     ```
     <?xml version="1.0" encoding="UTF-8" ?>
     <!DOCTYPE configuration
             PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
             "http://mybatis.org/dtd/mybatis-3-config.dtd">
     <configuration>
     
     </configuration>
     ```

   - applicationContext.xml

     ```
     <?xml version="1.0" encoding="UTF-8"?>
     <beans xmlns="http://www.springframework.org/schema/beans"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://www.springframework.org/schema/beans
             http://www.springframework.org/schema/beans/spring-beans.xsd">
     
     </beans>
     ```

## 3、Mybatis层编写

1. 数据库配置文件 **database.properties**

   ```
   jdbc.driver=com.mysql.jdbc.Driver
   jdbc.url=jdbc:mysql://localhost:3306/ssmbuild?useSSL=true&useUnicode=true&characterEncoding=utf8
   jdbc.username=root
   jdbc.password=hufei169357
   ```

2. IDEA关联数据库

3. 编写MyBatis的核心配置文件

   ```
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE configuration
           PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-config.dtd">
   <configuration>
       
       <typeAliases>
           <package name="com.feige.pojo"/>
       </typeAliases>
       <mappers>
           <mapper resource="com/feige/dao/BookMapper.xml"/>
       </mappers>
   
   </configuration>
   ```

4. 编写数据库对应的实体类 com.feige.pojo.Books 使用lombok插件！

   ```
   package com.kuang.pojo;
   
   import lombok.AllArgsConstructor;
   import lombok.Data;
   import lombok.NoArgsConstructor;
   
   @Data
   @AllArgsConstructor
   @NoArgsConstructor
   public class Books {
       
       private int bookId;
       private String bookName;
       private int bookCounts;
       private String detail;
       
   }
   ```

5. 编写Dao层的 Mapper接口！

   ```
   package com.kuang.dao;
   
   import com.kuang.pojo.Books;
   import java.util.List;
   
   public interface BookMapper {
   
       //增加一个Book
       int addBook(Books book);
   
       //根据id删除一个Book
       int deleteBookById(int id);
   
       //更新Book
       int updateBook(Books books);
   
       //根据id查询,返回一个Book
       Books queryBookById(int id);
   
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   
   }
   ```

6. 编写接口对应的 Mapper.xml 文件。需要导入MyBatis的包；

   ```
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE mapper
           PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
   
   <mapper namespace="com.feige.dao.BooksMapper">
   
       <!--增加一个Book-->
       <insert id="addBook" parameterType="Books">
           insert into books(bookName,bookCounts,detail)
           values (#{bookName}, #{bookCounts}, #{detail})
       </insert>
   
       <!--根据id删除一个Book-->
       <delete id="deleteBookById" parameterType="int">
           delete from books where bookId=#{bookId}
       </delete>
   
       <!--更新Book-->
       <update id="updateBook" parameterType="Books">
           update books
           set bookName = #{bookName},bookCounts = #{bookCounts},detail = #{detail}
           where bookId = #{bookId}
       </update>
   
       <!--根据id查询,返回一个Book-->
       <select id="queryBookById" resultType="Books">
           select * from books
           where bookID = #{bookId}
       </select>
   
       <!--查询全部Book-->
       <select id="queryAllBook" resultType="com.feige.pojo.Books">
           SELECT * from books
       </select>
   
   </mapper>
   ```

7. 编写Service层的接口和实现类 接口：

   ```
   package com.feige.service;
   
   import com.feige.pojo.Books;
   
   import java.util.List;
   
   //BookService:底下需要去实现,调用dao层
   public interface BookService {
       //增加一个Book
       int addBook(Books book);
       //根据id删除一个Book
       int deleteBookById(int id);
       //更新Book
       int updateBook(Books books);
       //根据id查询,返回一个Book
       Books queryBookById(int id);
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   }
   ```

实现类：

```
package com.feige.service;

import com.feige.dao.BookMapper;
import com.feige.pojo.Books;
import java.util.List;

public class BookServiceImpl implements BookService {

    //调用dao层的操作，设置一个set接口，方便Spring管理
    private BookMapper bookMapper;

    public void setBookMapper(BookMapper bookMapper) {
        this.bookMapper = bookMapper;
    }
    
    public int addBook(Books book) {
        return bookMapper.addBook(book);
    }
    
    public int deleteBookById(int id) {
        return bookMapper.deleteBookById(id);
    }
    
    public int updateBook(Books books) {
        return bookMapper.updateBook(books);
    }
    
    public Books queryBookById(int id) {
        return bookMapper.queryBookById(id);
    }
    
    public List<Books> queryAllBook() {
        return bookMapper.queryAllBook();
    }
}
```

**OK，到此，底层需求操作编写完毕！**

## 4、Spring层

1. 配置**Spring整合MyBatis**，我们这里数据源使用c3p0连接池；

2. 我们去编写Spring整合Mybatis的相关的配置文件； spring-dao.xml

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans.xsd
   http://www.springframework.org/schema/context
   https://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 配置整合mybatis -->
       <!-- 1.关联数据库文件 -->
       <context:property-placeholder location="classpath:database.properties"/>
   
       <!-- 2.数据库连接池 -->
       <!--数据库连接池
   dbcp  半自动化操作  不能自动连接
   c3p0  自动化操作（自动的加载配置文件 并且设置到对象里面）
       -->
       <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
   <!-- 配置连接池属性 -->
   <property name="driverClass" value="${jdbc.driver}"/>
   <property name="jdbcUrl" value="${jdbc.url}"/>
   <property name="user" value="${jdbc.username}"/>
   <property name="password" value="${jdbc.password}"/>
   
   <!-- c3p0连接池的私有属性 -->
   <property name="maxPoolSize" value="30"/>
   <property name="minPoolSize" value="10"/>
   <!-- 关闭连接后不自动commit -->
   <property name="autoCommitOnClose" value="false"/>
   <!-- 获取连接超时时间 -->
   <property name="checkoutTimeout" value="10000"/>
   <!-- 当获取连接失败重试次数 -->
   <property name="acquireRetryAttempts" value="2"/>
       </bean>
   
       <!-- 3.配置SqlSessionFactory对象 -->
       <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource"/>
   <!-- 配置MyBaties全局配置文件:mybatis-config.xml -->
   <property name="configLocation" value="classpath:mybatis-config.xml"/>
       </bean>
   
       <!-- 4.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 -->
       <!--解释 ： https://www.cnblogs.com/jpfss/p/7799806.html-->
       <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
   <!-- 注入sqlSessionFactory -->
   <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
   <!-- 给出需要扫描Dao接口包 -->
   <property name="basePackage" value="com.feige.dao"/>
       </bean>
   
   </beans>
   ```

3. **Spring整合service层**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 扫描service相关的bean -->
       <context:component-scan base-package="com.kuang.service" />
   
       <!--BookServiceImpl注入到IOC容器中-->
       <bean id="BookServiceImpl" class="com.kuang.service.BookServiceImpl">
   <property name="bookMapper" ref="bookMapper"/>
       </bean>
   
       <!-- 配置事务管理器 -->
       <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource" />
       </bean>
   
   </beans>
   ```

Spring层搞定！再次理解一下，Spring就是一个大杂烩，一个容器！对吧！

## 5、SpringMVC层

1. **web.xml**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
            version="4.0">
   
       <!--DispatcherServlet-->
       <servlet>
           <servlet-name>DispatcherServlet</servlet-name>
           <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
           <init-param>
               <param-name>contextConfigLocation</param-name>
               <param-value>classpath:applicationContext.xml</param-value>
           </init-param>
           <load-on-startup>1</load-on-startup>
       </servlet>
       <servlet-mapping>
           <servlet-name>DispatcherServlet</servlet-name>
           <url-pattern>/</url-pattern>
       </servlet-mapping>
   
       <!--encodingFilter-->
       <filter>
           <filter-name>encodingFilter</filter-name>
           <filter-class>
               org.springframework.web.filter.CharacterEncodingFilter
           </filter-class>
           <init-param>
               <param-name>encoding</param-name>
               <param-value>utf-8</param-value>
           </init-param>
       </filter>
       <filter-mapping>
           <filter-name>encodingFilter</filter-name>
           <url-pattern>/*</url-pattern>
       </filter-mapping>
       
       <!--Session过期时间-->
       <session-config>
           <session-timeout>15</session-timeout>
       </session-config>
       
   </web-app>
   ```

2. **spring-mvc.xml**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xmlns:mvc="http://www.springframework.org/schema/mvc"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       https://www.springframework.org/schema/mvc/spring-mvc.xsd">
   
       <!-- 配置SpringMVC -->
       <!-- 1.开启SpringMVC注解驱动 -->
       <mvc:annotation-driven>
           <mvc:message-converters register-defaults="true">
               <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                   <constructor-arg value="UTF-8"/>
               </bean>
               <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                   <property name="objectMapper">
                       <bean class="org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean">
                           <property name="failOnEmptyBeans" value="false"/>
                       </bean>
                   </property>
               </bean>
           </mvc:message-converters>
       </mvc:annotation-driven>
       <!--解决跨域问题-->
       <mvc:cors>
       <mvc:mapping path="/**"
                    allowed-origins="http://127.0.0.1:8090,http://localhost:8090"
                    allowed-methods="POST,GET, OPTIONS,DELETE,PUT"
                    allowed-headers="Content-Type,ContentType,Access-Control-Allow-Headers, Authorization, X-Requested-With"
                    allow-credentials="true"/>
       </mvc:cors>
       <!-- 2.静态资源默认servlet配置-->
       <mvc:default-servlet-handler/>
   
       <!-- 3.配置jsp 显示ViewResolver视图解析器 -->
       <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
           <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
           <property name="prefix" value="/WEB-INF/jsp/" />
           <property name="suffix" value=".jsp" />
       </bean>
   
       <!-- 4.扫描web相关的bean -->
       <context:component-scan base-package="com.feige.controller" />
   
   </beans>
   ```

3. **Spring配置整合文件，applicationContext.xml**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd">
   
       <import resource="spring-dao.xml"/>
       <import resource="spring-service.xml"/>
       <import resource="spring-mvc.xml"/>
       
   </beans>
   ```

**配置文件，暂时结束！Controller 和 视图层编写**

1. BookController 类编写 ， 方法一：查询全部书籍

   ```
   @Controller
   @RequestMapping("/book")
   public class BookController {
   
       @Autowired
       @Qualifier("BookServiceImpl")
       private BookService bookService;
   
       @RequestMapping("/allBook")
       public String list(Model model) {
           List<Books> list = bookService.queryAllBook();
           model.addAttribute("list", list);
           return "allBook";
       }
   }
   ```

2. 编写首页 **index.jsp**

   ```
   <%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" %>
   <!DOCTYPE HTML>
   <html>
   <head>
       <title>首页</title>
       <style type="text/css">
           a {
               text-decoration: none;
               color: black;
               font-size: 18px;
           }
           h3 {
               width: 180px;
               height: 38px;
               margin: 100px auto;
               text-align: center;
               line-height: 38px;
               background: deepskyblue;
               border-radius: 4px;
           }
       </style>
   </head>
   <body>
   
   <h3>
       <a href="${pageContext.request.contextPath}/book/allBook">点击进入列表页</a>
   </h3>
   </body>
   </html>
   ```

3. 书籍列表页面 **allbook.jsp**

   ```
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>书籍列表</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>书籍列表 —— 显示所有书籍</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <div class="row">
           <div class="col-md-4 column">
               <a class="btn btn-primary" href="${pageContext.request.contextPath}/book/toAddBook">新增</a>
           </div>
       </div>
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <table class="table table-hover table-striped">
                   <thead>
                   <tr>
                       <th>书籍编号</th>
                       <th>书籍名字</th>
                       <th>书籍数量</th>
                       <th>书籍详情</th>
                       <th>操作</th>
                   </tr>
                   </thead>
   
                   <tbody>
                   <c:forEach var="book" items="${requestScope.get('list')}">
                       <tr>
                           <td>${book.getBookId()}</td>
                           <td>${book.getBookName()}</td>
                           <td>${book.getBookCounts()}</td>
                           <td>${book.getDetail()}</td>
                           <td>
                               <a href="${pageContext.request.contextPath}/book/toUpdateBook?id=${book.getBookId()}">更改</a> |
                               <a href="${pageContext.request.contextPath}/book/del/${book.getBookId()}">删除</a>
                           </td>
                       </tr>
                   </c:forEach>
                   </tbody>
               </table>
           </div>
       </div>
   </div>
   ```

4. BookController 类编写 ， 方法二：添加书籍

   ```
   @RequestMapping("/toAddBook")
   public String toAddPaper() {
       return "addBook";
   }
   
   @RequestMapping("/addBook")
   public String addPaper(Books books) {
       System.out.println(books);
       bookService.addBook(books);
       return "redirect:/book/allBook";
   }
   ```

5. 添加书籍页面：**addBook.jsp**

   ```
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   
   <html>
   <head>
       <title>新增书籍</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>新增书籍</small>
                   </h1>
               </div>
           </div>
       </div>
       <form action="${pageContext.request.contextPath}/book/addBook" method="post">
           书籍名称：<input type="text" name="bookName"><br><br><br>
           书籍数量：<input type="text" name="bookCounts"><br><br><br>
           书籍详情：<input type="text" name="detail"><br><br><br>
           <input type="submit" value="添加">
       </form>
   
   </div>
   ```

6. BookController 类编写 ， 方法三：修改书籍

   ```
   @RequestMapping("/toUpdateBook")
   public String toUpdateBook(Model model, int id) {
       Books books = bookService.queryBookById(id);
       System.out.println(books);
       model.addAttribute("book",books );
       return "updateBook";
   }
   
   @RequestMapping("/updateBook")
   public String updateBook(Model model, Books book) {
       bookService.updateBook(book);
       Books books = bookService.queryBookById(book.getBookID());
       model.addAttribute("books", books);
       return "redirect:/book/allBook";
   }
   ```

7. 修改书籍页面 **updateBook.jsp**

   ```
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>修改信息</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>修改信息</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <form action="${pageContext.request.contextPath}/book/updateBook" method="post">
           <input type="hidden" name="bookID" value="${book.getBookId()}"/>
           书籍名称：<input type="text" name="bookName" value="${book.getBookName()}"/>
           书籍数量：<input type="text" name="bookCounts" value="${book.getBookCounts()}"/>
           书籍详情：<input type="text" name="detail" value="${book.getDetail() }"/>
           <input type="submit" value="提交"/>
       </form>
   
   </div>
   ```

8. BookController 类编写 ， 方法四：删除书籍

   ```
   @RequestMapping("/del/{bookId}")
   public String deleteBook(@PathVariable("bookId") int id) {
       bookService.deleteBookById(id);
       return "redirect:/book/allBook";
   }
   ```

**配置Tomcat，进行运行！**

到目前为止，这个SSM项目整合已经完全的OK了，可以直接运行进行测试！这个练习十分的重要，大家需要保证，不看任何东西，自己也可以完整的实现出来！

## **6、项目结构图**

![1570186854191.png](https://blog.kuangstudy.com/usr/uploads/2019/10/1086489242.png)

![1570186868239.png](https://blog.kuangstudy.com/usr/uploads/2019/10/2326667495.png)

## 7、错误排查

### 1、访问出现404，排查步骤：**

1. 查看控制台输出，看一下是不是缺少了什么jar包。

2. 如果jar包存在，显示无法输出，就在IDEA的项目发布中，添加lib依赖！

   步骤：点击项目结构----->Artifacts----->点击自己的项目(ssm:war exploded)--->(点击工具栏的第一个)在WEB-INF目录下新建一个lib包----->选中lib------>点击工具栏的第三个然后选中第一个---->把里面的包全部选中点击ok---->点击Apply再ok

   ![image-20200128125126368](https://gitee.com/feigeCode/java_blog/raw/master/java/ssm%E6%95%B4%E5%90%88.assets/image-20200128125126368.png)

   ![image-20200128125237179](https://gitee.com/feigeCode/java_blog/raw/master/java/ssm%E6%95%B4%E5%90%88.assets/image-20200128125237179.png)

3. 重启Tomcat 即可解决！

### 2、其他错误

#### 1、bean不存在

 步骤：

 查看bean注入是否成功

 junit单元测试，看我们的代码是否能够查询出来

 问题不在底层，是我们spring出了问题

 springMVC整合时没有调用到service层的bean

 applicationContext.xml没有注册bean

 web.xml也绑定过配置文件要绑定大的applicationContext.xml



## 8、小结及展望

这个是同学们的第一个SSM整合案例，一定要烂熟于心！

SSM框架的重要程度是不言而喻的，学到这里，大家已经可以进行基本网站的单独开发。但是这只是增删改查的基本操作。可以说学到这里，大家才算是真正的步入了后台开发的门。也就是能找一个后台相关工作的底线。

或许很多人，工作就做这些事情，但是对于个人的提高来说，还远远不够！

| 飞哥 | 飞哥 | 飞哥 |
| ---- | ---- | ---- |
| 飞哥 | 飞哥 | 飞哥 |
| 飞哥 | 飞哥 | 飞哥 |
| 飞哥 | 飞哥 | 飞哥 |



~~~java
static class CustomAttributeProvider implements AttributeProvider {

        @Override
        public void setAttributes(Node node, String s, Map<String, String> map) {
            //改变a标签的target属性为_blank
            if(node instanceof Link) {
                map.put("target","_blank");
            }
            if (node instanceof TableBlock) {
                map.put("class","el-table__body-wrapper is-scrolling-none");
            }
            if (node instanceof TableBody) {
                map.put("class","el-table__body");
            }
            if (node instanceof TableRow) {
                map.put("class","el-table__row");
            }
            if (node instanceof TableCell) {
                map.put("class","el-table_13_column_55");
            }
        }
~~~

# feige

, 2020-03-02 07:06:53.0, 2020-03-13 06:59:47.0, admin, 10]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20003} executed. 6.909772 millis. select distinct count(*) from comments c
        where c.blog_id=? and
        c.parent_id is null;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20003, rs-50005} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20003, rs-50005} Header: [count(*)]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20003, rs-50005} Result: [3]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20002, rs-50004} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20002} clearParameters. 
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20003, rs-50005} closed
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20003} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20004} created. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id  and
        c.parent_id is null limit ?,?;;
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20004} Parameters : [13, 0, 10]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20004} Types : [INTEGER, INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20004} executed. 3.657774 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id  and
        c.parent_id is null limit ?,?;;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50006} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50006} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50006} Result: [26, 好好, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:35.0, null]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50006} Result: [29, 太好了, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:13.0, null]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50006} Result: [32, <p>feige</p>, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 01:33:26.0, null]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50006} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20004} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20005} created. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20005} Parameters : [13, 26]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20005} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20005} executed. 3.983552 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50007} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50007} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50007} Result: [27, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:56.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50007} Result: [28, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:43:03.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50007} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20005} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20005} Parameters : [13, 26]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20005} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20005} executed. 4.023997 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50008} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50008} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50008} Result: [27, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:56.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50008} Result: [28, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:43:03.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50008} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20005} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20005} Parameters : [13, 27]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20005} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20005} executed. 0.969777 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50009} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50009} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50009} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20005} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20005} Parameters : [13, 27]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20005} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20005} executed. 1.065777 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50010} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50010} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50010} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20005} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20005} Parameters : [13, 29]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20005} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20005} executed. 3.563108 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50011} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50011} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50011} Result: [30, 谢谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:43.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50011} Result: [31, 不用谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:47:01.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50011} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20005} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20005} Parameters : [13, 29]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20005} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20005} executed. 3.650663 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50012} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50012} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50012} Result: [30, 谢谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:43.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50012} Result: [31, 不用谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:47:01.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50012} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20005} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20005} Parameters : [13, 30]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20005} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20005} executed. 1.067999 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50013} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50013} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50013} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20005} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20005} Parameters : [13, 30]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20005} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20005} executed. 0.921332 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50014} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50014} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50014} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20005} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20005} Parameters : [13, 32]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20005} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20005} executed. 0.970666 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50015} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50015} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50015} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20005} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10001} connected
[DEBUG][20-03-23][druid.sql.Connection]{conn-10002} connected
[DEBUG][20-03-23][druid.sql.Connection]{conn-10003} connected
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} connected
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} connected
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20000} created. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog where id=?
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20001} created. select distinct count(*) from comments c
        where c.blog_id=? and
        c.parent_id is null;
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20001} Parameters : [13]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20001} Types : [INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20000} Parameters : [13]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20000} Types : [INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20000} executed. 17.446206 millis. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog where id=?
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20001} executed. 17.435095 millis. select distinct count(*) from comments c
        where c.blog_id=? and
        c.parent_id is null;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50001} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20000, rs-50000} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50001} Header: [count(*)]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20000, rs-50000} Header: [id, type_name, title, content, create_time, change_time, author, view]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50001} Result: [3]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20000, rs-50000} Result: [13, mybatis, ssm框架整合, # ssm整合

## 1、数据库环境

创建一个存放书籍数据的数据库表

```
CREATE DATABASE `ssmbuild`;

USE `ssmbuild`;

DROP TABLE IF EXISTS `books`;

CREATE TABLE `books` (
  `bookId` INT PRIMARY KEY COMMENT '书id',
  `bookName` VARCHAR(100) NOT NULL COMMENT '书名',
  `bookCounts` INT(11) NOT NULL COMMENT '数量',
  ``ssmbuild``ssmbuild`` VARCHAR(200) NOT NULL COMMENT '描述'
) ENGINE=INNODB DEFAULT CHARSET=utf8

INSERT  INTO `books`(`bookId`,`bookName`,`bookCounts`,`detail`)VALUES 
(1,'Java',1,'从入门到放弃'),
(2,'MySQL',10,'从删库到跑路'),
(3,'Linux',5,'从进门到进牢');

SELECT * FROM books
```

## 2、基本环境搭建

1. 新建一Maven项目！ ssmbuild ， 添加web的支持

   ![image-20200128134359317](https://gitee.com/feigeCode/java_blog/raw/master/java/ssm%E6%95%B4%E5%90%88.assets/image-20200128134359317.png)

2. 导入相关的pom依赖！

   ```
   <dependencies>
       <!--Junit-->
       <dependency>
           <groupId>junit</groupId>
           <artifactId>junit</artifactId>
           <version>4.12</version>
       </dependency>
       <!--数据库驱动-->
       <dependency>
           <groupId>mysql</groupId>
           <artifactId>mysql-connector-java</artifactId>
           <version>5.1.47</version>
       </dependency>
       <!-- 数据库连接池 -->
       <dependency>
           <groupId>com.mchange</groupId>
           <artifactId>c3p0</artifactId>
           <version>0.9.5.2</version>
       </dependency>
   
       <!--Servlet - JSP -->
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>servlet-api</artifactId>
           <version>2.5</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet.jsp</groupId>
           <artifactId>jsp-api</artifactId>
           <version>2.2</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>jstl</artifactId>
           <version>1.2</version>
       </dependency>
   
       <!--Mybatis-->
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis</artifactId>
           <version>3.5.2</version>
       </dependency>
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis-spring</artifactId>
           <version>2.0.2</version>
       </dependency>
   
       <!--Spring-->
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-webmvc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-jdbc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->
       <dependency>
           <groupId>org.projectlombok</groupId>
           <artifactId>lombok</artifactId>
           <version>1.16.10</version>
       </dependency>
   </dependencies>
   ```

3. Maven资源过滤设置

   ```
   <build>
       <resources>
           <resource>
               <directory>src/main/java</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
           <resource>
               <directory>src/main/resources</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
       </resources>
   </build>
   ```

4. 建立基本结构和配置框架！

   - com.feige.pojo

   - com.feige.dao

   - com.feige.service

   - com.feige.controller

     在resources目录下创建

   - mybatis-config.xml

     ```
     <?xml version="1.0" encoding="UTF-8" ?>
     <!DOCTYPE configuration
             PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
             "http://mybatis.org/dtd/mybatis-3-config.dtd">
     <configuration>
     
     </configuration>
     ```

   - applicationContext.xml

     ```
     <?xml version="1.0" encoding="UTF-8"?>
     <beans xmlns="http://www.springframework.org/schema/beans"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://www.springframework.org/schema/beans
             http://www.springframework.org/schema/beans/spring-beans.xsd">
     
     </beans>
     ```

## 3、Mybatis层编写

1. 数据库配置文件 **database.properties**

   ```
   jdbc.driver=com.mysql.jdbc.Driver
   jdbc.url=jdbc:mysql://localhost:3306/ssmbuild?useSSL=true&useUnicode=true&characterEncoding=utf8
   jdbc.username=root
   jdbc.password=hufei169357
   ```

2. IDEA关联数据库

3. 编写MyBatis的核心配置文件

   ```
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE configuration
           PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-config.dtd">
   <configuration>
       
       <typeAliases>
           <package name="com.feige.pojo"/>
       </typeAliases>
       <mappers>
           <mapper resource="com/feige/dao/BookMapper.xml"/>
       </mappers>
   
   </configuration>
   ```

4. 编写数据库对应的实体类 com.feige.pojo.Books 使用lombok插件！

   ```
   package com.kuang.pojo;
   
   import lombok.AllArgsConstructor;
   import lombok.Data;
   import lombok.NoArgsConstructor;
   
   @Data
   @AllArgsConstructor
   @NoArgsConstructor
   public class Books {
       
       private int bookId;
       private String bookName;
       private int bookCounts;
       private String detail;
       
   }
   ```

5. 编写Dao层的 Mapper接口！

   ```
   package com.kuang.dao;
   
   import com.kuang.pojo.Books;
   import java.util.List;
   
   public interface BookMapper {
   
       //增加一个Book
       int addBook(Books book);
   
       //根据id删除一个Book
       int deleteBookById(int id);
   
       //更新Book
       int updateBook(Books books);
   
       //根据id查询,返回一个Book
       Books queryBookById(int id);
   
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   
   }
   ```

6. 编写接口对应的 Mapper.xml 文件。需要导入MyBatis的包；

   ```
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE mapper
           PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
   
   <mapper namespace="com.feige.dao.BooksMapper">
   
       <!--增加一个Book-->
       <insert id="addBook" parameterType="Books">
           insert into books(bookName,bookCounts,detail)
           values (#{bookName}, #{bookCounts}, #{detail})
       </insert>
   
       <!--根据id删除一个Book-->
       <delete id="deleteBookById" parameterType="int">
           delete from books where bookId=#{bookId}
       </delete>
   
       <!--更新Book-->
       <update id="updateBook" parameterType="Books">
           update books
           set bookName = #{bookName},bookCounts = #{bookCounts},detail = #{detail}
           where bookId = #{bookId}
       </update>
   
       <!--根据id查询,返回一个Book-->
       <select id="queryBookById" resultType="Books">
           select * from books
           where bookID = #{bookId}
       </select>
   
       <!--查询全部Book-->
       <select id="queryAllBook" resultType="com.feige.pojo.Books">
           SELECT * from books
       </select>
   
   </mapper>
   ```

7. 编写Service层的接口和实现类 接口：

   ```
   package com.feige.service;
   
   import com.feige.pojo.Books;
   
   import java.util.List;
   
   //BookService:底下需要去实现,调用dao层
   public interface BookService {
       //增加一个Book
       int addBook(Books book);
       //根据id删除一个Book
       int deleteBookById(int id);
       //更新Book
       int updateBook(Books books);
       //根据id查询,返回一个Book
       Books queryBookById(int id);
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   }
   ```

实现类：

```
package com.feige.service;

import com.feige.dao.BookMapper;
import com.feige.pojo.Books;
import java.util.List;

public class BookServiceImpl implements BookService {

    //调用dao层的操作，设置一个set接口，方便Spring管理
    private BookMapper bookMapper;

    public void setBookMapper(BookMapper bookMapper) {
        this.bookMapper = bookMapper;
    }
    
    public int addBook(Books book) {
        return bookMapper.addBook(book);
    }
    
    public int deleteBookById(int id) {
        return bookMapper.deleteBookById(id);
    }
    
    public int updateBook(Books books) {
        return bookMapper.updateBook(books);
    }
    
    public Books queryBookById(int id) {
        return bookMapper.queryBookById(id);
    }
    
    public List<Books> queryAllBook() {
        return bookMapper.queryAllBook();
    }
}
```

**OK，到此，底层需求操作编写完毕！**

## 4、Spring层

1. 配置**Spring整合MyBatis**，我们这里数据源使用c3p0连接池；

2. 我们去编写Spring整合Mybatis的相关的配置文件； spring-dao.xml

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans.xsd
   http://www.springframework.org/schema/context
   https://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 配置整合mybatis -->
       <!-- 1.关联数据库文件 -->
       <context:property-placeholder location="classpath:database.properties"/>
   
       <!-- 2.数据库连接池 -->
       <!--数据库连接池
   dbcp  半自动化操作  不能自动连接
   c3p0  自动化操作（自动的加载配置文件 并且设置到对象里面）
       -->
       <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
   <!-- 配置连接池属性 -->
   <property name="driverClass" value="${jdbc.driver}"/>
   <property name="jdbcUrl" value="${jdbc.url}"/>
   <property name="user" value="${jdbc.username}"/>
   <property name="password" value="${jdbc.password}"/>
   
   <!-- c3p0连接池的私有属性 -->
   <property name="maxPoolSize" value="30"/>
   <property name="minPoolSize" value="10"/>
   <!-- 关闭连接后不自动commit -->
   <property name="autoCommitOnClose" value="false"/>
   <!-- 获取连接超时时间 -->
   <property name="checkoutTimeout" value="10000"/>
   <!-- 当获取连接失败重试次数 -->
   <property name="acquireRetryAttempts" value="2"/>
       </bean>
   
       <!-- 3.配置SqlSessionFactory对象 -->
       <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource"/>
   <!-- 配置MyBaties全局配置文件:mybatis-config.xml -->
   <property name="configLocation" value="classpath:mybatis-config.xml"/>
       </bean>
   
       <!-- 4.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 -->
       <!--解释 ： https://www.cnblogs.com/jpfss/p/7799806.html-->
       <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
   <!-- 注入sqlSessionFactory -->
   <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
   <!-- 给出需要扫描Dao接口包 -->
   <property name="basePackage" value="com.feige.dao"/>
       </bean>
   
   </beans>
   ```

3. **Spring整合service层**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 扫描service相关的bean -->
       <context:component-scan base-package="com.kuang.service" />
   
       <!--BookServiceImpl注入到IOC容器中-->
       <bean id="BookServiceImpl" class="com.kuang.service.BookServiceImpl">
   <property name="bookMapper" ref="bookMapper"/>
       </bean>
   
       <!-- 配置事务管理器 -->
       <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource" />
       </bean>
   
   </beans>
   ```

Spring层搞定！再次理解一下，Spring就是一个大杂烩，一个容器！对吧！

## 5、SpringMVC层

1. **web.xml**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
            version="4.0">
   
       <!--DispatcherServlet-->
       <servlet>
           <servlet-name>DispatcherServlet</servlet-name>
           <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
           <init-param>
               <param-name>contextConfigLocation</param-name>
               <param-value>classpath:applicationContext.xml</param-value>
           </init-param>
           <load-on-startup>1</load-on-startup>
       </servlet>
       <servlet-mapping>
           <servlet-name>DispatcherServlet</servlet-name>
           <url-pattern>/</url-pattern>
       </servlet-mapping>
   
       <!--encodingFilter-->
       <filter>
           <filter-name>encodingFilter</filter-name>
           <filter-class>
               org.springframework.web.filter.CharacterEncodingFilter
           </filter-class>
           <init-param>
               <param-name>encoding</param-name>
               <param-value>utf-8</param-value>
           </init-param>
       </filter>
       <filter-mapping>
           <filter-name>encodingFilter</filter-name>
           <url-pattern>/*</url-pattern>
       </filter-mapping>
       
       <!--Session过期时间-->
       <session-config>
           <session-timeout>15</session-timeout>
       </session-config>
       
   </web-app>
   ```

2. **spring-mvc.xml**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xmlns:mvc="http://www.springframework.org/schema/mvc"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       https://www.springframework.org/schema/mvc/spring-mvc.xsd">
   
       <!-- 配置SpringMVC -->
       <!-- 1.开启SpringMVC注解驱动 -->
       <mvc:annotation-driven>
           <mvc:message-converters register-defaults="true">
               <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                   <constructor-arg value="UTF-8"/>
               </bean>
               <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                   <property name="objectMapper">
                       <bean class="org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean">
                           <property name="failOnEmptyBeans" value="false"/>
                       </bean>
                   </property>
               </bean>
           </mvc:message-converters>
       </mvc:annotation-driven>
       <!--解决跨域问题-->
       <mvc:cors>
       <mvc:mapping path="/**"
                    allowed-origins="http://127.0.0.1:8090,http://localhost:8090"
                    allowed-methods="POST,GET, OPTIONS,DELETE,PUT"
                    allowed-headers="Content-Type,ContentType,Access-Control-Allow-Headers, Authorization, X-Requested-With"
                    allow-credentials="true"/>
       </mvc:cors>
       <!-- 2.静态资源默认servlet配置-->
       <mvc:default-servlet-handler/>
   
       <!-- 3.配置jsp 显示ViewResolver视图解析器 -->
       <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
           <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
           <property name="prefix" value="/WEB-INF/jsp/" />
           <property name="suffix" value=".jsp" />
       </bean>
   
       <!-- 4.扫描web相关的bean -->
       <context:component-scan base-package="com.feige.controller" />
   
   </beans>
   ```

3. **Spring配置整合文件，applicationContext.xml**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd">
   
       <import resource="spring-dao.xml"/>
       <import resource="spring-service.xml"/>
       <import resource="spring-mvc.xml"/>
       
   </beans>
   ```

**配置文件，暂时结束！Controller 和 视图层编写**

1. BookController 类编写 ， 方法一：查询全部书籍

   ```
   @Controller
   @RequestMapping("/book")
   public class BookController {
   
       @Autowired
       @Qualifier("BookServiceImpl")
       private BookService bookService;
   
       @RequestMapping("/allBook")
       public String list(Model model) {
           List<Books> list = bookService.queryAllBook();
           model.addAttribute("list", list);
           return "allBook";
       }
   }
   ```

2. 编写首页 **index.jsp**

   ```
   <%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" %>
   <!DOCTYPE HTML>
   <html>
   <head>
       <title>首页</title>
       <style type="text/css">
           a {
               text-decoration: none;
               color: black;
               font-size: 18px;
           }
           h3 {
               width: 180px;
               height: 38px;
               margin: 100px auto;
               text-align: center;
               line-height: 38px;
               background: deepskyblue;
               border-radius: 4px;
           }
       </style>
   </head>
   <body>
   
   <h3>
       <a href="${pageContext.request.contextPath}/book/allBook">点击进入列表页</a>
   </h3>
   </body>
   </html>
   ```

3. 书籍列表页面 **allbook.jsp**

   ```
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>书籍列表</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>书籍列表 —— 显示所有书籍</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <div class="row">
           <div class="col-md-4 column">
               <a class="btn btn-primary" href="${pageContext.request.contextPath}/book/toAddBook">新增</a>
           </div>
       </div>
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <table class="table table-hover table-striped">
                   <thead>
                   <tr>
                       <th>书籍编号</th>
                       <th>书籍名字</th>
                       <th>书籍数量</th>
                       <th>书籍详情</th>
                       <th>操作</th>
                   </tr>
                   </thead>
   
                   <tbody>
                   <c:forEach var="book" items="${requestScope.get('list')}">
                       <tr>
                           <td>${book.getBookId()}</td>
                           <td>${book.getBookName()}</td>
                           <td>${book.getBookCounts()}</td>
                           <td>${book.getDetail()}</td>
                           <td>
                               <a href="${pageContext.request.contextPath}/book/toUpdateBook?id=${book.getBookId()}">更改</a> |
                               <a href="${pageContext.request.contextPath}/book/del/${book.getBookId()}">删除</a>
                           </td>
                       </tr>
                   </c:forEach>
                   </tbody>
               </table>
           </div>
       </div>
   </div>
   ```

4. BookController 类编写 ， 方法二：添加书籍

   ```
   @RequestMapping("/toAddBook")
   public String toAddPaper() {
       return "addBook";
   }
   
   @RequestMapping("/addBook")
   public String addPaper(Books books) {
       System.out.println(books);
       bookService.addBook(books);
       return "redirect:/book/allBook";
   }
   ```

5. 添加书籍页面：**addBook.jsp**

   ```
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   
   <html>
   <head>
       <title>新增书籍</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>新增书籍</small>
                   </h1>
               </div>
           </div>
       </div>
       <form action="${pageContext.request.contextPath}/book/addBook" method="post">
           书籍名称：<input type="text" name="bookName"><br><br><br>
           书籍数量：<input type="text" name="bookCounts"><br><br><br>
           书籍详情：<input type="text" name="detail"><br><br><br>
           <input type="submit" value="添加">
       </form>
   
   </div>
   ```

6. BookController 类编写 ， 方法三：修改书籍

   ```
   @RequestMapping("/toUpdateBook")
   public String toUpdateBook(Model model, int id) {
       Books books = bookService.queryBookById(id);
       System.out.println(books);
       model.addAttribute("book",books );
       return "updateBook";
   }
   
   @RequestMapping("/updateBook")
   public String updateBook(Model model, Books book) {
       bookService.updateBook(book);
       Books books = bookService.queryBookById(book.getBookID());
       model.addAttribute("books", books);
       return "redirect:/book/allBook";
   }
   ```

7. 修改书籍页面 **updateBook.jsp**

   ```
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>修改信息</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>修改信息</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <form action="${pageContext.request.contextPath}/book/updateBook" method="post">
           <input type="hidden" name="bookID" value="${book.getBookId()}"/>
           书籍名称：<input type="text" name="bookName" value="${book.getBookName()}"/>
           书籍数量：<input type="text" name="bookCounts" value="${book.getBookCounts()}"/>
           书籍详情：<input type="text" name="detail" value="${book.getDetail() }"/>
           <input type="submit" value="提交"/>
       </form>
   
   </div>
   ```

8. BookController 类编写 ， 方法四：删除书籍

   ```
   @RequestMapping("/del/{bookId}")
   public String deleteBook(@PathVariable("bookId") int id) {
       bookService.deleteBookById(id);
       return "redirect:/book/allBook";
   }
   ```

**配置Tomcat，进行运行！**

到目前为止，这个SSM项目整合已经完全的OK了，可以直接运行进行测试！这个练习十分的重要，大家需要保证，不看任何东西，自己也可以完整的实现出来！

## **6、项目结构图**

![1570186854191.png](https://blog.kuangstudy.com/usr/uploads/2019/10/1086489242.png)

![1570186868239.png](https://blog.kuangstudy.com/usr/uploads/2019/10/2326667495.png)

## 7、错误排查

### 1、访问出现404，排查步骤：**

1. 查看控制台输出，看一下是不是缺少了什么jar包。

2. 如果jar包存在，显示无法输出，就在IDEA的项目发布中，添加lib依赖！

   步骤：点击项目结构----->Artifacts----->点击自己的项目(ssm:war exploded)--->(点击工具栏的第一个)在WEB-INF目录下新建一个lib包----->选中lib------>点击工具栏的第三个然后选中第一个---->把里面的包全部选中点击ok---->点击Apply再ok

   ![image-20200128125126368](https://gitee.com/feigeCode/java_blog/raw/master/java/ssm%E6%95%B4%E5%90%88.assets/image-20200128125126368.png)

   ![image-20200128125237179](https://gitee.com/feigeCode/java_blog/raw/master/java/ssm%E6%95%B4%E5%90%88.assets/image-20200128125237179.png)

3. 重启Tomcat 即可解决！

### 2、其他错误

#### 1、bean不存在

 步骤：

 查看bean注入是否成功

 junit单元测试，看我们的代码是否能够查询出来

 问题不在底层，是我们spring出了问题

 springMVC整合时没有调用到service层的bean

 applicationContext.xml没有注册bean

 web.xml也绑定过配置文件要绑定大的applicationContext.xml



## 8、小结及展望

这个是同学们的第一个SSM整合案例，一定要烂熟于心！

SSM框架的重要程度是不言而喻的，学到这里，大家已经可以进行基本网站的单独开发。但是这只是增删改查的基本操作。可以说学到这里，大家才算是真正的步入了后台开发的门。也就是能找一个后台相关工作的底线。

或许很多人，工作就做这些事情，但是对于个人的提高来说，还远远不够！

| 飞哥 | 飞哥 | 飞哥 |
| ---- | ---- | ---- |
| 飞哥 | 飞哥 | 飞哥 |
| 飞哥 | 飞哥 | 飞哥 |
| 飞哥 | 飞哥 | 飞哥 |



~~~java
static class CustomAttributeProvider implements AttributeProvider {

        @Override
        public void setAttributes(Node node, String s, Map<String, String> map) {
            //改变a标签的target属性为_blank
            if(node instanceof Link) {
                map.put("target","_blank");
            }
            if (node instanceof TableBlock) {
                map.put("class","el-table__body-wrapper is-scrolling-none");
            }
            if (node instanceof TableBody) {
                map.put("class","el-table__body");
            }
            if (node instanceof TableRow) {
                map.put("class","el-table__row");
            }
            if (node instanceof TableCell) {
                map.put("class","el-table_13_column_55");
            }
        }
~~~

# feige

, 2020-03-02 07:06:53.0, 2020-03-13 06:59:47.0, admin, 10]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50001} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20001} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20000, rs-50000} closed
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20000} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20002} created. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id  and
        c.parent_id is null limit ?,?;;
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20002} Parameters : [13, 0, 10]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20002} Types : [INTEGER, INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20002} executed. 4.454663 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id  and
        c.parent_id is null limit ?,?;;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20002, rs-50002} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20002, rs-50002} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20002, rs-50002} Result: [26, 好好, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:35.0, null]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20002, rs-50002} Result: [29, 太好了, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:13.0, null]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20002, rs-50002} Result: [32, <p>feige</p>, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 01:33:26.0, null]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20002, rs-50002} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20002} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20003} created. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20003} Parameters : [13, 26]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20003} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20003} executed. 6.642661 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20003, rs-50003} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20003, rs-50003} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20003, rs-50003} Result: [27, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:56.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20003, rs-50003} Result: [28, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:43:03.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20003, rs-50003} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20003} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20003} Parameters : [13, 26]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20003} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20003} executed. 4.284441 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20003, rs-50004} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20003, rs-50004} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20003, rs-50004} Result: [27, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:56.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20003, rs-50004} Result: [28, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:43:03.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20003, rs-50004} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20003} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20003} Parameters : [13, 27]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20003} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20003} executed. 1.003555 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20003, rs-50005} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20003, rs-50005} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20003, rs-50005} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20003} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20003} Parameters : [13, 27]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20003} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20003} executed. 1.629776 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20003, rs-50006} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20003, rs-50006} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20003, rs-50006} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20003} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20003} Parameters : [13, 29]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20003} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20003} executed. 5.695551 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20003, rs-50007} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20003, rs-50007} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20003, rs-50007} Result: [30, 谢谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:43.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20003, rs-50007} Result: [31, 不用谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:47:01.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20003, rs-50007} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20003} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20003} Parameters : [13, 29]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20003} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20003} executed. 4.202663 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20003, rs-50008} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20003, rs-50008} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20003, rs-50008} Result: [30, 谢谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:43.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20003, rs-50008} Result: [31, 不用谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:47:01.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20003, rs-50008} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20003} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20003} Parameters : [13, 30]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20003} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20003} executed. 0.883111 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20003, rs-50009} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20003, rs-50009} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20003, rs-50009} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20003} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20003} Parameters : [13, 30]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20003} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20003} executed. 0.825332 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20003, rs-50010} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20003, rs-50010} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20003, rs-50010} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20003} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20003} Parameters : [13, 32]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20003} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20003} executed. 0.906666 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20003, rs-50011} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20003, rs-50011} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20003, rs-50011} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20003} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10001} connected
[DEBUG][20-03-23][druid.sql.Connection]{conn-10002} connected
[DEBUG][20-03-23][druid.sql.Connection]{conn-10003} connected
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} connected
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} connected
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20000} created. select distinct count(*) from comments c
        where c.blog_id=? and
        c.parent_id is null;
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20001} created. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog where id=?
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20000} Parameters : [13]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20000} Types : [INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20001} Parameters : [13]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20001} Types : [INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20000} executed. 13.900876 millis. select distinct count(*) from comments c
        where c.blog_id=? and
        c.parent_id is null;
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20001} executed. 13.900876 millis. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog where id=?
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50001} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20000, rs-50000} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20000, rs-50000} Header: [count(*)]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50001} Header: [id, type_name, title, content, create_time, change_time, author, view]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20000, rs-50000} Result: [3]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50001} Result: [13, mybatis, ssm框架整合, # ssm整合

## 1、数据库环境

创建一个存放书籍数据的数据库表

```
CREATE DATABASE `ssmbuild`;

USE `ssmbuild`;

DROP TABLE IF EXISTS `books`;

CREATE TABLE `books` (
  `bookId` INT PRIMARY KEY COMMENT '书id',
  `bookName` VARCHAR(100) NOT NULL COMMENT '书名',
  `bookCounts` INT(11) NOT NULL COMMENT '数量',
  ``ssmbuild``ssmbuild`` VARCHAR(200) NOT NULL COMMENT '描述'
) ENGINE=INNODB DEFAULT CHARSET=utf8

INSERT  INTO `books`(`bookId`,`bookName`,`bookCounts`,`detail`)VALUES 
(1,'Java',1,'从入门到放弃'),
(2,'MySQL',10,'从删库到跑路'),
(3,'Linux',5,'从进门到进牢');

SELECT * FROM books
```

## 2、基本环境搭建

1. 新建一Maven项目！ ssmbuild ， 添加web的支持

   ![image-20200128134359317](https://gitee.com/feigeCode/java_blog/raw/master/java/ssm%E6%95%B4%E5%90%88.assets/image-20200128134359317.png)

2. 导入相关的pom依赖！

   ```
   <dependencies>
       <!--Junit-->
       <dependency>
           <groupId>junit</groupId>
           <artifactId>junit</artifactId>
           <version>4.12</version>
       </dependency>
       <!--数据库驱动-->
       <dependency>
           <groupId>mysql</groupId>
           <artifactId>mysql-connector-java</artifactId>
           <version>5.1.47</version>
       </dependency>
       <!-- 数据库连接池 -->
       <dependency>
           <groupId>com.mchange</groupId>
           <artifactId>c3p0</artifactId>
           <version>0.9.5.2</version>
       </dependency>
   
       <!--Servlet - JSP -->
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>servlet-api</artifactId>
           <version>2.5</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet.jsp</groupId>
           <artifactId>jsp-api</artifactId>
           <version>2.2</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>jstl</artifactId>
           <version>1.2</version>
       </dependency>
   
       <!--Mybatis-->
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis</artifactId>
           <version>3.5.2</version>
       </dependency>
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis-spring</artifactId>
           <version>2.0.2</version>
       </dependency>
   
       <!--Spring-->
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-webmvc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-jdbc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->
       <dependency>
           <groupId>org.projectlombok</groupId>
           <artifactId>lombok</artifactId>
           <version>1.16.10</version>
       </dependency>
   </dependencies>
   ```

3. Maven资源过滤设置

   ```
   <build>
       <resources>
           <resource>
               <directory>src/main/java</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
           <resource>
               <directory>src/main/resources</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
       </resources>
   </build>
   ```

4. 建立基本结构和配置框架！

   - com.feige.pojo

   - com.feige.dao

   - com.feige.service

   - com.feige.controller

     在resources目录下创建

   - mybatis-config.xml

     ```
     <?xml version="1.0" encoding="UTF-8" ?>
     <!DOCTYPE configuration
             PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
             "http://mybatis.org/dtd/mybatis-3-config.dtd">
     <configuration>
     
     </configuration>
     ```

   - applicationContext.xml

     ```
     <?xml version="1.0" encoding="UTF-8"?>
     <beans xmlns="http://www.springframework.org/schema/beans"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://www.springframework.org/schema/beans
             http://www.springframework.org/schema/beans/spring-beans.xsd">
     
     </beans>
     ```

## 3、Mybatis层编写

1. 数据库配置文件 **database.properties**

   ```
   jdbc.driver=com.mysql.jdbc.Driver
   jdbc.url=jdbc:mysql://localhost:3306/ssmbuild?useSSL=true&useUnicode=true&characterEncoding=utf8
   jdbc.username=root
   jdbc.password=hufei169357
   ```

2. IDEA关联数据库

3. 编写MyBatis的核心配置文件

   ```
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE configuration
           PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-config.dtd">
   <configuration>
       
       <typeAliases>
           <package name="com.feige.pojo"/>
       </typeAliases>
       <mappers>
           <mapper resource="com/feige/dao/BookMapper.xml"/>
       </mappers>
   
   </configuration>
   ```

4. 编写数据库对应的实体类 com.feige.pojo.Books 使用lombok插件！

   ```
   package com.kuang.pojo;
   
   import lombok.AllArgsConstructor;
   import lombok.Data;
   import lombok.NoArgsConstructor;
   
   @Data
   @AllArgsConstructor
   @NoArgsConstructor
   public class Books {
       
       private int bookId;
       private String bookName;
       private int bookCounts;
       private String detail;
       
   }
   ```

5. 编写Dao层的 Mapper接口！

   ```
   package com.kuang.dao;
   
   import com.kuang.pojo.Books;
   import java.util.List;
   
   public interface BookMapper {
   
       //增加一个Book
       int addBook(Books book);
   
       //根据id删除一个Book
       int deleteBookById(int id);
   
       //更新Book
       int updateBook(Books books);
   
       //根据id查询,返回一个Book
       Books queryBookById(int id);
   
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   
   }
   ```

6. 编写接口对应的 Mapper.xml 文件。需要导入MyBatis的包；

   ```
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE mapper
           PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
   
   <mapper namespace="com.feige.dao.BooksMapper">
   
       <!--增加一个Book-->
       <insert id="addBook" parameterType="Books">
           insert into books(bookName,bookCounts,detail)
           values (#{bookName}, #{bookCounts}, #{detail})
       </insert>
   
       <!--根据id删除一个Book-->
       <delete id="deleteBookById" parameterType="int">
           delete from books where bookId=#{bookId}
       </delete>
   
       <!--更新Book-->
       <update id="updateBook" parameterType="Books">
           update books
           set bookName = #{bookName},bookCounts = #{bookCounts},detail = #{detail}
           where bookId = #{bookId}
       </update>
   
       <!--根据id查询,返回一个Book-->
       <select id="queryBookById" resultType="Books">
           select * from books
           where bookID = #{bookId}
       </select>
   
       <!--查询全部Book-->
       <select id="queryAllBook" resultType="com.feige.pojo.Books">
           SELECT * from books
       </select>
   
   </mapper>
   ```

7. 编写Service层的接口和实现类 接口：

   ```
   package com.feige.service;
   
   import com.feige.pojo.Books;
   
   import java.util.List;
   
   //BookService:底下需要去实现,调用dao层
   public interface BookService {
       //增加一个Book
       int addBook(Books book);
       //根据id删除一个Book
       int deleteBookById(int id);
       //更新Book
       int updateBook(Books books);
       //根据id查询,返回一个Book
       Books queryBookById(int id);
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   }
   ```

实现类：

```
package com.feige.service;

import com.feige.dao.BookMapper;
import com.feige.pojo.Books;
import java.util.List;

public class BookServiceImpl implements BookService {

    //调用dao层的操作，设置一个set接口，方便Spring管理
    private BookMapper bookMapper;

    public void setBookMapper(BookMapper bookMapper) {
        this.bookMapper = bookMapper;
    }
    
    public int addBook(Books book) {
        return bookMapper.addBook(book);
    }
    
    public int deleteBookById(int id) {
        return bookMapper.deleteBookById(id);
    }
    
    public int updateBook(Books books) {
        return bookMapper.updateBook(books);
    }
    
    public Books queryBookById(int id) {
        return bookMapper.queryBookById(id);
    }
    
    public List<Books> queryAllBook() {
        return bookMapper.queryAllBook();
    }
}
```

**OK，到此，底层需求操作编写完毕！**

## 4、Spring层

1. 配置**Spring整合MyBatis**，我们这里数据源使用c3p0连接池；

2. 我们去编写Spring整合Mybatis的相关的配置文件； spring-dao.xml

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans.xsd
   http://www.springframework.org/schema/context
   https://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 配置整合mybatis -->
       <!-- 1.关联数据库文件 -->
       <context:property-placeholder location="classpath:database.properties"/>
   
       <!-- 2.数据库连接池 -->
       <!--数据库连接池
   dbcp  半自动化操作  不能自动连接
   c3p0  自动化操作（自动的加载配置文件 并且设置到对象里面）
       -->
       <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
   <!-- 配置连接池属性 -->
   <property name="driverClass" value="${jdbc.driver}"/>
   <property name="jdbcUrl" value="${jdbc.url}"/>
   <property name="user" value="${jdbc.username}"/>
   <property name="password" value="${jdbc.password}"/>
   
   <!-- c3p0连接池的私有属性 -->
   <property name="maxPoolSize" value="30"/>
   <property name="minPoolSize" value="10"/>
   <!-- 关闭连接后不自动commit -->
   <property name="autoCommitOnClose" value="false"/>
   <!-- 获取连接超时时间 -->
   <property name="checkoutTimeout" value="10000"/>
   <!-- 当获取连接失败重试次数 -->
   <property name="acquireRetryAttempts" value="2"/>
       </bean>
   
       <!-- 3.配置SqlSessionFactory对象 -->
       <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource"/>
   <!-- 配置MyBaties全局配置文件:mybatis-config.xml -->
   <property name="configLocation" value="classpath:mybatis-config.xml"/>
       </bean>
   
       <!-- 4.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 -->
       <!--解释 ： https://www.cnblogs.com/jpfss/p/7799806.html-->
       <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
   <!-- 注入sqlSessionFactory -->
   <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
   <!-- 给出需要扫描Dao接口包 -->
   <property name="basePackage" value="com.feige.dao"/>
       </bean>
   
   </beans>
   ```

3. **Spring整合service层**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 扫描service相关的bean -->
       <context:component-scan base-package="com.kuang.service" />
   
       <!--BookServiceImpl注入到IOC容器中-->
       <bean id="BookServiceImpl" class="com.kuang.service.BookServiceImpl">
   <property name="bookMapper" ref="bookMapper"/>
       </bean>
   
       <!-- 配置事务管理器 -->
       <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource" />
       </bean>
   
   </beans>
   ```

Spring层搞定！再次理解一下，Spring就是一个大杂烩，一个容器！对吧！

## 5、SpringMVC层

1. **web.xml**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
            version="4.0">
   
       <!--DispatcherServlet-->
       <servlet>
           <servlet-name>DispatcherServlet</servlet-name>
           <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
           <init-param>
               <param-name>contextConfigLocation</param-name>
               <param-value>classpath:applicationContext.xml</param-value>
           </init-param>
           <load-on-startup>1</load-on-startup>
       </servlet>
       <servlet-mapping>
           <servlet-name>DispatcherServlet</servlet-name>
           <url-pattern>/</url-pattern>
       </servlet-mapping>
   
       <!--encodingFilter-->
       <filter>
           <filter-name>encodingFilter</filter-name>
           <filter-class>
               org.springframework.web.filter.CharacterEncodingFilter
           </filter-class>
           <init-param>
               <param-name>encoding</param-name>
               <param-value>utf-8</param-value>
           </init-param>
       </filter>
       <filter-mapping>
           <filter-name>encodingFilter</filter-name>
           <url-pattern>/*</url-pattern>
       </filter-mapping>
       
       <!--Session过期时间-->
       <session-config>
           <session-timeout>15</session-timeout>
       </session-config>
       
   </web-app>
   ```

2. **spring-mvc.xml**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xmlns:mvc="http://www.springframework.org/schema/mvc"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       https://www.springframework.org/schema/mvc/spring-mvc.xsd">
   
       <!-- 配置SpringMVC -->
       <!-- 1.开启SpringMVC注解驱动 -->
       <mvc:annotation-driven>
           <mvc:message-converters register-defaults="true">
               <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                   <constructor-arg value="UTF-8"/>
               </bean>
               <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                   <property name="objectMapper">
                       <bean class="org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean">
                           <property name="failOnEmptyBeans" value="false"/>
                       </bean>
                   </property>
               </bean>
           </mvc:message-converters>
       </mvc:annotation-driven>
       <!--解决跨域问题-->
       <mvc:cors>
       <mvc:mapping path="/**"
                    allowed-origins="http://127.0.0.1:8090,http://localhost:8090"
                    allowed-methods="POST,GET, OPTIONS,DELETE,PUT"
                    allowed-headers="Content-Type,ContentType,Access-Control-Allow-Headers, Authorization, X-Requested-With"
                    allow-credentials="true"/>
       </mvc:cors>
       <!-- 2.静态资源默认servlet配置-->
       <mvc:default-servlet-handler/>
   
       <!-- 3.配置jsp 显示ViewResolver视图解析器 -->
       <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
           <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
           <property name="prefix" value="/WEB-INF/jsp/" />
           <property name="suffix" value=".jsp" />
       </bean>
   
       <!-- 4.扫描web相关的bean -->
       <context:component-scan base-package="com.feige.controller" />
   
   </beans>
   ```

3. **Spring配置整合文件，applicationContext.xml**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd">
   
       <import resource="spring-dao.xml"/>
       <import resource="spring-service.xml"/>
       <import resource="spring-mvc.xml"/>
       
   </beans>
   ```

**配置文件，暂时结束！Controller 和 视图层编写**

1. BookController 类编写 ， 方法一：查询全部书籍

   ```
   @Controller
   @RequestMapping("/book")
   public class BookController {
   
       @Autowired
       @Qualifier("BookServiceImpl")
       private BookService bookService;
   
       @RequestMapping("/allBook")
       public String list(Model model) {
           List<Books> list = bookService.queryAllBook();
           model.addAttribute("list", list);
           return "allBook";
       }
   }
   ```

2. 编写首页 **index.jsp**

   ```
   <%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" %>
   <!DOCTYPE HTML>
   <html>
   <head>
       <title>首页</title>
       <style type="text/css">
           a {
               text-decoration: none;
               color: black;
               font-size: 18px;
           }
           h3 {
               width: 180px;
               height: 38px;
               margin: 100px auto;
               text-align: center;
               line-height: 38px;
               background: deepskyblue;
               border-radius: 4px;
           }
       </style>
   </head>
   <body>
   
   <h3>
       <a href="${pageContext.request.contextPath}/book/allBook">点击进入列表页</a>
   </h3>
   </body>
   </html>
   ```

3. 书籍列表页面 **allbook.jsp**

   ```
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>书籍列表</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>书籍列表 —— 显示所有书籍</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <div class="row">
           <div class="col-md-4 column">
               <a class="btn btn-primary" href="${pageContext.request.contextPath}/book/toAddBook">新增</a>
           </div>
       </div>
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <table class="table table-hover table-striped">
                   <thead>
                   <tr>
                       <th>书籍编号</th>
                       <th>书籍名字</th>
                       <th>书籍数量</th>
                       <th>书籍详情</th>
                       <th>操作</th>
                   </tr>
                   </thead>
   
                   <tbody>
                   <c:forEach var="book" items="${requestScope.get('list')}">
                       <tr>
                           <td>${book.getBookId()}</td>
                           <td>${book.getBookName()}</td>
                           <td>${book.getBookCounts()}</td>
                           <td>${book.getDetail()}</td>
                           <td>
                               <a href="${pageContext.request.contextPath}/book/toUpdateBook?id=${book.getBookId()}">更改</a> |
                               <a href="${pageContext.request.contextPath}/book/del/${book.getBookId()}">删除</a>
                           </td>
                       </tr>
                   </c:forEach>
                   </tbody>
               </table>
           </div>
       </div>
   </div>
   ```

4. BookController 类编写 ， 方法二：添加书籍

   ```
   @RequestMapping("/toAddBook")
   public String toAddPaper() {
       return "addBook";
   }
   
   @RequestMapping("/addBook")
   public String addPaper(Books books) {
       System.out.println(books);
       bookService.addBook(books);
       return "redirect:/book/allBook";
   }
   ```

5. 添加书籍页面：**addBook.jsp**

   ```
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   
   <html>
   <head>
       <title>新增书籍</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>新增书籍</small>
                   </h1>
               </div>
           </div>
       </div>
       <form action="${pageContext.request.contextPath}/book/addBook" method="post">
           书籍名称：<input type="text" name="bookName"><br><br><br>
           书籍数量：<input type="text" name="bookCounts"><br><br><br>
           书籍详情：<input type="text" name="detail"><br><br><br>
           <input type="submit" value="添加">
       </form>
   
   </div>
   ```

6. BookController 类编写 ， 方法三：修改书籍

   ```
   @RequestMapping("/toUpdateBook")
   public String toUpdateBook(Model model, int id) {
       Books books = bookService.queryBookById(id);
       System.out.println(books);
       model.addAttribute("book",books );
       return "updateBook";
   }
   
   @RequestMapping("/updateBook")
   public String updateBook(Model model, Books book) {
       bookService.updateBook(book);
       Books books = bookService.queryBookById(book.getBookID());
       model.addAttribute("books", books);
       return "redirect:/book/allBook";
   }
   ```

7. 修改书籍页面 **updateBook.jsp**

   ```
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>修改信息</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>修改信息</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <form action="${pageContext.request.contextPath}/book/updateBook" method="post">
           <input type="hidden" name="bookID" value="${book.getBookId()}"/>
           书籍名称：<input type="text" name="bookName" value="${book.getBookName()}"/>
           书籍数量：<input type="text" name="bookCounts" value="${book.getBookCounts()}"/>
           书籍详情：<input type="text" name="detail" value="${book.getDetail() }"/>
           <input type="submit" value="提交"/>
       </form>
   
   </div>
   ```

8. BookController 类编写 ， 方法四：删除书籍

   ```
   @RequestMapping("/del/{bookId}")
   public String deleteBook(@PathVariable("bookId") int id) {
       bookService.deleteBookById(id);
       return "redirect:/book/allBook";
   }
   ```

**配置Tomcat，进行运行！**

到目前为止，这个SSM项目整合已经完全的OK了，可以直接运行进行测试！这个练习十分的重要，大家需要保证，不看任何东西，自己也可以完整的实现出来！

## **6、项目结构图**

![1570186854191.png](https://blog.kuangstudy.com/usr/uploads/2019/10/1086489242.png)

![1570186868239.png](https://blog.kuangstudy.com/usr/uploads/2019/10/2326667495.png)

## 7、错误排查

### 1、访问出现404，排查步骤：**

1. 查看控制台输出，看一下是不是缺少了什么jar包。

2. 如果jar包存在，显示无法输出，就在IDEA的项目发布中，添加lib依赖！

   步骤：点击项目结构----->Artifacts----->点击自己的项目(ssm:war exploded)--->(点击工具栏的第一个)在WEB-INF目录下新建一个lib包----->选中lib------>点击工具栏的第三个然后选中第一个---->把里面的包全部选中点击ok---->点击Apply再ok

   ![image-20200128125126368](https://gitee.com/feigeCode/java_blog/raw/master/java/ssm%E6%95%B4%E5%90%88.assets/image-20200128125126368.png)

   ![image-20200128125237179](https://gitee.com/feigeCode/java_blog/raw/master/java/ssm%E6%95%B4%E5%90%88.assets/image-20200128125237179.png)

3. 重启Tomcat 即可解决！

### 2、其他错误

#### 1、bean不存在

 步骤：

 查看bean注入是否成功

 junit单元测试，看我们的代码是否能够查询出来

 问题不在底层，是我们spring出了问题

 springMVC整合时没有调用到service层的bean

 applicationContext.xml没有注册bean

 web.xml也绑定过配置文件要绑定大的applicationContext.xml



## 8、小结及展望

这个是同学们的第一个SSM整合案例，一定要烂熟于心！

SSM框架的重要程度是不言而喻的，学到这里，大家已经可以进行基本网站的单独开发。但是这只是增删改查的基本操作。可以说学到这里，大家才算是真正的步入了后台开发的门。也就是能找一个后台相关工作的底线。

或许很多人，工作就做这些事情，但是对于个人的提高来说，还远远不够！

| 飞哥 | 飞哥 | 飞哥 |
| ---- | ---- | ---- |
| 飞哥 | 飞哥 | 飞哥 |
| 飞哥 | 飞哥 | 飞哥 |
| 飞哥 | 飞哥 | 飞哥 |



~~~java
static class CustomAttributeProvider implements AttributeProvider {

        @Override
        public void setAttributes(Node node, String s, Map<String, String> map) {
            //改变a标签的target属性为_blank
            if(node instanceof Link) {
                map.put("target","_blank");
            }
            if (node instanceof TableBlock) {
                map.put("class","el-table__body-wrapper is-scrolling-none");
            }
            if (node instanceof TableBody) {
                map.put("class","el-table__body");
            }
            if (node instanceof TableRow) {
                map.put("class","el-table__row");
            }
            if (node instanceof TableCell) {
                map.put("class","el-table_13_column_55");
            }
        }
~~~

# feige

, 2020-03-02 07:06:53.0, 2020-03-13 06:59:47.0, admin, 10]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20000, rs-50000} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20000} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50001} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20001} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20002} created. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id  and
        c.parent_id is null limit ?,?;;
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20002} Parameters : [13, 0, 10]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20002} Types : [INTEGER, INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20002} executed. 8.570215 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id  and
        c.parent_id is null limit ?,?;;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20002, rs-50002} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20002, rs-50002} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20002, rs-50002} Result: [26, 好好, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:35.0, null]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20002, rs-50002} Result: [29, 太好了, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:13.0, null]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20002, rs-50002} Result: [32, <p>feige</p>, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 01:33:26.0, null]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20002, rs-50002} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20002} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} created. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Parameters : [13, 26]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} executed. 6.15955 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50003} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50003} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50003} Result: [27, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:56.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50003} Result: [28, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:43:03.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50003} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Parameters : [13, 26]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} executed. 4.163107 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50004} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50004} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50004} Result: [27, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:56.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50004} Result: [28, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:43:03.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50004} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Parameters : [13, 27]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} executed. 1.19511 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50005} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50005} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50005} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Parameters : [13, 27]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} executed. 0.8 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50006} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50006} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50006} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Parameters : [13, 29]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} executed. 4.103997 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50007} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50007} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50007} Result: [30, 谢谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:43.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50007} Result: [31, 不用谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:47:01.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50007} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Parameters : [13, 29]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} executed. 4.358662 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50008} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50008} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50008} Result: [30, 谢谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:43.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50008} Result: [31, 不用谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:47:01.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50008} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Parameters : [13, 30]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} executed. 1.13111 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50009} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50009} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50009} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Parameters : [13, 30]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} executed. 1.456887 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50010} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50010} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50010} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Parameters : [13, 32]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} executed. 1.147999 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50011} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50011} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50011} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20004} created. select distinct count(*) from comments c
        where c.blog_id=? and
        c.parent_id is null;
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20004} Parameters : [13]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20004} Types : [INTEGER]
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} created. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog where id=?
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} Parameters : [13]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} Types : [INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} executed. 0.835999 millis. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog where id=?
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50012} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50012} Header: [id, type_name, title, content, create_time, change_time, author, view]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20004} executed. 2.819109 millis. select distinct count(*) from comments c
        where c.blog_id=? and
        c.parent_id is null;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50013} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50013} Header: [count(*)]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50012} Result: [13, mybatis, ssm框架整合, # ssm整合

## 1、数据库环境

创建一个存放书籍数据的数据库表

```
CREATE DATABASE `ssmbuild`;

USE `ssmbuild`;

DROP TABLE IF EXISTS `books`;

CREATE TABLE `books` (
  `bookId` INT PRIMARY KEY COMMENT '书id',
  `bookName` VARCHAR(100) NOT NULL COMMENT '书名',
  `bookCounts` INT(11) NOT NULL COMMENT '数量',
  ``ssmbuild``ssmbuild`` VARCHAR(200) NOT NULL COMMENT '描述'
) ENGINE=INNODB DEFAULT CHARSET=utf8

INSERT  INTO `books`(`bookId`,`bookName`,`bookCounts`,`detail`)VALUES 
(1,'Java',1,'从入门到放弃'),
(2,'MySQL',10,'从删库到跑路'),
(3,'Linux',5,'从进门到进牢');

SELECT * FROM books
```

## 2、基本环境搭建

1. 新建一Maven项目！ ssmbuild ， 添加web的支持

   ![image-20200128134359317](https://gitee.com/feigeCode/java_blog/raw/master/java/ssm%E6%95%B4%E5%90%88.assets/image-20200128134359317.png)

2. 导入相关的pom依赖！

   ```
   <dependencies>
       <!--Junit-->
       <dependency>
           <groupId>junit</groupId>
           <artifactId>junit</artifactId>
           <version>4.12</version>
       </dependency>
       <!--数据库驱动-->
       <dependency>
           <groupId>mysql</groupId>
           <artifactId>mysql-connector-java</artifactId>
           <version>5.1.47</version>
       </dependency>
       <!-- 数据库连接池 -->
       <dependency>
           <groupId>com.mchange</groupId>
           <artifactId>c3p0</artifactId>
           <version>0.9.5.2</version>
       </dependency>
   
       <!--Servlet - JSP -->
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>servlet-api</artifactId>
           <version>2.5</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet.jsp</groupId>
           <artifactId>jsp-api</artifactId>
           <version>2.2</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>jstl</artifactId>
           <version>1.2</version>
       </dependency>
   
       <!--Mybatis-->
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis</artifactId>
           <version>3.5.2</version>
       </dependency>
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis-spring</artifactId>
           <version>2.0.2</version>
       </dependency>
   
       <!--Spring-->
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-webmvc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-jdbc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->
       <dependency>
           <groupId>org.projectlombok</groupId>
           <artifactId>lombok</artifactId>
           <version>1.16.10</version>
       </dependency>
   </dependencies>
   ```

3. Maven资源过滤设置

   ```
   <build>
       <resources>
           <resource>
               <directory>src/main/java</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
           <resource>
               <directory>src/main/resources</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
       </resources>
   </build>
   ```

4. 建立基本结构和配置框架！

   - com.feige.pojo

   - com.feige.dao

   - com.feige.service

   - com.feige.controller

     在resources目录下创建

   - mybatis-config.xml

     ```
     <?xml version="1.0" encoding="UTF-8" ?>
     <!DOCTYPE configuration
             PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
             "http://mybatis.org/dtd/mybatis-3-config.dtd">
     <configuration>
     
     </configuration>
     ```

   - applicationContext.xml

     ```
     <?xml version="1.0" encoding="UTF-8"?>
     <beans xmlns="http://www.springframework.org/schema/beans"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://www.springframework.org/schema/beans
             http://www.springframework.org/schema/beans/spring-beans.xsd">
     
     </beans>
     ```

## 3、Mybatis层编写

1. 数据库配置文件 **database.properties**

   ```
   jdbc.driver=com.mysql.jdbc.Driver
   jdbc.url=jdbc:mysql://localhost:3306/ssmbuild?useSSL=true&useUnicode=true&characterEncoding=utf8
   jdbc.username=root
   jdbc.password=hufei169357
   ```

2. IDEA关联数据库

3. 编写MyBatis的核心配置文件

   ```
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE configuration
           PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-config.dtd">
   <configuration>
       
       <typeAliases>
           <package name="com.feige.pojo"/>
       </typeAliases>
       <mappers>
           <mapper resource="com/feige/dao/BookMapper.xml"/>
       </mappers>
   
   </configuration>
   ```

4. 编写数据库对应的实体类 com.feige.pojo.Books 使用lombok插件！

   ```
   package com.kuang.pojo;
   
   import lombok.AllArgsConstructor;
   import lombok.Data;
   import lombok.NoArgsConstructor;
   
   @Data
   @AllArgsConstructor
   @NoArgsConstructor
   public class Books {
       
       private int bookId;
       private String bookName;
       private int bookCounts;
       private String detail;
       
   }
   ```

5. 编写Dao层的 Mapper接口！

   ```
   package com.kuang.dao;
   
   import com.kuang.pojo.Books;
   import java.util.List;
   
   public interface BookMapper {
   
       //增加一个Book
       int addBook(Books book);
   
       //根据id删除一个Book
       int deleteBookById(int id);
   
       //更新Book
       int updateBook(Books books);
   
       //根据id查询,返回一个Book
       Books queryBookById(int id);
   
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   
   }
   ```

6. 编写接口对应的 Mapper.xml 文件。需要导入MyBatis的包；

   ```
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE mapper
           PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
   
   <mapper namespace="com.feige.dao.BooksMapper">
   
       <!--增加一个Book-->
       <insert id="addBook" parameterType="Books">
           insert into books(bookName,bookCounts,detail)
           values (#{bookName}, #{bookCounts}, #{detail})
       </insert>
   
       <!--根据id删除一个Book-->
       <delete id="deleteBookById" parameterType="int">
           delete from books where bookId=#{bookId}
       </delete>
   
       <!--更新Book-->
       <update id="updateBook" parameterType="Books">
           update books
           set bookName = #{bookName},bookCounts = #{bookCounts},detail = #{detail}
           where bookId = #{bookId}
       </update>
   
       <!--根据id查询,返回一个Book-->
       <select id="queryBookById" resultType="Books">
           select * from books
           where bookID = #{bookId}
       </select>
   
       <!--查询全部Book-->
       <select id="queryAllBook" resultType="com.feige.pojo.Books">
           SELECT * from books
       </select>
   
   </mapper>
   ```

7. 编写Service层的接口和实现类 接口：

   ```
   package com.feige.service;
   
   import com.feige.pojo.Books;
   
   import java.util.List;
   
   //BookService:底下需要去实现,调用dao层
   public interface BookService {
       //增加一个Book
       int addBook(Books book);
       //根据id删除一个Book
       int deleteBookById(int id);
       //更新Book
       int updateBook(Books books);
       //根据id查询,返回一个Book
       Books queryBookById(int id);
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   }
   ```

实现类：

```
package com.feige.service;

import com.feige.dao.BookMapper;
import com.feige.pojo.Books;
import java.util.List;

public class BookServiceImpl implements BookService {

    //调用dao层的操作，设置一个set接口，方便Spring管理
    private BookMapper bookMapper;

    public void setBookMapper(BookMapper bookMapper) {
        this.bookMapper = bookMapper;
    }
    
    public int addBook(Books book) {
        return bookMapper.addBook(book);
    }
    
    public int deleteBookById(int id) {
        return bookMapper.deleteBookById(id);
    }
    
    public int updateBook(Books books) {
        return bookMapper.updateBook(books);
    }
    
    public Books queryBookById(int id) {
        return bookMapper.queryBookById(id);
    }
    
    public List<Books> queryAllBook() {
        return bookMapper.queryAllBook();
    }
}
```

**OK，到此，底层需求操作编写完毕！**

## 4、Spring层

1. 配置**Spring整合MyBatis**，我们这里数据源使用c3p0连接池；

2. 我们去编写Spring整合Mybatis的相关的配置文件； spring-dao.xml

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans.xsd
   http://www.springframework.org/schema/context
   https://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 配置整合mybatis -->
       <!-- 1.关联数据库文件 -->
       <context:property-placeholder location="classpath:database.properties"/>
   
       <!-- 2.数据库连接池 -->
       <!--数据库连接池
   dbcp  半自动化操作  不能自动连接
   c3p0  自动化操作（自动的加载配置文件 并且设置到对象里面）
       -->
       <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
   <!-- 配置连接池属性 -->
   <property name="driverClass" value="${jdbc.driver}"/>
   <property name="jdbcUrl" value="${jdbc.url}"/>
   <property name="user" value="${jdbc.username}"/>
   <property name="password" value="${jdbc.password}"/>
   
   <!-- c3p0连接池的私有属性 -->
   <property name="maxPoolSize" value="30"/>
   <property name="minPoolSize" value="10"/>
   <!-- 关闭连接后不自动commit -->
   <property name="autoCommitOnClose" value="false"/>
   <!-- 获取连接超时时间 -->
   <property name="checkoutTimeout" value="10000"/>
   <!-- 当获取连接失败重试次数 -->
   <property name="acquireRetryAttempts" value="2"/>
       </bean>
   
       <!-- 3.配置SqlSessionFactory对象 -->
       <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource"/>
   <!-- 配置MyBaties全局配置文件:mybatis-config.xml -->
   <property name="configLocation" value="classpath:mybatis-config.xml"/>
       </bean>
   
       <!-- 4.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 -->
       <!--解释 ： https://www.cnblogs.com/jpfss/p/7799806.html-->
       <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
   <!-- 注入sqlSessionFactory -->
   <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
   <!-- 给出需要扫描Dao接口包 -->
   <property name="basePackage" value="com.feige.dao"/>
       </bean>
   
   </beans>
   ```

3. **Spring整合service层**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 扫描service相关的bean -->
       <context:component-scan base-package="com.kuang.service" />
   
       <!--BookServiceImpl注入到IOC容器中-->
       <bean id="BookServiceImpl" class="com.kuang.service.BookServiceImpl">
   <property name="bookMapper" ref="bookMapper"/>
       </bean>
   
       <!-- 配置事务管理器 -->
       <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource" />
       </bean>
   
   </beans>
   ```

Spring层搞定！再次理解一下，Spring就是一个大杂烩，一个容器！对吧！

## 5、SpringMVC层

1. **web.xml**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
            version="4.0">
   
       <!--DispatcherServlet-->
       <servlet>
           <servlet-name>DispatcherServlet</servlet-name>
           <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
           <init-param>
               <param-name>contextConfigLocation</param-name>
               <param-value>classpath:applicationContext.xml</param-value>
           </init-param>
           <load-on-startup>1</load-on-startup>
       </servlet>
       <servlet-mapping>
           <servlet-name>DispatcherServlet</servlet-name>
           <url-pattern>/</url-pattern>
       </servlet-mapping>
   
       <!--encodingFilter-->
       <filter>
           <filter-name>encodingFilter</filter-name>
           <filter-class>
               org.springframework.web.filter.CharacterEncodingFilter
           </filter-class>
           <init-param>
               <param-name>encoding</param-name>
               <param-value>utf-8</param-value>
           </init-param>
       </filter>
       <filter-mapping>
           <filter-name>encodingFilter</filter-name>
           <url-pattern>/*</url-pattern>
       </filter-mapping>
       
       <!--Session过期时间-->
       <session-config>
           <session-timeout>15</session-timeout>
       </session-config>
       
   </web-app>
   ```

2. **spring-mvc.xml**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xmlns:mvc="http://www.springframework.org/schema/mvc"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       https://www.springframework.org/schema/mvc/spring-mvc.xsd">
   
       <!-- 配置SpringMVC -->
       <!-- 1.开启SpringMVC注解驱动 -->
       <mvc:annotation-driven>
           <mvc:message-converters register-defaults="true">
               <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                   <constructor-arg value="UTF-8"/>
               </bean>
               <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                   <property name="objectMapper">
                       <bean class="org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean">
                           <property name="failOnEmptyBeans" value="false"/>
                       </bean>
                   </property>
               </bean>
           </mvc:message-converters>
       </mvc:annotation-driven>
       <!--解决跨域问题-->
       <mvc:cors>
       <mvc:mapping path="/**"
                    allowed-origins="http://127.0.0.1:8090,http://localhost:8090"
                    allowed-methods="POST,GET, OPTIONS,DELETE,PUT"
                    allowed-headers="Content-Type,ContentType,Access-Control-Allow-Headers, Authorization, X-Requested-With"
                    allow-credentials="true"/>
       </mvc:cors>
       <!-- 2.静态资源默认servlet配置-->
       <mvc:default-servlet-handler/>
   
       <!-- 3.配置jsp 显示ViewResolver视图解析器 -->
       <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
           <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
           <property name="prefix" value="/WEB-INF/jsp/" />
           <property name="suffix" value=".jsp" />
       </bean>
   
       <!-- 4.扫描web相关的bean -->
       <context:component-scan base-package="com.feige.controller" />
   
   </beans>
   ```

3. **Spring配置整合文件，applicationContext.xml**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd">
   
       <import resource="spring-dao.xml"/>
       <import resource="spring-service.xml"/>
       <import resource="spring-mvc.xml"/>
       
   </beans>
   ```

**配置文件，暂时结束！Controller 和 视图层编写**

1. BookController 类编写 ， 方法一：查询全部书籍

   ```
   @Controller
   @RequestMapping("/book")
   public class BookController {
   
       @Autowired
       @Qualifier("BookServiceImpl")
       private BookService bookService;
   
       @RequestMapping("/allBook")
       public String list(Model model) {
           List<Books> list = bookService.queryAllBook();
           model.addAttribute("list", list);
           return "allBook";
       }
   }
   ```

2. 编写首页 **index.jsp**

   ```
   <%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" %>
   <!DOCTYPE HTML>
   <html>
   <head>
       <title>首页</title>
       <style type="text/css">
           a {
               text-decoration: none;
               color: black;
               font-size: 18px;
           }
           h3 {
               width: 180px;
               height: 38px;
               margin: 100px auto;
               text-align: center;
               line-height: 38px;
               background: deepskyblue;
               border-radius: 4px;
           }
       </style>
   </head>
   <body>
   
   <h3>
       <a href="${pageContext.request.contextPath}/book/allBook">点击进入列表页</a>
   </h3>
   </body>
   </html>
   ```

3. 书籍列表页面 **allbook.jsp**

   ```
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>书籍列表</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>书籍列表 —— 显示所有书籍</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <div class="row">
           <div class="col-md-4 column">
               <a class="btn btn-primary" href="${pageContext.request.contextPath}/book/toAddBook">新增</a>
           </div>
       </div>
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <table class="table table-hover table-striped">
                   <thead>
                   <tr>
                       <th>书籍编号</th>
                       <th>书籍名字</th>
                       <th>书籍数量</th>
                       <th>书籍详情</th>
                       <th>操作</th>
                   </tr>
                   </thead>
   
                   <tbody>
                   <c:forEach var="book" items="${requestScope.get('list')}">
                       <tr>
                           <td>${book.getBookId()}</td>
                           <td>${book.getBookName()}</td>
                           <td>${book.getBookCounts()}</td>
                           <td>${book.getDetail()}</td>
                           <td>
                               <a href="${pageContext.request.contextPath}/book/toUpdateBook?id=${book.getBookId()}">更改</a> |
                               <a href="${pageContext.request.contextPath}/book/del/${book.getBookId()}">删除</a>
                           </td>
                       </tr>
                   </c:forEach>
                   </tbody>
               </table>
           </div>
       </div>
   </div>
   ```

4. BookController 类编写 ， 方法二：添加书籍

   ```
   @RequestMapping("/toAddBook")
   public String toAddPaper() {
       return "addBook";
   }
   
   @RequestMapping("/addBook")
   public String addPaper(Books books) {
       System.out.println(books);
       bookService.addBook(books);
       return "redirect:/book/allBook";
   }
   ```

5. 添加书籍页面：**addBook.jsp**

   ```
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   
   <html>
   <head>
       <title>新增书籍</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>新增书籍</small>
                   </h1>
               </div>
           </div>
       </div>
       <form action="${pageContext.request.contextPath}/book/addBook" method="post">
           书籍名称：<input type="text" name="bookName"><br><br><br>
           书籍数量：<input type="text" name="bookCounts"><br><br><br>
           书籍详情：<input type="text" name="detail"><br><br><br>
           <input type="submit" value="添加">
       </form>
   
   </div>
   ```

6. BookController 类编写 ， 方法三：修改书籍

   ```
   @RequestMapping("/toUpdateBook")
   public String toUpdateBook(Model model, int id) {
       Books books = bookService.queryBookById(id);
       System.out.println(books);
       model.addAttribute("book",books );
       return "updateBook";
   }
   
   @RequestMapping("/updateBook")
   public String updateBook(Model model, Books book) {
       bookService.updateBook(book);
       Books books = bookService.queryBookById(book.getBookID());
       model.addAttribute("books", books);
       return "redirect:/book/allBook";
   }
   ```

7. 修改书籍页面 **updateBook.jsp**

   ```
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>修改信息</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>修改信息</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <form action="${pageContext.request.contextPath}/book/updateBook" method="post">
           <input type="hidden" name="bookID" value="${book.getBookId()}"/>
           书籍名称：<input type="text" name="bookName" value="${book.getBookName()}"/>
           书籍数量：<input type="text" name="bookCounts" value="${book.getBookCounts()}"/>
           书籍详情：<input type="text" name="detail" value="${book.getDetail() }"/>
           <input type="submit" value="提交"/>
       </form>
   
   </div>
   ```

8. BookController 类编写 ， 方法四：删除书籍

   ```
   @RequestMapping("/del/{bookId}")
   public String deleteBook(@PathVariable("bookId") int id) {
       bookService.deleteBookById(id);
       return "redirect:/book/allBook";
   }
   ```

**配置Tomcat，进行运行！**

到目前为止，这个SSM项目整合已经完全的OK了，可以直接运行进行测试！这个练习十分的重要，大家需要保证，不看任何东西，自己也可以完整的实现出来！

## **6、项目结构图**

![1570186854191.png](https://blog.kuangstudy.com/usr/uploads/2019/10/1086489242.png)

![1570186868239.png](https://blog.kuangstudy.com/usr/uploads/2019/10/2326667495.png)

## 7、错误排查

### 1、访问出现404，排查步骤：**

1. 查看控制台输出，看一下是不是缺少了什么jar包。

2. 如果jar包存在，显示无法输出，就在IDEA的项目发布中，添加lib依赖！

   步骤：点击项目结构----->Artifacts----->点击自己的项目(ssm:war exploded)--->(点击工具栏的第一个)在WEB-INF目录下新建一个lib包----->选中lib------>点击工具栏的第三个然后选中第一个---->把里面的包全部选中点击ok---->点击Apply再ok

   ![image-20200128125126368](https://gitee.com/feigeCode/java_blog/raw/master/java/ssm%E6%95%B4%E5%90%88.assets/image-20200128125126368.png)

   ![image-20200128125237179](https://gitee.com/feigeCode/java_blog/raw/master/java/ssm%E6%95%B4%E5%90%88.assets/image-20200128125237179.png)

3. 重启Tomcat 即可解决！

### 2、其他错误

#### 1、bean不存在

 步骤：

 查看bean注入是否成功

 junit单元测试，看我们的代码是否能够查询出来

 问题不在底层，是我们spring出了问题

 springMVC整合时没有调用到service层的bean

 applicationContext.xml没有注册bean

 web.xml也绑定过配置文件要绑定大的applicationContext.xml



## 8、小结及展望

这个是同学们的第一个SSM整合案例，一定要烂熟于心！

SSM框架的重要程度是不言而喻的，学到这里，大家已经可以进行基本网站的单独开发。但是这只是增删改查的基本操作。可以说学到这里，大家才算是真正的步入了后台开发的门。也就是能找一个后台相关工作的底线。

或许很多人，工作就做这些事情，但是对于个人的提高来说，还远远不够！

| 飞哥 | 飞哥 | 飞哥 |
| ---- | ---- | ---- |
| 飞哥 | 飞哥 | 飞哥 |
| 飞哥 | 飞哥 | 飞哥 |
| 飞哥 | 飞哥 | 飞哥 |



~~~java
static class CustomAttributeProvider implements AttributeProvider {

        @Override
        public void setAttributes(Node node, String s, Map<String, String> map) {
            //改变a标签的target属性为_blank
            if(node instanceof Link) {
                map.put("target","_blank");
            }
            if (node instanceof TableBlock) {
                map.put("class","el-table__body-wrapper is-scrolling-none");
            }
            if (node instanceof TableBody) {
                map.put("class","el-table__body");
            }
            if (node instanceof TableRow) {
                map.put("class","el-table__row");
            }
            if (node instanceof TableCell) {
                map.put("class","el-table_13_column_55");
            }
        }
~~~

# feige

, 2020-03-02 07:06:53.0, 2020-03-13 06:59:47.0, admin, 10]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50013} Result: [3]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50013} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20004} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50012} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20006} created. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id  and
        c.parent_id is null limit ?,?;;
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20006} Parameters : [13, 0, 10]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20006} Types : [INTEGER, INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20006} executed. 1.747109 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id  and
        c.parent_id is null limit ?,?;;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20006, rs-50014} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20006, rs-50014} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20006, rs-50014} Result: [26, 好好, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:35.0, null]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20006, rs-50014} Result: [29, 太好了, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:13.0, null]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20006, rs-50014} Result: [32, <p>feige</p>, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 01:33:26.0, null]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20006, rs-50014} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20006} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} created. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} Parameters : [13, 26]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} executed. 9.489325 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50015} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50015} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50015} Result: [27, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:56.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50015} Result: [28, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:43:03.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50015} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} Parameters : [13, 26]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} executed. 8.985325 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50016} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50016} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50016} Result: [27, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:56.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50016} Result: [28, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:43:03.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50016} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} Parameters : [13, 27]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} executed. 1.302221 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50017} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50017} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50017} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} Parameters : [13, 27]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} executed. 1.503109 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50018} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50018} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50018} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} Parameters : [13, 29]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} executed. 8.831548 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50019} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50019} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50019} Result: [30, 谢谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:43.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50019} Result: [31, 不用谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:47:01.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50019} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} Parameters : [13, 29]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} executed. 5.575995 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50020} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50020} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50020} Result: [30, 谢谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:43.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50020} Result: [31, 不用谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:47:01.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50020} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} Parameters : [13, 30]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} executed. 1.045332 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50021} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50021} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50021} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} Parameters : [13, 30]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} executed. 0.972444 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50022} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50022} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50022} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} Parameters : [13, 32]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} executed. 0.975555 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50023} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50023} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50023} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10001} connected
[DEBUG][20-03-23][druid.sql.Connection]{conn-10002} connected
[DEBUG][20-03-23][druid.sql.Connection]{conn-10003} connected
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} connected
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} connected
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} created. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog where id=?
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} Parameters : [13]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} Types : [INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} executed. 8.008881 millis. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog where id=?
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Header: [id, type_name, title, content, create_time, change_time, author, view]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [13, mybatis, ssm框架整合, # ssm整合

## 1、数据库环境

创建一个存放书籍数据的数据库表

```
CREATE DATABASE `ssmbuild`;

USE `ssmbuild`;

DROP TABLE IF EXISTS `books`;

CREATE TABLE `books` (
  `bookId` INT PRIMARY KEY COMMENT '书id',
  `bookName` VARCHAR(100) NOT NULL COMMENT '书名',
  `bookCounts` INT(11) NOT NULL COMMENT '数量',
  ``ssmbuild``ssmbuild`` VARCHAR(200) NOT NULL COMMENT '描述'
) ENGINE=INNODB DEFAULT CHARSET=utf8

INSERT  INTO `books`(`bookId`,`bookName`,`bookCounts`,`detail`)VALUES 
(1,'Java',1,'从入门到放弃'),
(2,'MySQL',10,'从删库到跑路'),
(3,'Linux',5,'从进门到进牢');

SELECT * FROM books
```

## 2、基本环境搭建

1. 新建一Maven项目！ ssmbuild ， 添加web的支持

   ![image-20200128134359317](https://gitee.com/feigeCode/java_blog/raw/master/java/ssm%E6%95%B4%E5%90%88.assets/image-20200128134359317.png)

2. 导入相关的pom依赖！

   ```
   <dependencies>
       <!--Junit-->
       <dependency>
           <groupId>junit</groupId>
           <artifactId>junit</artifactId>
           <version>4.12</version>
       </dependency>
       <!--数据库驱动-->
       <dependency>
           <groupId>mysql</groupId>
           <artifactId>mysql-connector-java</artifactId>
           <version>5.1.47</version>
       </dependency>
       <!-- 数据库连接池 -->
       <dependency>
           <groupId>com.mchange</groupId>
           <artifactId>c3p0</artifactId>
           <version>0.9.5.2</version>
       </dependency>
   
       <!--Servlet - JSP -->
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>servlet-api</artifactId>
           <version>2.5</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet.jsp</groupId>
           <artifactId>jsp-api</artifactId>
           <version>2.2</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>jstl</artifactId>
           <version>1.2</version>
       </dependency>
   
       <!--Mybatis-->
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis</artifactId>
           <version>3.5.2</version>
       </dependency>
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis-spring</artifactId>
           <version>2.0.2</version>
       </dependency>
   
       <!--Spring-->
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-webmvc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-jdbc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->
       <dependency>
           <groupId>org.projectlombok</groupId>
           <artifactId>lombok</artifactId>
           <version>1.16.10</version>
       </dependency>
   </dependencies>
   ```

3. Maven资源过滤设置

   ```
   <build>
       <resources>
           <resource>
               <directory>src/main/java</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
           <resource>
               <directory>src/main/resources</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
       </resources>
   </build>
   ```

4. 建立基本结构和配置框架！

   - com.feige.pojo

   - com.feige.dao

   - com.feige.service

   - com.feige.controller

     在resources目录下创建

   - mybatis-config.xml

     ```
     <?xml version="1.0" encoding="UTF-8" ?>
     <!DOCTYPE configuration
             PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
             "http://mybatis.org/dtd/mybatis-3-config.dtd">
     <configuration>
     
     </configuration>
     ```

   - applicationContext.xml

     ```
     <?xml version="1.0" encoding="UTF-8"?>
     <beans xmlns="http://www.springframework.org/schema/beans"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://www.springframework.org/schema/beans
             http://www.springframework.org/schema/beans/spring-beans.xsd">
     
     </beans>
     ```

## 3、Mybatis层编写

1. 数据库配置文件 **database.properties**

   ```
   jdbc.driver=com.mysql.jdbc.Driver
   jdbc.url=jdbc:mysql://localhost:3306/ssmbuild?useSSL=true&useUnicode=true&characterEncoding=utf8
   jdbc.username=root
   jdbc.password=hufei169357
   ```

2. IDEA关联数据库

3. 编写MyBatis的核心配置文件

   ```
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE configuration
           PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-config.dtd">
   <configuration>
       
       <typeAliases>
           <package name="com.feige.pojo"/>
       </typeAliases>
       <mappers>
           <mapper resource="com/feige/dao/BookMapper.xml"/>
       </mappers>
   
   </configuration>
   ```

4. 编写数据库对应的实体类 com.feige.pojo.Books 使用lombok插件！

   ```
   package com.kuang.pojo;
   
   import lombok.AllArgsConstructor;
   import lombok.Data;
   import lombok.NoArgsConstructor;
   
   @Data
   @AllArgsConstructor
   @NoArgsConstructor
   public class Books {
       
       private int bookId;
       private String bookName;
       private int bookCounts;
       private String detail;
       
   }
   ```

5. 编写Dao层的 Mapper接口！

   ```
   package com.kuang.dao;
   
   import com.kuang.pojo.Books;
   import java.util.List;
   
   public interface BookMapper {
   
       //增加一个Book
       int addBook(Books book);
   
       //根据id删除一个Book
       int deleteBookById(int id);
   
       //更新Book
       int updateBook(Books books);
   
       //根据id查询,返回一个Book
       Books queryBookById(int id);
   
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   
   }
   ```

6. 编写接口对应的 Mapper.xml 文件。需要导入MyBatis的包；

   ```
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE mapper
           PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
   
   <mapper namespace="com.feige.dao.BooksMapper">
   
       <!--增加一个Book-->
       <insert id="addBook" parameterType="Books">
           insert into books(bookName,bookCounts,detail)
           values (#{bookName}, #{bookCounts}, #{detail})
       </insert>
   
       <!--根据id删除一个Book-->
       <delete id="deleteBookById" parameterType="int">
           delete from books where bookId=#{bookId}
       </delete>
   
       <!--更新Book-->
       <update id="updateBook" parameterType="Books">
           update books
           set bookName = #{bookName},bookCounts = #{bookCounts},detail = #{detail}
           where bookId = #{bookId}
       </update>
   
       <!--根据id查询,返回一个Book-->
       <select id="queryBookById" resultType="Books">
           select * from books
           where bookID = #{bookId}
       </select>
   
       <!--查询全部Book-->
       <select id="queryAllBook" resultType="com.feige.pojo.Books">
           SELECT * from books
       </select>
   
   </mapper>
   ```

7. 编写Service层的接口和实现类 接口：

   ```
   package com.feige.service;
   
   import com.feige.pojo.Books;
   
   import java.util.List;
   
   //BookService:底下需要去实现,调用dao层
   public interface BookService {
       //增加一个Book
       int addBook(Books book);
       //根据id删除一个Book
       int deleteBookById(int id);
       //更新Book
       int updateBook(Books books);
       //根据id查询,返回一个Book
       Books queryBookById(int id);
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   }
   ```

实现类：

```
package com.feige.service;

import com.feige.dao.BookMapper;
import com.feige.pojo.Books;
import java.util.List;

public class BookServiceImpl implements BookService {

    //调用dao层的操作，设置一个set接口，方便Spring管理
    private BookMapper bookMapper;

    public void setBookMapper(BookMapper bookMapper) {
        this.bookMapper = bookMapper;
    }
    
    public int addBook(Books book) {
        return bookMapper.addBook(book);
    }
    
    public int deleteBookById(int id) {
        return bookMapper.deleteBookById(id);
    }
    
    public int updateBook(Books books) {
        return bookMapper.updateBook(books);
    }
    
    public Books queryBookById(int id) {
        return bookMapper.queryBookById(id);
    }
    
    public List<Books> queryAllBook() {
        return bookMapper.queryAllBook();
    }
}
```

**OK，到此，底层需求操作编写完毕！**

## 4、Spring层

1. 配置**Spring整合MyBatis**，我们这里数据源使用c3p0连接池；

2. 我们去编写Spring整合Mybatis的相关的配置文件； spring-dao.xml

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans.xsd
   http://www.springframework.org/schema/context
   https://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 配置整合mybatis -->
       <!-- 1.关联数据库文件 -->
       <context:property-placeholder location="classpath:database.properties"/>
   
       <!-- 2.数据库连接池 -->
       <!--数据库连接池
   dbcp  半自动化操作  不能自动连接
   c3p0  自动化操作（自动的加载配置文件 并且设置到对象里面）
       -->
       <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
   <!-- 配置连接池属性 -->
   <property name="driverClass" value="${jdbc.driver}"/>
   <property name="jdbcUrl" value="${jdbc.url}"/>
   <property name="user" value="${jdbc.username}"/>
   <property name="password" value="${jdbc.password}"/>
   
   <!-- c3p0连接池的私有属性 -->
   <property name="maxPoolSize" value="30"/>
   <property name="minPoolSize" value="10"/>
   <!-- 关闭连接后不自动commit -->
   <property name="autoCommitOnClose" value="false"/>
   <!-- 获取连接超时时间 -->
   <property name="checkoutTimeout" value="10000"/>
   <!-- 当获取连接失败重试次数 -->
   <property name="acquireRetryAttempts" value="2"/>
       </bean>
   
       <!-- 3.配置SqlSessionFactory对象 -->
       <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource"/>
   <!-- 配置MyBaties全局配置文件:mybatis-config.xml -->
   <property name="configLocation" value="classpath:mybatis-config.xml"/>
       </bean>
   
       <!-- 4.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 -->
       <!--解释 ： https://www.cnblogs.com/jpfss/p/7799806.html-->
       <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
   <!-- 注入sqlSessionFactory -->
   <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
   <!-- 给出需要扫描Dao接口包 -->
   <property name="basePackage" value="com.feige.dao"/>
       </bean>
   
   </beans>
   ```

3. **Spring整合service层**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 扫描service相关的bean -->
       <context:component-scan base-package="com.kuang.service" />
   
       <!--BookServiceImpl注入到IOC容器中-->
       <bean id="BookServiceImpl" class="com.kuang.service.BookServiceImpl">
   <property name="bookMapper" ref="bookMapper"/>
       </bean>
   
       <!-- 配置事务管理器 -->
       <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource" />
       </bean>
   
   </beans>
   ```

Spring层搞定！再次理解一下，Spring就是一个大杂烩，一个容器！对吧！

## 5、SpringMVC层

1. **web.xml**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
            version="4.0">
   
       <!--DispatcherServlet-->
       <servlet>
           <servlet-name>DispatcherServlet</servlet-name>
           <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
           <init-param>
               <param-name>contextConfigLocation</param-name>
               <param-value>classpath:applicationContext.xml</param-value>
           </init-param>
           <load-on-startup>1</load-on-startup>
       </servlet>
       <servlet-mapping>
           <servlet-name>DispatcherServlet</servlet-name>
           <url-pattern>/</url-pattern>
       </servlet-mapping>
   
       <!--encodingFilter-->
       <filter>
           <filter-name>encodingFilter</filter-name>
           <filter-class>
               org.springframework.web.filter.CharacterEncodingFilter
           </filter-class>
           <init-param>
               <param-name>encoding</param-name>
               <param-value>utf-8</param-value>
           </init-param>
       </filter>
       <filter-mapping>
           <filter-name>encodingFilter</filter-name>
           <url-pattern>/*</url-pattern>
       </filter-mapping>
       
       <!--Session过期时间-->
       <session-config>
           <session-timeout>15</session-timeout>
       </session-config>
       
   </web-app>
   ```

2. **spring-mvc.xml**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xmlns:mvc="http://www.springframework.org/schema/mvc"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       https://www.springframework.org/schema/mvc/spring-mvc.xsd">
   
       <!-- 配置SpringMVC -->
       <!-- 1.开启SpringMVC注解驱动 -->
       <mvc:annotation-driven>
           <mvc:message-converters register-defaults="true">
               <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                   <constructor-arg value="UTF-8"/>
               </bean>
               <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                   <property name="objectMapper">
                       <bean class="org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean">
                           <property name="failOnEmptyBeans" value="false"/>
                       </bean>
                   </property>
               </bean>
           </mvc:message-converters>
       </mvc:annotation-driven>
       <!--解决跨域问题-->
       <mvc:cors>
       <mvc:mapping path="/**"
                    allowed-origins="http://127.0.0.1:8090,http://localhost:8090"
                    allowed-methods="POST,GET, OPTIONS,DELETE,PUT"
                    allowed-headers="Content-Type,ContentType,Access-Control-Allow-Headers, Authorization, X-Requested-With"
                    allow-credentials="true"/>
       </mvc:cors>
       <!-- 2.静态资源默认servlet配置-->
       <mvc:default-servlet-handler/>
   
       <!-- 3.配置jsp 显示ViewResolver视图解析器 -->
       <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
           <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
           <property name="prefix" value="/WEB-INF/jsp/" />
           <property name="suffix" value=".jsp" />
       </bean>
   
       <!-- 4.扫描web相关的bean -->
       <context:component-scan base-package="com.feige.controller" />
   
   </beans>
   ```

3. **Spring配置整合文件，applicationContext.xml**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd">
   
       <import resource="spring-dao.xml"/>
       <import resource="spring-service.xml"/>
       <import resource="spring-mvc.xml"/>
       
   </beans>
   ```

**配置文件，暂时结束！Controller 和 视图层编写**

1. BookController 类编写 ， 方法一：查询全部书籍

   ```
   @Controller
   @RequestMapping("/book")
   public class BookController {
   
       @Autowired
       @Qualifier("BookServiceImpl")
       private BookService bookService;
   
       @RequestMapping("/allBook")
       public String list(Model model) {
           List<Books> list = bookService.queryAllBook();
           model.addAttribute("list", list);
           return "allBook";
       }
   }
   ```

2. 编写首页 **index.jsp**

   ```
   <%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" %>
   <!DOCTYPE HTML>
   <html>
   <head>
       <title>首页</title>
       <style type="text/css">
           a {
               text-decoration: none;
               color: black;
               font-size: 18px;
           }
           h3 {
               width: 180px;
               height: 38px;
               margin: 100px auto;
               text-align: center;
               line-height: 38px;
               background: deepskyblue;
               border-radius: 4px;
           }
       </style>
   </head>
   <body>
   
   <h3>
       <a href="${pageContext.request.contextPath}/book/allBook">点击进入列表页</a>
   </h3>
   </body>
   </html>
   ```

3. 书籍列表页面 **allbook.jsp**

   ```
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>书籍列表</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>书籍列表 —— 显示所有书籍</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <div class="row">
           <div class="col-md-4 column">
               <a class="btn btn-primary" href="${pageContext.request.contextPath}/book/toAddBook">新增</a>
           </div>
       </div>
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <table class="table table-hover table-striped">
                   <thead>
                   <tr>
                       <th>书籍编号</th>
                       <th>书籍名字</th>
                       <th>书籍数量</th>
                       <th>书籍详情</th>
                       <th>操作</th>
                   </tr>
                   </thead>
   
                   <tbody>
                   <c:forEach var="book" items="${requestScope.get('list')}">
                       <tr>
                           <td>${book.getBookId()}</td>
                           <td>${book.getBookName()}</td>
                           <td>${book.getBookCounts()}</td>
                           <td>${book.getDetail()}</td>
                           <td>
                               <a href="${pageContext.request.contextPath}/book/toUpdateBook?id=${book.getBookId()}">更改</a> |
                               <a href="${pageContext.request.contextPath}/book/del/${book.getBookId()}">删除</a>
                           </td>
                       </tr>
                   </c:forEach>
                   </tbody>
               </table>
           </div>
       </div>
   </div>
   ```

4. BookController 类编写 ， 方法二：添加书籍

   ```
   @RequestMapping("/toAddBook")
   public String toAddPaper() {
       return "addBook";
   }
   
   @RequestMapping("/addBook")
   public String addPaper(Books books) {
       System.out.println(books);
       bookService.addBook(books);
       return "redirect:/book/allBook";
   }
   ```

5. 添加书籍页面：**addBook.jsp**

   ```
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   
   <html>
   <head>
       <title>新增书籍</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>新增书籍</small>
                   </h1>
               </div>
           </div>
       </div>
       <form action="${pageContext.request.contextPath}/book/addBook" method="post">
           书籍名称：<input type="text" name="bookName"><br><br><br>
           书籍数量：<input type="text" name="bookCounts"><br><br><br>
           书籍详情：<input type="text" name="detail"><br><br><br>
           <input type="submit" value="添加">
       </form>
   
   </div>
   ```

6. BookController 类编写 ， 方法三：修改书籍

   ```
   @RequestMapping("/toUpdateBook")
   public String toUpdateBook(Model model, int id) {
       Books books = bookService.queryBookById(id);
       System.out.println(books);
       model.addAttribute("book",books );
       return "updateBook";
   }
   
   @RequestMapping("/updateBook")
   public String updateBook(Model model, Books book) {
       bookService.updateBook(book);
       Books books = bookService.queryBookById(book.getBookID());
       model.addAttribute("books", books);
       return "redirect:/book/allBook";
   }
   ```

7. 修改书籍页面 **updateBook.jsp**

   ```
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>修改信息</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>修改信息</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <form action="${pageContext.request.contextPath}/book/updateBook" method="post">
           <input type="hidden" name="bookID" value="${book.getBookId()}"/>
           书籍名称：<input type="text" name="bookName" value="${book.getBookName()}"/>
           书籍数量：<input type="text" name="bookCounts" value="${book.getBookCounts()}"/>
           书籍详情：<input type="text" name="detail" value="${book.getDetail() }"/>
           <input type="submit" value="提交"/>
       </form>
   
   </div>
   ```

8. BookController 类编写 ， 方法四：删除书籍

   ```
   @RequestMapping("/del/{bookId}")
   public String deleteBook(@PathVariable("bookId") int id) {
       bookService.deleteBookById(id);
       return "redirect:/book/allBook";
   }
   ```

**配置Tomcat，进行运行！**

到目前为止，这个SSM项目整合已经完全的OK了，可以直接运行进行测试！这个练习十分的重要，大家需要保证，不看任何东西，自己也可以完整的实现出来！

## **6、项目结构图**

![1570186854191.png](https://blog.kuangstudy.com/usr/uploads/2019/10/1086489242.png)

![1570186868239.png](https://blog.kuangstudy.com/usr/uploads/2019/10/2326667495.png)

## 7、错误排查

### 1、访问出现404，排查步骤：**

1. 查看控制台输出，看一下是不是缺少了什么jar包。

2. 如果jar包存在，显示无法输出，就在IDEA的项目发布中，添加lib依赖！

   步骤：点击项目结构----->Artifacts----->点击自己的项目(ssm:war exploded)--->(点击工具栏的第一个)在WEB-INF目录下新建一个lib包----->选中lib------>点击工具栏的第三个然后选中第一个---->把里面的包全部选中点击ok---->点击Apply再ok

   ![image-20200128125126368](https://gitee.com/feigeCode/java_blog/raw/master/java/ssm%E6%95%B4%E5%90%88.assets/image-20200128125126368.png)

   ![image-20200128125237179](https://gitee.com/feigeCode/java_blog/raw/master/java/ssm%E6%95%B4%E5%90%88.assets/image-20200128125237179.png)

3. 重启Tomcat 即可解决！

### 2、其他错误

#### 1、bean不存在

 步骤：

 查看bean注入是否成功

 junit单元测试，看我们的代码是否能够查询出来

 问题不在底层，是我们spring出了问题

 springMVC整合时没有调用到service层的bean

 applicationContext.xml没有注册bean

 web.xml也绑定过配置文件要绑定大的applicationContext.xml



## 8、小结及展望

这个是同学们的第一个SSM整合案例，一定要烂熟于心！

SSM框架的重要程度是不言而喻的，学到这里，大家已经可以进行基本网站的单独开发。但是这只是增删改查的基本操作。可以说学到这里，大家才算是真正的步入了后台开发的门。也就是能找一个后台相关工作的底线。

或许很多人，工作就做这些事情，但是对于个人的提高来说，还远远不够！

| 飞哥 | 飞哥 | 飞哥 |
| ---- | ---- | ---- |
| 飞哥 | 飞哥 | 飞哥 |
| 飞哥 | 飞哥 | 飞哥 |
| 飞哥 | 飞哥 | 飞哥 |



~~~java
static class CustomAttributeProvider implements AttributeProvider {

        @Override
        public void setAttributes(Node node, String s, Map<String, String> map) {
            //改变a标签的target属性为_blank
            if(node instanceof Link) {
                map.put("target","_blank");
            }
            if (node instanceof TableBlock) {
                map.put("class","el-table__body-wrapper is-scrolling-none");
            }
            if (node instanceof TableBody) {
                map.put("class","el-table__body");
            }
            if (node instanceof TableRow) {
                map.put("class","el-table__row");
            }
            if (node instanceof TableCell) {
                map.put("class","el-table_13_column_55");
            }
        }
~~~

# feige

, 2020-03-02 07:06:53.0, 2020-03-13 06:59:47.0, admin, 10]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10001} closed
[DEBUG][20-03-23][druid.sql.Connection]{conn-10002} closed
[DEBUG][20-03-23][druid.sql.Connection]{conn-10003} closed
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} closed
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} closed
[DEBUG][20-03-23][druid.sql.Connection]{conn-10001} connected
[DEBUG][20-03-23][druid.sql.Connection]{conn-10002} connected
[DEBUG][20-03-23][druid.sql.Connection]{conn-10003} connected
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} connected
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} connected
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} created. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog where id=?
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} Parameters : [13]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} Types : [INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} executed. 11.588879 millis. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog where id=?
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Header: [id, type_name, title, content, create_time, change_time, author, view]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [13, mybatis, ssm框架整合, # ssm整合

## 1、数据库环境

创建一个存放书籍数据的数据库表

```
CREATE DATABASE `ssmbuild`;

USE `ssmbuild`;

DROP TABLE IF EXISTS `books`;

CREATE TABLE `books` (
  `bookId` INT PRIMARY KEY COMMENT '书id',
  `bookName` VARCHAR(100) NOT NULL COMMENT '书名',
  `bookCounts` INT(11) NOT NULL COMMENT '数量',
  ``ssmbuild``ssmbuild`` VARCHAR(200) NOT NULL COMMENT '描述'
) ENGINE=INNODB DEFAULT CHARSET=utf8

INSERT  INTO `books`(`bookId`,`bookName`,`bookCounts`,`detail`)VALUES 
(1,'Java',1,'从入门到放弃'),
(2,'MySQL',10,'从删库到跑路'),
(3,'Linux',5,'从进门到进牢');

SELECT * FROM books
```

## 2、基本环境搭建

1. 新建一Maven项目！ ssmbuild ， 添加web的支持

   ![image-20200128134359317](https://gitee.com/feigeCode/java_blog/raw/master/java/ssm%E6%95%B4%E5%90%88.assets/image-20200128134359317.png)

2. 导入相关的pom依赖！

   ```
   <dependencies>
       <!--Junit-->
       <dependency>
           <groupId>junit</groupId>
           <artifactId>junit</artifactId>
           <version>4.12</version>
       </dependency>
       <!--数据库驱动-->
       <dependency>
           <groupId>mysql</groupId>
           <artifactId>mysql-connector-java</artifactId>
           <version>5.1.47</version>
       </dependency>
       <!-- 数据库连接池 -->
       <dependency>
           <groupId>com.mchange</groupId>
           <artifactId>c3p0</artifactId>
           <version>0.9.5.2</version>
       </dependency>
   
       <!--Servlet - JSP -->
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>servlet-api</artifactId>
           <version>2.5</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet.jsp</groupId>
           <artifactId>jsp-api</artifactId>
           <version>2.2</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>jstl</artifactId>
           <version>1.2</version>
       </dependency>
   
       <!--Mybatis-->
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis</artifactId>
           <version>3.5.2</version>
       </dependency>
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis-spring</artifactId>
           <version>2.0.2</version>
       </dependency>
   
       <!--Spring-->
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-webmvc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-jdbc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->
       <dependency>
           <groupId>org.projectlombok</groupId>
           <artifactId>lombok</artifactId>
           <version>1.16.10</version>
       </dependency>
   </dependencies>
   ```

3. Maven资源过滤设置

   ```
   <build>
       <resources>
           <resource>
               <directory>src/main/java</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
           <resource>
               <directory>src/main/resources</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
       </resources>
   </build>
   ```

4. 建立基本结构和配置框架！

   - com.feige.pojo

   - com.feige.dao

   - com.feige.service

   - com.feige.controller

     在resources目录下创建

   - mybatis-config.xml

     ```
     <?xml version="1.0" encoding="UTF-8" ?>
     <!DOCTYPE configuration
             PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
             "http://mybatis.org/dtd/mybatis-3-config.dtd">
     <configuration>
     
     </configuration>
     ```

   - applicationContext.xml

     ```
     <?xml version="1.0" encoding="UTF-8"?>
     <beans xmlns="http://www.springframework.org/schema/beans"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://www.springframework.org/schema/beans
             http://www.springframework.org/schema/beans/spring-beans.xsd">
     
     </beans>
     ```

## 3、Mybatis层编写

1. 数据库配置文件 **database.properties**

   ```
   jdbc.driver=com.mysql.jdbc.Driver
   jdbc.url=jdbc:mysql://localhost:3306/ssmbuild?useSSL=true&useUnicode=true&characterEncoding=utf8
   jdbc.username=root
   jdbc.password=hufei169357
   ```

2. IDEA关联数据库

3. 编写MyBatis的核心配置文件

   ```
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE configuration
           PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-config.dtd">
   <configuration>
       
       <typeAliases>
           <package name="com.feige.pojo"/>
       </typeAliases>
       <mappers>
           <mapper resource="com/feige/dao/BookMapper.xml"/>
       </mappers>
   
   </configuration>
   ```

4. 编写数据库对应的实体类 com.feige.pojo.Books 使用lombok插件！

   ```
   package com.kuang.pojo;
   
   import lombok.AllArgsConstructor;
   import lombok.Data;
   import lombok.NoArgsConstructor;
   
   @Data
   @AllArgsConstructor
   @NoArgsConstructor
   public class Books {
       
       private int bookId;
       private String bookName;
       private int bookCounts;
       private String detail;
       
   }
   ```

5. 编写Dao层的 Mapper接口！

   ```
   package com.kuang.dao;
   
   import com.kuang.pojo.Books;
   import java.util.List;
   
   public interface BookMapper {
   
       //增加一个Book
       int addBook(Books book);
   
       //根据id删除一个Book
       int deleteBookById(int id);
   
       //更新Book
       int updateBook(Books books);
   
       //根据id查询,返回一个Book
       Books queryBookById(int id);
   
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   
   }
   ```

6. 编写接口对应的 Mapper.xml 文件。需要导入MyBatis的包；

   ```
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE mapper
           PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
   
   <mapper namespace="com.feige.dao.BooksMapper">
   
       <!--增加一个Book-->
       <insert id="addBook" parameterType="Books">
           insert into books(bookName,bookCounts,detail)
           values (#{bookName}, #{bookCounts}, #{detail})
       </insert>
   
       <!--根据id删除一个Book-->
       <delete id="deleteBookById" parameterType="int">
           delete from books where bookId=#{bookId}
       </delete>
   
       <!--更新Book-->
       <update id="updateBook" parameterType="Books">
           update books
           set bookName = #{bookName},bookCounts = #{bookCounts},detail = #{detail}
           where bookId = #{bookId}
       </update>
   
       <!--根据id查询,返回一个Book-->
       <select id="queryBookById" resultType="Books">
           select * from books
           where bookID = #{bookId}
       </select>
   
       <!--查询全部Book-->
       <select id="queryAllBook" resultType="com.feige.pojo.Books">
           SELECT * from books
       </select>
   
   </mapper>
   ```

7. 编写Service层的接口和实现类 接口：

   ```
   package com.feige.service;
   
   import com.feige.pojo.Books;
   
   import java.util.List;
   
   //BookService:底下需要去实现,调用dao层
   public interface BookService {
       //增加一个Book
       int addBook(Books book);
       //根据id删除一个Book
       int deleteBookById(int id);
       //更新Book
       int updateBook(Books books);
       //根据id查询,返回一个Book
       Books queryBookById(int id);
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   }
   ```

实现类：

```
package com.feige.service;

import com.feige.dao.BookMapper;
import com.feige.pojo.Books;
import java.util.List;

public class BookServiceImpl implements BookService {

    //调用dao层的操作，设置一个set接口，方便Spring管理
    private BookMapper bookMapper;

    public void setBookMapper(BookMapper bookMapper) {
        this.bookMapper = bookMapper;
    }
    
    public int addBook(Books book) {
        return bookMapper.addBook(book);
    }
    
    public int deleteBookById(int id) {
        return bookMapper.deleteBookById(id);
    }
    
    public int updateBook(Books books) {
        return bookMapper.updateBook(books);
    }
    
    public Books queryBookById(int id) {
        return bookMapper.queryBookById(id);
    }
    
    public List<Books> queryAllBook() {
        return bookMapper.queryAllBook();
    }
}
```

**OK，到此，底层需求操作编写完毕！**

## 4、Spring层

1. 配置**Spring整合MyBatis**，我们这里数据源使用c3p0连接池；

2. 我们去编写Spring整合Mybatis的相关的配置文件； spring-dao.xml

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans.xsd
   http://www.springframework.org/schema/context
   https://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 配置整合mybatis -->
       <!-- 1.关联数据库文件 -->
       <context:property-placeholder location="classpath:database.properties"/>
   
       <!-- 2.数据库连接池 -->
       <!--数据库连接池
   dbcp  半自动化操作  不能自动连接
   c3p0  自动化操作（自动的加载配置文件 并且设置到对象里面）
       -->
       <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
   <!-- 配置连接池属性 -->
   <property name="driverClass" value="${jdbc.driver}"/>
   <property name="jdbcUrl" value="${jdbc.url}"/>
   <property name="user" value="${jdbc.username}"/>
   <property name="password" value="${jdbc.password}"/>
   
   <!-- c3p0连接池的私有属性 -->
   <property name="maxPoolSize" value="30"/>
   <property name="minPoolSize" value="10"/>
   <!-- 关闭连接后不自动commit -->
   <property name="autoCommitOnClose" value="false"/>
   <!-- 获取连接超时时间 -->
   <property name="checkoutTimeout" value="10000"/>
   <!-- 当获取连接失败重试次数 -->
   <property name="acquireRetryAttempts" value="2"/>
       </bean>
   
       <!-- 3.配置SqlSessionFactory对象 -->
       <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource"/>
   <!-- 配置MyBaties全局配置文件:mybatis-config.xml -->
   <property name="configLocation" value="classpath:mybatis-config.xml"/>
       </bean>
   
       <!-- 4.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 -->
       <!--解释 ： https://www.cnblogs.com/jpfss/p/7799806.html-->
       <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
   <!-- 注入sqlSessionFactory -->
   <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
   <!-- 给出需要扫描Dao接口包 -->
   <property name="basePackage" value="com.feige.dao"/>
       </bean>
   
   </beans>
   ```

3. **Spring整合service层**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 扫描service相关的bean -->
       <context:component-scan base-package="com.kuang.service" />
   
       <!--BookServiceImpl注入到IOC容器中-->
       <bean id="BookServiceImpl" class="com.kuang.service.BookServiceImpl">
   <property name="bookMapper" ref="bookMapper"/>
       </bean>
   
       <!-- 配置事务管理器 -->
       <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource" />
       </bean>
   
   </beans>
   ```

Spring层搞定！再次理解一下，Spring就是一个大杂烩，一个容器！对吧！

## 5、SpringMVC层

1. **web.xml**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
            version="4.0">
   
       <!--DispatcherServlet-->
       <servlet>
           <servlet-name>DispatcherServlet</servlet-name>
           <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
           <init-param>
               <param-name>contextConfigLocation</param-name>
               <param-value>classpath:applicationContext.xml</param-value>
           </init-param>
           <load-on-startup>1</load-on-startup>
       </servlet>
       <servlet-mapping>
           <servlet-name>DispatcherServlet</servlet-name>
           <url-pattern>/</url-pattern>
       </servlet-mapping>
   
       <!--encodingFilter-->
       <filter>
           <filter-name>encodingFilter</filter-name>
           <filter-class>
               org.springframework.web.filter.CharacterEncodingFilter
           </filter-class>
           <init-param>
               <param-name>encoding</param-name>
               <param-value>utf-8</param-value>
           </init-param>
       </filter>
       <filter-mapping>
           <filter-name>encodingFilter</filter-name>
           <url-pattern>/*</url-pattern>
       </filter-mapping>
       
       <!--Session过期时间-->
       <session-config>
           <session-timeout>15</session-timeout>
       </session-config>
       
   </web-app>
   ```

2. **spring-mvc.xml**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xmlns:mvc="http://www.springframework.org/schema/mvc"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       https://www.springframework.org/schema/mvc/spring-mvc.xsd">
   
       <!-- 配置SpringMVC -->
       <!-- 1.开启SpringMVC注解驱动 -->
       <mvc:annotation-driven>
           <mvc:message-converters register-defaults="true">
               <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                   <constructor-arg value="UTF-8"/>
               </bean>
               <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                   <property name="objectMapper">
                       <bean class="org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean">
                           <property name="failOnEmptyBeans" value="false"/>
                       </bean>
                   </property>
               </bean>
           </mvc:message-converters>
       </mvc:annotation-driven>
       <!--解决跨域问题-->
       <mvc:cors>
       <mvc:mapping path="/**"
                    allowed-origins="http://127.0.0.1:8090,http://localhost:8090"
                    allowed-methods="POST,GET, OPTIONS,DELETE,PUT"
                    allowed-headers="Content-Type,ContentType,Access-Control-Allow-Headers, Authorization, X-Requested-With"
                    allow-credentials="true"/>
       </mvc:cors>
       <!-- 2.静态资源默认servlet配置-->
       <mvc:default-servlet-handler/>
   
       <!-- 3.配置jsp 显示ViewResolver视图解析器 -->
       <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
           <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
           <property name="prefix" value="/WEB-INF/jsp/" />
           <property name="suffix" value=".jsp" />
       </bean>
   
       <!-- 4.扫描web相关的bean -->
       <context:component-scan base-package="com.feige.controller" />
   
   </beans>
   ```

3. **Spring配置整合文件，applicationContext.xml**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd">
   
       <import resource="spring-dao.xml"/>
       <import resource="spring-service.xml"/>
       <import resource="spring-mvc.xml"/>
       
   </beans>
   ```

**配置文件，暂时结束！Controller 和 视图层编写**

1. BookController 类编写 ， 方法一：查询全部书籍

   ```
   @Controller
   @RequestMapping("/book")
   public class BookController {
   
       @Autowired
       @Qualifier("BookServiceImpl")
       private BookService bookService;
   
       @RequestMapping("/allBook")
       public String list(Model model) {
           List<Books> list = bookService.queryAllBook();
           model.addAttribute("list", list);
           return "allBook";
       }
   }
   ```

2. 编写首页 **index.jsp**

   ```
   <%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" %>
   <!DOCTYPE HTML>
   <html>
   <head>
       <title>首页</title>
       <style type="text/css">
           a {
               text-decoration: none;
               color: black;
               font-size: 18px;
           }
           h3 {
               width: 180px;
               height: 38px;
               margin: 100px auto;
               text-align: center;
               line-height: 38px;
               background: deepskyblue;
               border-radius: 4px;
           }
       </style>
   </head>
   <body>
   
   <h3>
       <a href="${pageContext.request.contextPath}/book/allBook">点击进入列表页</a>
   </h3>
   </body>
   </html>
   ```

3. 书籍列表页面 **allbook.jsp**

   ```
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>书籍列表</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>书籍列表 —— 显示所有书籍</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <div class="row">
           <div class="col-md-4 column">
               <a class="btn btn-primary" href="${pageContext.request.contextPath}/book/toAddBook">新增</a>
           </div>
       </div>
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <table class="table table-hover table-striped">
                   <thead>
                   <tr>
                       <th>书籍编号</th>
                       <th>书籍名字</th>
                       <th>书籍数量</th>
                       <th>书籍详情</th>
                       <th>操作</th>
                   </tr>
                   </thead>
   
                   <tbody>
                   <c:forEach var="book" items="${requestScope.get('list')}">
                       <tr>
                           <td>${book.getBookId()}</td>
                           <td>${book.getBookName()}</td>
                           <td>${book.getBookCounts()}</td>
                           <td>${book.getDetail()}</td>
                           <td>
                               <a href="${pageContext.request.contextPath}/book/toUpdateBook?id=${book.getBookId()}">更改</a> |
                               <a href="${pageContext.request.contextPath}/book/del/${book.getBookId()}">删除</a>
                           </td>
                       </tr>
                   </c:forEach>
                   </tbody>
               </table>
           </div>
       </div>
   </div>
   ```

4. BookController 类编写 ， 方法二：添加书籍

   ```
   @RequestMapping("/toAddBook")
   public String toAddPaper() {
       return "addBook";
   }
   
   @RequestMapping("/addBook")
   public String addPaper(Books books) {
       System.out.println(books);
       bookService.addBook(books);
       return "redirect:/book/allBook";
   }
   ```

5. 添加书籍页面：**addBook.jsp**

   ```
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   
   <html>
   <head>
       <title>新增书籍</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>新增书籍</small>
                   </h1>
               </div>
           </div>
       </div>
       <form action="${pageContext.request.contextPath}/book/addBook" method="post">
           书籍名称：<input type="text" name="bookName"><br><br><br>
           书籍数量：<input type="text" name="bookCounts"><br><br><br>
           书籍详情：<input type="text" name="detail"><br><br><br>
           <input type="submit" value="添加">
       </form>
   
   </div>
   ```

6. BookController 类编写 ， 方法三：修改书籍

   ```
   @RequestMapping("/toUpdateBook")
   public String toUpdateBook(Model model, int id) {
       Books books = bookService.queryBookById(id);
       System.out.println(books);
       model.addAttribute("book",books );
       return "updateBook";
   }
   
   @RequestMapping("/updateBook")
   public String updateBook(Model model, Books book) {
       bookService.updateBook(book);
       Books books = bookService.queryBookById(book.getBookID());
       model.addAttribute("books", books);
       return "redirect:/book/allBook";
   }
   ```

7. 修改书籍页面 **updateBook.jsp**

   ```
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>修改信息</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>修改信息</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <form action="${pageContext.request.contextPath}/book/updateBook" method="post">
           <input type="hidden" name="bookID" value="${book.getBookId()}"/>
           书籍名称：<input type="text" name="bookName" value="${book.getBookName()}"/>
           书籍数量：<input type="text" name="bookCounts" value="${book.getBookCounts()}"/>
           书籍详情：<input type="text" name="detail" value="${book.getDetail() }"/>
           <input type="submit" value="提交"/>
       </form>
   
   </div>
   ```

8. BookController 类编写 ， 方法四：删除书籍

   ```
   @RequestMapping("/del/{bookId}")
   public String deleteBook(@PathVariable("bookId") int id) {
       bookService.deleteBookById(id);
       return "redirect:/book/allBook";
   }
   ```

**配置Tomcat，进行运行！**

到目前为止，这个SSM项目整合已经完全的OK了，可以直接运行进行测试！这个练习十分的重要，大家需要保证，不看任何东西，自己也可以完整的实现出来！

## **6、项目结构图**

![1570186854191.png](https://blog.kuangstudy.com/usr/uploads/2019/10/1086489242.png)

![1570186868239.png](https://blog.kuangstudy.com/usr/uploads/2019/10/2326667495.png)

## 7、错误排查

### 1、访问出现404，排查步骤：**

1. 查看控制台输出，看一下是不是缺少了什么jar包。

2. 如果jar包存在，显示无法输出，就在IDEA的项目发布中，添加lib依赖！

   步骤：点击项目结构----->Artifacts----->点击自己的项目(ssm:war exploded)--->(点击工具栏的第一个)在WEB-INF目录下新建一个lib包----->选中lib------>点击工具栏的第三个然后选中第一个---->把里面的包全部选中点击ok---->点击Apply再ok

   ![image-20200128125126368](https://gitee.com/feigeCode/java_blog/raw/master/java/ssm%E6%95%B4%E5%90%88.assets/image-20200128125126368.png)

   ![image-20200128125237179](https://gitee.com/feigeCode/java_blog/raw/master/java/ssm%E6%95%B4%E5%90%88.assets/image-20200128125237179.png)

3. 重启Tomcat 即可解决！

### 2、其他错误

#### 1、bean不存在

 步骤：

 查看bean注入是否成功

 junit单元测试，看我们的代码是否能够查询出来

 问题不在底层，是我们spring出了问题

 springMVC整合时没有调用到service层的bean

 applicationContext.xml没有注册bean

 web.xml也绑定过配置文件要绑定大的applicationContext.xml



## 8、小结及展望

这个是同学们的第一个SSM整合案例，一定要烂熟于心！

SSM框架的重要程度是不言而喻的，学到这里，大家已经可以进行基本网站的单独开发。但是这只是增删改查的基本操作。可以说学到这里，大家才算是真正的步入了后台开发的门。也就是能找一个后台相关工作的底线。

或许很多人，工作就做这些事情，但是对于个人的提高来说，还远远不够！

| 飞哥 | 飞哥 | 飞哥 |
| ---- | ---- | ---- |
| 飞哥 | 飞哥 | 飞哥 |
| 飞哥 | 飞哥 | 飞哥 |
| 飞哥 | 飞哥 | 飞哥 |



~~~java
static class CustomAttributeProvider implements AttributeProvider {

        @Override
        public void setAttributes(Node node, String s, Map<String, String> map) {
            //改变a标签的target属性为_blank
            if(node instanceof Link) {
                map.put("target","_blank");
            }
            if (node instanceof TableBlock) {
                map.put("class","el-table__body-wrapper is-scrolling-none");
            }
            if (node instanceof TableBody) {
                map.put("class","el-table__body");
            }
            if (node instanceof TableRow) {
                map.put("class","el-table__row");
            }
            if (node instanceof TableCell) {
                map.put("class","el-table_13_column_55");
            }
        }
~~~

# feige

, 2020-03-02 07:06:53.0, 2020-03-13 06:59:47.0, admin, 10]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10001} closed
[DEBUG][20-03-23][druid.sql.Connection]{conn-10002} closed
[DEBUG][20-03-23][druid.sql.Connection]{conn-10003} closed
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} closed
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} closed
[DEBUG][20-03-23][druid.sql.Connection]{conn-10001} connected
[DEBUG][20-03-23][druid.sql.Connection]{conn-10002} connected
[DEBUG][20-03-23][druid.sql.Connection]{conn-10003} connected
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} connected
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} connected
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} created. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog where id=?
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} Parameters : [13]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} Types : [INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} executed. 8.174659 millis. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog where id=?
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Header: [id, type_name, title, content, create_time, change_time, author, view]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [13, mybatis, ssm框架整合, # ssm整合

## 1、数据库环境

创建一个存放书籍数据的数据库表

```
CREATE DATABASE `ssmbuild`;

USE `ssmbuild`;

DROP TABLE IF EXISTS `books`;

CREATE TABLE `books` (
  `bookId` INT PRIMARY KEY COMMENT '书id',
  `bookName` VARCHAR(100) NOT NULL COMMENT '书名',
  `bookCounts` INT(11) NOT NULL COMMENT '数量',
  ``ssmbuild``ssmbuild`` VARCHAR(200) NOT NULL COMMENT '描述'
) ENGINE=INNODB DEFAULT CHARSET=utf8

INSERT  INTO `books`(`bookId`,`bookName`,`bookCounts`,`detail`)VALUES 
(1,'Java',1,'从入门到放弃'),
(2,'MySQL',10,'从删库到跑路'),
(3,'Linux',5,'从进门到进牢');

SELECT * FROM books
```

## 2、基本环境搭建

1. 新建一Maven项目！ ssmbuild ， 添加web的支持

   ![image-20200128134359317](https://gitee.com/feigeCode/java_blog/raw/master/java/ssm%E6%95%B4%E5%90%88.assets/image-20200128134359317.png)

2. 导入相关的pom依赖！

   ```
   <dependencies>
       <!--Junit-->
       <dependency>
           <groupId>junit</groupId>
           <artifactId>junit</artifactId>
           <version>4.12</version>
       </dependency>
       <!--数据库驱动-->
       <dependency>
           <groupId>mysql</groupId>
           <artifactId>mysql-connector-java</artifactId>
           <version>5.1.47</version>
       </dependency>
       <!-- 数据库连接池 -->
       <dependency>
           <groupId>com.mchange</groupId>
           <artifactId>c3p0</artifactId>
           <version>0.9.5.2</version>
       </dependency>
   
       <!--Servlet - JSP -->
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>servlet-api</artifactId>
           <version>2.5</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet.jsp</groupId>
           <artifactId>jsp-api</artifactId>
           <version>2.2</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>jstl</artifactId>
           <version>1.2</version>
       </dependency>
   
       <!--Mybatis-->
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis</artifactId>
           <version>3.5.2</version>
       </dependency>
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis-spring</artifactId>
           <version>2.0.2</version>
       </dependency>
   
       <!--Spring-->
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-webmvc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-jdbc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->
       <dependency>
           <groupId>org.projectlombok</groupId>
           <artifactId>lombok</artifactId>
           <version>1.16.10</version>
       </dependency>
   </dependencies>
   ```

3. Maven资源过滤设置

   ```
   <build>
       <resources>
           <resource>
               <directory>src/main/java</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
           <resource>
               <directory>src/main/resources</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
       </resources>
   </build>
   ```

4. 建立基本结构和配置框架！

   - com.feige.pojo

   - com.feige.dao

   - com.feige.service

   - com.feige.controller

     在resources目录下创建

   - mybatis-config.xml

     ```
     <?xml version="1.0" encoding="UTF-8" ?>
     <!DOCTYPE configuration
             PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
             "http://mybatis.org/dtd/mybatis-3-config.dtd">
     <configuration>
     
     </configuration>
     ```

   - applicationContext.xml

     ```
     <?xml version="1.0" encoding="UTF-8"?>
     <beans xmlns="http://www.springframework.org/schema/beans"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://www.springframework.org/schema/beans
             http://www.springframework.org/schema/beans/spring-beans.xsd">
     
     </beans>
     ```

## 3、Mybatis层编写

1. 数据库配置文件 **database.properties**

   ```
   jdbc.driver=com.mysql.jdbc.Driver
   jdbc.url=jdbc:mysql://localhost:3306/ssmbuild?useSSL=true&useUnicode=true&characterEncoding=utf8
   jdbc.username=root
   jdbc.password=hufei169357
   ```

2. IDEA关联数据库

3. 编写MyBatis的核心配置文件

   ```
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE configuration
           PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-config.dtd">
   <configuration>
       
       <typeAliases>
           <package name="com.feige.pojo"/>
       </typeAliases>
       <mappers>
           <mapper resource="com/feige/dao/BookMapper.xml"/>
       </mappers>
   
   </configuration>
   ```

4. 编写数据库对应的实体类 com.feige.pojo.Books 使用lombok插件！

   ```
   package com.kuang.pojo;
   
   import lombok.AllArgsConstructor;
   import lombok.Data;
   import lombok.NoArgsConstructor;
   
   @Data
   @AllArgsConstructor
   @NoArgsConstructor
   public class Books {
       
       private int bookId;
       private String bookName;
       private int bookCounts;
       private String detail;
       
   }
   ```

5. 编写Dao层的 Mapper接口！

   ```
   package com.kuang.dao;
   
   import com.kuang.pojo.Books;
   import java.util.List;
   
   public interface BookMapper {
   
       //增加一个Book
       int addBook(Books book);
   
       //根据id删除一个Book
       int deleteBookById(int id);
   
       //更新Book
       int updateBook(Books books);
   
       //根据id查询,返回一个Book
       Books queryBookById(int id);
   
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   
   }
   ```

6. 编写接口对应的 Mapper.xml 文件。需要导入MyBatis的包；

   ```
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE mapper
           PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
   
   <mapper namespace="com.feige.dao.BooksMapper">
   
       <!--增加一个Book-->
       <insert id="addBook" parameterType="Books">
           insert into books(bookName,bookCounts,detail)
           values (#{bookName}, #{bookCounts}, #{detail})
       </insert>
   
       <!--根据id删除一个Book-->
       <delete id="deleteBookById" parameterType="int">
           delete from books where bookId=#{bookId}
       </delete>
   
       <!--更新Book-->
       <update id="updateBook" parameterType="Books">
           update books
           set bookName = #{bookName},bookCounts = #{bookCounts},detail = #{detail}
           where bookId = #{bookId}
       </update>
   
       <!--根据id查询,返回一个Book-->
       <select id="queryBookById" resultType="Books">
           select * from books
           where bookID = #{bookId}
       </select>
   
       <!--查询全部Book-->
       <select id="queryAllBook" resultType="com.feige.pojo.Books">
           SELECT * from books
       </select>
   
   </mapper>
   ```

7. 编写Service层的接口和实现类 接口：

   ```
   package com.feige.service;
   
   import com.feige.pojo.Books;
   
   import java.util.List;
   
   //BookService:底下需要去实现,调用dao层
   public interface BookService {
       //增加一个Book
       int addBook(Books book);
       //根据id删除一个Book
       int deleteBookById(int id);
       //更新Book
       int updateBook(Books books);
       //根据id查询,返回一个Book
       Books queryBookById(int id);
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   }
   ```

实现类：

```
package com.feige.service;

import com.feige.dao.BookMapper;
import com.feige.pojo.Books;
import java.util.List;

public class BookServiceImpl implements BookService {

    //调用dao层的操作，设置一个set接口，方便Spring管理
    private BookMapper bookMapper;

    public void setBookMapper(BookMapper bookMapper) {
        this.bookMapper = bookMapper;
    }
    
    public int addBook(Books book) {
        return bookMapper.addBook(book);
    }
    
    public int deleteBookById(int id) {
        return bookMapper.deleteBookById(id);
    }
    
    public int updateBook(Books books) {
        return bookMapper.updateBook(books);
    }
    
    public Books queryBookById(int id) {
        return bookMapper.queryBookById(id);
    }
    
    public List<Books> queryAllBook() {
        return bookMapper.queryAllBook();
    }
}
```

**OK，到此，底层需求操作编写完毕！**

## 4、Spring层

1. 配置**Spring整合MyBatis**，我们这里数据源使用c3p0连接池；

2. 我们去编写Spring整合Mybatis的相关的配置文件； spring-dao.xml

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans.xsd
   http://www.springframework.org/schema/context
   https://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 配置整合mybatis -->
       <!-- 1.关联数据库文件 -->
       <context:property-placeholder location="classpath:database.properties"/>
   
       <!-- 2.数据库连接池 -->
       <!--数据库连接池
   dbcp  半自动化操作  不能自动连接
   c3p0  自动化操作（自动的加载配置文件 并且设置到对象里面）
       -->
       <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
   <!-- 配置连接池属性 -->
   <property name="driverClass" value="${jdbc.driver}"/>
   <property name="jdbcUrl" value="${jdbc.url}"/>
   <property name="user" value="${jdbc.username}"/>
   <property name="password" value="${jdbc.password}"/>
   
   <!-- c3p0连接池的私有属性 -->
   <property name="maxPoolSize" value="30"/>
   <property name="minPoolSize" value="10"/>
   <!-- 关闭连接后不自动commit -->
   <property name="autoCommitOnClose" value="false"/>
   <!-- 获取连接超时时间 -->
   <property name="checkoutTimeout" value="10000"/>
   <!-- 当获取连接失败重试次数 -->
   <property name="acquireRetryAttempts" value="2"/>
       </bean>
   
       <!-- 3.配置SqlSessionFactory对象 -->
       <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource"/>
   <!-- 配置MyBaties全局配置文件:mybatis-config.xml -->
   <property name="configLocation" value="classpath:mybatis-config.xml"/>
       </bean>
   
       <!-- 4.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 -->
       <!--解释 ： https://www.cnblogs.com/jpfss/p/7799806.html-->
       <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
   <!-- 注入sqlSessionFactory -->
   <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
   <!-- 给出需要扫描Dao接口包 -->
   <property name="basePackage" value="com.feige.dao"/>
       </bean>
   
   </beans>
   ```

3. **Spring整合service层**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 扫描service相关的bean -->
       <context:component-scan base-package="com.kuang.service" />
   
       <!--BookServiceImpl注入到IOC容器中-->
       <bean id="BookServiceImpl" class="com.kuang.service.BookServiceImpl">
   <property name="bookMapper" ref="bookMapper"/>
       </bean>
   
       <!-- 配置事务管理器 -->
       <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource" />
       </bean>
   
   </beans>
   ```

Spring层搞定！再次理解一下，Spring就是一个大杂烩，一个容器！对吧！

## 5、SpringMVC层

1. **web.xml**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
            version="4.0">
   
       <!--DispatcherServlet-->
       <servlet>
           <servlet-name>DispatcherServlet</servlet-name>
           <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
           <init-param>
               <param-name>contextConfigLocation</param-name>
               <param-value>classpath:applicationContext.xml</param-value>
           </init-param>
           <load-on-startup>1</load-on-startup>
       </servlet>
       <servlet-mapping>
           <servlet-name>DispatcherServlet</servlet-name>
           <url-pattern>/</url-pattern>
       </servlet-mapping>
   
       <!--encodingFilter-->
       <filter>
           <filter-name>encodingFilter</filter-name>
           <filter-class>
               org.springframework.web.filter.CharacterEncodingFilter
           </filter-class>
           <init-param>
               <param-name>encoding</param-name>
               <param-value>utf-8</param-value>
           </init-param>
       </filter>
       <filter-mapping>
           <filter-name>encodingFilter</filter-name>
           <url-pattern>/*</url-pattern>
       </filter-mapping>
       
       <!--Session过期时间-->
       <session-config>
           <session-timeout>15</session-timeout>
       </session-config>
       
   </web-app>
   ```

2. **spring-mvc.xml**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xmlns:mvc="http://www.springframework.org/schema/mvc"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       https://www.springframework.org/schema/mvc/spring-mvc.xsd">
   
       <!-- 配置SpringMVC -->
       <!-- 1.开启SpringMVC注解驱动 -->
       <mvc:annotation-driven>
           <mvc:message-converters register-defaults="true">
               <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                   <constructor-arg value="UTF-8"/>
               </bean>
               <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                   <property name="objectMapper">
                       <bean class="org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean">
                           <property name="failOnEmptyBeans" value="false"/>
                       </bean>
                   </property>
               </bean>
           </mvc:message-converters>
       </mvc:annotation-driven>
       <!--解决跨域问题-->
       <mvc:cors>
       <mvc:mapping path="/**"
                    allowed-origins="http://127.0.0.1:8090,http://localhost:8090"
                    allowed-methods="POST,GET, OPTIONS,DELETE,PUT"
                    allowed-headers="Content-Type,ContentType,Access-Control-Allow-Headers, Authorization, X-Requested-With"
                    allow-credentials="true"/>
       </mvc:cors>
       <!-- 2.静态资源默认servlet配置-->
       <mvc:default-servlet-handler/>
   
       <!-- 3.配置jsp 显示ViewResolver视图解析器 -->
       <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
           <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
           <property name="prefix" value="/WEB-INF/jsp/" />
           <property name="suffix" value=".jsp" />
       </bean>
   
       <!-- 4.扫描web相关的bean -->
       <context:component-scan base-package="com.feige.controller" />
   
   </beans>
   ```

3. **Spring配置整合文件，applicationContext.xml**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd">
   
       <import resource="spring-dao.xml"/>
       <import resource="spring-service.xml"/>
       <import resource="spring-mvc.xml"/>
       
   </beans>
   ```

**配置文件，暂时结束！Controller 和 视图层编写**

1. BookController 类编写 ， 方法一：查询全部书籍

   ```
   @Controller
   @RequestMapping("/book")
   public class BookController {
   
       @Autowired
       @Qualifier("BookServiceImpl")
       private BookService bookService;
   
       @RequestMapping("/allBook")
       public String list(Model model) {
           List<Books> list = bookService.queryAllBook();
           model.addAttribute("list", list);
           return "allBook";
       }
   }
   ```

2. 编写首页 **index.jsp**

   ```
   <%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" %>
   <!DOCTYPE HTML>
   <html>
   <head>
       <title>首页</title>
       <style type="text/css">
           a {
               text-decoration: none;
               color: black;
               font-size: 18px;
           }
           h3 {
               width: 180px;
               height: 38px;
               margin: 100px auto;
               text-align: center;
               line-height: 38px;
               background: deepskyblue;
               border-radius: 4px;
           }
       </style>
   </head>
   <body>
   
   <h3>
       <a href="${pageContext.request.contextPath}/book/allBook">点击进入列表页</a>
   </h3>
   </body>
   </html>
   ```

3. 书籍列表页面 **allbook.jsp**

   ```
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>书籍列表</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>书籍列表 —— 显示所有书籍</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <div class="row">
           <div class="col-md-4 column">
               <a class="btn btn-primary" href="${pageContext.request.contextPath}/book/toAddBook">新增</a>
           </div>
       </div>
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <table class="table table-hover table-striped">
                   <thead>
                   <tr>
                       <th>书籍编号</th>
                       <th>书籍名字</th>
                       <th>书籍数量</th>
                       <th>书籍详情</th>
                       <th>操作</th>
                   </tr>
                   </thead>
   
                   <tbody>
                   <c:forEach var="book" items="${requestScope.get('list')}">
                       <tr>
                           <td>${book.getBookId()}</td>
                           <td>${book.getBookName()}</td>
                           <td>${book.getBookCounts()}</td>
                           <td>${book.getDetail()}</td>
                           <td>
                               <a href="${pageContext.request.contextPath}/book/toUpdateBook?id=${book.getBookId()}">更改</a> |
                               <a href="${pageContext.request.contextPath}/book/del/${book.getBookId()}">删除</a>
                           </td>
                       </tr>
                   </c:forEach>
                   </tbody>
               </table>
           </div>
       </div>
   </div>
   ```

4. BookController 类编写 ， 方法二：添加书籍

   ```
   @RequestMapping("/toAddBook")
   public String toAddPaper() {
       return "addBook";
   }
   
   @RequestMapping("/addBook")
   public String addPaper(Books books) {
       System.out.println(books);
       bookService.addBook(books);
       return "redirect:/book/allBook";
   }
   ```

5. 添加书籍页面：**addBook.jsp**

   ```
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   
   <html>
   <head>
       <title>新增书籍</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>新增书籍</small>
                   </h1>
               </div>
           </div>
       </div>
       <form action="${pageContext.request.contextPath}/book/addBook" method="post">
           书籍名称：<input type="text" name="bookName"><br><br><br>
           书籍数量：<input type="text" name="bookCounts"><br><br><br>
           书籍详情：<input type="text" name="detail"><br><br><br>
           <input type="submit" value="添加">
       </form>
   
   </div>
   ```

6. BookController 类编写 ， 方法三：修改书籍

   ```
   @RequestMapping("/toUpdateBook")
   public String toUpdateBook(Model model, int id) {
       Books books = bookService.queryBookById(id);
       System.out.println(books);
       model.addAttribute("book",books );
       return "updateBook";
   }
   
   @RequestMapping("/updateBook")
   public String updateBook(Model model, Books book) {
       bookService.updateBook(book);
       Books books = bookService.queryBookById(book.getBookID());
       model.addAttribute("books", books);
       return "redirect:/book/allBook";
   }
   ```

7. 修改书籍页面 **updateBook.jsp**

   ```
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>修改信息</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>修改信息</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <form action="${pageContext.request.contextPath}/book/updateBook" method="post">
           <input type="hidden" name="bookID" value="${book.getBookId()}"/>
           书籍名称：<input type="text" name="bookName" value="${book.getBookName()}"/>
           书籍数量：<input type="text" name="bookCounts" value="${book.getBookCounts()}"/>
           书籍详情：<input type="text" name="detail" value="${book.getDetail() }"/>
           <input type="submit" value="提交"/>
       </form>
   
   </div>
   ```

8. BookController 类编写 ， 方法四：删除书籍

   ```
   @RequestMapping("/del/{bookId}")
   public String deleteBook(@PathVariable("bookId") int id) {
       bookService.deleteBookById(id);
       return "redirect:/book/allBook";
   }
   ```

**配置Tomcat，进行运行！**

到目前为止，这个SSM项目整合已经完全的OK了，可以直接运行进行测试！这个练习十分的重要，大家需要保证，不看任何东西，自己也可以完整的实现出来！

## **6、项目结构图**

![1570186854191.png](https://blog.kuangstudy.com/usr/uploads/2019/10/1086489242.png)

![1570186868239.png](https://blog.kuangstudy.com/usr/uploads/2019/10/2326667495.png)

## 7、错误排查

### 1、访问出现404，排查步骤：**

1. 查看控制台输出，看一下是不是缺少了什么jar包。

2. 如果jar包存在，显示无法输出，就在IDEA的项目发布中，添加lib依赖！

   步骤：点击项目结构----->Artifacts----->点击自己的项目(ssm:war exploded)--->(点击工具栏的第一个)在WEB-INF目录下新建一个lib包----->选中lib------>点击工具栏的第三个然后选中第一个---->把里面的包全部选中点击ok---->点击Apply再ok

   ![image-20200128125126368](https://gitee.com/feigeCode/java_blog/raw/master/java/ssm%E6%95%B4%E5%90%88.assets/image-20200128125126368.png)

   ![image-20200128125237179](https://gitee.com/feigeCode/java_blog/raw/master/java/ssm%E6%95%B4%E5%90%88.assets/image-20200128125237179.png)

3. 重启Tomcat 即可解决！

### 2、其他错误

#### 1、bean不存在

 步骤：

 查看bean注入是否成功

 junit单元测试，看我们的代码是否能够查询出来

 问题不在底层，是我们spring出了问题

 springMVC整合时没有调用到service层的bean

 applicationContext.xml没有注册bean

 web.xml也绑定过配置文件要绑定大的applicationContext.xml



## 8、小结及展望

这个是同学们的第一个SSM整合案例，一定要烂熟于心！

SSM框架的重要程度是不言而喻的，学到这里，大家已经可以进行基本网站的单独开发。但是这只是增删改查的基本操作。可以说学到这里，大家才算是真正的步入了后台开发的门。也就是能找一个后台相关工作的底线。

或许很多人，工作就做这些事情，但是对于个人的提高来说，还远远不够！

| 飞哥 | 飞哥 | 飞哥 |
| ---- | ---- | ---- |
| 飞哥 | 飞哥 | 飞哥 |
| 飞哥 | 飞哥 | 飞哥 |
| 飞哥 | 飞哥 | 飞哥 |



~~~java
static class CustomAttributeProvider implements AttributeProvider {

        @Override
        public void setAttributes(Node node, String s, Map<String, String> map) {
            //改变a标签的target属性为_blank
            if(node instanceof Link) {
                map.put("target","_blank");
            }
            if (node instanceof TableBlock) {
                map.put("class","el-table__body-wrapper is-scrolling-none");
            }
            if (node instanceof TableBody) {
                map.put("class","el-table__body");
            }
            if (node instanceof TableRow) {
                map.put("class","el-table__row");
            }
            if (node instanceof TableCell) {
                map.put("class","el-table_13_column_55");
            }
        }
~~~

# feige

, 2020-03-02 07:06:53.0, 2020-03-13 06:59:47.0, admin, 10]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10001} closed
[DEBUG][20-03-23][druid.sql.Connection]{conn-10002} closed
[DEBUG][20-03-23][druid.sql.Connection]{conn-10003} closed
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} closed
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} closed
[DEBUG][20-03-23][druid.sql.Connection]{conn-10001} connected
[DEBUG][20-03-23][druid.sql.Connection]{conn-10002} connected
[DEBUG][20-03-23][druid.sql.Connection]{conn-10003} connected
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} connected
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} connected
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} created. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog where id=?
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} Parameters : [13]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} Types : [INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} executed. 8.418659 millis. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog where id=?
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Header: [id, type_name, title, content, create_time, change_time, author, view]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [13, mybatis, ssm整合, # ssm整合

## 1、数据库环境

创建一个存放书籍数据的数据库表

```
CREATE DATABASE `ssmbuild`;

USE `ssmbuild`;

DROP TABLE IF EXISTS `books`;

CREATE TABLE `books` (
  `bookId` INT PRIMARY KEY COMMENT '书id',
  `bookName` VARCHAR(100) NOT NULL COMMENT '书名',
  `bookCounts` INT(11) NOT NULL COMMENT '数量',
  ``ssmbuild``ssmbuild`` VARCHAR(200) NOT NULL COMMENT '描述'
) ENGINE=INNODB DEFAULT CHARSET=utf8

INSERT  INTO `books`(`bookId`,`bookName`,`bookCounts`,`detail`)VALUES 
(1,'Java',1,'从入门到放弃'),
(2,'MySQL',10,'从删库到跑路'),
(3,'Linux',5,'从进门到进牢');

SELECT * FROM books
```

## 2、基本环境搭建

1. 新建一Maven项目！ ssmbuild ， 添加web的支持

   ![image-20200128134359317](https://gitee.com/feigeCode/java_blog/raw/master/java/ssm%E6%95%B4%E5%90%88.assets/image-20200128134359317.png)

2. 导入相关的pom依赖！

   ```
   <dependencies>
       <!--Junit-->
       <dependency>
           <groupId>junit</groupId>
           <artifactId>junit</artifactId>
           <version>4.12</version>
       </dependency>
       <!--数据库驱动-->
       <dependency>
           <groupId>mysql</groupId>
           <artifactId>mysql-connector-java</artifactId>
           <version>5.1.47</version>
       </dependency>
       <!-- 数据库连接池 -->
       <dependency>
           <groupId>com.mchange</groupId>
           <artifactId>c3p0</artifactId>
           <version>0.9.5.2</version>
       </dependency>
   
       <!--Servlet - JSP -->
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>servlet-api</artifactId>
           <version>2.5</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet.jsp</groupId>
           <artifactId>jsp-api</artifactId>
           <version>2.2</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>jstl</artifactId>
           <version>1.2</version>
       </dependency>
   
       <!--Mybatis-->
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis</artifactId>
           <version>3.5.2</version>
       </dependency>
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis-spring</artifactId>
           <version>2.0.2</version>
       </dependency>
   
       <!--Spring-->
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-webmvc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-jdbc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->
       <dependency>
           <groupId>org.projectlombok</groupId>
           <artifactId>lombok</artifactId>
           <version>1.16.10</version>
       </dependency>
   </dependencies>
   ```

3. Maven资源过滤设置

   ```
   <build>
       <resources>
           <resource>
               <directory>src/main/java</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
           <resource>
               <directory>src/main/resources</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
       </resources>
   </build>
   ```

4. 建立基本结构和配置框架！

   - com.feige.pojo

   - com.feige.dao

   - com.feige.service

   - com.feige.controller

     在resources目录下创建

   - mybatis-config.xml

     ```
     <?xml version="1.0" encoding="UTF-8" ?>
     <!DOCTYPE configuration
             PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
             "http://mybatis.org/dtd/mybatis-3-config.dtd">
     <configuration>
     
     </configuration>
     ```

   - applicationContext.xml

     ```
     <?xml version="1.0" encoding="UTF-8"?>
     <beans xmlns="http://www.springframework.org/schema/beans"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://www.springframework.org/schema/beans
             http://www.springframework.org/schema/beans/spring-beans.xsd">
     
     </beans>
     ```

## 3、Mybatis层编写

1. 数据库配置文件 **database.properties**

   ```
   jdbc.driver=com.mysql.jdbc.Driver
   jdbc.url=jdbc:mysql://localhost:3306/ssmbuild?useSSL=true&useUnicode=true&characterEncoding=utf8
   jdbc.username=root
   jdbc.password=hufei169357
   ```

2. IDEA关联数据库

3. 编写MyBatis的核心配置文件

   ```
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE configuration
           PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-config.dtd">
   <configuration>
       
       <typeAliases>
           <package name="com.feige.pojo"/>
       </typeAliases>
       <mappers>
           <mapper resource="com/feige/dao/BookMapper.xml"/>
       </mappers>
   
   </configuration>
   ```

4. 编写数据库对应的实体类 com.feige.pojo.Books 使用lombok插件！

   ```
   package com.kuang.pojo;
   
   import lombok.AllArgsConstructor;
   import lombok.Data;
   import lombok.NoArgsConstructor;
   
   @Data
   @AllArgsConstructor
   @NoArgsConstructor
   public class Books {
       
       private int bookId;
       private String bookName;
       private int bookCounts;
       private String detail;
       
   }
   ```

5. 编写Dao层的 Mapper接口！

   ```
   package com.kuang.dao;
   
   import com.kuang.pojo.Books;
   import java.util.List;
   
   public interface BookMapper {
   
       //增加一个Book
       int addBook(Books book);
   
       //根据id删除一个Book
       int deleteBookById(int id);
   
       //更新Book
       int updateBook(Books books);
   
       //根据id查询,返回一个Book
       Books queryBookById(int id);
   
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   
   }
   ```

6. 编写接口对应的 Mapper.xml 文件。需要导入MyBatis的包；

   ```
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE mapper
           PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
   
   <mapper namespace="com.feige.dao.BooksMapper">
   
       <!--增加一个Book-->
       <insert id="addBook" parameterType="Books">
           insert into books(bookName,bookCounts,detail)
           values (#{bookName}, #{bookCounts}, #{detail})
       </insert>
   
       <!--根据id删除一个Book-->
       <delete id="deleteBookById" parameterType="int">
           delete from books where bookId=#{bookId}
       </delete>
   
       <!--更新Book-->
       <update id="updateBook" parameterType="Books">
           update books
           set bookName = #{bookName},bookCounts = #{bookCounts},detail = #{detail}
           where bookId = #{bookId}
       </update>
   
       <!--根据id查询,返回一个Book-->
       <select id="queryBookById" resultType="Books">
           select * from books
           where bookID = #{bookId}
       </select>
   
       <!--查询全部Book-->
       <select id="queryAllBook" resultType="com.feige.pojo.Books">
           SELECT * from books
       </select>
   
   </mapper>
   ```

7. 编写Service层的接口和实现类 接口：

   ```
   package com.feige.service;
   
   import com.feige.pojo.Books;
   
   import java.util.List;
   
   //BookService:底下需要去实现,调用dao层
   public interface BookService {
       //增加一个Book
       int addBook(Books book);
       //根据id删除一个Book
       int deleteBookById(int id);
       //更新Book
       int updateBook(Books books);
       //根据id查询,返回一个Book
       Books queryBookById(int id);
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   }
   ```

实现类：

```
package com.feige.service;

import com.feige.dao.BookMapper;
import com.feige.pojo.Books;
import java.util.List;

public class BookServiceImpl implements BookService {

    //调用dao层的操作，设置一个set接口，方便Spring管理
    private BookMapper bookMapper;

    public void setBookMapper(BookMapper bookMapper) {
        this.bookMapper = bookMapper;
    }
    
    public int addBook(Books book) {
        return bookMapper.addBook(book);
    }
    
    public int deleteBookById(int id) {
        return bookMapper.deleteBookById(id);
    }
    
    public int updateBook(Books books) {
        return bookMapper.updateBook(books);
    }
    
    public Books queryBookById(int id) {
        return bookMapper.queryBookById(id);
    }
    
    public List<Books> queryAllBook() {
        return bookMapper.queryAllBook();
    }
}
```

**OK，到此，底层需求操作编写完毕！**

## 4、Spring层

1. 配置**Spring整合MyBatis**，我们这里数据源使用c3p0连接池；

2. 我们去编写Spring整合Mybatis的相关的配置文件； spring-dao.xml

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans.xsd
   http://www.springframework.org/schema/context
   https://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 配置整合mybatis -->
       <!-- 1.关联数据库文件 -->
       <context:property-placeholder location="classpath:database.properties"/>
   
       <!-- 2.数据库连接池 -->
       <!--数据库连接池
   dbcp  半自动化操作  不能自动连接
   c3p0  自动化操作（自动的加载配置文件 并且设置到对象里面）
       -->
       <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
   <!-- 配置连接池属性 -->
   <property name="driverClass" value="${jdbc.driver}"/>
   <property name="jdbcUrl" value="${jdbc.url}"/>
   <property name="user" value="${jdbc.username}"/>
   <property name="password" value="${jdbc.password}"/>
   
   <!-- c3p0连接池的私有属性 -->
   <property name="maxPoolSize" value="30"/>
   <property name="minPoolSize" value="10"/>
   <!-- 关闭连接后不自动commit -->
   <property name="autoCommitOnClose" value="false"/>
   <!-- 获取连接超时时间 -->
   <property name="checkoutTimeout" value="10000"/>
   <!-- 当获取连接失败重试次数 -->
   <property name="acquireRetryAttempts" value="2"/>
       </bean>
   
       <!-- 3.配置SqlSessionFactory对象 -->
       <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource"/>
   <!-- 配置MyBaties全局配置文件:mybatis-config.xml -->
   <property name="configLocation" value="classpath:mybatis-config.xml"/>
       </bean>
   
       <!-- 4.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 -->
       <!--解释 ： https://www.cnblogs.com/jpfss/p/7799806.html-->
       <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
   <!-- 注入sqlSessionFactory -->
   <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
   <!-- 给出需要扫描Dao接口包 -->
   <property name="basePackage" value="com.feige.dao"/>
       </bean>
   
   </beans>
   ```

3. **Spring整合service层**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 扫描service相关的bean -->
       <context:component-scan base-package="com.kuang.service" />
   
       <!--BookServiceImpl注入到IOC容器中-->
       <bean id="BookServiceImpl" class="com.kuang.service.BookServiceImpl">
   <property name="bookMapper" ref="bookMapper"/>
       </bean>
   
       <!-- 配置事务管理器 -->
       <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource" />
       </bean>
   
   </beans>
   ```

Spring层搞定！再次理解一下，Spring就是一个大杂烩，一个容器！对吧！

## 5、SpringMVC层

1. **web.xml**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
            version="4.0">
   
       <!--DispatcherServlet-->
       <servlet>
           <servlet-name>DispatcherServlet</servlet-name>
           <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
           <init-param>
               <param-name>contextConfigLocation</param-name>
               <param-value>classpath:applicationContext.xml</param-value>
           </init-param>
           <load-on-startup>1</load-on-startup>
       </servlet>
       <servlet-mapping>
           <servlet-name>DispatcherServlet</servlet-name>
           <url-pattern>/</url-pattern>
       </servlet-mapping>
   
       <!--encodingFilter-->
       <filter>
           <filter-name>encodingFilter</filter-name>
           <filter-class>
               org.springframework.web.filter.CharacterEncodingFilter
           </filter-class>
           <init-param>
               <param-name>encoding</param-name>
               <param-value>utf-8</param-value>
           </init-param>
       </filter>
       <filter-mapping>
           <filter-name>encodingFilter</filter-name>
           <url-pattern>/*</url-pattern>
       </filter-mapping>
       
       <!--Session过期时间-->
       <session-config>
           <session-timeout>15</session-timeout>
       </session-config>
       
   </web-app>
   ```

2. **spring-mvc.xml**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xmlns:mvc="http://www.springframework.org/schema/mvc"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       https://www.springframework.org/schema/mvc/spring-mvc.xsd">
   
       <!-- 配置SpringMVC -->
       <!-- 1.开启SpringMVC注解驱动 -->
       <mvc:annotation-driven>
           <mvc:message-converters register-defaults="true">
               <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                   <constructor-arg value="UTF-8"/>
               </bean>
               <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                   <property name="objectMapper">
                       <bean class="org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean">
                           <property name="failOnEmptyBeans" value="false"/>
                       </bean>
                   </property>
               </bean>
           </mvc:message-converters>
       </mvc:annotation-driven>
       <!--解决跨域问题-->
       <mvc:cors>
       <mvc:mapping path="/**"
                    allowed-origins="http://127.0.0.1:8090,http://localhost:8090"
                    allowed-methods="POST,GET, OPTIONS,DELETE,PUT"
                    allowed-headers="Content-Type,ContentType,Access-Control-Allow-Headers, Authorization, X-Requested-With"
                    allow-credentials="true"/>
       </mvc:cors>
       <!-- 2.静态资源默认servlet配置-->
       <mvc:default-servlet-handler/>
   
       <!-- 3.配置jsp 显示ViewResolver视图解析器 -->
       <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
           <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
           <property name="prefix" value="/WEB-INF/jsp/" />
           <property name="suffix" value=".jsp" />
       </bean>
   
       <!-- 4.扫描web相关的bean -->
       <context:component-scan base-package="com.feige.controller" />
   
   </beans>
   ```

3. **Spring配置整合文件，applicationContext.xml**

   ```
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd">
   
       <import resource="spring-dao.xml"/>
       <import resource="spring-service.xml"/>
       <import resource="spring-mvc.xml"/>
       
   </beans>
   ```

**配置文件，暂时结束！Controller 和 视图层编写**

1. BookController 类编写 ， 方法一：查询全部书籍

   ```
   @Controller
   @RequestMapping("/book")
   public class BookController {
   
       @Autowired
       @Qualifier("BookServiceImpl")
       private BookService bookService;
   
       @RequestMapping("/allBook")
       public String list(Model model) {
           List<Books> list = bookService.queryAllBook();
           model.addAttribute("list", list);
           return "allBook";
       }
   }
   ```

2. 编写首页 **index.jsp**

   ```
   <%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" %>
   <!DOCTYPE HTML>
   <html>
   <head>
       <title>首页</title>
       <style type="text/css">
           a {
               text-decoration: none;
               color: black;
               font-size: 18px;
           }
           h3 {
               width: 180px;
               height: 38px;
               margin: 100px auto;
               text-align: center;
               line-height: 38px;
               background: deepskyblue;
               border-radius: 4px;
           }
       </style>
   </head>
   <body>
   
   <h3>
       <a href="${pageContext.request.contextPath}/book/allBook">点击进入列表页</a>
   </h3>
   </body>
   </html>
   ```

3. 书籍列表页面 **allbook.jsp**

   ```
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>书籍列表</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>书籍列表 —— 显示所有书籍</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <div class="row">
           <div class="col-md-4 column">
               <a class="btn btn-primary" href="${pageContext.request.contextPath}/book/toAddBook">新增</a>
           </div>
       </div>
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <table class="table table-hover table-striped">
                   <thead>
                   <tr>
                       <th>书籍编号</th>
                       <th>书籍名字</th>
                       <th>书籍数量</th>
                       <th>书籍详情</th>
                       <th>操作</th>
                   </tr>
                   </thead>
   
                   <tbody>
                   <c:forEach var="book" items="${requestScope.get('list')}">
                       <tr>
                           <td>${book.getBookId()}</td>
                           <td>${book.getBookName()}</td>
                           <td>${book.getBookCounts()}</td>
                           <td>${book.getDetail()}</td>
                           <td>
                               <a href="${pageContext.request.contextPath}/book/toUpdateBook?id=${book.getBookId()}">更改</a> |
                               <a href="${pageContext.request.contextPath}/book/del/${book.getBookId()}">删除</a>
                           </td>
                       </tr>
                   </c:forEach>
                   </tbody>
               </table>
           </div>
       </div>
   </div>
   ```

4. BookController 类编写 ， 方法二：添加书籍

   ```
   @RequestMapping("/toAddBook")
   public String toAddPaper() {
       return "addBook";
   }
   
   @RequestMapping("/addBook")
   public String addPaper(Books books) {
       System.out.println(books);
       bookService.addBook(books);
       return "redirect:/book/allBook";
   }
   ```

5. 添加书籍页面：**addBook.jsp**

   ```
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   
   <html>
   <head>
       <title>新增书籍</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>新增书籍</small>
                   </h1>
               </div>
           </div>
       </div>
       <form action="${pageContext.request.contextPath}/book/addBook" method="post">
           书籍名称：<input type="text" name="bookName"><br><br><br>
           书籍数量：<input type="text" name="bookCounts"><br><br><br>
           书籍详情：<input type="text" name="detail"><br><br><br>
           <input type="submit" value="添加">
       </form>
   
   </div>
   ```

6. BookController 类编写 ， 方法三：修改书籍

   ```
   @RequestMapping("/toUpdateBook")
   public String toUpdateBook(Model model, int id) {
       Books books = bookService.queryBookById(id);
       System.out.println(books);
       model.addAttribute("book",books );
       return "updateBook";
   }
   
   @RequestMapping("/updateBook")
   public String updateBook(Model model, Books book) {
       bookService.updateBook(book);
       Books books = bookService.queryBookById(book.getBookID());
       model.addAttribute("books", books);
       return "redirect:/book/allBook";
   }
   ```

7. 修改书籍页面 **updateBook.jsp**

   ```
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>修改信息</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>修改信息</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <form action="${pageContext.request.contextPath}/book/updateBook" method="post">
           <input type="hidden" name="bookID" value="${book.getBookId()}"/>
           书籍名称：<input type="text" name="bookName" value="${book.getBookName()}"/>
           书籍数量：<input type="text" name="bookCounts" value="${book.getBookCounts()}"/>
           书籍详情：<input type="text" name="detail" value="${book.getDetail() }"/>
           <input type="submit" value="提交"/>
       </form>
   
   </div>
   ```

8. BookController 类编写 ， 方法四：删除书籍

   ```
   @RequestMapping("/del/{bookId}")
   public String deleteBook(@PathVariable("bookId") int id) {
       bookService.deleteBookById(id);
       return "redirect:/book/allBook";
   }
   ```

**配置Tomcat，进行运行！**

到目前为止，这个SSM项目整合已经完全的OK了，可以直接运行进行测试！这个练习十分的重要，大家需要保证，不看任何东西，自己也可以完整的实现出来！

## **6、项目结构图**

![1570186854191.png](https://blog.kuangstudy.com/usr/uploads/2019/10/1086489242.png)

![1570186868239.png](https://blog.kuangstudy.com/usr/uploads/2019/10/2326667495.png)

## 7、错误排查

### 1、访问出现404，排查步骤：**

1. 查看控制台输出，看一下是不是缺少了什么jar包。

2. 如果jar包存在，显示无法输出，就在IDEA的项目发布中，添加lib依赖！

   步骤：点击项目结构----->Artifacts----->点击自己的项目(ssm:war exploded)--->(点击工具栏的第一个)在WEB-INF目录下新建一个lib包----->选中lib------>点击工具栏的第三个然后选中第一个---->把里面的包全部选中点击ok---->点击Apply再ok

   ![image-20200128125126368](https://gitee.com/feigeCode/java_blog/raw/master/java/ssm%E6%95%B4%E5%90%88.assets/image-20200128125126368.png)

   ![image-20200128125237179](https://gitee.com/feigeCode/java_blog/raw/master/java/ssm%E6%95%B4%E5%90%88.assets/image-20200128125237179.png)

3. 重启Tomcat 即可解决！

### 2、其他错误

#### 1、bean不存在

 步骤：

 查看bean注入是否成功

 junit单元测试，看我们的代码是否能够查询出来

 问题不在底层，是我们spring出了问题

 springMVC整合时没有调用到service层的bean

 applicationContext.xml没有注册bean

 web.xml也绑定过配置文件要绑定大的applicationContext.xml



## 8、小结及展望

这个是同学们的第一个SSM整合案例，一定要烂熟于心！

SSM框架的重要程度是不言而喻的，学到这里，大家已经可以进行基本网站的单独开发。但是这只是增删改查的基本操作。可以说学到这里，大家才算是真正的步入了后台开发的门。也就是能找一个后台相关工作的底线。

或许很多人，工作就做这些事情，但是对于个人的提高来说，还远远不够！

| 飞哥 | 飞哥 | 飞哥 |
| ---- | ---- | ---- |
| 飞哥 | 飞哥 | 飞哥 |
| 飞哥 | 飞哥 | 飞哥 |
| 飞哥 | 飞哥 | 飞哥 |



~~~java
static class CustomAttributeProvider implements AttributeProvider {

        @Override
        public void setAttributes(Node node, String s, Map<String, String> map) {
            //改变a标签的target属性为_blank
            if(node instanceof Link) {
                map.put("target","_blank");
            }
            if (node instanceof TableBlock) {
                map.put("class","el-table__body-wrapper is-scrolling-none");
            }
            if (node instanceof TableBody) {
                map.put("class","el-table__body");
            }
            if (node instanceof TableRow) {
                map.put("class","el-table__row");
            }
            if (node instanceof TableCell) {
                map.put("class","el-table_13_column_55");
            }
        }
~~~

# feige

# ssm整合

## 1、数据库环境

创建一个存放书籍数据的数据库表

```sql
CREATE DATABASE `ssmbuild`;

USE `ssmbuild`;

DROP TABLE IF EXISTS `books`;

CREATE TABLE `books` (
  `bookId` INT PRIMARY KEY COMMENT '书id',
  `bookName` VARCHAR(100) NOT NULL COMMENT '书名',
  `bookCounts` INT(11) NOT NULL COMMENT '数量',
  ``ssmbuild``ssmbuild`` VARCHAR(200) NOT NULL COMMENT '描述'
) ENGINE=INNODB DEFAULT CHARSET=utf8

INSERT  INTO `books`(`bookId`,`bookName`,`bookCounts`,`detail`)VALUES 
(1,'Java',1,'从入门到放弃'),
(2,'MySQL',10,'从删库到跑路'),
(3,'Linux',5,'从进门到进牢');

SELECT * FROM books
```

## 2、基本环境搭建

1. 新建一Maven项目！ ssmbuild ， 添加web的支持

   ![image-20200128134359317](./ssm整合.assets/image-20200128134359317.png)

2. 导入相关的pom依赖！

   ```xml
   <dependencies>
       <!--Junit-->
       <dependency>
           <groupId>junit</groupId>
           <artifactId>junit</artifactId>
           <version>4.12</version>
       </dependency>
       <!--数据库驱动-->
       <dependency>
           <groupId>mysql</groupId>
           <artifactId>mysql-connector-java</artifactId>
           <version>5.1.47</version>
       </dependency>
       <!-- 数据库连接池 -->
       <dependency>
           <groupId>com.mchange</groupId>
           <artifactId>c3p0</artifactId>
           <version>0.9.5.2</version>
       </dependency>
   
       <!--Servlet - JSP -->
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>servlet-api</artifactId>
           <version>2.5</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet.jsp</groupId>
           <artifactId>jsp-api</artifactId>
           <version>2.2</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>jstl</artifactId>
           <version>1.2</version>
       </dependency>
   
       <!--Mybatis-->
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis</artifactId>
           <version>3.5.2</version>
       </dependency>
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis-spring</artifactId>
           <version>2.0.2</version>
       </dependency>
   
       <!--Spring-->
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-webmvc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-jdbc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->
       <dependency>
           <groupId>org.projectlombok</groupId>
           <artifactId>lombok</artifactId>
           <version>1.16.10</version>
       </dependency>
   </dependencies>
   ```

3. Maven资源过滤设置

   ```xml
   <build>
       <resources>
           <resource>
               <directory>src/main/java</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
           <resource>
               <directory>src/main/resources</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
       </resources>
   </build>
   ```

4. 建立基本结构和配置框架！

   - com.feige.pojo

   - com.feige.dao

   - com.feige.service

   - com.feige.controller

     在resources目录下创建

   - mybatis-config.xml

     ```xml
     <?xml version="1.0" encoding="UTF-8" ?>
     <!DOCTYPE configuration
             PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
             "http://mybatis.org/dtd/mybatis-3-config.dtd">
     <configuration>
     
     </configuration>
     ```

   - applicationContext.xml

     ```xml
     <?xml version="1.0" encoding="UTF-8"?>
     <beans xmlns="http://www.springframework.org/schema/beans"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://www.springframework.org/schema/beans
             http://www.springframework.org/schema/beans/spring-beans.xsd">
     
     </beans>
     ```

## 3、Mybatis层编写

1. 数据库配置文件 **database.properties**

   ```properties
   jdbc.driver=com.mysql.jdbc.Driver
   jdbc.url=jdbc:mysql://localhost:3306/ssmbuild?useSSL=true&useUnicode=true&characterEncoding=utf8
   jdbc.username=root
   jdbc.password=hufei169357
   ```

2. IDEA关联数据库

3. 编写MyBatis的核心配置文件

   ```xml
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE configuration
           PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-config.dtd">
   <configuration>
       
       <typeAliases>
           <package name="com.feige.pojo"/>
       </typeAliases>
       <mappers>
           <mapper resource="com/feige/dao/BookMapper.xml"/>
       </mappers>
   
   </configuration>
   ```

4. 编写数据库对应的实体类 com.feige.pojo.Books
   使用lombok插件！

   ```java
   package com.kuang.pojo;
   
   import lombok.AllArgsConstructor;
   import lombok.Data;
   import lombok.NoArgsConstructor;
   
   @Data
   @AllArgsConstructor
   @NoArgsConstructor
   public class Books {
       
       private int bookId;
       private String bookName;
       private int bookCounts;
       private String detail;
       
   }
   ```

5. 编写Dao层的 Mapper接口！

   ```java
   package com.kuang.dao;
   
   import com.kuang.pojo.Books;
   import java.util.List;
   
   public interface BookMapper {
   
       //增加一个Book
       int addBook(Books book);
   
       //根据id删除一个Book
       int deleteBookById(int id);
   
       //更新Book
       int updateBook(Books books);
   
       //根据id查询,返回一个Book
       Books queryBookById(int id);
   
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   
   }
   ```

6. 编写接口对应的 Mapper.xml 文件。需要导入MyBatis的包；

   ```xml
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE mapper
           PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
   
   <mapper namespace="com.feige.dao.BooksMapper">
   
       <!--增加一个Book-->
       <insert id="addBook" parameterType="Books">
           insert into books(bookName,bookCounts,detail)
           values (#{bookName}, #{bookCounts}, #{detail})
       </insert>
   
       <!--根据id删除一个Book-->
       <delete id="deleteBookById" parameterType="int">
           delete from books where bookId=#{bookId}
       </delete>
   
       <!--更新Book-->
       <update id="updateBook" parameterType="Books">
           update books
           set bookName = #{bookName},bookCounts = #{bookCounts},detail = #{detail}
           where bookId = #{bookId}
       </update>
   
       <!--根据id查询,返回一个Book-->
       <select id="queryBookById" resultType="Books">
           select * from books
           where bookID = #{bookId}
       </select>
   
       <!--查询全部Book-->
       <select id="queryAllBook" resultType="com.feige.pojo.Books">
           SELECT * from books
       </select>
   
   </mapper>
   ```

7. 编写Service层的接口和实现类
   接口：

   ```java
   package com.feige.service;
   
   import com.feige.pojo.Books;
   
   import java.util.List;
   
   //BookService:底下需要去实现,调用dao层
   public interface BookService {
       //增加一个Book
       int addBook(Books book);
       //根据id删除一个Book
       int deleteBookById(int id);
       //更新Book
       int updateBook(Books books);
       //根据id查询,返回一个Book
       Books queryBookById(int id);
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   }
   ```

实现类：

```java
package com.feige.service;

import com.feige.dao.BookMapper;
import com.feige.pojo.Books;
import java.util.List;

public class BookServiceImpl implements BookService {

    //调用dao层的操作，设置一个set接口，方便Spring管理
    private BookMapper bookMapper;

    public void setBookMapper(BookMapper bookMapper) {
        this.bookMapper = bookMapper;
    }
    
    public int addBook(Books book) {
        return bookMapper.addBook(book);
    }
    
    public int deleteBookById(int id) {
        return bookMapper.deleteBookById(id);
    }
    
    public int updateBook(Books books) {
        return bookMapper.updateBook(books);
    }
    
    public Books queryBookById(int id) {
        return bookMapper.queryBookById(id);
    }
    
    public List<Books> queryAllBook() {
        return bookMapper.queryAllBook();
    }
}
```

**OK，到此，底层需求操作编写完毕！**

## 4、Spring层

1. 配置**Spring整合MyBatis**，我们这里数据源使用c3p0连接池；

2. 我们去编写Spring整合Mybatis的相关的配置文件； spring-dao.xml

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans.xsd
   http://www.springframework.org/schema/context
   https://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 配置整合mybatis -->
       <!-- 1.关联数据库文件 -->
       <context:property-placeholder location="classpath:database.properties"/>
   
       <!-- 2.数据库连接池 -->
       <!--数据库连接池
   dbcp  半自动化操作  不能自动连接
   c3p0  自动化操作（自动的加载配置文件 并且设置到对象里面）
       -->
       <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
   <!-- 配置连接池属性 -->
   <property name="driverClass" value="${jdbc.driver}"/>
   <property name="jdbcUrl" value="${jdbc.url}"/>
   <property name="user" value="${jdbc.username}"/>
   <property name="password" value="${jdbc.password}"/>
   
   <!-- c3p0连接池的私有属性 -->
   <property name="maxPoolSize" value="30"/>
   <property name="minPoolSize" value="10"/>
   <!-- 关闭连接后不自动commit -->
   <property name="autoCommitOnClose" value="false"/>
   <!-- 获取连接超时时间 -->
   <property name="checkoutTimeout" value="10000"/>
   <!-- 当获取连接失败重试次数 -->
   <property name="acquireRetryAttempts" value="2"/>
       </bean>
   
       <!-- 3.配置SqlSessionFactory对象 -->
       <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource"/>
   <!-- 配置MyBaties全局配置文件:mybatis-config.xml -->
   <property name="configLocation" value="classpath:mybatis-config.xml"/>
       </bean>
   
       <!-- 4.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 -->
       <!--解释 ： https://www.cnblogs.com/jpfss/p/7799806.html-->
       <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
   <!-- 注入sqlSessionFactory -->
   <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
   <!-- 给出需要扫描Dao接口包 -->
   <property name="basePackage" value="com.feige.dao"/>
       </bean>
   
   </beans>
   ```

3. **Spring整合service层**

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 扫描service相关的bean -->
       <context:component-scan base-package="com.kuang.service" />
   
       <!--BookServiceImpl注入到IOC容器中-->
       <bean id="BookServiceImpl" class="com.kuang.service.BookServiceImpl">
   <property name="bookMapper" ref="bookMapper"/>
       </bean>
   
       <!-- 配置事务管理器 -->
       <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource" />
       </bean>
   
   </beans>
   ```

Spring层搞定！再次理解一下，Spring就是一个大杂烩，一个容器！对吧！

## 5、SpringMVC层

1. **web.xml**

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
            version="4.0">
   
       <!--DispatcherServlet-->
       <servlet>
           <servlet-name>DispatcherServlet</servlet-name>
           <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
           <init-param>
               <param-name>contextConfigLocation</param-name>
               <param-value>classpath:applicationContext.xml</param-value>
           </init-param>
           <load-on-startup>1</load-on-startup>
       </servlet>
       <servlet-mapping>
           <servlet-name>DispatcherServlet</servlet-name>
           <url-pattern>/</url-pattern>
       </servlet-mapping>
   
       <!--encodingFilter-->
       <filter>
           <filter-name>encodingFilter</filter-name>
           <filter-class>
               org.springframework.web.filter.CharacterEncodingFilter
           </filter-class>
           <init-param>
               <param-name>encoding</param-name>
               <param-value>utf-8</param-value>
           </init-param>
       </filter>
       <filter-mapping>
           <filter-name>encodingFilter</filter-name>
           <url-pattern>/*</url-pattern>
       </filter-mapping>
       
       <!--Session过期时间-->
       <session-config>
           <session-timeout>15</session-timeout>
       </session-config>
       
   </web-app>
   ```

2. **spring-mvc.xml**

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xmlns:mvc="http://www.springframework.org/schema/mvc"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       https://www.springframework.org/schema/mvc/spring-mvc.xsd">
   
       <!-- 配置SpringMVC -->
       <!-- 1.开启SpringMVC注解驱动 -->
       <mvc:annotation-driven>
           <mvc:message-converters register-defaults="true">
               <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                   <constructor-arg value="UTF-8"/>
               </bean>
               <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                   <property name="objectMapper">
                       <bean class="org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean">
                           <property name="failOnEmptyBeans" value="false"/>
                       </bean>
                   </property>
               </bean>
           </mvc:message-converters>
       </mvc:annotation-driven>
       <!--解决跨域问题-->
       <mvc:cors>
       <mvc:mapping path="/**"
                    allowed-origins="http://127.0.0.1:8090,http://localhost:8090"
                    allowed-methods="POST,GET, OPTIONS,DELETE,PUT"
                    allowed-headers="Content-Type,ContentType,Access-Control-Allow-Headers, Authorization, X-Requested-With"
                    allow-credentials="true"/>
       </mvc:cors>
       <!-- 2.静态资源默认servlet配置-->
       <mvc:default-servlet-handler/>
   
       <!-- 3.配置jsp 显示ViewResolver视图解析器 -->
       <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
           <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
           <property name="prefix" value="/WEB-INF/jsp/" />
           <property name="suffix" value=".jsp" />
       </bean>
   
       <!-- 4.扫描web相关的bean -->
       <context:component-scan base-package="com.feige.controller" />
   
   </beans>
   ```

3. **Spring配置整合文件，applicationContext.xml**

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd">
   
       <import resource="spring-dao.xml"/>
       <import resource="spring-service.xml"/>
       <import resource="spring-mvc.xml"/>
       
   </beans>
   ```

**配置文件，暂时结束！Controller 和 视图层编写**

1. BookController 类编写 ， 方法一：查询全部书籍

   ```java
   @Controller
   @RequestMapping("/book")
   public class BookController {
   
       @Autowired
       @Qualifier("BookServiceImpl")
       private BookService bookService;
   
       @RequestMapping("/allBook")
       public String list(Model model) {
           List<Books> list = bookService.queryAllBook();
           model.addAttribute("list", list);
           return "allBook";
       }
   }
   ```

2. 编写首页 **index.jsp**

   ```html
   <%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" %>
   <!DOCTYPE HTML>
   <html>
   <head>
       <title>首页</title>
       <style type="text/css">
           a {
               text-decoration: none;
               color: black;
               font-size: 18px;
           }
           h3 {
               width: 180px;
               height: 38px;
               margin: 100px auto;
               text-align: center;
               line-height: 38px;
               background: deepskyblue;
               border-radius: 4px;
           }
       </style>
   </head>
   <body>
   
   <h3>
       <a href="${pageContext.request.contextPath}/book/allBook">点击进入列表页</a>
   </h3>
   </body>
   </html>
   ```

3. 书籍列表页面 **allbook.jsp**

   ```jsp
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>书籍列表</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>书籍列表 —— 显示所有书籍</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <div class="row">
           <div class="col-md-4 column">
               <a class="btn btn-primary" href="${pageContext.request.contextPath}/book/toAddBook">新增</a>
           </div>
       </div>
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <table class="table table-hover table-striped">
                   <thead>
                   <tr>
                       <th>书籍编号</th>
                       <th>书籍名字</th>
                       <th>书籍数量</th>
                       <th>书籍详情</th>
                       <th>操作</th>
                   </tr>
                   </thead>
   
                   <tbody>
                   <c:forEach var="book" items="${requestScope.get('list')}">
                       <tr>
                           <td>${book.getBookId()}</td>
                           <td>${book.getBookName()}</td>
                           <td>${book.getBookCounts()}</td>
                           <td>${book.getDetail()}</td>
                           <td>
                               <a href="${pageContext.request.contextPath}/book/toUpdateBook?id=${book.getBookId()}">更改</a> |
                               <a href="${pageContext.request.contextPath}/book/del/${book.getBookId()}">删除</a>
                           </td>
                       </tr>
                   </c:forEach>
                   </tbody>
               </table>
           </div>
       </div>
   </div>
   ```

4. BookController 类编写 ， 方法二：添加书籍

   ```java
   @RequestMapping("/toAddBook")
   public String toAddPaper() {
       return "addBook";
   }
   
   @RequestMapping("/addBook")
   public String addPaper(Books books) {
       System.out.println(books);
       bookService.addBook(books);
       return "redirect:/book/allBook";
   }
   ```

5. 添加书籍页面：**addBook.jsp**

   ```jsp
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   
   <html>
   <head>
       <title>新增书籍</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>新增书籍</small>
                   </h1>
               </div>
           </div>
       </div>
       <form action="${pageContext.request.contextPath}/book/addBook" method="post">
           书籍名称：<input type="text" name="bookName"><br><br><br>
           书籍数量：<input type="text" name="bookCounts"><br><br><br>
           书籍详情：<input type="text" name="detail"><br><br><br>
           <input type="submit" value="添加">
       </form>
   
   </div>
   ```

6. BookController 类编写 ， 方法三：修改书籍

   ```java
   @RequestMapping("/toUpdateBook")
   public String toUpdateBook(Model model, int id) {
       Books books = bookService.queryBookById(id);
       System.out.println(books);
       model.addAttribute("book",books );
       return "updateBook";
   }
   
   @RequestMapping("/updateBook")
   public String updateBook(Model model, Books book) {
       bookService.updateBook(book);
       Books books = bookService.queryBookById(book.getBookID());
       model.addAttribute("books", books);
       return "redirect:/book/allBook";
   }
   ```

7. 修改书籍页面 **updateBook.jsp**

   ```jsp
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>修改信息</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>修改信息</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <form action="${pageContext.request.contextPath}/book/updateBook" method="post">
           <input type="hidden" name="bookID" value="${book.getBookId()}"/>
           书籍名称：<input type="text" name="bookName" value="${book.getBookName()}"/>
           书籍数量：<input type="text" name="bookCounts" value="${book.getBookCounts()}"/>
           书籍详情：<input type="text" name="detail" value="${book.getDetail() }"/>
           <input type="submit" value="提交"/>
       </form>
   
   </div>
   ```

8. BookController 类编写 ， 方法四：删除书籍

   ```java
   @RequestMapping("/del/{bookId}")
   public String deleteBook(@PathVariable("bookId") int id) {
       bookService.deleteBookById(id);
       return "redirect:/book/allBook";
   }
   ```

**配置Tomcat，进行运行！**

到目前为止，这个SSM项目整合已经完全的OK了，可以直接运行进行测试！这个练习十分的重要，大家需要保证，不看任何东西，自己也可以完整的实现出来！

## **6、项目结构图**

![1570186854191.png](https://blog.kuangstudy.com/usr/uploads/2019/10/1086489242.png)

![1570186868239.png](https://blog.kuangstudy.com/usr/uploads/2019/10/2326667495.png)

## 7、错误排查

### 1、访问出现404，排查步骤：**

1. 查看控制台输出，看一下是不是缺少了什么jar包。

2. 如果jar包存在，显示无法输出，就在IDEA的项目发布中，添加lib依赖！

   步骤：点击项目结构----->Artifacts----->点击自己的项目(ssm:war exploded)--->(点击工具栏的第一个)在WEB-INF目录下新建一个lib包----->选中lib------>点击工具栏的第三个然后选中第一个---->把里面的包全部选中点击ok---->点击Apply再ok

   ![image-20200128125126368](./ssm整合.assets/image-20200128125126368.png)

   ![image-20200128125237179](./ssm整合.assets/image-20200128125237179.png)

3. 重启Tomcat 即可解决！

### 2、其他错误

#### 1、bean不存在

​	步骤：

​		查看bean注入是否成功 

​		junit单元测试，看我们的代码是否能够查询出来

​		问题不在底层，是我们spring出了问题

​		springMVC整合时没有调用到service层的bean

​			applicationContext.xml没有注册bean

​			web.xml也绑定过配置文件要绑定大的applicationContext.xml

​			

## 8、小结及展望

这个是同学们的第一个SSM整合案例，一定要烂熟于心！

SSM框架的重要程度是不言而喻的，学到这里，大家已经可以进行基本网站的单独开发。但是这只是增删改查的基本操作。可以说学到这里，大家才算是真正的步入了后台开发的门。也就是能找一个后台相关工作的底线。

或许很多人，工作就做这些事情，但是对于个人的提高来说，还远远不够！, 2020-03-02 07:06:53.0, 2020-03-13 06:59:47.0, admin, 10]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10001} closed
[DEBUG][20-03-23][druid.sql.Connection]{conn-10002} closed
[DEBUG][20-03-23][druid.sql.Connection]{conn-10003} closed
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} closed
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} closed
[DEBUG][20-03-23][druid.sql.Connection]{conn-10001} connected
[DEBUG][20-03-23][druid.sql.Connection]{conn-10002} connected
[DEBUG][20-03-23][druid.sql.Connection]{conn-10003} connected
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} connected
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} connected
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} created. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog where id=?
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} Parameters : [13]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} Types : [INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} executed. 7.95066 millis. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog where id=?
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Header: [id, type_name, title, content, create_time, change_time, author, view]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [13, mybatis, ssm1整合, # ssm整合

## 1、数据库环境

创建一个存放书籍数据的数据库表

```sql
CREATE DATABASE `ssmbuild`;

USE `ssmbuild`;

DROP TABLE IF EXISTS `books`;

CREATE TABLE `books` (
  `bookId` INT PRIMARY KEY COMMENT '书id',
  `bookName` VARCHAR(100) NOT NULL COMMENT '书名',
  `bookCounts` INT(11) NOT NULL COMMENT '数量',
  ``ssmbuild``ssmbuild`` VARCHAR(200) NOT NULL COMMENT '描述'
) ENGINE=INNODB DEFAULT CHARSET=utf8

INSERT  INTO `books`(`bookId`,`bookName`,`bookCounts`,`detail`)VALUES 
(1,'Java',1,'从入门到放弃'),
(2,'MySQL',10,'从删库到跑路'),
(3,'Linux',5,'从进门到进牢');

SELECT * FROM books
```

## 2、基本环境搭建

1. 新建一Maven项目！ ssmbuild ， 添加web的支持

   ![image-20200128134359317](.\ssm整合.assets\image-20200128134359317.png)

2. 导入相关的pom依赖！

   ```xml
   <dependencies>
       <!--Junit-->
       <dependency>
           <groupId>junit</groupId>
           <artifactId>junit</artifactId>
           <version>4.12</version>
       </dependency>
       <!--数据库驱动-->
       <dependency>
           <groupId>mysql</groupId>
           <artifactId>mysql-connector-java</artifactId>
           <version>5.1.47</version>
       </dependency>
       <!-- 数据库连接池 -->
       <dependency>
           <groupId>com.mchange</groupId>
           <artifactId>c3p0</artifactId>
           <version>0.9.5.2</version>
       </dependency>
   
       <!--Servlet - JSP -->
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>servlet-api</artifactId>
           <version>2.5</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet.jsp</groupId>
           <artifactId>jsp-api</artifactId>
           <version>2.2</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>jstl</artifactId>
           <version>1.2</version>
       </dependency>
   
       <!--Mybatis-->
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis</artifactId>
           <version>3.5.2</version>
       </dependency>
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis-spring</artifactId>
           <version>2.0.2</version>
       </dependency>
   
       <!--Spring-->
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-webmvc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-jdbc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->
       <dependency>
           <groupId>org.projectlombok</groupId>
           <artifactId>lombok</artifactId>
           <version>1.16.10</version>
       </dependency>
   </dependencies>
   ```

3. Maven资源过滤设置

   ```xml
   <build>
       <resources>
           <resource>
               <directory>src/main/java</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
           <resource>
               <directory>src/main/resources</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
       </resources>
   </build>
   ```

4. 建立基本结构和配置框架！

   - com.feige.pojo

   - com.feige.dao

   - com.feige.service

   - com.feige.controller

     在resources目录下创建

   - mybatis-config.xml

     ```xml
     <?xml version="1.0" encoding="UTF-8" ?>
     <!DOCTYPE configuration
             PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
             "http://mybatis.org/dtd/mybatis-3-config.dtd">
     <configuration>
     
     </configuration>
     ```

   - applicationContext.xml

     ```xml
     <?xml version="1.0" encoding="UTF-8"?>
     <beans xmlns="http://www.springframework.org/schema/beans"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://www.springframework.org/schema/beans
             http://www.springframework.org/schema/beans/spring-beans.xsd">
     
     </beans>
     ```

## 3、Mybatis层编写

1. 数据库配置文件 **database.properties**

   ```properties
   jdbc.driver=com.mysql.jdbc.Driver
   jdbc.url=jdbc:mysql://localhost:3306/ssmbuild?useSSL=true&useUnicode=true&characterEncoding=utf8
   jdbc.username=root
   jdbc.password=hufei169357
   ```

2. IDEA关联数据库

3. 编写MyBatis的核心配置文件

   ```xml
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE configuration
           PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-config.dtd">
   <configuration>
       
       <typeAliases>
           <package name="com.feige.pojo"/>
       </typeAliases>
       <mappers>
           <mapper resource="com/feige/dao/BookMapper.xml"/>
       </mappers>
   
   </configuration>
   ```

4. 编写数据库对应的实体类 com.feige.pojo.Books
   使用lombok插件！

   ```java
   package com.kuang.pojo;
   
   import lombok.AllArgsConstructor;
   import lombok.Data;
   import lombok.NoArgsConstructor;
   
   @Data
   @AllArgsConstructor
   @NoArgsConstructor
   public class Books {
       
       private int bookId;
       private String bookName;
       private int bookCounts;
       private String detail;
       
   }
   ```

5. 编写Dao层的 Mapper接口！

   ```java
   package com.kuang.dao;
   
   import com.kuang.pojo.Books;
   import java.util.List;
   
   public interface BookMapper {
   
       //增加一个Book
       int addBook(Books book);
   
       //根据id删除一个Book
       int deleteBookById(int id);
   
       //更新Book
       int updateBook(Books books);
   
       //根据id查询,返回一个Book
       Books queryBookById(int id);
   
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   
   }
   ```

6. 编写接口对应的 Mapper.xml 文件。需要导入MyBatis的包；

   ```xml
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE mapper
           PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
   
   <mapper namespace="com.feige.dao.BooksMapper">
   
       <!--增加一个Book-->
       <insert id="addBook" parameterType="Books">
           insert into books(bookName,bookCounts,detail)
           values (#{bookName}, #{bookCounts}, #{detail})
       </insert>
   
       <!--根据id删除一个Book-->
       <delete id="deleteBookById" parameterType="int">
           delete from books where bookId=#{bookId}
       </delete>
   
       <!--更新Book-->
       <update id="updateBook" parameterType="Books">
           update books
           set bookName = #{bookName},bookCounts = #{bookCounts},detail = #{detail}
           where bookId = #{bookId}
       </update>
   
       <!--根据id查询,返回一个Book-->
       <select id="queryBookById" resultType="Books">
           select * from books
           where bookID = #{bookId}
       </select>
   
       <!--查询全部Book-->
       <select id="queryAllBook" resultType="com.feige.pojo.Books">
           SELECT * from books
       </select>
   
   </mapper>
   ```

7. 编写Service层的接口和实现类
   接口：

   ```java
   package com.feige.service;
   
   import com.feige.pojo.Books;
   
   import java.util.List;
   
   //BookService:底下需要去实现,调用dao层
   public interface BookService {
       //增加一个Book
       int addBook(Books book);
       //根据id删除一个Book
       int deleteBookById(int id);
       //更新Book
       int updateBook(Books books);
       //根据id查询,返回一个Book
       Books queryBookById(int id);
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   }
   ```

实现类：

```java
package com.feige.service;

import com.feige.dao.BookMapper;
import com.feige.pojo.Books;
import java.util.List;

public class BookServiceImpl implements BookService {

    //调用dao层的操作，设置一个set接口，方便Spring管理
    private BookMapper bookMapper;

    public void setBookMapper(BookMapper bookMapper) {
        this.bookMapper = bookMapper;
    }
    
    public int addBook(Books book) {
        return bookMapper.addBook(book);
    }
    
    public int deleteBookById(int id) {
        return bookMapper.deleteBookById(id);
    }
    
    public int updateBook(Books books) {
        return bookMapper.updateBook(books);
    }
    
    public Books queryBookById(int id) {
        return bookMapper.queryBookById(id);
    }
    
    public List<Books> queryAllBook() {
        return bookMapper.queryAllBook();
    }
}
```

**OK，到此，底层需求操作编写完毕！**

## 4、Spring层

1. 配置**Spring整合MyBatis**，我们这里数据源使用c3p0连接池；

2. 我们去编写Spring整合Mybatis的相关的配置文件； spring-dao.xml

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans.xsd
   http://www.springframework.org/schema/context
   https://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 配置整合mybatis -->
       <!-- 1.关联数据库文件 -->
       <context:property-placeholder location="classpath:database.properties"/>
   
       <!-- 2.数据库连接池 -->
       <!--数据库连接池
   dbcp  半自动化操作  不能自动连接
   c3p0  自动化操作（自动的加载配置文件 并且设置到对象里面）
       -->
       <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
   <!-- 配置连接池属性 -->
   <property name="driverClass" value="${jdbc.driver}"/>
   <property name="jdbcUrl" value="${jdbc.url}"/>
   <property name="user" value="${jdbc.username}"/>
   <property name="password" value="${jdbc.password}"/>
   
   <!-- c3p0连接池的私有属性 -->
   <property name="maxPoolSize" value="30"/>
   <property name="minPoolSize" value="10"/>
   <!-- 关闭连接后不自动commit -->
   <property name="autoCommitOnClose" value="false"/>
   <!-- 获取连接超时时间 -->
   <property name="checkoutTimeout" value="10000"/>
   <!-- 当获取连接失败重试次数 -->
   <property name="acquireRetryAttempts" value="2"/>
       </bean>
   
       <!-- 3.配置SqlSessionFactory对象 -->
       <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource"/>
   <!-- 配置MyBaties全局配置文件:mybatis-config.xml -->
   <property name="configLocation" value="classpath:mybatis-config.xml"/>
       </bean>
   
       <!-- 4.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 -->
       <!--解释 ： https://www.cnblogs.com/jpfss/p/7799806.html-->
       <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
   <!-- 注入sqlSessionFactory -->
   <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
   <!-- 给出需要扫描Dao接口包 -->
   <property name="basePackage" value="com.feige.dao"/>
       </bean>
   
   </beans>
   ```

3. **Spring整合service层**

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 扫描service相关的bean -->
       <context:component-scan base-package="com.kuang.service" />
   
       <!--BookServiceImpl注入到IOC容器中-->
       <bean id="BookServiceImpl" class="com.kuang.service.BookServiceImpl">
   <property name="bookMapper" ref="bookMapper"/>
       </bean>
   
       <!-- 配置事务管理器 -->
       <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource" />
       </bean>
   
   </beans>
   ```

Spring层搞定！再次理解一下，Spring就是一个大杂烩，一个容器！对吧！

## 5、SpringMVC层

1. **web.xml**

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
            version="4.0">
   
       <!--DispatcherServlet-->
       <servlet>
           <servlet-name>DispatcherServlet</servlet-name>
           <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
           <init-param>
               <param-name>contextConfigLocation</param-name>
               <param-value>classpath:applicationContext.xml</param-value>
           </init-param>
           <load-on-startup>1</load-on-startup>
       </servlet>
       <servlet-mapping>
           <servlet-name>DispatcherServlet</servlet-name>
           <url-pattern>/</url-pattern>
       </servlet-mapping>
   
       <!--encodingFilter-->
       <filter>
           <filter-name>encodingFilter</filter-name>
           <filter-class>
               org.springframework.web.filter.CharacterEncodingFilter
           </filter-class>
           <init-param>
               <param-name>encoding</param-name>
               <param-value>utf-8</param-value>
           </init-param>
       </filter>
       <filter-mapping>
           <filter-name>encodingFilter</filter-name>
           <url-pattern>/*</url-pattern>
       </filter-mapping>
       
       <!--Session过期时间-->
       <session-config>
           <session-timeout>15</session-timeout>
       </session-config>
       
   </web-app>
   ```

2. **spring-mvc.xml**

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xmlns:mvc="http://www.springframework.org/schema/mvc"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       https://www.springframework.org/schema/mvc/spring-mvc.xsd">
   
       <!-- 配置SpringMVC -->
       <!-- 1.开启SpringMVC注解驱动 -->
       <mvc:annotation-driven>
           <mvc:message-converters register-defaults="true">
               <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                   <constructor-arg value="UTF-8"/>
               </bean>
               <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                   <property name="objectMapper">
                       <bean class="org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean">
                           <property name="failOnEmptyBeans" value="false"/>
                       </bean>
                   </property>
               </bean>
           </mvc:message-converters>
       </mvc:annotation-driven>
       <!--解决跨域问题-->
       <mvc:cors>
       <mvc:mapping path="/**"
                    allowed-origins="http://127.0.0.1:8090,http://localhost:8090"
                    allowed-methods="POST,GET, OPTIONS,DELETE,PUT"
                    allowed-headers="Content-Type,ContentType,Access-Control-Allow-Headers, Authorization, X-Requested-With"
                    allow-credentials="true"/>
       </mvc:cors>
       <!-- 2.静态资源默认servlet配置-->
       <mvc:default-servlet-handler/>
   
       <!-- 3.配置jsp 显示ViewResolver视图解析器 -->
       <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
           <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
           <property name="prefix" value="/WEB-INF/jsp/" />
           <property name="suffix" value=".jsp" />
       </bean>
   
       <!-- 4.扫描web相关的bean -->
       <context:component-scan base-package="com.feige.controller" />
   
   </beans>
   ```

3. **Spring配置整合文件，applicationContext.xml**

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd">
   
       <import resource="spring-dao.xml"/>
       <import resource="spring-service.xml"/>
       <import resource="spring-mvc.xml"/>
       
   </beans>
   ```

**配置文件，暂时结束！Controller 和 视图层编写**

1. BookController 类编写 ， 方法一：查询全部书籍

   ```java
   @Controller
   @RequestMapping("/book")
   public class BookController {
   
       @Autowired
       @Qualifier("BookServiceImpl")
       private BookService bookService;
   
       @RequestMapping("/allBook")
       public String list(Model model) {
           List<Books> list = bookService.queryAllBook();
           model.addAttribute("list", list);
           return "allBook";
       }
   }
   ```

2. 编写首页 **index.jsp**

   ```html
   <%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" %>
   <!DOCTYPE HTML>
   <html>
   <head>
       <title>首页</title>
       <style type="text/css">
           a {
               text-decoration: none;
               color: black;
               font-size: 18px;
           }
           h3 {
               width: 180px;
               height: 38px;
               margin: 100px auto;
               text-align: center;
               line-height: 38px;
               background: deepskyblue;
               border-radius: 4px;
           }
       </style>
   </head>
   <body>
   
   <h3>
       <a href="${pageContext.request.contextPath}/book/allBook">点击进入列表页</a>
   </h3>
   </body>
   </html>
   ```

3. 书籍列表页面 **allbook.jsp**

   ```jsp
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>书籍列表</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>书籍列表 —— 显示所有书籍</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <div class="row">
           <div class="col-md-4 column">
               <a class="btn btn-primary" href="${pageContext.request.contextPath}/book/toAddBook">新增</a>
           </div>
       </div>
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <table class="table table-hover table-striped">
                   <thead>
                   <tr>
                       <th>书籍编号</th>
                       <th>书籍名字</th>
                       <th>书籍数量</th>
                       <th>书籍详情</th>
                       <th>操作</th>
                   </tr>
                   </thead>
   
                   <tbody>
                   <c:forEach var="book" items="${requestScope.get('list')}">
                       <tr>
                           <td>${book.getBookId()}</td>
                           <td>${book.getBookName()}</td>
                           <td>${book.getBookCounts()}</td>
                           <td>${book.getDetail()}</td>
                           <td>
                               <a href="${pageContext.request.contextPath}/book/toUpdateBook?id=${book.getBookId()}">更改</a> |
                               <a href="${pageContext.request.contextPath}/book/del/${book.getBookId()}">删除</a>
                           </td>
                       </tr>
                   </c:forEach>
                   </tbody>
               </table>
           </div>
       </div>
   </div>
   ```

4. BookController 类编写 ， 方法二：添加书籍

   ```java
   @RequestMapping("/toAddBook")
   public String toAddPaper() {
       return "addBook";
   }
   
   @RequestMapping("/addBook")
   public String addPaper(Books books) {
       System.out.println(books);
       bookService.addBook(books);
       return "redirect:/book/allBook";
   }
   ```

5. 添加书籍页面：**addBook.jsp**

   ```jsp
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   
   <html>
   <head>
       <title>新增书籍</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>新增书籍</small>
                   </h1>
               </div>
           </div>
       </div>
       <form action="${pageContext.request.contextPath}/book/addBook" method="post">
           书籍名称：<input type="text" name="bookName"><br><br><br>
           书籍数量：<input type="text" name="bookCounts"><br><br><br>
           书籍详情：<input type="text" name="detail"><br><br><br>
           <input type="submit" value="添加">
       </form>
   
   </div>
   ```

6. BookController 类编写 ， 方法三：修改书籍

   ```java
   @RequestMapping("/toUpdateBook")
   public String toUpdateBook(Model model, int id) {
       Books books = bookService.queryBookById(id);
       System.out.println(books);
       model.addAttribute("book",books );
       return "updateBook";
   }
   
   @RequestMapping("/updateBook")
   public String updateBook(Model model, Books book) {
       bookService.updateBook(book);
       Books books = bookService.queryBookById(book.getBookID());
       model.addAttribute("books", books);
       return "redirect:/book/allBook";
   }
   ```

7. 修改书籍页面 **updateBook.jsp**

   ```jsp
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>修改信息</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>修改信息</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <form action="${pageContext.request.contextPath}/book/updateBook" method="post">
           <input type="hidden" name="bookID" value="${book.getBookId()}"/>
           书籍名称：<input type="text" name="bookName" value="${book.getBookName()}"/>
           书籍数量：<input type="text" name="bookCounts" value="${book.getBookCounts()}"/>
           书籍详情：<input type="text" name="detail" value="${book.getDetail() }"/>
           <input type="submit" value="提交"/>
       </form>
   
   </div>
   ```

8. BookController 类编写 ， 方法四：删除书籍

   ```java
   @RequestMapping("/del/{bookId}")
   public String deleteBook(@PathVariable("bookId") int id) {
       bookService.deleteBookById(id);
       return "redirect:/book/allBook";
   }
   ```

**配置Tomcat，进行运行！**

到目前为止，这个SSM项目整合已经完全的OK了，可以直接运行进行测试！这个练习十分的重要，大家需要保证，不看任何东西，自己也可以完整的实现出来！

## **6、项目结构图**

![1570186854191.png](https://blog.kuangstudy.com/usr/uploads/2019/10/1086489242.png)

![1570186868239.png](https://blog.kuangstudy.com/usr/uploads/2019/10/2326667495.png)

## 7、错误排查

### 1、访问出现404，排查步骤：**

1. 查看控制台输出，看一下是不是缺少了什么jar包。

2. 如果jar包存在，显示无法输出，就在IDEA的项目发布中，添加lib依赖！

   步骤：点击项目结构----->Artifacts----->点击自己的项目(ssm:war exploded)--->(点击工具栏的第一个)在WEB-INF目录下新建一个lib包----->选中lib------>点击工具栏的第三个然后选中第一个---->把里面的包全部选中点击ok---->点击Apply再ok

   ![image-20200128125126368](E:\Java资料\ssm整合.assets\image-20200128125126368.png)

   ![image-20200128125237179](E:\Java资料\ssm整合.assets\image-20200128125237179.png)

3. 重启Tomcat 即可解决！

### 2、其他错误

#### 1、bean不存在

​	步骤：

​		查看bean注入是否成功 

​		junit单元测试，看我们的代码是否能够查询出来

​		问题不在底层，是我们spring出了问题

​		springMVC整合时没有调用到service层的bean

​			applicationContext.xml没有注册bean

​			web.xml也绑定过配置文件要绑定大的applicationContext.xml

​			

## 8、小结及展望

这个是同学们的第一个SSM整合案例，一定要烂熟于心！

SSM框架的重要程度是不言而喻的，学到这里，大家已经可以进行基本网站的单独开发。但是这只是增删改查的基本操作。可以说学到这里，大家才算是真正的步入了后台开发的门。也就是能找一个后台相关工作的底线。

或许很多人，工作就做这些事情，但是对于个人的提高来说，还远远不够！, 2020-03-02 07:06:53.0, 2020-03-23 19:38:47.0, null, 10]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10001} closed
[DEBUG][20-03-23][druid.sql.Connection]{conn-10002} closed
[DEBUG][20-03-23][druid.sql.Connection]{conn-10003} closed
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} closed
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} closed
[DEBUG][20-03-23][druid.sql.Connection]{conn-10001} connected
[DEBUG][20-03-23][druid.sql.Connection]{conn-10002} connected
[DEBUG][20-03-23][druid.sql.Connection]{conn-10003} connected
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} connected
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} connected
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} created. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog where id=?
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20001} created. select distinct count(*) from comments c
        where c.blog_id=? and
        c.parent_id is null;
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20001} Parameters : [13]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} Parameters : [13]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20001} Types : [INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} Types : [INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20001} executed. 12.418655 millis. select distinct count(*) from comments c
        where c.blog_id=? and
        c.parent_id is null;
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} executed. 12.379989 millis. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog where id=?
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20001, rs-50001} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20001, rs-50001} Header: [count(*)]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Header: [id, type_name, title, content, create_time, change_time, author, view]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20001, rs-50001} Result: [3]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [13, mybatis, ssm1整合, # ssm整合

## 1、数据库环境

创建一个存放书籍数据的数据库表

```sql
CREATE DATABASE `ssmbuild`;

USE `ssmbuild`;

DROP TABLE IF EXISTS `books`;

CREATE TABLE `books` (
  `bookId` INT PRIMARY KEY COMMENT '书id',
  `bookName` VARCHAR(100) NOT NULL COMMENT '书名',
  `bookCounts` INT(11) NOT NULL COMMENT '数量',
  ``ssmbuild``ssmbuild`` VARCHAR(200) NOT NULL COMMENT '描述'
) ENGINE=INNODB DEFAULT CHARSET=utf8

INSERT  INTO `books`(`bookId`,`bookName`,`bookCounts`,`detail`)VALUES 
(1,'Java',1,'从入门到放弃'),
(2,'MySQL',10,'从删库到跑路'),
(3,'Linux',5,'从进门到进牢');

SELECT * FROM books
```

## 2、基本环境搭建

1. 新建一Maven项目！ ssmbuild ， 添加web的支持

   ![image-20200128134359317](.\ssm整合.assets\image-20200128134359317.png)

2. 导入相关的pom依赖！

   ```xml
   <dependencies>
       <!--Junit-->
       <dependency>
           <groupId>junit</groupId>
           <artifactId>junit</artifactId>
           <version>4.12</version>
       </dependency>
       <!--数据库驱动-->
       <dependency>
           <groupId>mysql</groupId>
           <artifactId>mysql-connector-java</artifactId>
           <version>5.1.47</version>
       </dependency>
       <!-- 数据库连接池 -->
       <dependency>
           <groupId>com.mchange</groupId>
           <artifactId>c3p0</artifactId>
           <version>0.9.5.2</version>
       </dependency>
   
       <!--Servlet - JSP -->
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>servlet-api</artifactId>
           <version>2.5</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet.jsp</groupId>
           <artifactId>jsp-api</artifactId>
           <version>2.2</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>jstl</artifactId>
           <version>1.2</version>
       </dependency>
   
       <!--Mybatis-->
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis</artifactId>
           <version>3.5.2</version>
       </dependency>
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis-spring</artifactId>
           <version>2.0.2</version>
       </dependency>
   
       <!--Spring-->
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-webmvc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-jdbc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->
       <dependency>
           <groupId>org.projectlombok</groupId>
           <artifactId>lombok</artifactId>
           <version>1.16.10</version>
       </dependency>
   </dependencies>
   ```

3. Maven资源过滤设置

   ```xml
   <build>
       <resources>
           <resource>
               <directory>src/main/java</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
           <resource>
               <directory>src/main/resources</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
       </resources>
   </build>
   ```

4. 建立基本结构和配置框架！

   - com.feige.pojo

   - com.feige.dao

   - com.feige.service

   - com.feige.controller

     在resources目录下创建

   - mybatis-config.xml

     ```xml
     <?xml version="1.0" encoding="UTF-8" ?>
     <!DOCTYPE configuration
             PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
             "http://mybatis.org/dtd/mybatis-3-config.dtd">
     <configuration>
     
     </configuration>
     ```

   - applicationContext.xml

     ```xml
     <?xml version="1.0" encoding="UTF-8"?>
     <beans xmlns="http://www.springframework.org/schema/beans"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://www.springframework.org/schema/beans
             http://www.springframework.org/schema/beans/spring-beans.xsd">
     
     </beans>
     ```

## 3、Mybatis层编写

1. 数据库配置文件 **database.properties**

   ```properties
   jdbc.driver=com.mysql.jdbc.Driver
   jdbc.url=jdbc:mysql://localhost:3306/ssmbuild?useSSL=true&useUnicode=true&characterEncoding=utf8
   jdbc.username=root
   jdbc.password=hufei169357
   ```

2. IDEA关联数据库

3. 编写MyBatis的核心配置文件

   ```xml
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE configuration
           PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-config.dtd">
   <configuration>
       
       <typeAliases>
           <package name="com.feige.pojo"/>
       </typeAliases>
       <mappers>
           <mapper resource="com/feige/dao/BookMapper.xml"/>
       </mappers>
   
   </configuration>
   ```

4. 编写数据库对应的实体类 com.feige.pojo.Books
   使用lombok插件！

   ```java
   package com.kuang.pojo;
   
   import lombok.AllArgsConstructor;
   import lombok.Data;
   import lombok.NoArgsConstructor;
   
   @Data
   @AllArgsConstructor
   @NoArgsConstructor
   public class Books {
       
       private int bookId;
       private String bookName;
       private int bookCounts;
       private String detail;
       
   }
   ```

5. 编写Dao层的 Mapper接口！

   ```java
   package com.kuang.dao;
   
   import com.kuang.pojo.Books;
   import java.util.List;
   
   public interface BookMapper {
   
       //增加一个Book
       int addBook(Books book);
   
       //根据id删除一个Book
       int deleteBookById(int id);
   
       //更新Book
       int updateBook(Books books);
   
       //根据id查询,返回一个Book
       Books queryBookById(int id);
   
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   
   }
   ```

6. 编写接口对应的 Mapper.xml 文件。需要导入MyBatis的包；

   ```xml
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE mapper
           PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
   
   <mapper namespace="com.feige.dao.BooksMapper">
   
       <!--增加一个Book-->
       <insert id="addBook" parameterType="Books">
           insert into books(bookName,bookCounts,detail)
           values (#{bookName}, #{bookCounts}, #{detail})
       </insert>
   
       <!--根据id删除一个Book-->
       <delete id="deleteBookById" parameterType="int">
           delete from books where bookId=#{bookId}
       </delete>
   
       <!--更新Book-->
       <update id="updateBook" parameterType="Books">
           update books
           set bookName = #{bookName},bookCounts = #{bookCounts},detail = #{detail}
           where bookId = #{bookId}
       </update>
   
       <!--根据id查询,返回一个Book-->
       <select id="queryBookById" resultType="Books">
           select * from books
           where bookID = #{bookId}
       </select>
   
       <!--查询全部Book-->
       <select id="queryAllBook" resultType="com.feige.pojo.Books">
           SELECT * from books
       </select>
   
   </mapper>
   ```

7. 编写Service层的接口和实现类
   接口：

   ```java
   package com.feige.service;
   
   import com.feige.pojo.Books;
   
   import java.util.List;
   
   //BookService:底下需要去实现,调用dao层
   public interface BookService {
       //增加一个Book
       int addBook(Books book);
       //根据id删除一个Book
       int deleteBookById(int id);
       //更新Book
       int updateBook(Books books);
       //根据id查询,返回一个Book
       Books queryBookById(int id);
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   }
   ```

实现类：

```java
package com.feige.service;

import com.feige.dao.BookMapper;
import com.feige.pojo.Books;
import java.util.List;

public class BookServiceImpl implements BookService {

    //调用dao层的操作，设置一个set接口，方便Spring管理
    private BookMapper bookMapper;

    public void setBookMapper(BookMapper bookMapper) {
        this.bookMapper = bookMapper;
    }
    
    public int addBook(Books book) {
        return bookMapper.addBook(book);
    }
    
    public int deleteBookById(int id) {
        return bookMapper.deleteBookById(id);
    }
    
    public int updateBook(Books books) {
        return bookMapper.updateBook(books);
    }
    
    public Books queryBookById(int id) {
        return bookMapper.queryBookById(id);
    }
    
    public List<Books> queryAllBook() {
        return bookMapper.queryAllBook();
    }
}
```

**OK，到此，底层需求操作编写完毕！**

## 4、Spring层

1. 配置**Spring整合MyBatis**，我们这里数据源使用c3p0连接池；

2. 我们去编写Spring整合Mybatis的相关的配置文件； spring-dao.xml

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans.xsd
   http://www.springframework.org/schema/context
   https://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 配置整合mybatis -->
       <!-- 1.关联数据库文件 -->
       <context:property-placeholder location="classpath:database.properties"/>
   
       <!-- 2.数据库连接池 -->
       <!--数据库连接池
   dbcp  半自动化操作  不能自动连接
   c3p0  自动化操作（自动的加载配置文件 并且设置到对象里面）
       -->
       <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
   <!-- 配置连接池属性 -->
   <property name="driverClass" value="${jdbc.driver}"/>
   <property name="jdbcUrl" value="${jdbc.url}"/>
   <property name="user" value="${jdbc.username}"/>
   <property name="password" value="${jdbc.password}"/>
   
   <!-- c3p0连接池的私有属性 -->
   <property name="maxPoolSize" value="30"/>
   <property name="minPoolSize" value="10"/>
   <!-- 关闭连接后不自动commit -->
   <property name="autoCommitOnClose" value="false"/>
   <!-- 获取连接超时时间 -->
   <property name="checkoutTimeout" value="10000"/>
   <!-- 当获取连接失败重试次数 -->
   <property name="acquireRetryAttempts" value="2"/>
       </bean>
   
       <!-- 3.配置SqlSessionFactory对象 -->
       <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource"/>
   <!-- 配置MyBaties全局配置文件:mybatis-config.xml -->
   <property name="configLocation" value="classpath:mybatis-config.xml"/>
       </bean>
   
       <!-- 4.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 -->
       <!--解释 ： https://www.cnblogs.com/jpfss/p/7799806.html-->
       <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
   <!-- 注入sqlSessionFactory -->
   <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
   <!-- 给出需要扫描Dao接口包 -->
   <property name="basePackage" value="com.feige.dao"/>
       </bean>
   
   </beans>
   ```

3. **Spring整合service层**

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 扫描service相关的bean -->
       <context:component-scan base-package="com.kuang.service" />
   
       <!--BookServiceImpl注入到IOC容器中-->
       <bean id="BookServiceImpl" class="com.kuang.service.BookServiceImpl">
   <property name="bookMapper" ref="bookMapper"/>
       </bean>
   
       <!-- 配置事务管理器 -->
       <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource" />
       </bean>
   
   </beans>
   ```

Spring层搞定！再次理解一下，Spring就是一个大杂烩，一个容器！对吧！

## 5、SpringMVC层

1. **web.xml**

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
            version="4.0">
   
       <!--DispatcherServlet-->
       <servlet>
           <servlet-name>DispatcherServlet</servlet-name>
           <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
           <init-param>
               <param-name>contextConfigLocation</param-name>
               <param-value>classpath:applicationContext.xml</param-value>
           </init-param>
           <load-on-startup>1</load-on-startup>
       </servlet>
       <servlet-mapping>
           <servlet-name>DispatcherServlet</servlet-name>
           <url-pattern>/</url-pattern>
       </servlet-mapping>
   
       <!--encodingFilter-->
       <filter>
           <filter-name>encodingFilter</filter-name>
           <filter-class>
               org.springframework.web.filter.CharacterEncodingFilter
           </filter-class>
           <init-param>
               <param-name>encoding</param-name>
               <param-value>utf-8</param-value>
           </init-param>
       </filter>
       <filter-mapping>
           <filter-name>encodingFilter</filter-name>
           <url-pattern>/*</url-pattern>
       </filter-mapping>
       
       <!--Session过期时间-->
       <session-config>
           <session-timeout>15</session-timeout>
       </session-config>
       
   </web-app>
   ```

2. **spring-mvc.xml**

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xmlns:mvc="http://www.springframework.org/schema/mvc"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       https://www.springframework.org/schema/mvc/spring-mvc.xsd">
   
       <!-- 配置SpringMVC -->
       <!-- 1.开启SpringMVC注解驱动 -->
       <mvc:annotation-driven>
           <mvc:message-converters register-defaults="true">
               <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                   <constructor-arg value="UTF-8"/>
               </bean>
               <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                   <property name="objectMapper">
                       <bean class="org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean">
                           <property name="failOnEmptyBeans" value="false"/>
                       </bean>
                   </property>
               </bean>
           </mvc:message-converters>
       </mvc:annotation-driven>
       <!--解决跨域问题-->
       <mvc:cors>
       <mvc:mapping path="/**"
                    allowed-origins="http://127.0.0.1:8090,http://localhost:8090"
                    allowed-methods="POST,GET, OPTIONS,DELETE,PUT"
                    allowed-headers="Content-Type,ContentType,Access-Control-Allow-Headers, Authorization, X-Requested-With"
                    allow-credentials="true"/>
       </mvc:cors>
       <!-- 2.静态资源默认servlet配置-->
       <mvc:default-servlet-handler/>
   
       <!-- 3.配置jsp 显示ViewResolver视图解析器 -->
       <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
           <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
           <property name="prefix" value="/WEB-INF/jsp/" />
           <property name="suffix" value=".jsp" />
       </bean>
   
       <!-- 4.扫描web相关的bean -->
       <context:component-scan base-package="com.feige.controller" />
   
   </beans>
   ```

3. **Spring配置整合文件，applicationContext.xml**

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd">
   
       <import resource="spring-dao.xml"/>
       <import resource="spring-service.xml"/>
       <import resource="spring-mvc.xml"/>
       
   </beans>
   ```

**配置文件，暂时结束！Controller 和 视图层编写**

1. BookController 类编写 ， 方法一：查询全部书籍

   ```java
   @Controller
   @RequestMapping("/book")
   public class BookController {
   
       @Autowired
       @Qualifier("BookServiceImpl")
       private BookService bookService;
   
       @RequestMapping("/allBook")
       public String list(Model model) {
           List<Books> list = bookService.queryAllBook();
           model.addAttribute("list", list);
           return "allBook";
       }
   }
   ```

2. 编写首页 **index.jsp**

   ```html
   <%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" %>
   <!DOCTYPE HTML>
   <html>
   <head>
       <title>首页</title>
       <style type="text/css">
           a {
               text-decoration: none;
               color: black;
               font-size: 18px;
           }
           h3 {
               width: 180px;
               height: 38px;
               margin: 100px auto;
               text-align: center;
               line-height: 38px;
               background: deepskyblue;
               border-radius: 4px;
           }
       </style>
   </head>
   <body>
   
   <h3>
       <a href="${pageContext.request.contextPath}/book/allBook">点击进入列表页</a>
   </h3>
   </body>
   </html>
   ```

3. 书籍列表页面 **allbook.jsp**

   ```jsp
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>书籍列表</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>书籍列表 —— 显示所有书籍</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <div class="row">
           <div class="col-md-4 column">
               <a class="btn btn-primary" href="${pageContext.request.contextPath}/book/toAddBook">新增</a>
           </div>
       </div>
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <table class="table table-hover table-striped">
                   <thead>
                   <tr>
                       <th>书籍编号</th>
                       <th>书籍名字</th>
                       <th>书籍数量</th>
                       <th>书籍详情</th>
                       <th>操作</th>
                   </tr>
                   </thead>
   
                   <tbody>
                   <c:forEach var="book" items="${requestScope.get('list')}">
                       <tr>
                           <td>${book.getBookId()}</td>
                           <td>${book.getBookName()}</td>
                           <td>${book.getBookCounts()}</td>
                           <td>${book.getDetail()}</td>
                           <td>
                               <a href="${pageContext.request.contextPath}/book/toUpdateBook?id=${book.getBookId()}">更改</a> |
                               <a href="${pageContext.request.contextPath}/book/del/${book.getBookId()}">删除</a>
                           </td>
                       </tr>
                   </c:forEach>
                   </tbody>
               </table>
           </div>
       </div>
   </div>
   ```

4. BookController 类编写 ， 方法二：添加书籍

   ```java
   @RequestMapping("/toAddBook")
   public String toAddPaper() {
       return "addBook";
   }
   
   @RequestMapping("/addBook")
   public String addPaper(Books books) {
       System.out.println(books);
       bookService.addBook(books);
       return "redirect:/book/allBook";
   }
   ```

5. 添加书籍页面：**addBook.jsp**

   ```jsp
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   
   <html>
   <head>
       <title>新增书籍</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>新增书籍</small>
                   </h1>
               </div>
           </div>
       </div>
       <form action="${pageContext.request.contextPath}/book/addBook" method="post">
           书籍名称：<input type="text" name="bookName"><br><br><br>
           书籍数量：<input type="text" name="bookCounts"><br><br><br>
           书籍详情：<input type="text" name="detail"><br><br><br>
           <input type="submit" value="添加">
       </form>
   
   </div>
   ```

6. BookController 类编写 ， 方法三：修改书籍

   ```java
   @RequestMapping("/toUpdateBook")
   public String toUpdateBook(Model model, int id) {
       Books books = bookService.queryBookById(id);
       System.out.println(books);
       model.addAttribute("book",books );
       return "updateBook";
   }
   
   @RequestMapping("/updateBook")
   public String updateBook(Model model, Books book) {
       bookService.updateBook(book);
       Books books = bookService.queryBookById(book.getBookID());
       model.addAttribute("books", books);
       return "redirect:/book/allBook";
   }
   ```

7. 修改书籍页面 **updateBook.jsp**

   ```jsp
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>修改信息</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>修改信息</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <form action="${pageContext.request.contextPath}/book/updateBook" method="post">
           <input type="hidden" name="bookID" value="${book.getBookId()}"/>
           书籍名称：<input type="text" name="bookName" value="${book.getBookName()}"/>
           书籍数量：<input type="text" name="bookCounts" value="${book.getBookCounts()}"/>
           书籍详情：<input type="text" name="detail" value="${book.getDetail() }"/>
           <input type="submit" value="提交"/>
       </form>
   
   </div>
   ```

8. BookController 类编写 ， 方法四：删除书籍

   ```java
   @RequestMapping("/del/{bookId}")
   public String deleteBook(@PathVariable("bookId") int id) {
       bookService.deleteBookById(id);
       return "redirect:/book/allBook";
   }
   ```

**配置Tomcat，进行运行！**

到目前为止，这个SSM项目整合已经完全的OK了，可以直接运行进行测试！这个练习十分的重要，大家需要保证，不看任何东西，自己也可以完整的实现出来！

## **6、项目结构图**

![1570186854191.png](https://blog.kuangstudy.com/usr/uploads/2019/10/1086489242.png)

![1570186868239.png](https://blog.kuangstudy.com/usr/uploads/2019/10/2326667495.png)

## 7、错误排查

### 1、访问出现404，排查步骤：**

1. 查看控制台输出，看一下是不是缺少了什么jar包。

2. 如果jar包存在，显示无法输出，就在IDEA的项目发布中，添加lib依赖！

   步骤：点击项目结构----->Artifacts----->点击自己的项目(ssm:war exploded)--->(点击工具栏的第一个)在WEB-INF目录下新建一个lib包----->选中lib------>点击工具栏的第三个然后选中第一个---->把里面的包全部选中点击ok---->点击Apply再ok

   ![image-20200128125126368](E:\Java资料\ssm整合.assets\image-20200128125126368.png)

   ![image-20200128125237179](E:\Java资料\ssm整合.assets\image-20200128125237179.png)

3. 重启Tomcat 即可解决！

### 2、其他错误

#### 1、bean不存在

​	步骤：

​		查看bean注入是否成功 

​		junit单元测试，看我们的代码是否能够查询出来

​		问题不在底层，是我们spring出了问题

​		springMVC整合时没有调用到service层的bean

​			applicationContext.xml没有注册bean

​			web.xml也绑定过配置文件要绑定大的applicationContext.xml

​			

## 8、小结及展望

这个是同学们的第一个SSM整合案例，一定要烂熟于心！

SSM框架的重要程度是不言而喻的，学到这里，大家已经可以进行基本网站的单独开发。但是这只是增删改查的基本操作。可以说学到这里，大家才算是真正的步入了后台开发的门。也就是能找一个后台相关工作的底线。

或许很多人，工作就做这些事情，但是对于个人的提高来说，还远远不够！, 2020-03-02 07:06:53.0, 2020-03-23 19:38:47.0, null, 10]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20001, rs-50001} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20001} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20002} created. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id  and
        c.parent_id is null limit ?,?;;
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20002} Parameters : [13, 0, 10]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20002} Types : [INTEGER, INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20002} executed. 3.243997 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id  and
        c.parent_id is null limit ?,?;;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20002, rs-50002} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20002, rs-50002} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20002, rs-50002} Result: [26, 好好, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:35.0, null]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20002, rs-50002} Result: [29, 太好了, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:13.0, null]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20002, rs-50002} Result: [32, <p>feige</p>, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 01:33:26.0, null]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20002, rs-50002} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20002} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} created. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Parameters : [13, 26]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} executed. 3.659997 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50003} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50003} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50003} Result: [27, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:56.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50003} Result: [28, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:43:03.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50003} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Parameters : [13, 26]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} executed. 4.990663 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50004} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50004} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50004} Result: [27, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:56.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50004} Result: [28, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:43:03.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50004} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Parameters : [13, 27]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} executed. 1.228443 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50005} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50005} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50005} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Parameters : [13, 27]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} executed. 1.15511 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50006} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50006} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50006} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Parameters : [13, 29]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} executed. 4.132441 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50007} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50007} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50007} Result: [30, 谢谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:43.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50007} Result: [31, 不用谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:47:01.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50007} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Parameters : [13, 29]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} executed. 7.632438 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50008} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50008} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50008} Result: [30, 谢谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:43.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50008} Result: [31, 不用谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:47:01.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50008} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Parameters : [13, 30]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} executed. 1.512888 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50009} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50009} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50009} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Parameters : [13, 30]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} executed. 1.660888 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50010} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50010} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50010} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Parameters : [13, 32]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} executed. 3.958664 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50011} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50011} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50011} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20004} created. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog where id=?
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20005} created. select distinct count(*) from comments c
        where c.blog_id=? and
        c.parent_id is null;
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20004} Parameters : [13]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20005} Parameters : [13]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20005} Types : [INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20004} Types : [INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20004} executed. 4.798218 millis. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog where id=?
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20004, rs-50012} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20004, rs-50012} Header: [id, type_name, title, content, create_time, change_time, author, view]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20004, rs-50012} Result: [13, mybatis, ssm1整合, # ssm整合

## 1、数据库环境

创建一个存放书籍数据的数据库表

```sql
CREATE DATABASE `ssmbuild`;

USE `ssmbuild`;

DROP TABLE IF EXISTS `books`;

CREATE TABLE `books` (
  `bookId` INT PRIMARY KEY COMMENT '书id',
  `bookName` VARCHAR(100) NOT NULL COMMENT '书名',
  `bookCounts` INT(11) NOT NULL COMMENT '数量',
  ``ssmbuild``ssmbuild`` VARCHAR(200) NOT NULL COMMENT '描述'
) ENGINE=INNODB DEFAULT CHARSET=utf8

INSERT  INTO `books`(`bookId`,`bookName`,`bookCounts`,`detail`)VALUES 
(1,'Java',1,'从入门到放弃'),
(2,'MySQL',10,'从删库到跑路'),
(3,'Linux',5,'从进门到进牢');

SELECT * FROM books
```

## 2、基本环境搭建

1. 新建一Maven项目！ ssmbuild ， 添加web的支持

   ![image-20200128134359317](.\ssm整合.assets\image-20200128134359317.png)

2. 导入相关的pom依赖！

   ```xml
   <dependencies>
       <!--Junit-->
       <dependency>
           <groupId>junit</groupId>
           <artifactId>junit</artifactId>
           <version>4.12</version>
       </dependency>
       <!--数据库驱动-->
       <dependency>
           <groupId>mysql</groupId>
           <artifactId>mysql-connector-java</artifactId>
           <version>5.1.47</version>
       </dependency>
       <!-- 数据库连接池 -->
       <dependency>
           <groupId>com.mchange</groupId>
           <artifactId>c3p0</artifactId>
           <version>0.9.5.2</version>
       </dependency>
   
       <!--Servlet - JSP -->
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>servlet-api</artifactId>
           <version>2.5</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet.jsp</groupId>
           <artifactId>jsp-api</artifactId>
           <version>2.2</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>jstl</artifactId>
           <version>1.2</version>
       </dependency>
   
       <!--Mybatis-->
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis</artifactId>
           <version>3.5.2</version>
       </dependency>
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis-spring</artifactId>
           <version>2.0.2</version>
       </dependency>
   
       <!--Spring-->
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-webmvc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-jdbc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->
       <dependency>
           <groupId>org.projectlombok</groupId>
           <artifactId>lombok</artifactId>
           <version>1.16.10</version>
       </dependency>
   </dependencies>
   ```

3. Maven资源过滤设置

   ```xml
   <build>
       <resources>
           <resource>
               <directory>src/main/java</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
           <resource>
               <directory>src/main/resources</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
       </resources>
   </build>
   ```

4. 建立基本结构和配置框架！

   - com.feige.pojo

   - com.feige.dao

   - com.feige.service

   - com.feige.controller

     在resources目录下创建

   - mybatis-config.xml

     ```xml
     <?xml version="1.0" encoding="UTF-8" ?>
     <!DOCTYPE configuration
             PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
             "http://mybatis.org/dtd/mybatis-3-config.dtd">
     <configuration>
     
     </configuration>
     ```

   - applicationContext.xml

     ```xml
     <?xml version="1.0" encoding="UTF-8"?>
     <beans xmlns="http://www.springframework.org/schema/beans"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://www.springframework.org/schema/beans
             http://www.springframework.org/schema/beans/spring-beans.xsd">
     
     </beans>
     ```

## 3、Mybatis层编写

1. 数据库配置文件 **database.properties**

   ```properties
   jdbc.driver=com.mysql.jdbc.Driver
   jdbc.url=jdbc:mysql://localhost:3306/ssmbuild?useSSL=true&useUnicode=true&characterEncoding=utf8
   jdbc.username=root
   jdbc.password=hufei169357
   ```

2. IDEA关联数据库

3. 编写MyBatis的核心配置文件

   ```xml
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE configuration
           PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-config.dtd">
   <configuration>
       
       <typeAliases>
           <package name="com.feige.pojo"/>
       </typeAliases>
       <mappers>
           <mapper resource="com/feige/dao/BookMapper.xml"/>
       </mappers>
   
   </configuration>
   ```

4. 编写数据库对应的实体类 com.feige.pojo.Books
   使用lombok插件！

   ```java
   package com.kuang.pojo;
   
   import lombok.AllArgsConstructor;
   import lombok.Data;
   import lombok.NoArgsConstructor;
   
   @Data
   @AllArgsConstructor
   @NoArgsConstructor
   public class Books {
       
       private int bookId;
       private String bookName;
       private int bookCounts;
       private String detail;
       
   }
   ```

5. 编写Dao层的 Mapper接口！

   ```java
   package com.kuang.dao;
   
   import com.kuang.pojo.Books;
   import java.util.List;
   
   public interface BookMapper {
   
       //增加一个Book
       int addBook(Books book);
   
       //根据id删除一个Book
       int deleteBookById(int id);
   
       //更新Book
       int updateBook(Books books);
   
       //根据id查询,返回一个Book
       Books queryBookById(int id);
   
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   
   }
   ```

6. 编写接口对应的 Mapper.xml 文件。需要导入MyBatis的包；

   ```xml
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE mapper
           PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
   
   <mapper namespace="com.feige.dao.BooksMapper">
   
       <!--增加一个Book-->
       <insert id="addBook" parameterType="Books">
           insert into books(bookName,bookCounts,detail)
           values (#{bookName}, #{bookCounts}, #{detail})
       </insert>
   
       <!--根据id删除一个Book-->
       <delete id="deleteBookById" parameterType="int">
           delete from books where bookId=#{bookId}
       </delete>
   
       <!--更新Book-->
       <update id="updateBook" parameterType="Books">
           update books
           set bookName = #{bookName},bookCounts = #{bookCounts},detail = #{detail}
           where bookId = #{bookId}
       </update>
   
       <!--根据id查询,返回一个Book-->
       <select id="queryBookById" resultType="Books">
           select * from books
           where bookID = #{bookId}
       </select>
   
       <!--查询全部Book-->
       <select id="queryAllBook" resultType="com.feige.pojo.Books">
           SELECT * from books
       </select>
   
   </mapper>
   ```

7. 编写Service层的接口和实现类
   接口：

   ```java
   package com.feige.service;
   
   import com.feige.pojo.Books;
   
   import java.util.List;
   
   //BookService:底下需要去实现,调用dao层
   public interface BookService {
       //增加一个Book
       int addBook(Books book);
       //根据id删除一个Book
       int deleteBookById(int id);
       //更新Book
       int updateBook(Books books);
       //根据id查询,返回一个Book
       Books queryBookById(int id);
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   }
   ```

实现类：

```java
package com.feige.service;

import com.feige.dao.BookMapper;
import com.feige.pojo.Books;
import java.util.List;

public class BookServiceImpl implements BookService {

    //调用dao层的操作，设置一个set接口，方便Spring管理
    private BookMapper bookMapper;

    public void setBookMapper(BookMapper bookMapper) {
        this.bookMapper = bookMapper;
    }
    
    public int addBook(Books book) {
        return bookMapper.addBook(book);
    }
    
    public int deleteBookById(int id) {
        return bookMapper.deleteBookById(id);
    }
    
    public int updateBook(Books books) {
        return bookMapper.updateBook(books);
    }
    
    public Books queryBookById(int id) {
        return bookMapper.queryBookById(id);
    }
    
    public List<Books> queryAllBook() {
        return bookMapper.queryAllBook();
    }
}
```

**OK，到此，底层需求操作编写完毕！**

## 4、Spring层

1. 配置**Spring整合MyBatis**，我们这里数据源使用c3p0连接池；

2. 我们去编写Spring整合Mybatis的相关的配置文件； spring-dao.xml

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans.xsd
   http://www.springframework.org/schema/context
   https://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 配置整合mybatis -->
       <!-- 1.关联数据库文件 -->
       <context:property-placeholder location="classpath:database.properties"/>
   
       <!-- 2.数据库连接池 -->
       <!--数据库连接池
   dbcp  半自动化操作  不能自动连接
   c3p0  自动化操作（自动的加载配置文件 并且设置到对象里面）
       -->
       <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
   <!-- 配置连接池属性 -->
   <property name="driverClass" value="${jdbc.driver}"/>
   <property name="jdbcUrl" value="${jdbc.url}"/>
   <property name="user" value="${jdbc.username}"/>
   <property name="password" value="${jdbc.password}"/>
   
   <!-- c3p0连接池的私有属性 -->
   <property name="maxPoolSize" value="30"/>
   <property name="minPoolSize" value="10"/>
   <!-- 关闭连接后不自动commit -->
   <property name="autoCommitOnClose" value="false"/>
   <!-- 获取连接超时时间 -->
   <property name="checkoutTimeout" value="10000"/>
   <!-- 当获取连接失败重试次数 -->
   <property name="acquireRetryAttempts" value="2"/>
       </bean>
   
       <!-- 3.配置SqlSessionFactory对象 -->
       <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource"/>
   <!-- 配置MyBaties全局配置文件:mybatis-config.xml -->
   <property name="configLocation" value="classpath:mybatis-config.xml"/>
       </bean>
   
       <!-- 4.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 -->
       <!--解释 ： https://www.cnblogs.com/jpfss/p/7799806.html-->
       <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
   <!-- 注入sqlSessionFactory -->
   <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
   <!-- 给出需要扫描Dao接口包 -->
   <property name="basePackage" value="com.feige.dao"/>
       </bean>
   
   </beans>
   ```

3. **Spring整合service层**

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 扫描service相关的bean -->
       <context:component-scan base-package="com.kuang.service" />
   
       <!--BookServiceImpl注入到IOC容器中-->
       <bean id="BookServiceImpl" class="com.kuang.service.BookServiceImpl">
   <property name="bookMapper" ref="bookMapper"/>
       </bean>
   
       <!-- 配置事务管理器 -->
       <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource" />
       </bean>
   
   </beans>
   ```

Spring层搞定！再次理解一下，Spring就是一个大杂烩，一个容器！对吧！

## 5、SpringMVC层

1. **web.xml**

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
            version="4.0">
   
       <!--DispatcherServlet-->
       <servlet>
           <servlet-name>DispatcherServlet</servlet-name>
           <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
           <init-param>
               <param-name>contextConfigLocation</param-name>
               <param-value>classpath:applicationContext.xml</param-value>
           </init-param>
           <load-on-startup>1</load-on-startup>
       </servlet>
       <servlet-mapping>
           <servlet-name>DispatcherServlet</servlet-name>
           <url-pattern>/</url-pattern>
       </servlet-mapping>
   
       <!--encodingFilter-->
       <filter>
           <filter-name>encodingFilter</filter-name>
           <filter-class>
               org.springframework.web.filter.CharacterEncodingFilter
           </filter-class>
           <init-param>
               <param-name>encoding</param-name>
               <param-value>utf-8</param-value>
           </init-param>
       </filter>
       <filter-mapping>
           <filter-name>encodingFilter</filter-name>
           <url-pattern>/*</url-pattern>
       </filter-mapping>
       
       <!--Session过期时间-->
       <session-config>
           <session-timeout>15</session-timeout>
       </session-config>
       
   </web-app>
   ```

2. **spring-mvc.xml**

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xmlns:mvc="http://www.springframework.org/schema/mvc"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       https://www.springframework.org/schema/mvc/spring-mvc.xsd">
   
       <!-- 配置SpringMVC -->
       <!-- 1.开启SpringMVC注解驱动 -->
       <mvc:annotation-driven>
           <mvc:message-converters register-defaults="true">
               <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                   <constructor-arg value="UTF-8"/>
               </bean>
               <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                   <property name="objectMapper">
                       <bean class="org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean">
                           <property name="failOnEmptyBeans" value="false"/>
                       </bean>
                   </property>
               </bean>
           </mvc:message-converters>
       </mvc:annotation-driven>
       <!--解决跨域问题-->
       <mvc:cors>
       <mvc:mapping path="/**"
                    allowed-origins="http://127.0.0.1:8090,http://localhost:8090"
                    allowed-methods="POST,GET, OPTIONS,DELETE,PUT"
                    allowed-headers="Content-Type,ContentType,Access-Control-Allow-Headers, Authorization, X-Requested-With"
                    allow-credentials="true"/>
       </mvc:cors>
       <!-- 2.静态资源默认servlet配置-->
       <mvc:default-servlet-handler/>
   
       <!-- 3.配置jsp 显示ViewResolver视图解析器 -->
       <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
           <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
           <property name="prefix" value="/WEB-INF/jsp/" />
           <property name="suffix" value=".jsp" />
       </bean>
   
       <!-- 4.扫描web相关的bean -->
       <context:component-scan base-package="com.feige.controller" />
   
   </beans>
   ```

3. **Spring配置整合文件，applicationContext.xml**

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd">
   
       <import resource="spring-dao.xml"/>
       <import resource="spring-service.xml"/>
       <import resource="spring-mvc.xml"/>
       
   </beans>
   ```

**配置文件，暂时结束！Controller 和 视图层编写**

1. BookController 类编写 ， 方法一：查询全部书籍

   ```java
   @Controller
   @RequestMapping("/book")
   public class BookController {
   
       @Autowired
       @Qualifier("BookServiceImpl")
       private BookService bookService;
   
       @RequestMapping("/allBook")
       public String list(Model model) {
           List<Books> list = bookService.queryAllBook();
           model.addAttribute("list", list);
           return "allBook";
       }
   }
   ```

2. 编写首页 **index.jsp**

   ```html
   <%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" %>
   <!DOCTYPE HTML>
   <html>
   <head>
       <title>首页</title>
       <style type="text/css">
           a {
               text-decoration: none;
               color: black;
               font-size: 18px;
           }
           h3 {
               width: 180px;
               height: 38px;
               margin: 100px auto;
               text-align: center;
               line-height: 38px;
               background: deepskyblue;
               border-radius: 4px;
           }
       </style>
   </head>
   <body>
   
   <h3>
       <a href="${pageContext.request.contextPath}/book/allBook">点击进入列表页</a>
   </h3>
   </body>
   </html>
   ```

3. 书籍列表页面 **allbook.jsp**

   ```jsp
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>书籍列表</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>书籍列表 —— 显示所有书籍</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <div class="row">
           <div class="col-md-4 column">
               <a class="btn btn-primary" href="${pageContext.request.contextPath}/book/toAddBook">新增</a>
           </div>
       </div>
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <table class="table table-hover table-striped">
                   <thead>
                   <tr>
                       <th>书籍编号</th>
                       <th>书籍名字</th>
                       <th>书籍数量</th>
                       <th>书籍详情</th>
                       <th>操作</th>
                   </tr>
                   </thead>
   
                   <tbody>
                   <c:forEach var="book" items="${requestScope.get('list')}">
                       <tr>
                           <td>${book.getBookId()}</td>
                           <td>${book.getBookName()}</td>
                           <td>${book.getBookCounts()}</td>
                           <td>${book.getDetail()}</td>
                           <td>
                               <a href="${pageContext.request.contextPath}/book/toUpdateBook?id=${book.getBookId()}">更改</a> |
                               <a href="${pageContext.request.contextPath}/book/del/${book.getBookId()}">删除</a>
                           </td>
                       </tr>
                   </c:forEach>
                   </tbody>
               </table>
           </div>
       </div>
   </div>
   ```

4. BookController 类编写 ， 方法二：添加书籍

   ```java
   @RequestMapping("/toAddBook")
   public String toAddPaper() {
       return "addBook";
   }
   
   @RequestMapping("/addBook")
   public String addPaper(Books books) {
       System.out.println(books);
       bookService.addBook(books);
       return "redirect:/book/allBook";
   }
   ```

5. 添加书籍页面：**addBook.jsp**

   ```jsp
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   
   <html>
   <head>
       <title>新增书籍</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>新增书籍</small>
                   </h1>
               </div>
           </div>
       </div>
       <form action="${pageContext.request.contextPath}/book/addBook" method="post">
           书籍名称：<input type="text" name="bookName"><br><br><br>
           书籍数量：<input type="text" name="bookCounts"><br><br><br>
           书籍详情：<input type="text" name="detail"><br><br><br>
           <input type="submit" value="添加">
       </form>
   
   </div>
   ```

6. BookController 类编写 ， 方法三：修改书籍

   ```java
   @RequestMapping("/toUpdateBook")
   public String toUpdateBook(Model model, int id) {
       Books books = bookService.queryBookById(id);
       System.out.println(books);
       model.addAttribute("book",books );
       return "updateBook";
   }
   
   @RequestMapping("/updateBook")
   public String updateBook(Model model, Books book) {
       bookService.updateBook(book);
       Books books = bookService.queryBookById(book.getBookID());
       model.addAttribute("books", books);
       return "redirect:/book/allBook";
   }
   ```

7. 修改书籍页面 **updateBook.jsp**

   ```jsp
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>修改信息</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>修改信息</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <form action="${pageContext.request.contextPath}/book/updateBook" method="post">
           <input type="hidden" name="bookID" value="${book.getBookId()}"/>
           书籍名称：<input type="text" name="bookName" value="${book.getBookName()}"/>
           书籍数量：<input type="text" name="bookCounts" value="${book.getBookCounts()}"/>
           书籍详情：<input type="text" name="detail" value="${book.getDetail() }"/>
           <input type="submit" value="提交"/>
       </form>
   
   </div>
   ```

8. BookController 类编写 ， 方法四：删除书籍

   ```java
   @RequestMapping("/del/{bookId}")
   public String deleteBook(@PathVariable("bookId") int id) {
       bookService.deleteBookById(id);
       return "redirect:/book/allBook";
   }
   ```

**配置Tomcat，进行运行！**

到目前为止，这个SSM项目整合已经完全的OK了，可以直接运行进行测试！这个练习十分的重要，大家需要保证，不看任何东西，自己也可以完整的实现出来！

## **6、项目结构图**

![1570186854191.png](https://blog.kuangstudy.com/usr/uploads/2019/10/1086489242.png)

![1570186868239.png](https://blog.kuangstudy.com/usr/uploads/2019/10/2326667495.png)

## 7、错误排查

### 1、访问出现404，排查步骤：**

1. 查看控制台输出，看一下是不是缺少了什么jar包。

2. 如果jar包存在，显示无法输出，就在IDEA的项目发布中，添加lib依赖！

   步骤：点击项目结构----->Artifacts----->点击自己的项目(ssm:war exploded)--->(点击工具栏的第一个)在WEB-INF目录下新建一个lib包----->选中lib------>点击工具栏的第三个然后选中第一个---->把里面的包全部选中点击ok---->点击Apply再ok

   ![image-20200128125126368](E:\Java资料\ssm整合.assets\image-20200128125126368.png)

   ![image-20200128125237179](E:\Java资料\ssm整合.assets\image-20200128125237179.png)

3. 重启Tomcat 即可解决！

### 2、其他错误

#### 1、bean不存在

​	步骤：

​		查看bean注入是否成功 

​		junit单元测试，看我们的代码是否能够查询出来

​		问题不在底层，是我们spring出了问题

​		springMVC整合时没有调用到service层的bean

​			applicationContext.xml没有注册bean

​			web.xml也绑定过配置文件要绑定大的applicationContext.xml

​			

## 8、小结及展望

这个是同学们的第一个SSM整合案例，一定要烂熟于心！

SSM框架的重要程度是不言而喻的，学到这里，大家已经可以进行基本网站的单独开发。但是这只是增删改查的基本操作。可以说学到这里，大家才算是真正的步入了后台开发的门。也就是能找一个后台相关工作的底线。

或许很多人，工作就做这些事情，但是对于个人的提高来说，还远远不够！, 2020-03-02 07:06:53.0, 2020-03-23 19:38:47.0, null, 10]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20004, rs-50012} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20004} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20005} executed. 10.446213 millis. select distinct count(*) from comments c
        where c.blog_id=? and
        c.parent_id is null;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50013} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50013} Header: [count(*)]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50013} Result: [3]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50013} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20005} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20006} created. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id  and
        c.parent_id is null limit ?,?;;
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20006} Parameters : [13, 0, 10]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20006} Types : [INTEGER, INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20006} executed. 6.047106 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id  and
        c.parent_id is null limit ?,?;;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20006, rs-50014} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20006, rs-50014} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20006, rs-50014} Result: [26, 好好, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:35.0, null]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20006, rs-50014} Result: [29, 太好了, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:13.0, null]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20006, rs-50014} Result: [32, <p>feige</p>, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 01:33:26.0, null]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20006, rs-50014} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20006} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} created. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} Parameters : [13, 26]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} executed. 4.513329 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50015} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50015} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50015} Result: [27, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:56.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50015} Result: [28, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:43:03.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50015} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} Parameters : [13, 26]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} executed. 4.935551 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50016} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50016} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50016} Result: [27, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:56.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50016} Result: [28, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:43:03.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50016} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} Parameters : [13, 27]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} executed. 1.063555 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50017} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50017} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50017} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} Parameters : [13, 27]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} executed. 1.755554 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50018} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50018} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50018} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} Parameters : [13, 29]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} executed. 6.615105 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50019} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50019} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50019} Result: [30, 谢谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:43.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50019} Result: [31, 不用谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:47:01.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50019} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} Parameters : [13, 29]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} executed. 4.687107 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50020} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50020} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50020} Result: [30, 谢谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:43.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50020} Result: [31, 不用谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:47:01.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50020} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} Parameters : [13, 30]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} executed. 3.297775 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50021} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50021} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50021} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} Parameters : [13, 30]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} executed. 1.356443 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50022} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50022} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50022} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} Parameters : [13, 32]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} executed. 0.67911 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50023} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50023} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50023} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} Parameters : [13]
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} Types : [INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20001} Parameters : [13]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20001} Types : [INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} executed. 4.075996 millis. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog where id=?
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50024} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50024} Header: [id, type_name, title, content, create_time, change_time, author, view]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50024} Result: [13, mybatis, ssm1整合, # ssm整合

## 1、数据库环境

创建一个存放书籍数据的数据库表

```sql
CREATE DATABASE `ssmbuild`;

USE `ssmbuild`;

DROP TABLE IF EXISTS `books`;

CREATE TABLE `books` (
  `bookId` INT PRIMARY KEY COMMENT '书id',
  `bookName` VARCHAR(100) NOT NULL COMMENT '书名',
  `bookCounts` INT(11) NOT NULL COMMENT '数量',
  ``ssmbuild``ssmbuild`` VARCHAR(200) NOT NULL COMMENT '描述'
) ENGINE=INNODB DEFAULT CHARSET=utf8

INSERT  INTO `books`(`bookId`,`bookName`,`bookCounts`,`detail`)VALUES 
(1,'Java',1,'从入门到放弃'),
(2,'MySQL',10,'从删库到跑路'),
(3,'Linux',5,'从进门到进牢');

SELECT * FROM books
```

## 2、基本环境搭建

1. 新建一Maven项目！ ssmbuild ， 添加web的支持

   ![image-20200128134359317](.\ssm整合.assets\image-20200128134359317.png)

2. 导入相关的pom依赖！

   ```xml
   <dependencies>
       <!--Junit-->
       <dependency>
           <groupId>junit</groupId>
           <artifactId>junit</artifactId>
           <version>4.12</version>
       </dependency>
       <!--数据库驱动-->
       <dependency>
           <groupId>mysql</groupId>
           <artifactId>mysql-connector-java</artifactId>
           <version>5.1.47</version>
       </dependency>
       <!-- 数据库连接池 -->
       <dependency>
           <groupId>com.mchange</groupId>
           <artifactId>c3p0</artifactId>
           <version>0.9.5.2</version>
       </dependency>
   
       <!--Servlet - JSP -->
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>servlet-api</artifactId>
           <version>2.5</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet.jsp</groupId>
           <artifactId>jsp-api</artifactId>
           <version>2.2</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>jstl</artifactId>
           <version>1.2</version>
       </dependency>
   
       <!--Mybatis-->
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis</artifactId>
           <version>3.5.2</version>
       </dependency>
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis-spring</artifactId>
           <version>2.0.2</version>
       </dependency>
   
       <!--Spring-->
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-webmvc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-jdbc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->
       <dependency>
           <groupId>org.projectlombok</groupId>
           <artifactId>lombok</artifactId>
           <version>1.16.10</version>
       </dependency>
   </dependencies>
   ```

3. Maven资源过滤设置

   ```xml
   <build>
       <resources>
           <resource>
               <directory>src/main/java</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
           <resource>
               <directory>src/main/resources</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
       </resources>
   </build>
   ```

4. 建立基本结构和配置框架！

   - com.feige.pojo

   - com.feige.dao

   - com.feige.service

   - com.feige.controller

     在resources目录下创建

   - mybatis-config.xml

     ```xml
     <?xml version="1.0" encoding="UTF-8" ?>
     <!DOCTYPE configuration
             PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
             "http://mybatis.org/dtd/mybatis-3-config.dtd">
     <configuration>
     
     </configuration>
     ```

   - applicationContext.xml

     ```xml
     <?xml version="1.0" encoding="UTF-8"?>
     <beans xmlns="http://www.springframework.org/schema/beans"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://www.springframework.org/schema/beans
             http://www.springframework.org/schema/beans/spring-beans.xsd">
     
     </beans>
     ```

## 3、Mybatis层编写

1. 数据库配置文件 **database.properties**

   ```properties
   jdbc.driver=com.mysql.jdbc.Driver
   jdbc.url=jdbc:mysql://localhost:3306/ssmbuild?useSSL=true&useUnicode=true&characterEncoding=utf8
   jdbc.username=root
   jdbc.password=hufei169357
   ```

2. IDEA关联数据库

3. 编写MyBatis的核心配置文件

   ```xml
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE configuration
           PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-config.dtd">
   <configuration>
       
       <typeAliases>
           <package name="com.feige.pojo"/>
       </typeAliases>
       <mappers>
           <mapper resource="com/feige/dao/BookMapper.xml"/>
       </mappers>
   
   </configuration>
   ```

4. 编写数据库对应的实体类 com.feige.pojo.Books
   使用lombok插件！

   ```java
   package com.kuang.pojo;
   
   import lombok.AllArgsConstructor;
   import lombok.Data;
   import lombok.NoArgsConstructor;
   
   @Data
   @AllArgsConstructor
   @NoArgsConstructor
   public class Books {
       
       private int bookId;
       private String bookName;
       private int bookCounts;
       private String detail;
       
   }
   ```

5. 编写Dao层的 Mapper接口！

   ```java
   package com.kuang.dao;
   
   import com.kuang.pojo.Books;
   import java.util.List;
   
   public interface BookMapper {
   
       //增加一个Book
       int addBook(Books book);
   
       //根据id删除一个Book
       int deleteBookById(int id);
   
       //更新Book
       int updateBook(Books books);
   
       //根据id查询,返回一个Book
       Books queryBookById(int id);
   
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   
   }
   ```

6. 编写接口对应的 Mapper.xml 文件。需要导入MyBatis的包；

   ```xml
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE mapper
           PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
   
   <mapper namespace="com.feige.dao.BooksMapper">
   
       <!--增加一个Book-->
       <insert id="addBook" parameterType="Books">
           insert into books(bookName,bookCounts,detail)
           values (#{bookName}, #{bookCounts}, #{detail})
       </insert>
   
       <!--根据id删除一个Book-->
       <delete id="deleteBookById" parameterType="int">
           delete from books where bookId=#{bookId}
       </delete>
   
       <!--更新Book-->
       <update id="updateBook" parameterType="Books">
           update books
           set bookName = #{bookName},bookCounts = #{bookCounts},detail = #{detail}
           where bookId = #{bookId}
       </update>
   
       <!--根据id查询,返回一个Book-->
       <select id="queryBookById" resultType="Books">
           select * from books
           where bookID = #{bookId}
       </select>
   
       <!--查询全部Book-->
       <select id="queryAllBook" resultType="com.feige.pojo.Books">
           SELECT * from books
       </select>
   
   </mapper>
   ```

7. 编写Service层的接口和实现类
   接口：

   ```java
   package com.feige.service;
   
   import com.feige.pojo.Books;
   
   import java.util.List;
   
   //BookService:底下需要去实现,调用dao层
   public interface BookService {
       //增加一个Book
       int addBook(Books book);
       //根据id删除一个Book
       int deleteBookById(int id);
       //更新Book
       int updateBook(Books books);
       //根据id查询,返回一个Book
       Books queryBookById(int id);
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   }
   ```

实现类：

```java
package com.feige.service;

import com.feige.dao.BookMapper;
import com.feige.pojo.Books;
import java.util.List;

public class BookServiceImpl implements BookService {

    //调用dao层的操作，设置一个set接口，方便Spring管理
    private BookMapper bookMapper;

    public void setBookMapper(BookMapper bookMapper) {
        this.bookMapper = bookMapper;
    }
    
    public int addBook(Books book) {
        return bookMapper.addBook(book);
    }
    
    public int deleteBookById(int id) {
        return bookMapper.deleteBookById(id);
    }
    
    public int updateBook(Books books) {
        return bookMapper.updateBook(books);
    }
    
    public Books queryBookById(int id) {
        return bookMapper.queryBookById(id);
    }
    
    public List<Books> queryAllBook() {
        return bookMapper.queryAllBook();
    }
}
```

**OK，到此，底层需求操作编写完毕！**

## 4、Spring层

1. 配置**Spring整合MyBatis**，我们这里数据源使用c3p0连接池；

2. 我们去编写Spring整合Mybatis的相关的配置文件； spring-dao.xml

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans.xsd
   http://www.springframework.org/schema/context
   https://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 配置整合mybatis -->
       <!-- 1.关联数据库文件 -->
       <context:property-placeholder location="classpath:database.properties"/>
   
       <!-- 2.数据库连接池 -->
       <!--数据库连接池
   dbcp  半自动化操作  不能自动连接
   c3p0  自动化操作（自动的加载配置文件 并且设置到对象里面）
       -->
       <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
   <!-- 配置连接池属性 -->
   <property name="driverClass" value="${jdbc.driver}"/>
   <property name="jdbcUrl" value="${jdbc.url}"/>
   <property name="user" value="${jdbc.username}"/>
   <property name="password" value="${jdbc.password}"/>
   
   <!-- c3p0连接池的私有属性 -->
   <property name="maxPoolSize" value="30"/>
   <property name="minPoolSize" value="10"/>
   <!-- 关闭连接后不自动commit -->
   <property name="autoCommitOnClose" value="false"/>
   <!-- 获取连接超时时间 -->
   <property name="checkoutTimeout" value="10000"/>
   <!-- 当获取连接失败重试次数 -->
   <property name="acquireRetryAttempts" value="2"/>
       </bean>
   
       <!-- 3.配置SqlSessionFactory对象 -->
       <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource"/>
   <!-- 配置MyBaties全局配置文件:mybatis-config.xml -->
   <property name="configLocation" value="classpath:mybatis-config.xml"/>
       </bean>
   
       <!-- 4.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 -->
       <!--解释 ： https://www.cnblogs.com/jpfss/p/7799806.html-->
       <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
   <!-- 注入sqlSessionFactory -->
   <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
   <!-- 给出需要扫描Dao接口包 -->
   <property name="basePackage" value="com.feige.dao"/>
       </bean>
   
   </beans>
   ```

3. **Spring整合service层**

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 扫描service相关的bean -->
       <context:component-scan base-package="com.kuang.service" />
   
       <!--BookServiceImpl注入到IOC容器中-->
       <bean id="BookServiceImpl" class="com.kuang.service.BookServiceImpl">
   <property name="bookMapper" ref="bookMapper"/>
       </bean>
   
       <!-- 配置事务管理器 -->
       <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource" />
       </bean>
   
   </beans>
   ```

Spring层搞定！再次理解一下，Spring就是一个大杂烩，一个容器！对吧！

## 5、SpringMVC层

1. **web.xml**

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
            version="4.0">
   
       <!--DispatcherServlet-->
       <servlet>
           <servlet-name>DispatcherServlet</servlet-name>
           <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
           <init-param>
               <param-name>contextConfigLocation</param-name>
               <param-value>classpath:applicationContext.xml</param-value>
           </init-param>
           <load-on-startup>1</load-on-startup>
       </servlet>
       <servlet-mapping>
           <servlet-name>DispatcherServlet</servlet-name>
           <url-pattern>/</url-pattern>
       </servlet-mapping>
   
       <!--encodingFilter-->
       <filter>
           <filter-name>encodingFilter</filter-name>
           <filter-class>
               org.springframework.web.filter.CharacterEncodingFilter
           </filter-class>
           <init-param>
               <param-name>encoding</param-name>
               <param-value>utf-8</param-value>
           </init-param>
       </filter>
       <filter-mapping>
           <filter-name>encodingFilter</filter-name>
           <url-pattern>/*</url-pattern>
       </filter-mapping>
       
       <!--Session过期时间-->
       <session-config>
           <session-timeout>15</session-timeout>
       </session-config>
       
   </web-app>
   ```

2. **spring-mvc.xml**

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xmlns:mvc="http://www.springframework.org/schema/mvc"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       https://www.springframework.org/schema/mvc/spring-mvc.xsd">
   
       <!-- 配置SpringMVC -->
       <!-- 1.开启SpringMVC注解驱动 -->
       <mvc:annotation-driven>
           <mvc:message-converters register-defaults="true">
               <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                   <constructor-arg value="UTF-8"/>
               </bean>
               <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                   <property name="objectMapper">
                       <bean class="org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean">
                           <property name="failOnEmptyBeans" value="false"/>
                       </bean>
                   </property>
               </bean>
           </mvc:message-converters>
       </mvc:annotation-driven>
       <!--解决跨域问题-->
       <mvc:cors>
       <mvc:mapping path="/**"
                    allowed-origins="http://127.0.0.1:8090,http://localhost:8090"
                    allowed-methods="POST,GET, OPTIONS,DELETE,PUT"
                    allowed-headers="Content-Type,ContentType,Access-Control-Allow-Headers, Authorization, X-Requested-With"
                    allow-credentials="true"/>
       </mvc:cors>
       <!-- 2.静态资源默认servlet配置-->
       <mvc:default-servlet-handler/>
   
       <!-- 3.配置jsp 显示ViewResolver视图解析器 -->
       <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
           <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
           <property name="prefix" value="/WEB-INF/jsp/" />
           <property name="suffix" value=".jsp" />
       </bean>
   
       <!-- 4.扫描web相关的bean -->
       <context:component-scan base-package="com.feige.controller" />
   
   </beans>
   ```

3. **Spring配置整合文件，applicationContext.xml**

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd">
   
       <import resource="spring-dao.xml"/>
       <import resource="spring-service.xml"/>
       <import resource="spring-mvc.xml"/>
       
   </beans>
   ```

**配置文件，暂时结束！Controller 和 视图层编写**

1. BookController 类编写 ， 方法一：查询全部书籍

   ```java
   @Controller
   @RequestMapping("/book")
   public class BookController {
   
       @Autowired
       @Qualifier("BookServiceImpl")
       private BookService bookService;
   
       @RequestMapping("/allBook")
       public String list(Model model) {
           List<Books> list = bookService.queryAllBook();
           model.addAttribute("list", list);
           return "allBook";
       }
   }
   ```

2. 编写首页 **index.jsp**

   ```html
   <%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" %>
   <!DOCTYPE HTML>
   <html>
   <head>
       <title>首页</title>
       <style type="text/css">
           a {
               text-decoration: none;
               color: black;
               font-size: 18px;
           }
           h3 {
               width: 180px;
               height: 38px;
               margin: 100px auto;
               text-align: center;
               line-height: 38px;
               background: deepskyblue;
               border-radius: 4px;
           }
       </style>
   </head>
   <body>
   
   <h3>
       <a href="${pageContext.request.contextPath}/book/allBook">点击进入列表页</a>
   </h3>
   </body>
   </html>
   ```

3. 书籍列表页面 **allbook.jsp**

   ```jsp
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>书籍列表</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>书籍列表 —— 显示所有书籍</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <div class="row">
           <div class="col-md-4 column">
               <a class="btn btn-primary" href="${pageContext.request.contextPath}/book/toAddBook">新增</a>
           </div>
       </div>
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <table class="table table-hover table-striped">
                   <thead>
                   <tr>
                       <th>书籍编号</th>
                       <th>书籍名字</th>
                       <th>书籍数量</th>
                       <th>书籍详情</th>
                       <th>操作</th>
                   </tr>
                   </thead>
   
                   <tbody>
                   <c:forEach var="book" items="${requestScope.get('list')}">
                       <tr>
                           <td>${book.getBookId()}</td>
                           <td>${book.getBookName()}</td>
                           <td>${book.getBookCounts()}</td>
                           <td>${book.getDetail()}</td>
                           <td>
                               <a href="${pageContext.request.contextPath}/book/toUpdateBook?id=${book.getBookId()}">更改</a> |
                               <a href="${pageContext.request.contextPath}/book/del/${book.getBookId()}">删除</a>
                           </td>
                       </tr>
                   </c:forEach>
                   </tbody>
               </table>
           </div>
       </div>
   </div>
   ```

4. BookController 类编写 ， 方法二：添加书籍

   ```java
   @RequestMapping("/toAddBook")
   public String toAddPaper() {
       return "addBook";
   }
   
   @RequestMapping("/addBook")
   public String addPaper(Books books) {
       System.out.println(books);
       bookService.addBook(books);
       return "redirect:/book/allBook";
   }
   ```

5. 添加书籍页面：**addBook.jsp**

   ```jsp
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   
   <html>
   <head>
       <title>新增书籍</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>新增书籍</small>
                   </h1>
               </div>
           </div>
       </div>
       <form action="${pageContext.request.contextPath}/book/addBook" method="post">
           书籍名称：<input type="text" name="bookName"><br><br><br>
           书籍数量：<input type="text" name="bookCounts"><br><br><br>
           书籍详情：<input type="text" name="detail"><br><br><br>
           <input type="submit" value="添加">
       </form>
   
   </div>
   ```

6. BookController 类编写 ， 方法三：修改书籍

   ```java
   @RequestMapping("/toUpdateBook")
   public String toUpdateBook(Model model, int id) {
       Books books = bookService.queryBookById(id);
       System.out.println(books);
       model.addAttribute("book",books );
       return "updateBook";
   }
   
   @RequestMapping("/updateBook")
   public String updateBook(Model model, Books book) {
       bookService.updateBook(book);
       Books books = bookService.queryBookById(book.getBookID());
       model.addAttribute("books", books);
       return "redirect:/book/allBook";
   }
   ```

7. 修改书籍页面 **updateBook.jsp**

   ```jsp
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>修改信息</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>修改信息</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <form action="${pageContext.request.contextPath}/book/updateBook" method="post">
           <input type="hidden" name="bookID" value="${book.getBookId()}"/>
           书籍名称：<input type="text" name="bookName" value="${book.getBookName()}"/>
           书籍数量：<input type="text" name="bookCounts" value="${book.getBookCounts()}"/>
           书籍详情：<input type="text" name="detail" value="${book.getDetail() }"/>
           <input type="submit" value="提交"/>
       </form>
   
   </div>
   ```

8. BookController 类编写 ， 方法四：删除书籍

   ```java
   @RequestMapping("/del/{bookId}")
   public String deleteBook(@PathVariable("bookId") int id) {
       bookService.deleteBookById(id);
       return "redirect:/book/allBook";
   }
   ```

**配置Tomcat，进行运行！**

到目前为止，这个SSM项目整合已经完全的OK了，可以直接运行进行测试！这个练习十分的重要，大家需要保证，不看任何东西，自己也可以完整的实现出来！

## **6、项目结构图**

![1570186854191.png](https://blog.kuangstudy.com/usr/uploads/2019/10/1086489242.png)

![1570186868239.png](https://blog.kuangstudy.com/usr/uploads/2019/10/2326667495.png)

## 7、错误排查

### 1、访问出现404，排查步骤：**

1. 查看控制台输出，看一下是不是缺少了什么jar包。

2. 如果jar包存在，显示无法输出，就在IDEA的项目发布中，添加lib依赖！

   步骤：点击项目结构----->Artifacts----->点击自己的项目(ssm:war exploded)--->(点击工具栏的第一个)在WEB-INF目录下新建一个lib包----->选中lib------>点击工具栏的第三个然后选中第一个---->把里面的包全部选中点击ok---->点击Apply再ok

   ![image-20200128125126368](E:\Java资料\ssm整合.assets\image-20200128125126368.png)

   ![image-20200128125237179](E:\Java资料\ssm整合.assets\image-20200128125237179.png)

3. 重启Tomcat 即可解决！

### 2、其他错误

#### 1、bean不存在

​	步骤：

​		查看bean注入是否成功 

​		junit单元测试，看我们的代码是否能够查询出来

​		问题不在底层，是我们spring出了问题

​		springMVC整合时没有调用到service层的bean

​			applicationContext.xml没有注册bean

​			web.xml也绑定过配置文件要绑定大的applicationContext.xml

​			

## 8、小结及展望

这个是同学们的第一个SSM整合案例，一定要烂熟于心！

SSM框架的重要程度是不言而喻的，学到这里，大家已经可以进行基本网站的单独开发。但是这只是增删改查的基本操作。可以说学到这里，大家才算是真正的步入了后台开发的门。也就是能找一个后台相关工作的底线。

或许很多人，工作就做这些事情，但是对于个人的提高来说，还远远不够！, 2020-03-02 07:06:53.0, 2020-03-23 19:38:47.0, null, 10]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20001} executed. 6.440883 millis. select distinct count(*) from comments c
        where c.blog_id=? and
        c.parent_id is null;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20001, rs-50025} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20001, rs-50025} Header: [count(*)]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20001, rs-50025} Result: [3]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20001, rs-50025} closed
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50024} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20001} clearParameters. 
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20006} Parameters : [13, 0, 10]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20006} Types : [INTEGER, INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20006} executed. 2.135998 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id  and
        c.parent_id is null limit ?,?;;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20006, rs-50026} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20006, rs-50026} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20006, rs-50026} Result: [26, 好好, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:35.0, null]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20006, rs-50026} Result: [29, 太好了, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:13.0, null]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20006, rs-50026} Result: [32, <p>feige</p>, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 01:33:26.0, null]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20006, rs-50026} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20006} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} Parameters : [13, 26]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} executed. 6.335995 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50027} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50027} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50027} Result: [27, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:56.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50027} Result: [28, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:43:03.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50027} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} Parameters : [13, 26]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} executed. 5.941773 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50028} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50028} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50028} Result: [27, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:56.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50028} Result: [28, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:43:03.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50028} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} Parameters : [13, 27]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} executed. 1.093777 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50029} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50029} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50029} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} Parameters : [13, 27]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} executed. 1.041777 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50030} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50030} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50030} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} Parameters : [13, 29]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} executed. 6.168883 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50031} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50031} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50031} Result: [30, 谢谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:43.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50031} Result: [31, 不用谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:47:01.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50031} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} Parameters : [13, 29]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} executed. 3.647552 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50032} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50032} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50032} Result: [30, 谢谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:43.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50032} Result: [31, 不用谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:47:01.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50032} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} Parameters : [13, 30]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} executed. 1.578221 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50033} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50033} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50033} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} Parameters : [13, 30]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} executed. 4.76044 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50034} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50034} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50034} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} Parameters : [13, 32]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} executed. 1.21911 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50035} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50035} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50035} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} Parameters : [13]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} Types : [INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} executed. 1.132444 millis. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog where id=?
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50036} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50036} Header: [id, type_name, title, content, create_time, change_time, author, view]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50036} Result: [13, mybatis, ssm1整合, # ssm整合

## 1、数据库环境

创建一个存放书籍数据的数据库表

```sql
CREATE DATABASE `ssmbuild`;

USE `ssmbuild`;

DROP TABLE IF EXISTS `books`;

CREATE TABLE `books` (
  `bookId` INT PRIMARY KEY COMMENT '书id',
  `bookName` VARCHAR(100) NOT NULL COMMENT '书名',
  `bookCounts` INT(11) NOT NULL COMMENT '数量',
  ``ssmbuild``ssmbuild`` VARCHAR(200) NOT NULL COMMENT '描述'
) ENGINE=INNODB DEFAULT CHARSET=utf8

INSERT  INTO `books`(`bookId`,`bookName`,`bookCounts`,`detail`)VALUES 
(1,'Java',1,'从入门到放弃'),
(2,'MySQL',10,'从删库到跑路'),
(3,'Linux',5,'从进门到进牢');

SELECT * FROM books
```

## 2、基本环境搭建

1. 新建一Maven项目！ ssmbuild ， 添加web的支持

   ![image-20200128134359317](.\ssm整合.assets\image-20200128134359317.png)

2. 导入相关的pom依赖！

   ```xml
   <dependencies>
       <!--Junit-->
       <dependency>
           <groupId>junit</groupId>
           <artifactId>junit</artifactId>
           <version>4.12</version>
       </dependency>
       <!--数据库驱动-->
       <dependency>
           <groupId>mysql</groupId>
           <artifactId>mysql-connector-java</artifactId>
           <version>5.1.47</version>
       </dependency>
       <!-- 数据库连接池 -->
       <dependency>
           <groupId>com.mchange</groupId>
           <artifactId>c3p0</artifactId>
           <version>0.9.5.2</version>
       </dependency>
   
       <!--Servlet - JSP -->
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>servlet-api</artifactId>
           <version>2.5</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet.jsp</groupId>
           <artifactId>jsp-api</artifactId>
           <version>2.2</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>jstl</artifactId>
           <version>1.2</version>
       </dependency>
   
       <!--Mybatis-->
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis</artifactId>
           <version>3.5.2</version>
       </dependency>
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis-spring</artifactId>
           <version>2.0.2</version>
       </dependency>
   
       <!--Spring-->
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-webmvc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-jdbc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->
       <dependency>
           <groupId>org.projectlombok</groupId>
           <artifactId>lombok</artifactId>
           <version>1.16.10</version>
       </dependency>
   </dependencies>
   ```

3. Maven资源过滤设置

   ```xml
   <build>
       <resources>
           <resource>
               <directory>src/main/java</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
           <resource>
               <directory>src/main/resources</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
       </resources>
   </build>
   ```

4. 建立基本结构和配置框架！

   - com.feige.pojo

   - com.feige.dao

   - com.feige.service

   - com.feige.controller

     在resources目录下创建

   - mybatis-config.xml

     ```xml
     <?xml version="1.0" encoding="UTF-8" ?>
     <!DOCTYPE configuration
             PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
             "http://mybatis.org/dtd/mybatis-3-config.dtd">
     <configuration>
     
     </configuration>
     ```

   - applicationContext.xml

     ```xml
     <?xml version="1.0" encoding="UTF-8"?>
     <beans xmlns="http://www.springframework.org/schema/beans"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://www.springframework.org/schema/beans
             http://www.springframework.org/schema/beans/spring-beans.xsd">
     
     </beans>
     ```

## 3、Mybatis层编写

1. 数据库配置文件 **database.properties**

   ```properties
   jdbc.driver=com.mysql.jdbc.Driver
   jdbc.url=jdbc:mysql://localhost:3306/ssmbuild?useSSL=true&useUnicode=true&characterEncoding=utf8
   jdbc.username=root
   jdbc.password=hufei169357
   ```

2. IDEA关联数据库

3. 编写MyBatis的核心配置文件

   ```xml
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE configuration
           PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-config.dtd">
   <configuration>
       
       <typeAliases>
           <package name="com.feige.pojo"/>
       </typeAliases>
       <mappers>
           <mapper resource="com/feige/dao/BookMapper.xml"/>
       </mappers>
   
   </configuration>
   ```

4. 编写数据库对应的实体类 com.feige.pojo.Books
   使用lombok插件！

   ```java
   package com.kuang.pojo;
   
   import lombok.AllArgsConstructor;
   import lombok.Data;
   import lombok.NoArgsConstructor;
   
   @Data
   @AllArgsConstructor
   @NoArgsConstructor
   public class Books {
       
       private int bookId;
       private String bookName;
       private int bookCounts;
       private String detail;
       
   }
   ```

5. 编写Dao层的 Mapper接口！

   ```java
   package com.kuang.dao;
   
   import com.kuang.pojo.Books;
   import java.util.List;
   
   public interface BookMapper {
   
       //增加一个Book
       int addBook(Books book);
   
       //根据id删除一个Book
       int deleteBookById(int id);
   
       //更新Book
       int updateBook(Books books);
   
       //根据id查询,返回一个Book
       Books queryBookById(int id);
   
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   
   }
   ```

6. 编写接口对应的 Mapper.xml 文件。需要导入MyBatis的包；

   ```xml
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE mapper
           PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
   
   <mapper namespace="com.feige.dao.BooksMapper">
   
       <!--增加一个Book-->
       <insert id="addBook" parameterType="Books">
           insert into books(bookName,bookCounts,detail)
           values (#{bookName}, #{bookCounts}, #{detail})
       </insert>
   
       <!--根据id删除一个Book-->
       <delete id="deleteBookById" parameterType="int">
           delete from books where bookId=#{bookId}
       </delete>
   
       <!--更新Book-->
       <update id="updateBook" parameterType="Books">
           update books
           set bookName = #{bookName},bookCounts = #{bookCounts},detail = #{detail}
           where bookId = #{bookId}
       </update>
   
       <!--根据id查询,返回一个Book-->
       <select id="queryBookById" resultType="Books">
           select * from books
           where bookID = #{bookId}
       </select>
   
       <!--查询全部Book-->
       <select id="queryAllBook" resultType="com.feige.pojo.Books">
           SELECT * from books
       </select>
   
   </mapper>
   ```

7. 编写Service层的接口和实现类
   接口：

   ```java
   package com.feige.service;
   
   import com.feige.pojo.Books;
   
   import java.util.List;
   
   //BookService:底下需要去实现,调用dao层
   public interface BookService {
       //增加一个Book
       int addBook(Books book);
       //根据id删除一个Book
       int deleteBookById(int id);
       //更新Book
       int updateBook(Books books);
       //根据id查询,返回一个Book
       Books queryBookById(int id);
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   }
   ```

实现类：

```java
package com.feige.service;

import com.feige.dao.BookMapper;
import com.feige.pojo.Books;
import java.util.List;

public class BookServiceImpl implements BookService {

    //调用dao层的操作，设置一个set接口，方便Spring管理
    private BookMapper bookMapper;

    public void setBookMapper(BookMapper bookMapper) {
        this.bookMapper = bookMapper;
    }
    
    public int addBook(Books book) {
        return bookMapper.addBook(book);
    }
    
    public int deleteBookById(int id) {
        return bookMapper.deleteBookById(id);
    }
    
    public int updateBook(Books books) {
        return bookMapper.updateBook(books);
    }
    
    public Books queryBookById(int id) {
        return bookMapper.queryBookById(id);
    }
    
    public List<Books> queryAllBook() {
        return bookMapper.queryAllBook();
    }
}
```

**OK，到此，底层需求操作编写完毕！**

## 4、Spring层

1. 配置**Spring整合MyBatis**，我们这里数据源使用c3p0连接池；

2. 我们去编写Spring整合Mybatis的相关的配置文件； spring-dao.xml

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans.xsd
   http://www.springframework.org/schema/context
   https://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 配置整合mybatis -->
       <!-- 1.关联数据库文件 -->
       <context:property-placeholder location="classpath:database.properties"/>
   
       <!-- 2.数据库连接池 -->
       <!--数据库连接池
   dbcp  半自动化操作  不能自动连接
   c3p0  自动化操作（自动的加载配置文件 并且设置到对象里面）
       -->
       <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
   <!-- 配置连接池属性 -->
   <property name="driverClass" value="${jdbc.driver}"/>
   <property name="jdbcUrl" value="${jdbc.url}"/>
   <property name="user" value="${jdbc.username}"/>
   <property name="password" value="${jdbc.password}"/>
   
   <!-- c3p0连接池的私有属性 -->
   <property name="maxPoolSize" value="30"/>
   <property name="minPoolSize" value="10"/>
   <!-- 关闭连接后不自动commit -->
   <property name="autoCommitOnClose" value="false"/>
   <!-- 获取连接超时时间 -->
   <property name="checkoutTimeout" value="10000"/>
   <!-- 当获取连接失败重试次数 -->
   <property name="acquireRetryAttempts" value="2"/>
       </bean>
   
       <!-- 3.配置SqlSessionFactory对象 -->
       <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource"/>
   <!-- 配置MyBaties全局配置文件:mybatis-config.xml -->
   <property name="configLocation" value="classpath:mybatis-config.xml"/>
       </bean>
   
       <!-- 4.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 -->
       <!--解释 ： https://www.cnblogs.com/jpfss/p/7799806.html-->
       <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
   <!-- 注入sqlSessionFactory -->
   <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
   <!-- 给出需要扫描Dao接口包 -->
   <property name="basePackage" value="com.feige.dao"/>
       </bean>
   
   </beans>
   ```

3. **Spring整合service层**

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 扫描service相关的bean -->
       <context:component-scan base-package="com.kuang.service" />
   
       <!--BookServiceImpl注入到IOC容器中-->
       <bean id="BookServiceImpl" class="com.kuang.service.BookServiceImpl">
   <property name="bookMapper" ref="bookMapper"/>
       </bean>
   
       <!-- 配置事务管理器 -->
       <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource" />
       </bean>
   
   </beans>
   ```

Spring层搞定！再次理解一下，Spring就是一个大杂烩，一个容器！对吧！

## 5、SpringMVC层

1. **web.xml**

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
            version="4.0">
   
       <!--DispatcherServlet-->
       <servlet>
           <servlet-name>DispatcherServlet</servlet-name>
           <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
           <init-param>
               <param-name>contextConfigLocation</param-name>
               <param-value>classpath:applicationContext.xml</param-value>
           </init-param>
           <load-on-startup>1</load-on-startup>
       </servlet>
       <servlet-mapping>
           <servlet-name>DispatcherServlet</servlet-name>
           <url-pattern>/</url-pattern>
       </servlet-mapping>
   
       <!--encodingFilter-->
       <filter>
           <filter-name>encodingFilter</filter-name>
           <filter-class>
               org.springframework.web.filter.CharacterEncodingFilter
           </filter-class>
           <init-param>
               <param-name>encoding</param-name>
               <param-value>utf-8</param-value>
           </init-param>
       </filter>
       <filter-mapping>
           <filter-name>encodingFilter</filter-name>
           <url-pattern>/*</url-pattern>
       </filter-mapping>
       
       <!--Session过期时间-->
       <session-config>
           <session-timeout>15</session-timeout>
       </session-config>
       
   </web-app>
   ```

2. **spring-mvc.xml**

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xmlns:mvc="http://www.springframework.org/schema/mvc"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       https://www.springframework.org/schema/mvc/spring-mvc.xsd">
   
       <!-- 配置SpringMVC -->
       <!-- 1.开启SpringMVC注解驱动 -->
       <mvc:annotation-driven>
           <mvc:message-converters register-defaults="true">
               <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                   <constructor-arg value="UTF-8"/>
               </bean>
               <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                   <property name="objectMapper">
                       <bean class="org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean">
                           <property name="failOnEmptyBeans" value="false"/>
                       </bean>
                   </property>
               </bean>
           </mvc:message-converters>
       </mvc:annotation-driven>
       <!--解决跨域问题-->
       <mvc:cors>
       <mvc:mapping path="/**"
                    allowed-origins="http://127.0.0.1:8090,http://localhost:8090"
                    allowed-methods="POST,GET, OPTIONS,DELETE,PUT"
                    allowed-headers="Content-Type,ContentType,Access-Control-Allow-Headers, Authorization, X-Requested-With"
                    allow-credentials="true"/>
       </mvc:cors>
       <!-- 2.静态资源默认servlet配置-->
       <mvc:default-servlet-handler/>
   
       <!-- 3.配置jsp 显示ViewResolver视图解析器 -->
       <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
           <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
           <property name="prefix" value="/WEB-INF/jsp/" />
           <property name="suffix" value=".jsp" />
       </bean>
   
       <!-- 4.扫描web相关的bean -->
       <context:component-scan base-package="com.feige.controller" />
   
   </beans>
   ```

3. **Spring配置整合文件，applicationContext.xml**

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd">
   
       <import resource="spring-dao.xml"/>
       <import resource="spring-service.xml"/>
       <import resource="spring-mvc.xml"/>
       
   </beans>
   ```

**配置文件，暂时结束！Controller 和 视图层编写**

1. BookController 类编写 ， 方法一：查询全部书籍

   ```java
   @Controller
   @RequestMapping("/book")
   public class BookController {
   
       @Autowired
       @Qualifier("BookServiceImpl")
       private BookService bookService;
   
       @RequestMapping("/allBook")
       public String list(Model model) {
           List<Books> list = bookService.queryAllBook();
           model.addAttribute("list", list);
           return "allBook";
       }
   }
   ```

2. 编写首页 **index.jsp**

   ```html
   <%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" %>
   <!DOCTYPE HTML>
   <html>
   <head>
       <title>首页</title>
       <style type="text/css">
           a {
               text-decoration: none;
               color: black;
               font-size: 18px;
           }
           h3 {
               width: 180px;
               height: 38px;
               margin: 100px auto;
               text-align: center;
               line-height: 38px;
               background: deepskyblue;
               border-radius: 4px;
           }
       </style>
   </head>
   <body>
   
   <h3>
       <a href="${pageContext.request.contextPath}/book/allBook">点击进入列表页</a>
   </h3>
   </body>
   </html>
   ```

3. 书籍列表页面 **allbook.jsp**

   ```jsp
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>书籍列表</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>书籍列表 —— 显示所有书籍</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <div class="row">
           <div class="col-md-4 column">
               <a class="btn btn-primary" href="${pageContext.request.contextPath}/book/toAddBook">新增</a>
           </div>
       </div>
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <table class="table table-hover table-striped">
                   <thead>
                   <tr>
                       <th>书籍编号</th>
                       <th>书籍名字</th>
                       <th>书籍数量</th>
                       <th>书籍详情</th>
                       <th>操作</th>
                   </tr>
                   </thead>
   
                   <tbody>
                   <c:forEach var="book" items="${requestScope.get('list')}">
                       <tr>
                           <td>${book.getBookId()}</td>
                           <td>${book.getBookName()}</td>
                           <td>${book.getBookCounts()}</td>
                           <td>${book.getDetail()}</td>
                           <td>
                               <a href="${pageContext.request.contextPath}/book/toUpdateBook?id=${book.getBookId()}">更改</a> |
                               <a href="${pageContext.request.contextPath}/book/del/${book.getBookId()}">删除</a>
                           </td>
                       </tr>
                   </c:forEach>
                   </tbody>
               </table>
           </div>
       </div>
   </div>
   ```

4. BookController 类编写 ， 方法二：添加书籍

   ```java
   @RequestMapping("/toAddBook")
   public String toAddPaper() {
       return "addBook";
   }
   
   @RequestMapping("/addBook")
   public String addPaper(Books books) {
       System.out.println(books);
       bookService.addBook(books);
       return "redirect:/book/allBook";
   }
   ```

5. 添加书籍页面：**addBook.jsp**

   ```jsp
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   
   <html>
   <head>
       <title>新增书籍</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>新增书籍</small>
                   </h1>
               </div>
           </div>
       </div>
       <form action="${pageContext.request.contextPath}/book/addBook" method="post">
           书籍名称：<input type="text" name="bookName"><br><br><br>
           书籍数量：<input type="text" name="bookCounts"><br><br><br>
           书籍详情：<input type="text" name="detail"><br><br><br>
           <input type="submit" value="添加">
       </form>
   
   </div>
   ```

6. BookController 类编写 ， 方法三：修改书籍

   ```java
   @RequestMapping("/toUpdateBook")
   public String toUpdateBook(Model model, int id) {
       Books books = bookService.queryBookById(id);
       System.out.println(books);
       model.addAttribute("book",books );
       return "updateBook";
   }
   
   @RequestMapping("/updateBook")
   public String updateBook(Model model, Books book) {
       bookService.updateBook(book);
       Books books = bookService.queryBookById(book.getBookID());
       model.addAttribute("books", books);
       return "redirect:/book/allBook";
   }
   ```

7. 修改书籍页面 **updateBook.jsp**

   ```jsp
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>修改信息</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>修改信息</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <form action="${pageContext.request.contextPath}/book/updateBook" method="post">
           <input type="hidden" name="bookID" value="${book.getBookId()}"/>
           书籍名称：<input type="text" name="bookName" value="${book.getBookName()}"/>
           书籍数量：<input type="text" name="bookCounts" value="${book.getBookCounts()}"/>
           书籍详情：<input type="text" name="detail" value="${book.getDetail() }"/>
           <input type="submit" value="提交"/>
       </form>
   
   </div>
   ```

8. BookController 类编写 ， 方法四：删除书籍

   ```java
   @RequestMapping("/del/{bookId}")
   public String deleteBook(@PathVariable("bookId") int id) {
       bookService.deleteBookById(id);
       return "redirect:/book/allBook";
   }
   ```

**配置Tomcat，进行运行！**

到目前为止，这个SSM项目整合已经完全的OK了，可以直接运行进行测试！这个练习十分的重要，大家需要保证，不看任何东西，自己也可以完整的实现出来！

## **6、项目结构图**

![1570186854191.png](https://blog.kuangstudy.com/usr/uploads/2019/10/1086489242.png)

![1570186868239.png](https://blog.kuangstudy.com/usr/uploads/2019/10/2326667495.png)

## 7、错误排查

### 1、访问出现404，排查步骤：**

1. 查看控制台输出，看一下是不是缺少了什么jar包。

2. 如果jar包存在，显示无法输出，就在IDEA的项目发布中，添加lib依赖！

   步骤：点击项目结构----->Artifacts----->点击自己的项目(ssm:war exploded)--->(点击工具栏的第一个)在WEB-INF目录下新建一个lib包----->选中lib------>点击工具栏的第三个然后选中第一个---->把里面的包全部选中点击ok---->点击Apply再ok

   ![image-20200128125126368](E:\Java资料\ssm整合.assets\image-20200128125126368.png)

   ![image-20200128125237179](E:\Java资料\ssm整合.assets\image-20200128125237179.png)

3. 重启Tomcat 即可解决！

### 2、其他错误

#### 1、bean不存在

​	步骤：

​		查看bean注入是否成功 

​		junit单元测试，看我们的代码是否能够查询出来

​		问题不在底层，是我们spring出了问题

​		springMVC整合时没有调用到service层的bean

​			applicationContext.xml没有注册bean

​			web.xml也绑定过配置文件要绑定大的applicationContext.xml

​			

## 8、小结及展望

这个是同学们的第一个SSM整合案例，一定要烂熟于心！

SSM框架的重要程度是不言而喻的，学到这里，大家已经可以进行基本网站的单独开发。但是这只是增删改查的基本操作。可以说学到这里，大家才算是真正的步入了后台开发的门。也就是能找一个后台相关工作的底线。

或许很多人，工作就做这些事情，但是对于个人的提高来说，还远远不够！, 2020-03-02 07:06:53.0, 2020-03-23 19:38:47.0, null, 10]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50036} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} Parameters : [13]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} Types : [INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} executed. 0.733333 millis. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog where id=?
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50037} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50037} Header: [id, type_name, title, content, create_time, change_time, author, view]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50037} Result: [13, mybatis, ssm1整合, # ssm整合

## 1、数据库环境

创建一个存放书籍数据的数据库表

```sql
CREATE DATABASE `ssmbuild`;

USE `ssmbuild`;

DROP TABLE IF EXISTS `books`;

CREATE TABLE `books` (
  `bookId` INT PRIMARY KEY COMMENT '书id',
  `bookName` VARCHAR(100) NOT NULL COMMENT '书名',
  `bookCounts` INT(11) NOT NULL COMMENT '数量',
  ``ssmbuild``ssmbuild`` VARCHAR(200) NOT NULL COMMENT '描述'
) ENGINE=INNODB DEFAULT CHARSET=utf8

INSERT  INTO `books`(`bookId`,`bookName`,`bookCounts`,`detail`)VALUES 
(1,'Java',1,'从入门到放弃'),
(2,'MySQL',10,'从删库到跑路'),
(3,'Linux',5,'从进门到进牢');

SELECT * FROM books
```

## 2、基本环境搭建

1. 新建一Maven项目！ ssmbuild ， 添加web的支持

   ![image-20200128134359317](.\ssm整合.assets\image-20200128134359317.png)

2. 导入相关的pom依赖！

   ```xml
   <dependencies>
       <!--Junit-->
       <dependency>
           <groupId>junit</groupId>
           <artifactId>junit</artifactId>
           <version>4.12</version>
       </dependency>
       <!--数据库驱动-->
       <dependency>
           <groupId>mysql</groupId>
           <artifactId>mysql-connector-java</artifactId>
           <version>5.1.47</version>
       </dependency>
       <!-- 数据库连接池 -->
       <dependency>
           <groupId>com.mchange</groupId>
           <artifactId>c3p0</artifactId>
           <version>0.9.5.2</version>
       </dependency>
   
       <!--Servlet - JSP -->
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>servlet-api</artifactId>
           <version>2.5</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet.jsp</groupId>
           <artifactId>jsp-api</artifactId>
           <version>2.2</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>jstl</artifactId>
           <version>1.2</version>
       </dependency>
   
       <!--Mybatis-->
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis</artifactId>
           <version>3.5.2</version>
       </dependency>
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis-spring</artifactId>
           <version>2.0.2</version>
       </dependency>
   
       <!--Spring-->
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-webmvc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-jdbc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->
       <dependency>
           <groupId>org.projectlombok</groupId>
           <artifactId>lombok</artifactId>
           <version>1.16.10</version>
       </dependency>
   </dependencies>
   ```

3. Maven资源过滤设置

   ```xml
   <build>
       <resources>
           <resource>
               <directory>src/main/java</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
           <resource>
               <directory>src/main/resources</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
       </resources>
   </build>
   ```

4. 建立基本结构和配置框架！

   - com.feige.pojo

   - com.feige.dao

   - com.feige.service

   - com.feige.controller

     在resources目录下创建

   - mybatis-config.xml

     ```xml
     <?xml version="1.0" encoding="UTF-8" ?>
     <!DOCTYPE configuration
             PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
             "http://mybatis.org/dtd/mybatis-3-config.dtd">
     <configuration>
     
     </configuration>
     ```

   - applicationContext.xml

     ```xml
     <?xml version="1.0" encoding="UTF-8"?>
     <beans xmlns="http://www.springframework.org/schema/beans"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://www.springframework.org/schema/beans
             http://www.springframework.org/schema/beans/spring-beans.xsd">
     
     </beans>
     ```

## 3、Mybatis层编写

1. 数据库配置文件 **database.properties**

   ```properties
   jdbc.driver=com.mysql.jdbc.Driver
   jdbc.url=jdbc:mysql://localhost:3306/ssmbuild?useSSL=true&useUnicode=true&characterEncoding=utf8
   jdbc.username=root
   jdbc.password=hufei169357
   ```

2. IDEA关联数据库

3. 编写MyBatis的核心配置文件

   ```xml
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE configuration
           PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-config.dtd">
   <configuration>
       
       <typeAliases>
           <package name="com.feige.pojo"/>
       </typeAliases>
       <mappers>
           <mapper resource="com/feige/dao/BookMapper.xml"/>
       </mappers>
   
   </configuration>
   ```

4. 编写数据库对应的实体类 com.feige.pojo.Books
   使用lombok插件！

   ```java
   package com.kuang.pojo;
   
   import lombok.AllArgsConstructor;
   import lombok.Data;
   import lombok.NoArgsConstructor;
   
   @Data
   @AllArgsConstructor
   @NoArgsConstructor
   public class Books {
       
       private int bookId;
       private String bookName;
       private int bookCounts;
       private String detail;
       
   }
   ```

5. 编写Dao层的 Mapper接口！

   ```java
   package com.kuang.dao;
   
   import com.kuang.pojo.Books;
   import java.util.List;
   
   public interface BookMapper {
   
       //增加一个Book
       int addBook(Books book);
   
       //根据id删除一个Book
       int deleteBookById(int id);
   
       //更新Book
       int updateBook(Books books);
   
       //根据id查询,返回一个Book
       Books queryBookById(int id);
   
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   
   }
   ```

6. 编写接口对应的 Mapper.xml 文件。需要导入MyBatis的包；

   ```xml
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE mapper
           PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
   
   <mapper namespace="com.feige.dao.BooksMapper">
   
       <!--增加一个Book-->
       <insert id="addBook" parameterType="Books">
           insert into books(bookName,bookCounts,detail)
           values (#{bookName}, #{bookCounts}, #{detail})
       </insert>
   
       <!--根据id删除一个Book-->
       <delete id="deleteBookById" parameterType="int">
           delete from books where bookId=#{bookId}
       </delete>
   
       <!--更新Book-->
       <update id="updateBook" parameterType="Books">
           update books
           set bookName = #{bookName},bookCounts = #{bookCounts},detail = #{detail}
           where bookId = #{bookId}
       </update>
   
       <!--根据id查询,返回一个Book-->
       <select id="queryBookById" resultType="Books">
           select * from books
           where bookID = #{bookId}
       </select>
   
       <!--查询全部Book-->
       <select id="queryAllBook" resultType="com.feige.pojo.Books">
           SELECT * from books
       </select>
   
   </mapper>
   ```

7. 编写Service层的接口和实现类
   接口：

   ```java
   package com.feige.service;
   
   import com.feige.pojo.Books;
   
   import java.util.List;
   
   //BookService:底下需要去实现,调用dao层
   public interface BookService {
       //增加一个Book
       int addBook(Books book);
       //根据id删除一个Book
       int deleteBookById(int id);
       //更新Book
       int updateBook(Books books);
       //根据id查询,返回一个Book
       Books queryBookById(int id);
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   }
   ```

实现类：

```java
package com.feige.service;

import com.feige.dao.BookMapper;
import com.feige.pojo.Books;
import java.util.List;

public class BookServiceImpl implements BookService {

    //调用dao层的操作，设置一个set接口，方便Spring管理
    private BookMapper bookMapper;

    public void setBookMapper(BookMapper bookMapper) {
        this.bookMapper = bookMapper;
    }
    
    public int addBook(Books book) {
        return bookMapper.addBook(book);
    }
    
    public int deleteBookById(int id) {
        return bookMapper.deleteBookById(id);
    }
    
    public int updateBook(Books books) {
        return bookMapper.updateBook(books);
    }
    
    public Books queryBookById(int id) {
        return bookMapper.queryBookById(id);
    }
    
    public List<Books> queryAllBook() {
        return bookMapper.queryAllBook();
    }
}
```

**OK，到此，底层需求操作编写完毕！**

## 4、Spring层

1. 配置**Spring整合MyBatis**，我们这里数据源使用c3p0连接池；

2. 我们去编写Spring整合Mybatis的相关的配置文件； spring-dao.xml

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans.xsd
   http://www.springframework.org/schema/context
   https://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 配置整合mybatis -->
       <!-- 1.关联数据库文件 -->
       <context:property-placeholder location="classpath:database.properties"/>
   
       <!-- 2.数据库连接池 -->
       <!--数据库连接池
   dbcp  半自动化操作  不能自动连接
   c3p0  自动化操作（自动的加载配置文件 并且设置到对象里面）
       -->
       <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
   <!-- 配置连接池属性 -->
   <property name="driverClass" value="${jdbc.driver}"/>
   <property name="jdbcUrl" value="${jdbc.url}"/>
   <property name="user" value="${jdbc.username}"/>
   <property name="password" value="${jdbc.password}"/>
   
   <!-- c3p0连接池的私有属性 -->
   <property name="maxPoolSize" value="30"/>
   <property name="minPoolSize" value="10"/>
   <!-- 关闭连接后不自动commit -->
   <property name="autoCommitOnClose" value="false"/>
   <!-- 获取连接超时时间 -->
   <property name="checkoutTimeout" value="10000"/>
   <!-- 当获取连接失败重试次数 -->
   <property name="acquireRetryAttempts" value="2"/>
       </bean>
   
       <!-- 3.配置SqlSessionFactory对象 -->
       <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource"/>
   <!-- 配置MyBaties全局配置文件:mybatis-config.xml -->
   <property name="configLocation" value="classpath:mybatis-config.xml"/>
       </bean>
   
       <!-- 4.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 -->
       <!--解释 ： https://www.cnblogs.com/jpfss/p/7799806.html-->
       <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
   <!-- 注入sqlSessionFactory -->
   <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
   <!-- 给出需要扫描Dao接口包 -->
   <property name="basePackage" value="com.feige.dao"/>
       </bean>
   
   </beans>
   ```

3. **Spring整合service层**

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 扫描service相关的bean -->
       <context:component-scan base-package="com.kuang.service" />
   
       <!--BookServiceImpl注入到IOC容器中-->
       <bean id="BookServiceImpl" class="com.kuang.service.BookServiceImpl">
   <property name="bookMapper" ref="bookMapper"/>
       </bean>
   
       <!-- 配置事务管理器 -->
       <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource" />
       </bean>
   
   </beans>
   ```

Spring层搞定！再次理解一下，Spring就是一个大杂烩，一个容器！对吧！

## 5、SpringMVC层

1. **web.xml**

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
            version="4.0">
   
       <!--DispatcherServlet-->
       <servlet>
           <servlet-name>DispatcherServlet</servlet-name>
           <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
           <init-param>
               <param-name>contextConfigLocation</param-name>
               <param-value>classpath:applicationContext.xml</param-value>
           </init-param>
           <load-on-startup>1</load-on-startup>
       </servlet>
       <servlet-mapping>
           <servlet-name>DispatcherServlet</servlet-name>
           <url-pattern>/</url-pattern>
       </servlet-mapping>
   
       <!--encodingFilter-->
       <filter>
           <filter-name>encodingFilter</filter-name>
           <filter-class>
               org.springframework.web.filter.CharacterEncodingFilter
           </filter-class>
           <init-param>
               <param-name>encoding</param-name>
               <param-value>utf-8</param-value>
           </init-param>
       </filter>
       <filter-mapping>
           <filter-name>encodingFilter</filter-name>
           <url-pattern>/*</url-pattern>
       </filter-mapping>
       
       <!--Session过期时间-->
       <session-config>
           <session-timeout>15</session-timeout>
       </session-config>
       
   </web-app>
   ```

2. **spring-mvc.xml**

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xmlns:mvc="http://www.springframework.org/schema/mvc"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       https://www.springframework.org/schema/mvc/spring-mvc.xsd">
   
       <!-- 配置SpringMVC -->
       <!-- 1.开启SpringMVC注解驱动 -->
       <mvc:annotation-driven>
           <mvc:message-converters register-defaults="true">
               <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                   <constructor-arg value="UTF-8"/>
               </bean>
               <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                   <property name="objectMapper">
                       <bean class="org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean">
                           <property name="failOnEmptyBeans" value="false"/>
                       </bean>
                   </property>
               </bean>
           </mvc:message-converters>
       </mvc:annotation-driven>
       <!--解决跨域问题-->
       <mvc:cors>
       <mvc:mapping path="/**"
                    allowed-origins="http://127.0.0.1:8090,http://localhost:8090"
                    allowed-methods="POST,GET, OPTIONS,DELETE,PUT"
                    allowed-headers="Content-Type,ContentType,Access-Control-Allow-Headers, Authorization, X-Requested-With"
                    allow-credentials="true"/>
       </mvc:cors>
       <!-- 2.静态资源默认servlet配置-->
       <mvc:default-servlet-handler/>
   
       <!-- 3.配置jsp 显示ViewResolver视图解析器 -->
       <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
           <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
           <property name="prefix" value="/WEB-INF/jsp/" />
           <property name="suffix" value=".jsp" />
       </bean>
   
       <!-- 4.扫描web相关的bean -->
       <context:component-scan base-package="com.feige.controller" />
   
   </beans>
   ```

3. **Spring配置整合文件，applicationContext.xml**

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd">
   
       <import resource="spring-dao.xml"/>
       <import resource="spring-service.xml"/>
       <import resource="spring-mvc.xml"/>
       
   </beans>
   ```

**配置文件，暂时结束！Controller 和 视图层编写**

1. BookController 类编写 ， 方法一：查询全部书籍

   ```java
   @Controller
   @RequestMapping("/book")
   public class BookController {
   
       @Autowired
       @Qualifier("BookServiceImpl")
       private BookService bookService;
   
       @RequestMapping("/allBook")
       public String list(Model model) {
           List<Books> list = bookService.queryAllBook();
           model.addAttribute("list", list);
           return "allBook";
       }
   }
   ```

2. 编写首页 **index.jsp**

   ```html
   <%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" %>
   <!DOCTYPE HTML>
   <html>
   <head>
       <title>首页</title>
       <style type="text/css">
           a {
               text-decoration: none;
               color: black;
               font-size: 18px;
           }
           h3 {
               width: 180px;
               height: 38px;
               margin: 100px auto;
               text-align: center;
               line-height: 38px;
               background: deepskyblue;
               border-radius: 4px;
           }
       </style>
   </head>
   <body>
   
   <h3>
       <a href="${pageContext.request.contextPath}/book/allBook">点击进入列表页</a>
   </h3>
   </body>
   </html>
   ```

3. 书籍列表页面 **allbook.jsp**

   ```jsp
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>书籍列表</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>书籍列表 —— 显示所有书籍</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <div class="row">
           <div class="col-md-4 column">
               <a class="btn btn-primary" href="${pageContext.request.contextPath}/book/toAddBook">新增</a>
           </div>
       </div>
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <table class="table table-hover table-striped">
                   <thead>
                   <tr>
                       <th>书籍编号</th>
                       <th>书籍名字</th>
                       <th>书籍数量</th>
                       <th>书籍详情</th>
                       <th>操作</th>
                   </tr>
                   </thead>
   
                   <tbody>
                   <c:forEach var="book" items="${requestScope.get('list')}">
                       <tr>
                           <td>${book.getBookId()}</td>
                           <td>${book.getBookName()}</td>
                           <td>${book.getBookCounts()}</td>
                           <td>${book.getDetail()}</td>
                           <td>
                               <a href="${pageContext.request.contextPath}/book/toUpdateBook?id=${book.getBookId()}">更改</a> |
                               <a href="${pageContext.request.contextPath}/book/del/${book.getBookId()}">删除</a>
                           </td>
                       </tr>
                   </c:forEach>
                   </tbody>
               </table>
           </div>
       </div>
   </div>
   ```

4. BookController 类编写 ， 方法二：添加书籍

   ```java
   @RequestMapping("/toAddBook")
   public String toAddPaper() {
       return "addBook";
   }
   
   @RequestMapping("/addBook")
   public String addPaper(Books books) {
       System.out.println(books);
       bookService.addBook(books);
       return "redirect:/book/allBook";
   }
   ```

5. 添加书籍页面：**addBook.jsp**

   ```jsp
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   
   <html>
   <head>
       <title>新增书籍</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>新增书籍</small>
                   </h1>
               </div>
           </div>
       </div>
       <form action="${pageContext.request.contextPath}/book/addBook" method="post">
           书籍名称：<input type="text" name="bookName"><br><br><br>
           书籍数量：<input type="text" name="bookCounts"><br><br><br>
           书籍详情：<input type="text" name="detail"><br><br><br>
           <input type="submit" value="添加">
       </form>
   
   </div>
   ```

6. BookController 类编写 ， 方法三：修改书籍

   ```java
   @RequestMapping("/toUpdateBook")
   public String toUpdateBook(Model model, int id) {
       Books books = bookService.queryBookById(id);
       System.out.println(books);
       model.addAttribute("book",books );
       return "updateBook";
   }
   
   @RequestMapping("/updateBook")
   public String updateBook(Model model, Books book) {
       bookService.updateBook(book);
       Books books = bookService.queryBookById(book.getBookID());
       model.addAttribute("books", books);
       return "redirect:/book/allBook";
   }
   ```

7. 修改书籍页面 **updateBook.jsp**

   ```jsp
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>修改信息</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>修改信息</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <form action="${pageContext.request.contextPath}/book/updateBook" method="post">
           <input type="hidden" name="bookID" value="${book.getBookId()}"/>
           书籍名称：<input type="text" name="bookName" value="${book.getBookName()}"/>
           书籍数量：<input type="text" name="bookCounts" value="${book.getBookCounts()}"/>
           书籍详情：<input type="text" name="detail" value="${book.getDetail() }"/>
           <input type="submit" value="提交"/>
       </form>
   
   </div>
   ```

8. BookController 类编写 ， 方法四：删除书籍

   ```java
   @RequestMapping("/del/{bookId}")
   public String deleteBook(@PathVariable("bookId") int id) {
       bookService.deleteBookById(id);
       return "redirect:/book/allBook";
   }
   ```

**配置Tomcat，进行运行！**

到目前为止，这个SSM项目整合已经完全的OK了，可以直接运行进行测试！这个练习十分的重要，大家需要保证，不看任何东西，自己也可以完整的实现出来！

## **6、项目结构图**

![1570186854191.png](https://blog.kuangstudy.com/usr/uploads/2019/10/1086489242.png)

![1570186868239.png](https://blog.kuangstudy.com/usr/uploads/2019/10/2326667495.png)

## 7、错误排查

### 1、访问出现404，排查步骤：**

1. 查看控制台输出，看一下是不是缺少了什么jar包。

2. 如果jar包存在，显示无法输出，就在IDEA的项目发布中，添加lib依赖！

   步骤：点击项目结构----->Artifacts----->点击自己的项目(ssm:war exploded)--->(点击工具栏的第一个)在WEB-INF目录下新建一个lib包----->选中lib------>点击工具栏的第三个然后选中第一个---->把里面的包全部选中点击ok---->点击Apply再ok

   ![image-20200128125126368](E:\Java资料\ssm整合.assets\image-20200128125126368.png)

   ![image-20200128125237179](E:\Java资料\ssm整合.assets\image-20200128125237179.png)

3. 重启Tomcat 即可解决！

### 2、其他错误

#### 1、bean不存在

​	步骤：

​		查看bean注入是否成功 

​		junit单元测试，看我们的代码是否能够查询出来

​		问题不在底层，是我们spring出了问题

​		springMVC整合时没有调用到service层的bean

​			applicationContext.xml没有注册bean

​			web.xml也绑定过配置文件要绑定大的applicationContext.xml

​			

## 8、小结及展望

这个是同学们的第一个SSM整合案例，一定要烂熟于心！

SSM框架的重要程度是不言而喻的，学到这里，大家已经可以进行基本网站的单独开发。但是这只是增删改查的基本操作。可以说学到这里，大家才算是真正的步入了后台开发的门。也就是能找一个后台相关工作的底线。

或许很多人，工作就做这些事情，但是对于个人的提高来说，还远远不够！, 2020-03-02 07:06:53.0, 2020-03-23 19:38:47.0, null, 10]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50037} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20001} Parameters : [13]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20001} Types : [INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20001} executed. 3.534219 millis. select distinct count(*) from comments c
        where c.blog_id=? and
        c.parent_id is null;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20001, rs-50038} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20001, rs-50038} Header: [count(*)]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20001, rs-50038} Result: [3]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20001, rs-50038} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20001} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20002} Parameters : [13, 0, 10]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20002} Types : [INTEGER, INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20002} executed. 1.816443 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id  and
        c.parent_id is null limit ?,?;;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20002, rs-50039} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20002, rs-50039} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20002, rs-50039} Result: [26, 好好, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:35.0, null]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20002, rs-50039} Result: [29, 太好了, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:13.0, null]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20002, rs-50039} Result: [32, <p>feige</p>, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 01:33:26.0, null]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20002, rs-50039} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20002} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Parameters : [13, 26]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} executed. 6.817327 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50040} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50040} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50040} Result: [27, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:56.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50040} Result: [28, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:43:03.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50040} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Parameters : [13, 26]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} executed. 6.564883 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50041} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50041} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50041} Result: [27, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:56.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50041} Result: [28, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:43:03.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50041} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Parameters : [13, 27]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} executed. 1.36311 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50042} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50042} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50042} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Parameters : [13, 27]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} executed. 0.799555 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50043} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50043} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50043} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Parameters : [13, 29]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} executed. 3.575997 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50044} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50044} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50044} Result: [30, 谢谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:43.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50044} Result: [31, 不用谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:47:01.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50044} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Parameters : [13, 29]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} executed. 3.318219 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50045} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50045} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50045} Result: [30, 谢谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:43.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50045} Result: [31, 不用谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:47:01.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50045} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Parameters : [13, 30]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} executed. 1.301777 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50046} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50046} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50046} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Parameters : [13, 30]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} executed. 0.601777 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50047} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50047} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50047} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Parameters : [13, 32]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} executed. 0.53911 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50048} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50048} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50048} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20001} Parameters : [13]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20001} Types : [INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20001} executed. 2.752887 millis. select distinct count(*) from comments c
        where c.blog_id=? and
        c.parent_id is null;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20001, rs-50049} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20001, rs-50049} Header: [count(*)]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20001, rs-50049} Result: [3]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20001, rs-50049} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20001} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20002} Parameters : [13, 10, 10]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20002} Types : [INTEGER, INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20002} executed. 0.876443 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id  and
        c.parent_id is null limit ?,?;;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20002, rs-50050} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20002, rs-50050} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20002, rs-50050} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20002} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20001} Parameters : [13]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20001} Types : [INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20001} executed. 2.374664 millis. select distinct count(*) from comments c
        where c.blog_id=? and
        c.parent_id is null;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20001, rs-50051} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20001, rs-50051} Header: [count(*)]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20001, rs-50051} Result: [3]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20001, rs-50051} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20001} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20002} Parameters : [13, 0, 10]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20002} Types : [INTEGER, INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20002} executed. 1.731109 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id  and
        c.parent_id is null limit ?,?;;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20002, rs-50052} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20002, rs-50052} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20002, rs-50052} Result: [26, 好好, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:35.0, null]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20002, rs-50052} Result: [29, 太好了, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:13.0, null]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20002, rs-50052} Result: [32, <p>feige</p>, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 01:33:26.0, null]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20002, rs-50052} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20002} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Parameters : [13, 26]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} executed. 3.615552 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50053} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50053} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50053} Result: [27, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:56.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50053} Result: [28, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:43:03.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50053} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Parameters : [13, 26]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} executed. 3.295108 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50054} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50054} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50054} Result: [27, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:56.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50054} Result: [28, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:43:03.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50054} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Parameters : [13, 27]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} executed. 0.969777 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50055} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50055} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50055} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Parameters : [13, 27]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} executed. 0.632444 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50056} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50056} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50056} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Parameters : [13, 29]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} executed. 3.209775 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50057} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50057} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50057} Result: [30, 谢谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:43.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50057} Result: [31, 不用谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:47:01.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50057} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Parameters : [13, 29]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} executed. 3.326663 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50058} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50058} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50058} Result: [30, 谢谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:43.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50058} Result: [31, 不用谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:47:01.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50058} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Parameters : [13, 30]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} executed. 0.597777 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50059} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50059} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50059} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Parameters : [13, 30]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} executed. 0.518666 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50060} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50060} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50060} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Parameters : [13, 32]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} executed. 0.483555 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50061} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50061} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50061} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20001} Parameters : [13]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20001} Types : [INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20001} executed. 2.01511 millis. select distinct count(*) from comments c
        where c.blog_id=? and
        c.parent_id is null;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20001, rs-50062} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20001, rs-50062} Header: [count(*)]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20001, rs-50062} Result: [3]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20001, rs-50062} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20001} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20002} Parameters : [13, 0, 10]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20002} Types : [INTEGER, INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20002} executed. 1.086666 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id  and
        c.parent_id is null limit ?,?;;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20002, rs-50063} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20002, rs-50063} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20002, rs-50063} Result: [26, 好好, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:35.0, null]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20002, rs-50063} Result: [29, 太好了, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:13.0, null]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20002, rs-50063} Result: [32, <p>feige</p>, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 01:33:26.0, null]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20002, rs-50063} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20002} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Parameters : [13, 26]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} executed. 3.678219 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50064} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50064} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50064} Result: [27, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:56.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50064} Result: [28, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:43:03.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50064} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Parameters : [13, 26]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} executed. 3.38933 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50065} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50065} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50065} Result: [27, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:56.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50065} Result: [28, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:43:03.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50065} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Parameters : [13, 27]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} executed. 0.702221 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50066} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50066} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50066} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Parameters : [13, 27]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} executed. 0.616 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50067} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50067} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50067} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Parameters : [13, 29]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} executed. 3.523552 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50068} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50068} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50068} Result: [30, 谢谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:43.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50068} Result: [31, 不用谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:47:01.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50068} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Parameters : [13, 29]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} executed. 3.455553 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50069} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50069} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50069} Result: [30, 谢谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:43.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50069} Result: [31, 不用谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:47:01.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50069} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Parameters : [13, 30]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} executed. 0.81111 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50070} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50070} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50070} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Parameters : [13, 30]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} executed. 0.637333 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50071} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50071} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50071} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Parameters : [13, 32]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} executed. 0.577333 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50072} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50072} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50072} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20004} Parameters : [13]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20004} Types : [INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20004} executed. 0.909332 millis. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog where id=?
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20004, rs-50073} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20004, rs-50073} Header: [id, type_name, title, content, create_time, change_time, author, view]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20004, rs-50073} Result: [13, mybatis, ssm1整合, # ssm整合

## 1、数据库环境

创建一个存放书籍数据的数据库表

```sql
CREATE DATABASE `ssmbuild`;

USE `ssmbuild`;

DROP TABLE IF EXISTS `books`;

CREATE TABLE `books` (
  `bookId` INT PRIMARY KEY COMMENT '书id',
  `bookName` VARCHAR(100) NOT NULL COMMENT '书名',
  `bookCounts` INT(11) NOT NULL COMMENT '数量',
  ``ssmbuild``ssmbuild`` VARCHAR(200) NOT NULL COMMENT '描述'
) ENGINE=INNODB DEFAULT CHARSET=utf8

INSERT  INTO `books`(`bookId`,`bookName`,`bookCounts`,`detail`)VALUES 
(1,'Java',1,'从入门到放弃'),
(2,'MySQL',10,'从删库到跑路'),
(3,'Linux',5,'从进门到进牢');

SELECT * FROM books
```

## 2、基本环境搭建

1. 新建一Maven项目！ ssmbuild ， 添加web的支持

   ![image-20200128134359317](.\ssm整合.assets\image-20200128134359317.png)

2. 导入相关的pom依赖！

   ```xml
   <dependencies>
       <!--Junit-->
       <dependency>
           <groupId>junit</groupId>
           <artifactId>junit</artifactId>
           <version>4.12</version>
       </dependency>
       <!--数据库驱动-->
       <dependency>
           <groupId>mysql</groupId>
           <artifactId>mysql-connector-java</artifactId>
           <version>5.1.47</version>
       </dependency>
       <!-- 数据库连接池 -->
       <dependency>
           <groupId>com.mchange</groupId>
           <artifactId>c3p0</artifactId>
           <version>0.9.5.2</version>
       </dependency>
   
       <!--Servlet - JSP -->
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>servlet-api</artifactId>
           <version>2.5</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet.jsp</groupId>
           <artifactId>jsp-api</artifactId>
           <version>2.2</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>jstl</artifactId>
           <version>1.2</version>
       </dependency>
   
       <!--Mybatis-->
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis</artifactId>
           <version>3.5.2</version>
       </dependency>
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis-spring</artifactId>
           <version>2.0.2</version>
       </dependency>
   
       <!--Spring-->
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-webmvc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-jdbc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->
       <dependency>
           <groupId>org.projectlombok</groupId>
           <artifactId>lombok</artifactId>
           <version>1.16.10</version>
       </dependency>
   </dependencies>
   ```

3. Maven资源过滤设置

   ```xml
   <build>
       <resources>
           <resource>
               <directory>src/main/java</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
           <resource>
               <directory>src/main/resources</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
       </resources>
   </build>
   ```

4. 建立基本结构和配置框架！

   - com.feige.pojo

   - com.feige.dao

   - com.feige.service

   - com.feige.controller

     在resources目录下创建

   - mybatis-config.xml

     ```xml
     <?xml version="1.0" encoding="UTF-8" ?>
     <!DOCTYPE configuration
             PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
             "http://mybatis.org/dtd/mybatis-3-config.dtd">
     <configuration>
     
     </configuration>
     ```

   - applicationContext.xml

     ```xml
     <?xml version="1.0" encoding="UTF-8"?>
     <beans xmlns="http://www.springframework.org/schema/beans"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://www.springframework.org/schema/beans
             http://www.springframework.org/schema/beans/spring-beans.xsd">
     
     </beans>
     ```

## 3、Mybatis层编写

1. 数据库配置文件 **database.properties**

   ```properties
   jdbc.driver=com.mysql.jdbc.Driver
   jdbc.url=jdbc:mysql://localhost:3306/ssmbuild?useSSL=true&useUnicode=true&characterEncoding=utf8
   jdbc.username=root
   jdbc.password=hufei169357
   ```

2. IDEA关联数据库

3. 编写MyBatis的核心配置文件

   ```xml
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE configuration
           PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-config.dtd">
   <configuration>
       
       <typeAliases>
           <package name="com.feige.pojo"/>
       </typeAliases>
       <mappers>
           <mapper resource="com/feige/dao/BookMapper.xml"/>
       </mappers>
   
   </configuration>
   ```

4. 编写数据库对应的实体类 com.feige.pojo.Books
   使用lombok插件！

   ```java
   package com.kuang.pojo;
   
   import lombok.AllArgsConstructor;
   import lombok.Data;
   import lombok.NoArgsConstructor;
   
   @Data
   @AllArgsConstructor
   @NoArgsConstructor
   public class Books {
       
       private int bookId;
       private String bookName;
       private int bookCounts;
       private String detail;
       
   }
   ```

5. 编写Dao层的 Mapper接口！

   ```java
   package com.kuang.dao;
   
   import com.kuang.pojo.Books;
   import java.util.List;
   
   public interface BookMapper {
   
       //增加一个Book
       int addBook(Books book);
   
       //根据id删除一个Book
       int deleteBookById(int id);
   
       //更新Book
       int updateBook(Books books);
   
       //根据id查询,返回一个Book
       Books queryBookById(int id);
   
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   
   }
   ```

6. 编写接口对应的 Mapper.xml 文件。需要导入MyBatis的包；

   ```xml
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE mapper
           PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
   
   <mapper namespace="com.feige.dao.BooksMapper">
   
       <!--增加一个Book-->
       <insert id="addBook" parameterType="Books">
           insert into books(bookName,bookCounts,detail)
           values (#{bookName}, #{bookCounts}, #{detail})
       </insert>
   
       <!--根据id删除一个Book-->
       <delete id="deleteBookById" parameterType="int">
           delete from books where bookId=#{bookId}
       </delete>
   
       <!--更新Book-->
       <update id="updateBook" parameterType="Books">
           update books
           set bookName = #{bookName},bookCounts = #{bookCounts},detail = #{detail}
           where bookId = #{bookId}
       </update>
   
       <!--根据id查询,返回一个Book-->
       <select id="queryBookById" resultType="Books">
           select * from books
           where bookID = #{bookId}
       </select>
   
       <!--查询全部Book-->
       <select id="queryAllBook" resultType="com.feige.pojo.Books">
           SELECT * from books
       </select>
   
   </mapper>
   ```

7. 编写Service层的接口和实现类
   接口：

   ```java
   package com.feige.service;
   
   import com.feige.pojo.Books;
   
   import java.util.List;
   
   //BookService:底下需要去实现,调用dao层
   public interface BookService {
       //增加一个Book
       int addBook(Books book);
       //根据id删除一个Book
       int deleteBookById(int id);
       //更新Book
       int updateBook(Books books);
       //根据id查询,返回一个Book
       Books queryBookById(int id);
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   }
   ```

实现类：

```java
package com.feige.service;

import com.feige.dao.BookMapper;
import com.feige.pojo.Books;
import java.util.List;

public class BookServiceImpl implements BookService {

    //调用dao层的操作，设置一个set接口，方便Spring管理
    private BookMapper bookMapper;

    public void setBookMapper(BookMapper bookMapper) {
        this.bookMapper = bookMapper;
    }
    
    public int addBook(Books book) {
        return bookMapper.addBook(book);
    }
    
    public int deleteBookById(int id) {
        return bookMapper.deleteBookById(id);
    }
    
    public int updateBook(Books books) {
        return bookMapper.updateBook(books);
    }
    
    public Books queryBookById(int id) {
        return bookMapper.queryBookById(id);
    }
    
    public List<Books> queryAllBook() {
        return bookMapper.queryAllBook();
    }
}
```

**OK，到此，底层需求操作编写完毕！**

## 4、Spring层

1. 配置**Spring整合MyBatis**，我们这里数据源使用c3p0连接池；

2. 我们去编写Spring整合Mybatis的相关的配置文件； spring-dao.xml

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans.xsd
   http://www.springframework.org/schema/context
   https://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 配置整合mybatis -->
       <!-- 1.关联数据库文件 -->
       <context:property-placeholder location="classpath:database.properties"/>
   
       <!-- 2.数据库连接池 -->
       <!--数据库连接池
   dbcp  半自动化操作  不能自动连接
   c3p0  自动化操作（自动的加载配置文件 并且设置到对象里面）
       -->
       <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
   <!-- 配置连接池属性 -->
   <property name="driverClass" value="${jdbc.driver}"/>
   <property name="jdbcUrl" value="${jdbc.url}"/>
   <property name="user" value="${jdbc.username}"/>
   <property name="password" value="${jdbc.password}"/>
   
   <!-- c3p0连接池的私有属性 -->
   <property name="maxPoolSize" value="30"/>
   <property name="minPoolSize" value="10"/>
   <!-- 关闭连接后不自动commit -->
   <property name="autoCommitOnClose" value="false"/>
   <!-- 获取连接超时时间 -->
   <property name="checkoutTimeout" value="10000"/>
   <!-- 当获取连接失败重试次数 -->
   <property name="acquireRetryAttempts" value="2"/>
       </bean>
   
       <!-- 3.配置SqlSessionFactory对象 -->
       <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource"/>
   <!-- 配置MyBaties全局配置文件:mybatis-config.xml -->
   <property name="configLocation" value="classpath:mybatis-config.xml"/>
       </bean>
   
       <!-- 4.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 -->
       <!--解释 ： https://www.cnblogs.com/jpfss/p/7799806.html-->
       <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
   <!-- 注入sqlSessionFactory -->
   <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
   <!-- 给出需要扫描Dao接口包 -->
   <property name="basePackage" value="com.feige.dao"/>
       </bean>
   
   </beans>
   ```

3. **Spring整合service层**

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 扫描service相关的bean -->
       <context:component-scan base-package="com.kuang.service" />
   
       <!--BookServiceImpl注入到IOC容器中-->
       <bean id="BookServiceImpl" class="com.kuang.service.BookServiceImpl">
   <property name="bookMapper" ref="bookMapper"/>
       </bean>
   
       <!-- 配置事务管理器 -->
       <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource" />
       </bean>
   
   </beans>
   ```

Spring层搞定！再次理解一下，Spring就是一个大杂烩，一个容器！对吧！

## 5、SpringMVC层

1. **web.xml**

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
            version="4.0">
   
       <!--DispatcherServlet-->
       <servlet>
           <servlet-name>DispatcherServlet</servlet-name>
           <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
           <init-param>
               <param-name>contextConfigLocation</param-name>
               <param-value>classpath:applicationContext.xml</param-value>
           </init-param>
           <load-on-startup>1</load-on-startup>
       </servlet>
       <servlet-mapping>
           <servlet-name>DispatcherServlet</servlet-name>
           <url-pattern>/</url-pattern>
       </servlet-mapping>
   
       <!--encodingFilter-->
       <filter>
           <filter-name>encodingFilter</filter-name>
           <filter-class>
               org.springframework.web.filter.CharacterEncodingFilter
           </filter-class>
           <init-param>
               <param-name>encoding</param-name>
               <param-value>utf-8</param-value>
           </init-param>
       </filter>
       <filter-mapping>
           <filter-name>encodingFilter</filter-name>
           <url-pattern>/*</url-pattern>
       </filter-mapping>
       
       <!--Session过期时间-->
       <session-config>
           <session-timeout>15</session-timeout>
       </session-config>
       
   </web-app>
   ```

2. **spring-mvc.xml**

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xmlns:mvc="http://www.springframework.org/schema/mvc"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       https://www.springframework.org/schema/mvc/spring-mvc.xsd">
   
       <!-- 配置SpringMVC -->
       <!-- 1.开启SpringMVC注解驱动 -->
       <mvc:annotation-driven>
           <mvc:message-converters register-defaults="true">
               <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                   <constructor-arg value="UTF-8"/>
               </bean>
               <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                   <property name="objectMapper">
                       <bean class="org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean">
                           <property name="failOnEmptyBeans" value="false"/>
                       </bean>
                   </property>
               </bean>
           </mvc:message-converters>
       </mvc:annotation-driven>
       <!--解决跨域问题-->
       <mvc:cors>
       <mvc:mapping path="/**"
                    allowed-origins="http://127.0.0.1:8090,http://localhost:8090"
                    allowed-methods="POST,GET, OPTIONS,DELETE,PUT"
                    allowed-headers="Content-Type,ContentType,Access-Control-Allow-Headers, Authorization, X-Requested-With"
                    allow-credentials="true"/>
       </mvc:cors>
       <!-- 2.静态资源默认servlet配置-->
       <mvc:default-servlet-handler/>
   
       <!-- 3.配置jsp 显示ViewResolver视图解析器 -->
       <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
           <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
           <property name="prefix" value="/WEB-INF/jsp/" />
           <property name="suffix" value=".jsp" />
       </bean>
   
       <!-- 4.扫描web相关的bean -->
       <context:component-scan base-package="com.feige.controller" />
   
   </beans>
   ```

3. **Spring配置整合文件，applicationContext.xml**

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd">
   
       <import resource="spring-dao.xml"/>
       <import resource="spring-service.xml"/>
       <import resource="spring-mvc.xml"/>
       
   </beans>
   ```

**配置文件，暂时结束！Controller 和 视图层编写**

1. BookController 类编写 ， 方法一：查询全部书籍

   ```java
   @Controller
   @RequestMapping("/book")
   public class BookController {
   
       @Autowired
       @Qualifier("BookServiceImpl")
       private BookService bookService;
   
       @RequestMapping("/allBook")
       public String list(Model model) {
           List<Books> list = bookService.queryAllBook();
           model.addAttribute("list", list);
           return "allBook";
       }
   }
   ```

2. 编写首页 **index.jsp**

   ```html
   <%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" %>
   <!DOCTYPE HTML>
   <html>
   <head>
       <title>首页</title>
       <style type="text/css">
           a {
               text-decoration: none;
               color: black;
               font-size: 18px;
           }
           h3 {
               width: 180px;
               height: 38px;
               margin: 100px auto;
               text-align: center;
               line-height: 38px;
               background: deepskyblue;
               border-radius: 4px;
           }
       </style>
   </head>
   <body>
   
   <h3>
       <a href="${pageContext.request.contextPath}/book/allBook">点击进入列表页</a>
   </h3>
   </body>
   </html>
   ```

3. 书籍列表页面 **allbook.jsp**

   ```jsp
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>书籍列表</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>书籍列表 —— 显示所有书籍</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <div class="row">
           <div class="col-md-4 column">
               <a class="btn btn-primary" href="${pageContext.request.contextPath}/book/toAddBook">新增</a>
           </div>
       </div>
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <table class="table table-hover table-striped">
                   <thead>
                   <tr>
                       <th>书籍编号</th>
                       <th>书籍名字</th>
                       <th>书籍数量</th>
                       <th>书籍详情</th>
                       <th>操作</th>
                   </tr>
                   </thead>
   
                   <tbody>
                   <c:forEach var="book" items="${requestScope.get('list')}">
                       <tr>
                           <td>${book.getBookId()}</td>
                           <td>${book.getBookName()}</td>
                           <td>${book.getBookCounts()}</td>
                           <td>${book.getDetail()}</td>
                           <td>
                               <a href="${pageContext.request.contextPath}/book/toUpdateBook?id=${book.getBookId()}">更改</a> |
                               <a href="${pageContext.request.contextPath}/book/del/${book.getBookId()}">删除</a>
                           </td>
                       </tr>
                   </c:forEach>
                   </tbody>
               </table>
           </div>
       </div>
   </div>
   ```

4. BookController 类编写 ， 方法二：添加书籍

   ```java
   @RequestMapping("/toAddBook")
   public String toAddPaper() {
       return "addBook";
   }
   
   @RequestMapping("/addBook")
   public String addPaper(Books books) {
       System.out.println(books);
       bookService.addBook(books);
       return "redirect:/book/allBook";
   }
   ```

5. 添加书籍页面：**addBook.jsp**

   ```jsp
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   
   <html>
   <head>
       <title>新增书籍</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>新增书籍</small>
                   </h1>
               </div>
           </div>
       </div>
       <form action="${pageContext.request.contextPath}/book/addBook" method="post">
           书籍名称：<input type="text" name="bookName"><br><br><br>
           书籍数量：<input type="text" name="bookCounts"><br><br><br>
           书籍详情：<input type="text" name="detail"><br><br><br>
           <input type="submit" value="添加">
       </form>
   
   </div>
   ```

6. BookController 类编写 ， 方法三：修改书籍

   ```java
   @RequestMapping("/toUpdateBook")
   public String toUpdateBook(Model model, int id) {
       Books books = bookService.queryBookById(id);
       System.out.println(books);
       model.addAttribute("book",books );
       return "updateBook";
   }
   
   @RequestMapping("/updateBook")
   public String updateBook(Model model, Books book) {
       bookService.updateBook(book);
       Books books = bookService.queryBookById(book.getBookID());
       model.addAttribute("books", books);
       return "redirect:/book/allBook";
   }
   ```

7. 修改书籍页面 **updateBook.jsp**

   ```jsp
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>修改信息</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>修改信息</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <form action="${pageContext.request.contextPath}/book/updateBook" method="post">
           <input type="hidden" name="bookID" value="${book.getBookId()}"/>
           书籍名称：<input type="text" name="bookName" value="${book.getBookName()}"/>
           书籍数量：<input type="text" name="bookCounts" value="${book.getBookCounts()}"/>
           书籍详情：<input type="text" name="detail" value="${book.getDetail() }"/>
           <input type="submit" value="提交"/>
       </form>
   
   </div>
   ```

8. BookController 类编写 ， 方法四：删除书籍

   ```java
   @RequestMapping("/del/{bookId}")
   public String deleteBook(@PathVariable("bookId") int id) {
       bookService.deleteBookById(id);
       return "redirect:/book/allBook";
   }
   ```

**配置Tomcat，进行运行！**

到目前为止，这个SSM项目整合已经完全的OK了，可以直接运行进行测试！这个练习十分的重要，大家需要保证，不看任何东西，自己也可以完整的实现出来！

## **6、项目结构图**

![1570186854191.png](https://blog.kuangstudy.com/usr/uploads/2019/10/1086489242.png)

![1570186868239.png](https://blog.kuangstudy.com/usr/uploads/2019/10/2326667495.png)

## 7、错误排查

### 1、访问出现404，排查步骤：**

1. 查看控制台输出，看一下是不是缺少了什么jar包。

2. 如果jar包存在，显示无法输出，就在IDEA的项目发布中，添加lib依赖！

   步骤：点击项目结构----->Artifacts----->点击自己的项目(ssm:war exploded)--->(点击工具栏的第一个)在WEB-INF目录下新建一个lib包----->选中lib------>点击工具栏的第三个然后选中第一个---->把里面的包全部选中点击ok---->点击Apply再ok

   ![image-20200128125126368](E:\Java资料\ssm整合.assets\image-20200128125126368.png)

   ![image-20200128125237179](E:\Java资料\ssm整合.assets\image-20200128125237179.png)

3. 重启Tomcat 即可解决！

### 2、其他错误

#### 1、bean不存在

​	步骤：

​		查看bean注入是否成功 

​		junit单元测试，看我们的代码是否能够查询出来

​		问题不在底层，是我们spring出了问题

​		springMVC整合时没有调用到service层的bean

​			applicationContext.xml没有注册bean

​			web.xml也绑定过配置文件要绑定大的applicationContext.xml

​			

## 8、小结及展望

这个是同学们的第一个SSM整合案例，一定要烂熟于心！

SSM框架的重要程度是不言而喻的，学到这里，大家已经可以进行基本网站的单独开发。但是这只是增删改查的基本操作。可以说学到这里，大家才算是真正的步入了后台开发的门。也就是能找一个后台相关工作的底线。

或许很多人，工作就做这些事情，但是对于个人的提高来说，还远远不够！, 2020-03-02 07:06:53.0, 2020-03-23 19:38:47.0, null, 10]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20004, rs-50073} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20004} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20005} Parameters : [13]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20005} Types : [INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20005} executed. 4.859551 millis. select distinct count(*) from comments c
        where c.blog_id=? and
        c.parent_id is null;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50074} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50074} Header: [count(*)]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50074} Result: [3]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50074} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20005} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20006} Parameters : [13, 0, 10]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20006} Types : [INTEGER, INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20006} executed. 2.62222 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id  and
        c.parent_id is null limit ?,?;;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20006, rs-50075} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20006, rs-50075} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20006, rs-50075} Result: [26, 好好, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:35.0, null]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20006, rs-50075} Result: [29, 太好了, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:13.0, null]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20006, rs-50075} Result: [32, <p>feige</p>, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 01:33:26.0, null]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20006, rs-50075} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20006} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} Parameters : [13, 26]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} executed. 6.559994 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50076} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50076} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50076} Result: [27, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:56.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50076} Result: [28, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:43:03.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50076} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} Parameters : [13, 26]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} executed. 6.132883 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50077} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50077} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50077} Result: [27, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:56.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50077} Result: [28, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:43:03.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50077} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} Parameters : [13, 27]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} executed. 1.241332 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50078} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50078} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50078} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} Parameters : [13, 27]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} executed. 1.095555 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50079} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50079} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50079} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} Parameters : [13, 29]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} executed. 3.356886 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50080} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50080} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50080} Result: [30, 谢谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:43.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50080} Result: [31, 不用谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:47:01.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50080} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} Parameters : [13, 29]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} executed. 4.270218 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50081} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50081} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50081} Result: [30, 谢谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:43.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50081} Result: [31, 不用谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:47:01.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50081} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} Parameters : [13, 30]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} executed. 2.700442 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50082} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50082} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50082} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} Parameters : [13, 30]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} executed. 0.628444 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50083} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50083} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50083} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} Parameters : [13, 32]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} executed. 0.504889 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50084} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50084} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50084} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20005} Parameters : [13]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20005} Types : [INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20005} executed. 3.251553 millis. select distinct count(*) from comments c
        where c.blog_id=? and
        c.parent_id is null;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50085} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50085} Header: [count(*)]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50085} Result: [3]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50085} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20005} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20006} Parameters : [13, 0, 10]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20006} Types : [INTEGER, INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20006} executed. 1.535999 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id  and
        c.parent_id is null limit ?,?;;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20006, rs-50086} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20006, rs-50086} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20006, rs-50086} Result: [26, 好好, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:35.0, null]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20006, rs-50086} Result: [29, 太好了, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:13.0, null]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20006, rs-50086} Result: [32, <p>feige</p>, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 01:33:26.0, null]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20006, rs-50086} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20006} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} Parameters : [13, 26]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} executed. 4.52933 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50087} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50087} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50087} Result: [27, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:56.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50087} Result: [28, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:43:03.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50087} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} Parameters : [13, 26]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} executed. 5.584884 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50088} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50088} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50088} Result: [27, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:56.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50088} Result: [28, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:43:03.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50088} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} Parameters : [13, 27]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} executed. 1.715999 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50089} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50089} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50089} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} Parameters : [13, 27]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} executed. 1.119111 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50090} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50090} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50090} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} Parameters : [13, 29]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} executed. 6.282216 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50091} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50091} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50091} Result: [30, 谢谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:43.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50091} Result: [31, 不用谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:47:01.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50091} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} Parameters : [13, 29]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} executed. 11.423101 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50092} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50092} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50092} Result: [30, 谢谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:43.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50092} Result: [31, 不用谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:47:01.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50092} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} Parameters : [13, 30]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} executed. 0.685333 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50093} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50093} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50093} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} Parameters : [13, 30]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} executed. 1.114666 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50094} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50094} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50094} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} Parameters : [13, 32]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} executed. 1.430666 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50095} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50095} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20007, rs-50095} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20007} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} Parameters : [13]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} Types : [INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} executed. 0.870666 millis. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog where id=?
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50096} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50096} Header: [id, type_name, title, content, create_time, change_time, author, view]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50096} Result: [13, mybatis, ssm1整合, # ssm整合

## 1、数据库环境

创建一个存放书籍数据的数据库表

```sql
CREATE DATABASE `ssmbuild`;

USE `ssmbuild`;

DROP TABLE IF EXISTS `books`;

CREATE TABLE `books` (
  `bookId` INT PRIMARY KEY COMMENT '书id',
  `bookName` VARCHAR(100) NOT NULL COMMENT '书名',
  `bookCounts` INT(11) NOT NULL COMMENT '数量',
  ``ssmbuild``ssmbuild`` VARCHAR(200) NOT NULL COMMENT '描述'
) ENGINE=INNODB DEFAULT CHARSET=utf8

INSERT  INTO `books`(`bookId`,`bookName`,`bookCounts`,`detail`)VALUES 
(1,'Java',1,'从入门到放弃'),
(2,'MySQL',10,'从删库到跑路'),
(3,'Linux',5,'从进门到进牢');

SELECT * FROM books
```

## 2、基本环境搭建

1. 新建一Maven项目！ ssmbuild ， 添加web的支持

   ![image-20200128134359317](.\ssm整合.assets\image-20200128134359317.png)

2. 导入相关的pom依赖！

   ```xml
   <dependencies>
       <!--Junit-->
       <dependency>
           <groupId>junit</groupId>
           <artifactId>junit</artifactId>
           <version>4.12</version>
       </dependency>
       <!--数据库驱动-->
       <dependency>
           <groupId>mysql</groupId>
           <artifactId>mysql-connector-java</artifactId>
           <version>5.1.47</version>
       </dependency>
       <!-- 数据库连接池 -->
       <dependency>
           <groupId>com.mchange</groupId>
           <artifactId>c3p0</artifactId>
           <version>0.9.5.2</version>
       </dependency>
   
       <!--Servlet - JSP -->
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>servlet-api</artifactId>
           <version>2.5</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet.jsp</groupId>
           <artifactId>jsp-api</artifactId>
           <version>2.2</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>jstl</artifactId>
           <version>1.2</version>
       </dependency>
   
       <!--Mybatis-->
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis</artifactId>
           <version>3.5.2</version>
       </dependency>
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis-spring</artifactId>
           <version>2.0.2</version>
       </dependency>
   
       <!--Spring-->
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-webmvc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-jdbc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->
       <dependency>
           <groupId>org.projectlombok</groupId>
           <artifactId>lombok</artifactId>
           <version>1.16.10</version>
       </dependency>
   </dependencies>
   ```

3. Maven资源过滤设置

   ```xml
   <build>
       <resources>
           <resource>
               <directory>src/main/java</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
           <resource>
               <directory>src/main/resources</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
       </resources>
   </build>
   ```

4. 建立基本结构和配置框架！

   - com.feige.pojo

   - com.feige.dao

   - com.feige.service

   - com.feige.controller

     在resources目录下创建

   - mybatis-config.xml

     ```xml
     <?xml version="1.0" encoding="UTF-8" ?>
     <!DOCTYPE configuration
             PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
             "http://mybatis.org/dtd/mybatis-3-config.dtd">
     <configuration>
     
     </configuration>
     ```

   - applicationContext.xml

     ```xml
     <?xml version="1.0" encoding="UTF-8"?>
     <beans xmlns="http://www.springframework.org/schema/beans"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://www.springframework.org/schema/beans
             http://www.springframework.org/schema/beans/spring-beans.xsd">
     
     </beans>
     ```

## 3、Mybatis层编写

1. 数据库配置文件 **database.properties**

   ```properties
   jdbc.driver=com.mysql.jdbc.Driver
   jdbc.url=jdbc:mysql://localhost:3306/ssmbuild?useSSL=true&useUnicode=true&characterEncoding=utf8
   jdbc.username=root
   jdbc.password=hufei169357
   ```

2. IDEA关联数据库

3. 编写MyBatis的核心配置文件

   ```xml
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE configuration
           PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-config.dtd">
   <configuration>
       
       <typeAliases>
           <package name="com.feige.pojo"/>
       </typeAliases>
       <mappers>
           <mapper resource="com/feige/dao/BookMapper.xml"/>
       </mappers>
   
   </configuration>
   ```

4. 编写数据库对应的实体类 com.feige.pojo.Books
   使用lombok插件！

   ```java
   package com.kuang.pojo;
   
   import lombok.AllArgsConstructor;
   import lombok.Data;
   import lombok.NoArgsConstructor;
   
   @Data
   @AllArgsConstructor
   @NoArgsConstructor
   public class Books {
       
       private int bookId;
       private String bookName;
       private int bookCounts;
       private String detail;
       
   }
   ```

5. 编写Dao层的 Mapper接口！

   ```java
   package com.kuang.dao;
   
   import com.kuang.pojo.Books;
   import java.util.List;
   
   public interface BookMapper {
   
       //增加一个Book
       int addBook(Books book);
   
       //根据id删除一个Book
       int deleteBookById(int id);
   
       //更新Book
       int updateBook(Books books);
   
       //根据id查询,返回一个Book
       Books queryBookById(int id);
   
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   
   }
   ```

6. 编写接口对应的 Mapper.xml 文件。需要导入MyBatis的包；

   ```xml
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE mapper
           PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
   
   <mapper namespace="com.feige.dao.BooksMapper">
   
       <!--增加一个Book-->
       <insert id="addBook" parameterType="Books">
           insert into books(bookName,bookCounts,detail)
           values (#{bookName}, #{bookCounts}, #{detail})
       </insert>
   
       <!--根据id删除一个Book-->
       <delete id="deleteBookById" parameterType="int">
           delete from books where bookId=#{bookId}
       </delete>
   
       <!--更新Book-->
       <update id="updateBook" parameterType="Books">
           update books
           set bookName = #{bookName},bookCounts = #{bookCounts},detail = #{detail}
           where bookId = #{bookId}
       </update>
   
       <!--根据id查询,返回一个Book-->
       <select id="queryBookById" resultType="Books">
           select * from books
           where bookID = #{bookId}
       </select>
   
       <!--查询全部Book-->
       <select id="queryAllBook" resultType="com.feige.pojo.Books">
           SELECT * from books
       </select>
   
   </mapper>
   ```

7. 编写Service层的接口和实现类
   接口：

   ```java
   package com.feige.service;
   
   import com.feige.pojo.Books;
   
   import java.util.List;
   
   //BookService:底下需要去实现,调用dao层
   public interface BookService {
       //增加一个Book
       int addBook(Books book);
       //根据id删除一个Book
       int deleteBookById(int id);
       //更新Book
       int updateBook(Books books);
       //根据id查询,返回一个Book
       Books queryBookById(int id);
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   }
   ```

实现类：

```java
package com.feige.service;

import com.feige.dao.BookMapper;
import com.feige.pojo.Books;
import java.util.List;

public class BookServiceImpl implements BookService {

    //调用dao层的操作，设置一个set接口，方便Spring管理
    private BookMapper bookMapper;

    public void setBookMapper(BookMapper bookMapper) {
        this.bookMapper = bookMapper;
    }
    
    public int addBook(Books book) {
        return bookMapper.addBook(book);
    }
    
    public int deleteBookById(int id) {
        return bookMapper.deleteBookById(id);
    }
    
    public int updateBook(Books books) {
        return bookMapper.updateBook(books);
    }
    
    public Books queryBookById(int id) {
        return bookMapper.queryBookById(id);
    }
    
    public List<Books> queryAllBook() {
        return bookMapper.queryAllBook();
    }
}
```

**OK，到此，底层需求操作编写完毕！**

## 4、Spring层

1. 配置**Spring整合MyBatis**，我们这里数据源使用c3p0连接池；

2. 我们去编写Spring整合Mybatis的相关的配置文件； spring-dao.xml

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans.xsd
   http://www.springframework.org/schema/context
   https://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 配置整合mybatis -->
       <!-- 1.关联数据库文件 -->
       <context:property-placeholder location="classpath:database.properties"/>
   
       <!-- 2.数据库连接池 -->
       <!--数据库连接池
   dbcp  半自动化操作  不能自动连接
   c3p0  自动化操作（自动的加载配置文件 并且设置到对象里面）
       -->
       <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
   <!-- 配置连接池属性 -->
   <property name="driverClass" value="${jdbc.driver}"/>
   <property name="jdbcUrl" value="${jdbc.url}"/>
   <property name="user" value="${jdbc.username}"/>
   <property name="password" value="${jdbc.password}"/>
   
   <!-- c3p0连接池的私有属性 -->
   <property name="maxPoolSize" value="30"/>
   <property name="minPoolSize" value="10"/>
   <!-- 关闭连接后不自动commit -->
   <property name="autoCommitOnClose" value="false"/>
   <!-- 获取连接超时时间 -->
   <property name="checkoutTimeout" value="10000"/>
   <!-- 当获取连接失败重试次数 -->
   <property name="acquireRetryAttempts" value="2"/>
       </bean>
   
       <!-- 3.配置SqlSessionFactory对象 -->
       <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource"/>
   <!-- 配置MyBaties全局配置文件:mybatis-config.xml -->
   <property name="configLocation" value="classpath:mybatis-config.xml"/>
       </bean>
   
       <!-- 4.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 -->
       <!--解释 ： https://www.cnblogs.com/jpfss/p/7799806.html-->
       <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
   <!-- 注入sqlSessionFactory -->
   <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
   <!-- 给出需要扫描Dao接口包 -->
   <property name="basePackage" value="com.feige.dao"/>
       </bean>
   
   </beans>
   ```

3. **Spring整合service层**

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 扫描service相关的bean -->
       <context:component-scan base-package="com.kuang.service" />
   
       <!--BookServiceImpl注入到IOC容器中-->
       <bean id="BookServiceImpl" class="com.kuang.service.BookServiceImpl">
   <property name="bookMapper" ref="bookMapper"/>
       </bean>
   
       <!-- 配置事务管理器 -->
       <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource" />
       </bean>
   
   </beans>
   ```

Spring层搞定！再次理解一下，Spring就是一个大杂烩，一个容器！对吧！

## 5、SpringMVC层

1. **web.xml**

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
            version="4.0">
   
       <!--DispatcherServlet-->
       <servlet>
           <servlet-name>DispatcherServlet</servlet-name>
           <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
           <init-param>
               <param-name>contextConfigLocation</param-name>
               <param-value>classpath:applicationContext.xml</param-value>
           </init-param>
           <load-on-startup>1</load-on-startup>
       </servlet>
       <servlet-mapping>
           <servlet-name>DispatcherServlet</servlet-name>
           <url-pattern>/</url-pattern>
       </servlet-mapping>
   
       <!--encodingFilter-->
       <filter>
           <filter-name>encodingFilter</filter-name>
           <filter-class>
               org.springframework.web.filter.CharacterEncodingFilter
           </filter-class>
           <init-param>
               <param-name>encoding</param-name>
               <param-value>utf-8</param-value>
           </init-param>
       </filter>
       <filter-mapping>
           <filter-name>encodingFilter</filter-name>
           <url-pattern>/*</url-pattern>
       </filter-mapping>
       
       <!--Session过期时间-->
       <session-config>
           <session-timeout>15</session-timeout>
       </session-config>
       
   </web-app>
   ```

2. **spring-mvc.xml**

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xmlns:mvc="http://www.springframework.org/schema/mvc"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       https://www.springframework.org/schema/mvc/spring-mvc.xsd">
   
       <!-- 配置SpringMVC -->
       <!-- 1.开启SpringMVC注解驱动 -->
       <mvc:annotation-driven>
           <mvc:message-converters register-defaults="true">
               <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                   <constructor-arg value="UTF-8"/>
               </bean>
               <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                   <property name="objectMapper">
                       <bean class="org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean">
                           <property name="failOnEmptyBeans" value="false"/>
                       </bean>
                   </property>
               </bean>
           </mvc:message-converters>
       </mvc:annotation-driven>
       <!--解决跨域问题-->
       <mvc:cors>
       <mvc:mapping path="/**"
                    allowed-origins="http://127.0.0.1:8090,http://localhost:8090"
                    allowed-methods="POST,GET, OPTIONS,DELETE,PUT"
                    allowed-headers="Content-Type,ContentType,Access-Control-Allow-Headers, Authorization, X-Requested-With"
                    allow-credentials="true"/>
       </mvc:cors>
       <!-- 2.静态资源默认servlet配置-->
       <mvc:default-servlet-handler/>
   
       <!-- 3.配置jsp 显示ViewResolver视图解析器 -->
       <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
           <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
           <property name="prefix" value="/WEB-INF/jsp/" />
           <property name="suffix" value=".jsp" />
       </bean>
   
       <!-- 4.扫描web相关的bean -->
       <context:component-scan base-package="com.feige.controller" />
   
   </beans>
   ```

3. **Spring配置整合文件，applicationContext.xml**

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd">
   
       <import resource="spring-dao.xml"/>
       <import resource="spring-service.xml"/>
       <import resource="spring-mvc.xml"/>
       
   </beans>
   ```

**配置文件，暂时结束！Controller 和 视图层编写**

1. BookController 类编写 ， 方法一：查询全部书籍

   ```java
   @Controller
   @RequestMapping("/book")
   public class BookController {
   
       @Autowired
       @Qualifier("BookServiceImpl")
       private BookService bookService;
   
       @RequestMapping("/allBook")
       public String list(Model model) {
           List<Books> list = bookService.queryAllBook();
           model.addAttribute("list", list);
           return "allBook";
       }
   }
   ```

2. 编写首页 **index.jsp**

   ```html
   <%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" %>
   <!DOCTYPE HTML>
   <html>
   <head>
       <title>首页</title>
       <style type="text/css">
           a {
               text-decoration: none;
               color: black;
               font-size: 18px;
           }
           h3 {
               width: 180px;
               height: 38px;
               margin: 100px auto;
               text-align: center;
               line-height: 38px;
               background: deepskyblue;
               border-radius: 4px;
           }
       </style>
   </head>
   <body>
   
   <h3>
       <a href="${pageContext.request.contextPath}/book/allBook">点击进入列表页</a>
   </h3>
   </body>
   </html>
   ```

3. 书籍列表页面 **allbook.jsp**

   ```jsp
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>书籍列表</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>书籍列表 —— 显示所有书籍</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <div class="row">
           <div class="col-md-4 column">
               <a class="btn btn-primary" href="${pageContext.request.contextPath}/book/toAddBook">新增</a>
           </div>
       </div>
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <table class="table table-hover table-striped">
                   <thead>
                   <tr>
                       <th>书籍编号</th>
                       <th>书籍名字</th>
                       <th>书籍数量</th>
                       <th>书籍详情</th>
                       <th>操作</th>
                   </tr>
                   </thead>
   
                   <tbody>
                   <c:forEach var="book" items="${requestScope.get('list')}">
                       <tr>
                           <td>${book.getBookId()}</td>
                           <td>${book.getBookName()}</td>
                           <td>${book.getBookCounts()}</td>
                           <td>${book.getDetail()}</td>
                           <td>
                               <a href="${pageContext.request.contextPath}/book/toUpdateBook?id=${book.getBookId()}">更改</a> |
                               <a href="${pageContext.request.contextPath}/book/del/${book.getBookId()}">删除</a>
                           </td>
                       </tr>
                   </c:forEach>
                   </tbody>
               </table>
           </div>
       </div>
   </div>
   ```

4. BookController 类编写 ， 方法二：添加书籍

   ```java
   @RequestMapping("/toAddBook")
   public String toAddPaper() {
       return "addBook";
   }
   
   @RequestMapping("/addBook")
   public String addPaper(Books books) {
       System.out.println(books);
       bookService.addBook(books);
       return "redirect:/book/allBook";
   }
   ```

5. 添加书籍页面：**addBook.jsp**

   ```jsp
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   
   <html>
   <head>
       <title>新增书籍</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>新增书籍</small>
                   </h1>
               </div>
           </div>
       </div>
       <form action="${pageContext.request.contextPath}/book/addBook" method="post">
           书籍名称：<input type="text" name="bookName"><br><br><br>
           书籍数量：<input type="text" name="bookCounts"><br><br><br>
           书籍详情：<input type="text" name="detail"><br><br><br>
           <input type="submit" value="添加">
       </form>
   
   </div>
   ```

6. BookController 类编写 ， 方法三：修改书籍

   ```java
   @RequestMapping("/toUpdateBook")
   public String toUpdateBook(Model model, int id) {
       Books books = bookService.queryBookById(id);
       System.out.println(books);
       model.addAttribute("book",books );
       return "updateBook";
   }
   
   @RequestMapping("/updateBook")
   public String updateBook(Model model, Books book) {
       bookService.updateBook(book);
       Books books = bookService.queryBookById(book.getBookID());
       model.addAttribute("books", books);
       return "redirect:/book/allBook";
   }
   ```

7. 修改书籍页面 **updateBook.jsp**

   ```jsp
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>修改信息</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>修改信息</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <form action="${pageContext.request.contextPath}/book/updateBook" method="post">
           <input type="hidden" name="bookID" value="${book.getBookId()}"/>
           书籍名称：<input type="text" name="bookName" value="${book.getBookName()}"/>
           书籍数量：<input type="text" name="bookCounts" value="${book.getBookCounts()}"/>
           书籍详情：<input type="text" name="detail" value="${book.getDetail() }"/>
           <input type="submit" value="提交"/>
       </form>
   
   </div>
   ```

8. BookController 类编写 ， 方法四：删除书籍

   ```java
   @RequestMapping("/del/{bookId}")
   public String deleteBook(@PathVariable("bookId") int id) {
       bookService.deleteBookById(id);
       return "redirect:/book/allBook";
   }
   ```

**配置Tomcat，进行运行！**

到目前为止，这个SSM项目整合已经完全的OK了，可以直接运行进行测试！这个练习十分的重要，大家需要保证，不看任何东西，自己也可以完整的实现出来！

## **6、项目结构图**

![1570186854191.png](https://blog.kuangstudy.com/usr/uploads/2019/10/1086489242.png)

![1570186868239.png](https://blog.kuangstudy.com/usr/uploads/2019/10/2326667495.png)

## 7、错误排查

### 1、访问出现404，排查步骤：**

1. 查看控制台输出，看一下是不是缺少了什么jar包。

2. 如果jar包存在，显示无法输出，就在IDEA的项目发布中，添加lib依赖！

   步骤：点击项目结构----->Artifacts----->点击自己的项目(ssm:war exploded)--->(点击工具栏的第一个)在WEB-INF目录下新建一个lib包----->选中lib------>点击工具栏的第三个然后选中第一个---->把里面的包全部选中点击ok---->点击Apply再ok

   ![image-20200128125126368](E:\Java资料\ssm整合.assets\image-20200128125126368.png)

   ![image-20200128125237179](E:\Java资料\ssm整合.assets\image-20200128125237179.png)

3. 重启Tomcat 即可解决！

### 2、其他错误

#### 1、bean不存在

​	步骤：

​		查看bean注入是否成功 

​		junit单元测试，看我们的代码是否能够查询出来

​		问题不在底层，是我们spring出了问题

​		springMVC整合时没有调用到service层的bean

​			applicationContext.xml没有注册bean

​			web.xml也绑定过配置文件要绑定大的applicationContext.xml

​			

## 8、小结及展望

这个是同学们的第一个SSM整合案例，一定要烂熟于心！

SSM框架的重要程度是不言而喻的，学到这里，大家已经可以进行基本网站的单独开发。但是这只是增删改查的基本操作。可以说学到这里，大家才算是真正的步入了后台开发的门。也就是能找一个后台相关工作的底线。

或许很多人，工作就做这些事情，但是对于个人的提高来说，还远远不够！, 2020-03-02 07:06:53.0, 2020-03-23 19:38:47.0, null, 10]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50096} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20001} Parameters : [13]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20001} Types : [INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20001} executed. 2.251998 millis. select distinct count(*) from comments c
        where c.blog_id=? and
        c.parent_id is null;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20001, rs-50097} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20001, rs-50097} Header: [count(*)]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20001, rs-50097} Result: [3]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20001, rs-50097} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20001} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20002} Parameters : [13, 0, 10]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20002} Types : [INTEGER, INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20002} executed. 1.249332 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id  and
        c.parent_id is null limit ?,?;;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20002, rs-50098} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20002, rs-50098} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20002, rs-50098} Result: [26, 好好, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:35.0, null]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20002, rs-50098} Result: [29, 太好了, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:13.0, null]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20002, rs-50098} Result: [32, <p>feige</p>, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 01:33:26.0, null]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20002, rs-50098} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20002} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Parameters : [13, 26]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} executed. 3.979997 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50099} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50099} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50099} Result: [27, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:56.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50099} Result: [28, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:43:03.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50099} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Parameters : [13, 26]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} executed. 3.51333 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50100} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50100} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50100} Result: [27, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:56.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50100} Result: [28, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:43:03.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50100} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Parameters : [13, 27]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} executed. 0.651555 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50101} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50101} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50101} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Parameters : [13, 27]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} executed. 0.627999 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50102} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50102} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50102} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Parameters : [13, 29]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} executed. 3.365331 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50103} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50103} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50103} Result: [30, 谢谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:43.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50103} Result: [31, 不用谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:47:01.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50103} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Parameters : [13, 29]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} executed. 6.605772 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50104} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50104} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50104} Result: [30, 谢谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:43.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50104} Result: [31, 不用谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:47:01.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50104} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Parameters : [13, 30]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} executed. 0.927999 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50105} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50105} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50105} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Parameters : [13, 30]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} executed. 0.869333 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50106} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50106} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50106} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Parameters : [13, 32]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} executed. 0.718221 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50107} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50107} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20003, rs-50107} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20003} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10001} connected
[DEBUG][20-03-23][druid.sql.Connection]{conn-10002} connected
[DEBUG][20-03-23][druid.sql.Connection]{conn-10003} connected
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} connected
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} connected
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} created. select id,type_name typeName
        from `type`
         
            limit ?,?
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} Parameters : [0, 30]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} executed. 19.143538 millis. select id,type_name typeName
        from `type`
         
            limit ?,?
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Header: [id, type_name]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [3, mybatis]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [2, spring]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [1, springboot]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [4, springMVC]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20001} created. select count(*) from `type`
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20001} Parameters : []
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20001} Types : []
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20001} executed. 0.550666 millis. select count(*) from `type`
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50001} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50001} Header: [count(*)]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50001} Result: [4]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50001} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20001} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} Parameters : [0, 30]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} executed. 1.997776 millis. select id,type_name typeName
        from `type`
         
            limit ?,?
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50002} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50002} Header: [id, type_name]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50002} Result: [3, mybatis]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50002} Result: [2, spring]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50002} Result: [1, springboot]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50002} Result: [4, springMVC]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50002} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20001} Parameters : []
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20001} Types : []
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20001} executed. 1.316443 millis. select count(*) from `type`
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50003} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50003} Header: [count(*)]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50003} Result: [4]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50003} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20001} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} Parameters : [0, 30]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} executed. 0.616 millis. select id,type_name typeName
        from `type`
         
            limit ?,?
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50004} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50004} Header: [id, type_name]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50004} Result: [3, mybatis]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50004} Result: [2, spring]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50004} Result: [1, springboot]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50004} Result: [4, springMVC]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50004} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20001} Parameters : []
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20001} Types : []
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20001} executed. 0.558666 millis. select count(*) from `type`
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50005} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50005} Header: [count(*)]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50005} Result: [4]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50005} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20001} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} Parameters : [0, 30]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} executed. 1.202666 millis. select id,type_name typeName
        from `type`
         
            limit ?,?
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50006} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50006} Header: [id, type_name]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50006} Result: [3, mybatis]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50006} Result: [2, spring]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50006} Result: [1, springboot]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50006} Result: [4, springMVC]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50006} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20001} Parameters : []
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20001} Types : []
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20001} executed. 1.007999 millis. select count(*) from `type`
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50007} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50007} Header: [count(*)]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50007} Result: [4]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50007} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20001} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} Parameters : [0, 30]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} executed. 1.044444 millis. select id,type_name typeName
        from `type`
         
            limit ?,?
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50008} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50008} Header: [id, type_name]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50008} Result: [3, mybatis]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50008} Result: [2, spring]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50008} Result: [1, springboot]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50008} Result: [4, springMVC]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50008} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20001} Parameters : []
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20001} Types : []
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20001} executed. 0.726222 millis. select count(*) from `type`
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50009} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50009} Header: [count(*)]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50009} Result: [4]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50009} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20001} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} Parameters : [0, 30]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} executed. 2.010665 millis. select id,type_name typeName
        from `type`
         
            limit ?,?
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50010} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50010} Header: [id, type_name]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50010} Result: [3, mybatis]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50010} Result: [2, spring]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50010} Result: [1, springboot]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50010} Result: [4, springMVC]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50010} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20001} Parameters : []
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20001} Types : []
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20001} executed. 1.827554 millis. select count(*) from `type`
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50011} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50011} Header: [count(*)]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50011} Result: [4]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50011} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20001} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} Parameters : [0, 30]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} executed. 0.907999 millis. select id,type_name typeName
        from `type`
         
            limit ?,?
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50012} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50012} Header: [id, type_name]
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50012} Result: [3, mybatis]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50012} Result: [2, spring]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50012} Result: [1, springboot]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50012} Result: [4, springMVC]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50012} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Connection]{conn-10003} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20001} Parameters : []
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20001} Types : []
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20001} executed. 1.124444 millis. select count(*) from `type`
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50013} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50013} Header: [count(*)]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50013} Result: [4]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50013} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20001} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20002} created. select distinct count(*) from comments c
        where c.blog_id=? and
        c.parent_id is null;
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20003} created. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog where id=?
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20002} Parameters : [13]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20002} Types : [INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20003} Parameters : [13]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20003} Types : [INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20002} executed. 5.24044 millis. select distinct count(*) from comments c
        where c.blog_id=? and
        c.parent_id is null;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20002, rs-50014} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20002, rs-50014} Header: [count(*)]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20002, rs-50014} Result: [3]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20002, rs-50014} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20002} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20003} executed. 6.857771 millis. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog where id=?
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20003, rs-50015} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20003, rs-50015} Header: [id, type_name, title, content, create_time, change_time, author, view]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20003, rs-50015} Result: [13, mybatis, ssm1整合, # ssm整合

## 1、数据库环境

创建一个存放书籍数据的数据库表

```sql
CREATE DATABASE `ssmbuild`;

USE `ssmbuild`;

DROP TABLE IF EXISTS `books`;

CREATE TABLE `books` (
  `bookId` INT PRIMARY KEY COMMENT '书id',
  `bookName` VARCHAR(100) NOT NULL COMMENT '书名',
  `bookCounts` INT(11) NOT NULL COMMENT '数量',
  ``ssmbuild``ssmbuild`` VARCHAR(200) NOT NULL COMMENT '描述'
) ENGINE=INNODB DEFAULT CHARSET=utf8

INSERT  INTO `books`(`bookId`,`bookName`,`bookCounts`,`detail`)VALUES 
(1,'Java',1,'从入门到放弃'),
(2,'MySQL',10,'从删库到跑路'),
(3,'Linux',5,'从进门到进牢');

SELECT * FROM books
```

## 2、基本环境搭建

1. 新建一Maven项目！ ssmbuild ， 添加web的支持

   ![image-20200128134359317](.\ssm整合.assets\image-20200128134359317.png)

2. 导入相关的pom依赖！

   ```xml
   <dependencies>
       <!--Junit-->
       <dependency>
           <groupId>junit</groupId>
           <artifactId>junit</artifactId>
           <version>4.12</version>
       </dependency>
       <!--数据库驱动-->
       <dependency>
           <groupId>mysql</groupId>
           <artifactId>mysql-connector-java</artifactId>
           <version>5.1.47</version>
       </dependency>
       <!-- 数据库连接池 -->
       <dependency>
           <groupId>com.mchange</groupId>
           <artifactId>c3p0</artifactId>
           <version>0.9.5.2</version>
       </dependency>
   
       <!--Servlet - JSP -->
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>servlet-api</artifactId>
           <version>2.5</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet.jsp</groupId>
           <artifactId>jsp-api</artifactId>
           <version>2.2</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>jstl</artifactId>
           <version>1.2</version>
       </dependency>
   
       <!--Mybatis-->
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis</artifactId>
           <version>3.5.2</version>
       </dependency>
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis-spring</artifactId>
           <version>2.0.2</version>
       </dependency>
   
       <!--Spring-->
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-webmvc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-jdbc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->
       <dependency>
           <groupId>org.projectlombok</groupId>
           <artifactId>lombok</artifactId>
           <version>1.16.10</version>
       </dependency>
   </dependencies>
   ```

3. Maven资源过滤设置

   ```xml
   <build>
       <resources>
           <resource>
               <directory>src/main/java</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
           <resource>
               <directory>src/main/resources</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
       </resources>
   </build>
   ```

4. 建立基本结构和配置框架！

   - com.feige.pojo

   - com.feige.dao

   - com.feige.service

   - com.feige.controller

     在resources目录下创建

   - mybatis-config.xml

     ```xml
     <?xml version="1.0" encoding="UTF-8" ?>
     <!DOCTYPE configuration
             PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
             "http://mybatis.org/dtd/mybatis-3-config.dtd">
     <configuration>
     
     </configuration>
     ```

   - applicationContext.xml

     ```xml
     <?xml version="1.0" encoding="UTF-8"?>
     <beans xmlns="http://www.springframework.org/schema/beans"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://www.springframework.org/schema/beans
             http://www.springframework.org/schema/beans/spring-beans.xsd">
     
     </beans>
     ```

## 3、Mybatis层编写

1. 数据库配置文件 **database.properties**

   ```properties
   jdbc.driver=com.mysql.jdbc.Driver
   jdbc.url=jdbc:mysql://localhost:3306/ssmbuild?useSSL=true&useUnicode=true&characterEncoding=utf8
   jdbc.username=root
   jdbc.password=hufei169357
   ```

2. IDEA关联数据库

3. 编写MyBatis的核心配置文件

   ```xml
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE configuration
           PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-config.dtd">
   <configuration>
       
       <typeAliases>
           <package name="com.feige.pojo"/>
       </typeAliases>
       <mappers>
           <mapper resource="com/feige/dao/BookMapper.xml"/>
       </mappers>
   
   </configuration>
   ```

4. 编写数据库对应的实体类 com.feige.pojo.Books
   使用lombok插件！

   ```java
   package com.kuang.pojo;
   
   import lombok.AllArgsConstructor;
   import lombok.Data;
   import lombok.NoArgsConstructor;
   
   @Data
   @AllArgsConstructor
   @NoArgsConstructor
   public class Books {
       
       private int bookId;
       private String bookName;
       private int bookCounts;
       private String detail;
       
   }
   ```

5. 编写Dao层的 Mapper接口！

   ```java
   package com.kuang.dao;
   
   import com.kuang.pojo.Books;
   import java.util.List;
   
   public interface BookMapper {
   
       //增加一个Book
       int addBook(Books book);
   
       //根据id删除一个Book
       int deleteBookById(int id);
   
       //更新Book
       int updateBook(Books books);
   
       //根据id查询,返回一个Book
       Books queryBookById(int id);
   
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   
   }
   ```

6. 编写接口对应的 Mapper.xml 文件。需要导入MyBatis的包；

   ```xml
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE mapper
           PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
   
   <mapper namespace="com.feige.dao.BooksMapper">
   
       <!--增加一个Book-->
       <insert id="addBook" parameterType="Books">
           insert into books(bookName,bookCounts,detail)
           values (#{bookName}, #{bookCounts}, #{detail})
       </insert>
   
       <!--根据id删除一个Book-->
       <delete id="deleteBookById" parameterType="int">
           delete from books where bookId=#{bookId}
       </delete>
   
       <!--更新Book-->
       <update id="updateBook" parameterType="Books">
           update books
           set bookName = #{bookName},bookCounts = #{bookCounts},detail = #{detail}
           where bookId = #{bookId}
       </update>
   
       <!--根据id查询,返回一个Book-->
       <select id="queryBookById" resultType="Books">
           select * from books
           where bookID = #{bookId}
       </select>
   
       <!--查询全部Book-->
       <select id="queryAllBook" resultType="com.feige.pojo.Books">
           SELECT * from books
       </select>
   
   </mapper>
   ```

7. 编写Service层的接口和实现类
   接口：

   ```java
   package com.feige.service;
   
   import com.feige.pojo.Books;
   
   import java.util.List;
   
   //BookService:底下需要去实现,调用dao层
   public interface BookService {
       //增加一个Book
       int addBook(Books book);
       //根据id删除一个Book
       int deleteBookById(int id);
       //更新Book
       int updateBook(Books books);
       //根据id查询,返回一个Book
       Books queryBookById(int id);
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   }
   ```

实现类：

```java
package com.feige.service;

import com.feige.dao.BookMapper;
import com.feige.pojo.Books;
import java.util.List;

public class BookServiceImpl implements BookService {

    //调用dao层的操作，设置一个set接口，方便Spring管理
    private BookMapper bookMapper;

    public void setBookMapper(BookMapper bookMapper) {
        this.bookMapper = bookMapper;
    }
    
    public int addBook(Books book) {
        return bookMapper.addBook(book);
    }
    
    public int deleteBookById(int id) {
        return bookMapper.deleteBookById(id);
    }
    
    public int updateBook(Books books) {
        return bookMapper.updateBook(books);
    }
    
    public Books queryBookById(int id) {
        return bookMapper.queryBookById(id);
    }
    
    public List<Books> queryAllBook() {
        return bookMapper.queryAllBook();
    }
}
```

**OK，到此，底层需求操作编写完毕！**

## 4、Spring层

1. 配置**Spring整合MyBatis**，我们这里数据源使用c3p0连接池；

2. 我们去编写Spring整合Mybatis的相关的配置文件； spring-dao.xml

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans.xsd
   http://www.springframework.org/schema/context
   https://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 配置整合mybatis -->
       <!-- 1.关联数据库文件 -->
       <context:property-placeholder location="classpath:database.properties"/>
   
       <!-- 2.数据库连接池 -->
       <!--数据库连接池
   dbcp  半自动化操作  不能自动连接
   c3p0  自动化操作（自动的加载配置文件 并且设置到对象里面）
       -->
       <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
   <!-- 配置连接池属性 -->
   <property name="driverClass" value="${jdbc.driver}"/>
   <property name="jdbcUrl" value="${jdbc.url}"/>
   <property name="user" value="${jdbc.username}"/>
   <property name="password" value="${jdbc.password}"/>
   
   <!-- c3p0连接池的私有属性 -->
   <property name="maxPoolSize" value="30"/>
   <property name="minPoolSize" value="10"/>
   <!-- 关闭连接后不自动commit -->
   <property name="autoCommitOnClose" value="false"/>
   <!-- 获取连接超时时间 -->
   <property name="checkoutTimeout" value="10000"/>
   <!-- 当获取连接失败重试次数 -->
   <property name="acquireRetryAttempts" value="2"/>
       </bean>
   
       <!-- 3.配置SqlSessionFactory对象 -->
       <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource"/>
   <!-- 配置MyBaties全局配置文件:mybatis-config.xml -->
   <property name="configLocation" value="classpath:mybatis-config.xml"/>
       </bean>
   
       <!-- 4.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 -->
       <!--解释 ： https://www.cnblogs.com/jpfss/p/7799806.html-->
       <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
   <!-- 注入sqlSessionFactory -->
   <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
   <!-- 给出需要扫描Dao接口包 -->
   <property name="basePackage" value="com.feige.dao"/>
       </bean>
   
   </beans>
   ```

3. **Spring整合service层**

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 扫描service相关的bean -->
       <context:component-scan base-package="com.kuang.service" />
   
       <!--BookServiceImpl注入到IOC容器中-->
       <bean id="BookServiceImpl" class="com.kuang.service.BookServiceImpl">
   <property name="bookMapper" ref="bookMapper"/>
       </bean>
   
       <!-- 配置事务管理器 -->
       <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource" />
       </bean>
   
   </beans>
   ```

Spring层搞定！再次理解一下，Spring就是一个大杂烩，一个容器！对吧！

## 5、SpringMVC层

1. **web.xml**

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
            version="4.0">
   
       <!--DispatcherServlet-->
       <servlet>
           <servlet-name>DispatcherServlet</servlet-name>
           <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
           <init-param>
               <param-name>contextConfigLocation</param-name>
               <param-value>classpath:applicationContext.xml</param-value>
           </init-param>
           <load-on-startup>1</load-on-startup>
       </servlet>
       <servlet-mapping>
           <servlet-name>DispatcherServlet</servlet-name>
           <url-pattern>/</url-pattern>
       </servlet-mapping>
   
       <!--encodingFilter-->
       <filter>
           <filter-name>encodingFilter</filter-name>
           <filter-class>
               org.springframework.web.filter.CharacterEncodingFilter
           </filter-class>
           <init-param>
               <param-name>encoding</param-name>
               <param-value>utf-8</param-value>
           </init-param>
       </filter>
       <filter-mapping>
           <filter-name>encodingFilter</filter-name>
           <url-pattern>/*</url-pattern>
       </filter-mapping>
       
       <!--Session过期时间-->
       <session-config>
           <session-timeout>15</session-timeout>
       </session-config>
       
   </web-app>
   ```

2. **spring-mvc.xml**

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xmlns:mvc="http://www.springframework.org/schema/mvc"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       https://www.springframework.org/schema/mvc/spring-mvc.xsd">
   
       <!-- 配置SpringMVC -->
       <!-- 1.开启SpringMVC注解驱动 -->
       <mvc:annotation-driven>
           <mvc:message-converters register-defaults="true">
               <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                   <constructor-arg value="UTF-8"/>
               </bean>
               <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                   <property name="objectMapper">
                       <bean class="org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean">
                           <property name="failOnEmptyBeans" value="false"/>
                       </bean>
                   </property>
               </bean>
           </mvc:message-converters>
       </mvc:annotation-driven>
       <!--解决跨域问题-->
       <mvc:cors>
       <mvc:mapping path="/**"
                    allowed-origins="http://127.0.0.1:8090,http://localhost:8090"
                    allowed-methods="POST,GET, OPTIONS,DELETE,PUT"
                    allowed-headers="Content-Type,ContentType,Access-Control-Allow-Headers, Authorization, X-Requested-With"
                    allow-credentials="true"/>
       </mvc:cors>
       <!-- 2.静态资源默认servlet配置-->
       <mvc:default-servlet-handler/>
   
       <!-- 3.配置jsp 显示ViewResolver视图解析器 -->
       <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
           <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
           <property name="prefix" value="/WEB-INF/jsp/" />
           <property name="suffix" value=".jsp" />
       </bean>
   
       <!-- 4.扫描web相关的bean -->
       <context:component-scan base-package="com.feige.controller" />
   
   </beans>
   ```

3. **Spring配置整合文件，applicationContext.xml**

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd">
   
       <import resource="spring-dao.xml"/>
       <import resource="spring-service.xml"/>
       <import resource="spring-mvc.xml"/>
       
   </beans>
   ```

**配置文件，暂时结束！Controller 和 视图层编写**

1. BookController 类编写 ， 方法一：查询全部书籍

   ```java
   @Controller
   @RequestMapping("/book")
   public class BookController {
   
       @Autowired
       @Qualifier("BookServiceImpl")
       private BookService bookService;
   
       @RequestMapping("/allBook")
       public String list(Model model) {
           List<Books> list = bookService.queryAllBook();
           model.addAttribute("list", list);
           return "allBook";
       }
   }
   ```

2. 编写首页 **index.jsp**

   ```html
   <%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" %>
   <!DOCTYPE HTML>
   <html>
   <head>
       <title>首页</title>
       <style type="text/css">
           a {
               text-decoration: none;
               color: black;
               font-size: 18px;
           }
           h3 {
               width: 180px;
               height: 38px;
               margin: 100px auto;
               text-align: center;
               line-height: 38px;
               background: deepskyblue;
               border-radius: 4px;
           }
       </style>
   </head>
   <body>
   
   <h3>
       <a href="${pageContext.request.contextPath}/book/allBook">点击进入列表页</a>
   </h3>
   </body>
   </html>
   ```

3. 书籍列表页面 **allbook.jsp**

   ```jsp
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>书籍列表</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>书籍列表 —— 显示所有书籍</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <div class="row">
           <div class="col-md-4 column">
               <a class="btn btn-primary" href="${pageContext.request.contextPath}/book/toAddBook">新增</a>
           </div>
       </div>
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <table class="table table-hover table-striped">
                   <thead>
                   <tr>
                       <th>书籍编号</th>
                       <th>书籍名字</th>
                       <th>书籍数量</th>
                       <th>书籍详情</th>
                       <th>操作</th>
                   </tr>
                   </thead>
   
                   <tbody>
                   <c:forEach var="book" items="${requestScope.get('list')}">
                       <tr>
                           <td>${book.getBookId()}</td>
                           <td>${book.getBookName()}</td>
                           <td>${book.getBookCounts()}</td>
                           <td>${book.getDetail()}</td>
                           <td>
                               <a href="${pageContext.request.contextPath}/book/toUpdateBook?id=${book.getBookId()}">更改</a> |
                               <a href="${pageContext.request.contextPath}/book/del/${book.getBookId()}">删除</a>
                           </td>
                       </tr>
                   </c:forEach>
                   </tbody>
               </table>
           </div>
       </div>
   </div>
   ```

4. BookController 类编写 ， 方法二：添加书籍

   ```java
   @RequestMapping("/toAddBook")
   public String toAddPaper() {
       return "addBook";
   }
   
   @RequestMapping("/addBook")
   public String addPaper(Books books) {
       System.out.println(books);
       bookService.addBook(books);
       return "redirect:/book/allBook";
   }
   ```

5. 添加书籍页面：**addBook.jsp**

   ```jsp
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   
   <html>
   <head>
       <title>新增书籍</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>新增书籍</small>
                   </h1>
               </div>
           </div>
       </div>
       <form action="${pageContext.request.contextPath}/book/addBook" method="post">
           书籍名称：<input type="text" name="bookName"><br><br><br>
           书籍数量：<input type="text" name="bookCounts"><br><br><br>
           书籍详情：<input type="text" name="detail"><br><br><br>
           <input type="submit" value="添加">
       </form>
   
   </div>
   ```

6. BookController 类编写 ， 方法三：修改书籍

   ```java
   @RequestMapping("/toUpdateBook")
   public String toUpdateBook(Model model, int id) {
       Books books = bookService.queryBookById(id);
       System.out.println(books);
       model.addAttribute("book",books );
       return "updateBook";
   }
   
   @RequestMapping("/updateBook")
   public String updateBook(Model model, Books book) {
       bookService.updateBook(book);
       Books books = bookService.queryBookById(book.getBookID());
       model.addAttribute("books", books);
       return "redirect:/book/allBook";
   }
   ```

7. 修改书籍页面 **updateBook.jsp**

   ```jsp
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>修改信息</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>修改信息</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <form action="${pageContext.request.contextPath}/book/updateBook" method="post">
           <input type="hidden" name="bookID" value="${book.getBookId()}"/>
           书籍名称：<input type="text" name="bookName" value="${book.getBookName()}"/>
           书籍数量：<input type="text" name="bookCounts" value="${book.getBookCounts()}"/>
           书籍详情：<input type="text" name="detail" value="${book.getDetail() }"/>
           <input type="submit" value="提交"/>
       </form>
   
   </div>
   ```

8. BookController 类编写 ， 方法四：删除书籍

   ```java
   @RequestMapping("/del/{bookId}")
   public String deleteBook(@PathVariable("bookId") int id) {
       bookService.deleteBookById(id);
       return "redirect:/book/allBook";
   }
   ```

**配置Tomcat，进行运行！**

到目前为止，这个SSM项目整合已经完全的OK了，可以直接运行进行测试！这个练习十分的重要，大家需要保证，不看任何东西，自己也可以完整的实现出来！

## **6、项目结构图**

![1570186854191.png](https://blog.kuangstudy.com/usr/uploads/2019/10/1086489242.png)

![1570186868239.png](https://blog.kuangstudy.com/usr/uploads/2019/10/2326667495.png)

## 7、错误排查

### 1、访问出现404，排查步骤：**

1. 查看控制台输出，看一下是不是缺少了什么jar包。

2. 如果jar包存在，显示无法输出，就在IDEA的项目发布中，添加lib依赖！

   步骤：点击项目结构----->Artifacts----->点击自己的项目(ssm:war exploded)--->(点击工具栏的第一个)在WEB-INF目录下新建一个lib包----->选中lib------>点击工具栏的第三个然后选中第一个---->把里面的包全部选中点击ok---->点击Apply再ok

   ![image-20200128125126368](E:\Java资料\ssm整合.assets\image-20200128125126368.png)

   ![image-20200128125237179](E:\Java资料\ssm整合.assets\image-20200128125237179.png)

3. 重启Tomcat 即可解决！

### 2、其他错误

#### 1、bean不存在

​	步骤：

​		查看bean注入是否成功 

​		junit单元测试，看我们的代码是否能够查询出来

​		问题不在底层，是我们spring出了问题

​		springMVC整合时没有调用到service层的bean

​			applicationContext.xml没有注册bean

​			web.xml也绑定过配置文件要绑定大的applicationContext.xml

​			

## 8、小结及展望

这个是同学们的第一个SSM整合案例，一定要烂熟于心！

SSM框架的重要程度是不言而喻的，学到这里，大家已经可以进行基本网站的单独开发。但是这只是增删改查的基本操作。可以说学到这里，大家才算是真正的步入了后台开发的门。也就是能找一个后台相关工作的底线。

或许很多人，工作就做这些事情，但是对于个人的提高来说，还远远不够！, 2020-03-02 07:06:53.0, 2020-03-23 19:38:47.0, null, 10]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20004} created. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id  and
        c.parent_id is null limit ?,?;;
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20004} Parameters : [13, 0, 10]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20004} Types : [INTEGER, INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20003, rs-50015} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20003} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10003} pool-recycle
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20004} executed. 5.512884 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id  and
        c.parent_id is null limit ?,?;;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20004, rs-50016} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20004, rs-50016} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20004, rs-50016} Result: [26, 好好, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:35.0, null]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20004, rs-50016} Result: [29, 太好了, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:13.0, null]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20004, rs-50016} Result: [32, <p>feige</p>, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 01:33:26.0, null]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20004, rs-50016} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20004} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} created. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} Parameters : [13, 26]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} executed. 3.855108 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50017} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50017} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50017} Result: [27, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:56.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50017} Result: [28, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:43:03.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50017} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} Parameters : [13, 26]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} executed. 6.001773 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50018} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50018} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50018} Result: [27, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:56.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50018} Result: [28, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:43:03.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50018} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} Parameters : [13, 27]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} executed. 0.805777 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50019} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50019} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50019} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} Parameters : [13, 27]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} executed. 0.687555 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50020} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50020} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50020} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} Parameters : [13, 29]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} executed. 6.010661 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50021} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50021} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50021} Result: [30, 谢谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:43.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50021} Result: [31, 不用谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:47:01.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50021} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} Parameters : [13, 29]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} executed. 3.478663 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50022} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50022} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50022} Result: [30, 谢谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:43.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50022} Result: [31, 不用谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:47:01.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50022} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} Parameters : [13, 30]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} executed. 0.709777 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50023} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50023} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50023} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} Parameters : [13, 30]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} executed. 0.670221 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50024} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50024} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50024} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} Parameters : [13, 32]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} executed. 0.662666 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50025} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50025} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50025} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20006} created. select id,type_name typeName
        from `type`
         
            limit ?,?
[DEBUG][20-03-23][druid.sql.Connection]{conn-10003} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20006} Parameters : [0, 30]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20006} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20007} created. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog
         
            limit ?,?
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20007} Parameters : [0, 10]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20007} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20007} executed. 1.521332 millis. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog
         
            limit ?,?
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20007, rs-50026} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20007, rs-50026} Header: [id, type_name, title, content, create_time, change_time, author, view]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20007, rs-50026} Result: [1, springboot, springboot入门, springb自动装配, 2020-02-23 21:43:36.0, 2020-02-24 03:06:48.0, admin, 0]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20006} executed. 4.486219 millis. select id,type_name typeName
        from `type`
         
            limit ?,?
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20007, rs-50026} Result: [2, mybatis, 配置, 得到的, 2020-02-24 02:05:36.0, 2020-03-13 06:39:47.0, admin, 3]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20006, rs-50027} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20006, rs-50027} Header: [id, type_name]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20006, rs-50027} Result: [3, mybatis]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20006, rs-50027} Result: [2, spring]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20006, rs-50027} Result: [1, springboot]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20006, rs-50027} Result: [4, springMVC]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20007, rs-50026} Result: [4, springMVC, mybatis-plus, ##飞哥, 2020-02-24 02:10:09.0, 2020-02-25 22:42:23.0, admin, 111]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20006, rs-50027} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20006} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20007, rs-50026} Result: [5, springboot, 人, 嗯嗯, 2020-02-24 03:07:20.0, 2020-02-24 03:07:20.0, admin, 2]
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20008} created. select count(*) from `type`
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20007, rs-50026} Result: [6, mybatis, mybatis入门, <h2>1、Mybatis简介</h2>
<p><img src="https://blog.kuangstudy.com/usr/uploads/2019/10/1296229149.png" referrerpolicy="no-referrer" alt="1567007421329.png"></p>
<h3>什么是MyBatis</h3>
<ul>
<li>MyBatis 是一款优秀的<strong>持久层框架</strong></li>
<li>MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集的过程</li>
<li>MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 实体类 【Plain Old Java Objects,普通的 Java对象】映射成数据库中的记录。</li>
<li>MyBatis 本是apache的一个开源项目ibatis, 2010年这个项目由apache 迁移到了google code，并且改名为MyBatis 。</li>
<li>2013年11月迁移到<strong>Github</strong> .</li>
<li>Mybatis官方文档 : <a href='http://www.mybatis.org/mybatis-3/zh/index.html' target='_blank' class='url'>http://www.mybatis.org/mybatis-3/zh/index.html</a></li>
<li>GitHub : <a href='https://github.com/mybatis/mybatis-3' target='_blank' class='url'>https://github.com/mybatis/mybatis-3</a></li>

</ul>
<h3>持久化</h3>
<ul>
<li><p><strong>持久化是将程序数据在持久状态和瞬时状态间转换的机制。</strong></p>
<ul>
<li>即把数据（如内存中的对象）保存到可永久保存的存储设备中（如磁盘）。持久化的主要应用是将内存中的对象存储在数据库中，或者存储在磁盘文件中、XML数据文件中等等。</li>
<li>JDBC就是一种持久化机制。文件IO也是一种持久化机制。</li>
<li>在生活中 : 将鲜肉冷藏，吃的时候再解冻的方法也是。将水果做成罐头的方法也是。</li>

</ul>
</li>
<li><p><strong>为什么需要持久化服务呢？那是由于内存本身的缺陷引起的</strong></p>
<ul>
<li>内存断电后数据会丢失，但有一些对象是无论如何都不能丢失的，比如银行账号等，遗憾的是，人们还无法保证内存永不掉电。</li>
<li>内存过于昂贵，与硬盘、光盘等外存相比，内存的价格要高2~3个数量级，而且维持成本也高，至少需要一直供电吧。所以即使对象不需要永久保存，也会因为内存的容量限制不能一直呆在内存中，需要持久化来缓存到外存。</li>

</ul>
</li>

</ul>
<h3>持久层</h3>
<ul>
<li><p>什么是持久层？</p>
<ul>
<li>完成持久化工作的代码块 . ----&gt; dao层 【DAO (Data Access Object) 数据访问对象】</li>
<li>大多数情况下特别是企业级应用，数据持久化往往也就意味着将内存中的数据保存到磁盘上加以固化，而持久化的实现过程则大多通过各种<strong>关系数据库</strong>来完成。</li>
<li>不过这里有一个字需要特别强调，也就是所谓的“层”。对于应用系统而言，数据持久功能大多是必不可少的组成部分。也就是说，我们的系统中，已经天然的具备了“持久层”概念？也许是，但也许实际情况并非如此。之所以要独立出一个“持久层”的概念,而不是“持久模块”，“持久单元”，也就意味着，我们的系统架构中，应该有一个相对独立的逻辑层面，专著于数据持久化逻辑的实现.</li>
<li>与系统其他部分相对而言，这个层面应该具有一个较为清晰和严格的逻辑边界。 【说白了就是用来操作数据库存在的！】</li>

</ul>
</li>

</ul>
<h3>为什么需要Mybatis</h3>
<ul>
<li><p>Mybatis就是帮助程序猿将数据存入数据库中 , 和从数据库中取数据 .</p>
</li>
<li><p>传统的jdbc操作 , 有很多重复代码块 .比如 : 数据取出时的封装 , 数据库的建立连接等等... , 通过框架可以减少重复代码,提高开发效率 .</p>
</li>
<li><p>MyBatis 是一个半自动化的<strong>ORM框架 (Object Relationship Mapping) --&gt;对象关系映射</strong></p>
</li>
<li><p>所有的事情，不用Mybatis依旧可以做到，只是用了它，所有实现会更加简单！<strong>技术没有高低之分，只有使用这个技术的人有高低之别</strong></p>
</li>
<li><p>MyBatis的优点</p>
<ul>
<li>简单易学：本身就很小且简单。没有任何第三方依赖，最简单安装只要两个jar文件+配置几个sql映射文件就可以了，易于学习，易于使用，通过文档和源代码，可以比较完全的掌握它的设计思路和实现。</li>
<li>灵活：mybatis不会对应用程序或者数据库的现有设计强加任何影响。 sql写在xml里，便于统一管理和优化。通过sql语句可以满足操作数据库的所有需求。</li>
<li>解除sql与程序代码的耦合：通过提供DAO层，将业务逻辑和数据访问逻辑分离，使系统的设计更清晰，更易维护，更易单元测试。sql和代码的分离，提高了可维护性。</li>
<li>提供xml标签，支持编写动态sql。</li>
<li>.......</li>

</ul>
</li>
<li><p>最重要的一点，使用的人多！公司需要！</p>
</li>
<li><p>环境说明：</p>
<ul>
<li>jdk 8 +</li>
<li>MySQL 5.7.19</li>
<li>maven-3.6.0</li>
<li>IDEA</li>

</ul>
<p>学习前需要掌握：</p>
<ul>
<li>JDBC</li>
<li>MySQL</li>
<li>Java 基础</li>
<li>Maven</li>
<li>Junit</li>

</ul>
</li>

</ul>
<h2>2、mybatis crud（实现增删改查）</h2>
<h4>1.1、创建一个maven项目</h4>
<p>		导入依赖</p>
<pre><code class='language-xml' lang='xml'>&lt;dependencies&gt;
    &lt;!--mysql驱动--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;mysql&lt;/groupId&gt;
        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
        &lt;version&gt;5.1.47&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;!--mybatis支持--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.mybatis&lt;/groupId&gt;
        &lt;artifactId&gt;mybatis&lt;/artifactId&gt;
        &lt;version&gt;3.5.2&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;!--junit支持--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;junit&lt;/groupId&gt;
        &lt;artifactId&gt;junit&lt;/artifactId&gt;
        &lt;version&gt;4.12&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
</code></pre>
<p>注意点 : pom文件的设置中需要设置资源过滤 , 否则会有资源文件打包不成功问题，导致项目无法运行；</p>
<pre><code class='language-xml' lang='xml'>&lt;build&gt;
    &lt;resources&gt;
        &lt;resource&gt;
            &lt;directory&gt;src/main/java&lt;/directory&gt;
            &lt;includes&gt;
                &lt;include&gt;**/*.properties&lt;/include&gt;
                &lt;include&gt;**/*.xml&lt;/include&gt;
            &lt;/includes&gt;
            &lt;filtering&gt;true&lt;/filtering&gt;
        &lt;/resource&gt;
    &lt;/resources&gt;
&lt;/build&gt;
</code></pre>
<p>&nbsp;</p>
<h4>1.2、创建数据库和表</h4>
<pre><code class='language-sql' lang='sql'>CREATE DATABASE mybatis CHARACTER SET utf8;
CREATE TABLE USER(
	id INT PRIMARY KEY,
	username VARCHAR(15) NOT NULL,
	pwd VARCHAR(20) NOT NULL
)
INSERT INTO USER VALUES(2018143114,&#39;张三&#39;,&#39;123456&#39;),(2018143115,&#39;李四&#39;,&#39;1234567&#39;),(2018143116,&#39;王五&#39;,&#39;147258&#39;);
SELECT * FROM USER;
</code></pre>
<h4>1.3、编写mybatis配置文件</h4>
<p>在resource里新建一个mybatis-config.xml文件</p>
<pre><code class='language-xml' lang='xml'>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE configuration
        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;
&lt;configuration&gt;
    &lt;environments default=&quot;development&quot;&gt;
        &lt;environment id=&quot;development&quot;&gt;
            &lt;transactionManager type=&quot;JDBC&quot;/&gt;
            &lt;dataSource type=&quot;POOLED&quot;&gt;
                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;
                &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;amp;useUnicode=true&amp;amp;characterEncoding=utf8&quot;/&gt;
                &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;
                &lt;property name=&quot;password&quot; value=&quot;hufei169357&quot;/&gt;
            &lt;/dataSource&gt;
        &lt;/environment&gt;
    &lt;/environments&gt;
    &lt;mappers&gt;
        &lt;mapper resource=&quot;com/feige/dao/userMapper.xml&quot;/&gt;
    &lt;/mappers&gt;
&lt;/configuration&gt;
</code></pre>
<h4>1.4、新建一个工具类用来获取SqlSession对象</h4>
<pre><code class='language-java' lang='java'>package com.feige.utils;

import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import java.io.IOException;
import java.io.InputStream;
//sqlSessionFactory-sqlSession
public class MybatisUtils {
    private static SqlSessionFactory sqlSessionFactory;
    static {
        try {
            //使用mybatis第一步：获取sqlSessionFactory对象
            String resource = &quot;mybatis-config.xml&quot;;
            InputStream inputStream = Resources.getResourceAsStream(resource);
            sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    //既然有了sqlSessionFactory，顾名思义，我们就可以从中获得sqlSession的实例
    public static SqlSession getSqlSessioon(){
        return sqlSessionFactory.openSession();
    }
}

</code></pre>
<p>&nbsp;</p>
<h4>1.5、编写一个pojo（实体类）</h4>
<pre><code class='language-java' lang='java'>package com.feige.pojo;

public class User {
    private int id;
    private String username;
    private String pwd;

    public User() {
    }

    public User(int id, String username, String pwd) {
        this.id = id;
        this.username = username;
        this.pwd = pwd;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getPwd() {
        return pwd;
    }

    public void setPwd(String pwd) {
        this.pwd = pwd;
    }
    @Override
    public String toString() {
        return &quot;User{&quot; +
                &quot;id=&quot; + id +
                &quot;, username=&#39;&quot; + username + &#39;\&#39;&#39; +
                &quot;, pwd=&#39;&quot; + pwd + &#39;\&#39;&#39; +
                &#39;}&#39;;
    }
}

</code></pre>
<h4>1.6、新建一个userMapper接口</h4>
<pre><code class='language-java' lang='java'>package com.feige.dao;

import com.feige.pojo.User;

import java.util.List;
import java.util.Map;

public interface UserMapper {
    //查询全部用户
    List&lt;User&gt; getAllUser();
    //通过一个id查询一个用户
    User getUserById(int id);
    //通过id修改一个用户
    int updateUserById(Map map);
    //通过id删除一个用户
    int deleteUserById(int id);
    //插入一条数据
    int insertUser(User user);
}

</code></pre>
<h4>1.7、新建一个userMapper.xml文件</h4>
<pre><code class='language-xml' lang='xml'>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE mapper
        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;com.feige.dao.UserMapper&quot;&gt;
    &lt;!--每个语句要对应相应的标签select对应&lt;select&gt; delete 对应&lt;delete&gt; update 对应&lt;update&gt; insert 对应&lt;insert&gt;--&gt;
    &lt;select id=&quot;getAllUser&quot; resultType=&quot;com.feige.pojo.User&quot;&gt;
        select * from user
    &lt;/select&gt;
    &lt;select id=&quot;getUserById&quot; resultType=&quot;com.feige.pojo.User&quot; parameterType=&quot;int&quot;&gt;
        select * from user where id=#{id}
    &lt;/select&gt;
    &lt;update id=&quot;updateUserById&quot; parameterType=&quot;map&quot;&gt;
        update user set pwd=#{pwd} where id=#{id}
    &lt;/update&gt;
    &lt;delete id=&quot;deleteUserById&quot; parameterType=&quot;int&quot;&gt;
        delete from user where id=#{id}
    &lt;/delete&gt;
    &lt;insert id=&quot;insertUser&quot; parameterType=&quot;com.feige.pojo.User&quot;&gt;
        insert into user values (#{id},#{username},#{pwd})
    &lt;/insert&gt;
&lt;/mapper&gt;
</code></pre>
<h4>1.8、测试代码</h4>
<pre><code class='language-java' lang='java'>package com.feige.mybatisTest;

import com.feige.dao.UserMapper;
import com.feige.pojo.User;
import com.feige.utils.MybatisUtils;
import org.apache.ibatis.session.SqlSession;
import org.junit.Test;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MybatisTest {
    @Test
    public void mybatisTest1(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        List&lt;User&gt; allUser = mapper.getAllUser();
        for (User user : allUser) {
            System.out.println(user);
        }
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest2(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        User userById = mapper.getUserById(2018143114);
        System.out.println(userById);
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest3() {
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        //使用万能map传参
        Map&lt;String,Object&gt; map = new HashMap&lt;String, Object&gt;();
        map.put(&quot;pwd&quot;,2018143114);
        map.put(&quot;id&quot;,2018143114);

        int i = mapper.updateUserById(map);
        if (i &gt; 0) {
            System.out.println(&quot;修改成功！&quot;+i);
        }
        //增删改需要提交事务
        sqlSessioon.commit();

        sqlSessioon.close();

    }
    @Test
    public void mybatisTest4(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        int i = mapper.deleteUserById(2018143117);
        if (i &gt; 0) {
            System.out.println(&quot;删除成功！&quot;+i);
        }
        sqlSessioon.commit();
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest5(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        User user = new User(2018143117, &quot;杨帆东&quot;, &quot;2018143117&quot;);
        int i = mapper.insertUser(user);
        if (i &gt; 0) {
            System.out.println(&quot;插入成功！&quot;+i);
        }
        sqlSessioon.commit();
        sqlSessioon.close();

    }
}

</code></pre>
<p>&nbsp;</p>
<p>		</p>, 2020-02-24 03:15:45.0, 2020-02-24 03:15:50.0, admin, 0]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20008} Parameters : []
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20008} Types : []
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20007, rs-50026} Result: [7, mybatis, mybatis啊, 作者, 2020-02-24 03:27:18.0, 2020-02-24 03:27:18.0, admin, 1]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20008} executed. 1.770665 millis. select count(*) from `type`
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50028} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50028} Header: [count(*)]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50028} Result: [4]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20007, rs-50026} Result: [8, springboot, aaa, [TOC]
                            #### Disabled options

                            - TeX (Based on KaTeX);
                            - Emoji;
                            - Task lists;
                            - HTML tags decode;
                            - Flowchart and Sequence Diagram;
                            #### Editor.md directory

                                editor.md/
                                        lib/
                                        css/
                                        scss/
                                        tests/
                                        fonts/
                                        images/
                                        plugins/
                                        examples/
                                        languages/
                                        editormd.js
                                        ...

                            ```html
                            <!-- English -->
                            <script src="../dist/js/languages/en.js"></script>

                            <!-- 繁體中文 -->
                            <script src="../dist/js/languages/zh-tw.js"></script>
                            ```
                        , 2020-02-25 03:39:36.0, 2020-02-25 22:38:07.0, admin, 1]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50028} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20008} clearParameters. 
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20007, rs-50026} Result: [9, mybatis, bbb, [TOC]

                            #### Disabled options

                            - TeX (Based on KaTeX);
                            - Emoji;
                            - Task lists;
                            - HTML tags decode;
                            - Flowchart and Sequence Diagram;

                            #### Editor.md directory

                                editor.md/
                                        lib/
                                        css/
                                        scss/
                                        tests/
                                        fonts/
                                        images/
                                        plugins/
                                        examples/
                                        languages/
                                        editormd.js
                                        ...

                            ```html
                            <!-- English -->
                            <script src="../dist/js/languages/en.js"></script>

                            <!-- 繁體中文 -->
                            <script src="../dist/js/languages/zh-tw.js"></script>
                            ```
                        , 2020-02-25 03:44:09.0, 2020-02-25 03:44:09.0, admin, 1]
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20007, rs-50026} Result: [10, springboot, 飞哥, #大哥的Markdown, 2020-02-25 22:43:28.0, 2020-02-25 22:43:28.0, admin, 1]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20007, rs-50026} Result: [11, mybatis, 大哥, #飞哥的博客后台管理系统, 2020-02-25 22:49:26.0, 2020-02-25 22:49:26.0, admin, 1]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20007, rs-50026} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20007} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10003} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10003} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20009} created. select count(*) from `blog`
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20009} Parameters : []
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20009} Types : []
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20009} executed. 0.620444 millis. select count(*) from `blog`
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20009, rs-50029} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20009, rs-50029} Header: [count(*)]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20009, rs-50029} Result: [13]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20009, rs-50029} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20009} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10003} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10003} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20007} Parameters : [10, 10]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20007} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20007} executed. 1.213777 millis. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog
         
            limit ?,?
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20007, rs-50030} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20007, rs-50030} Header: [id, type_name, title, content, create_time, change_time, author, view]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20007, rs-50030} Result: [12, mybatis, 56, ##等待, 2020-02-25 22:50:53.0, 2020-02-25 22:50:53.0, admin, 5]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20007, rs-50030} Result: [13, mybatis, ssm1整合, # ssm整合

## 1、数据库环境

创建一个存放书籍数据的数据库表

```sql
CREATE DATABASE `ssmbuild`;

USE `ssmbuild`;

DROP TABLE IF EXISTS `books`;

CREATE TABLE `books` (
  `bookId` INT PRIMARY KEY COMMENT '书id',
  `bookName` VARCHAR(100) NOT NULL COMMENT '书名',
  `bookCounts` INT(11) NOT NULL COMMENT '数量',
  ``ssmbuild``ssmbuild`` VARCHAR(200) NOT NULL COMMENT '描述'
) ENGINE=INNODB DEFAULT CHARSET=utf8

INSERT  INTO `books`(`bookId`,`bookName`,`bookCounts`,`detail`)VALUES 
(1,'Java',1,'从入门到放弃'),
(2,'MySQL',10,'从删库到跑路'),
(3,'Linux',5,'从进门到进牢');

SELECT * FROM books
```

## 2、基本环境搭建

1. 新建一Maven项目！ ssmbuild ， 添加web的支持

   ![image-20200128134359317](.\ssm整合.assets\image-20200128134359317.png)

2. 导入相关的pom依赖！

   ```xml
   <dependencies>
       <!--Junit-->
       <dependency>
           <groupId>junit</groupId>
           <artifactId>junit</artifactId>
           <version>4.12</version>
       </dependency>
       <!--数据库驱动-->
       <dependency>
           <groupId>mysql</groupId>
           <artifactId>mysql-connector-java</artifactId>
           <version>5.1.47</version>
       </dependency>
       <!-- 数据库连接池 -->
       <dependency>
           <groupId>com.mchange</groupId>
           <artifactId>c3p0</artifactId>
           <version>0.9.5.2</version>
       </dependency>
   
       <!--Servlet - JSP -->
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>servlet-api</artifactId>
           <version>2.5</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet.jsp</groupId>
           <artifactId>jsp-api</artifactId>
           <version>2.2</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>jstl</artifactId>
           <version>1.2</version>
       </dependency>
   
       <!--Mybatis-->
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis</artifactId>
           <version>3.5.2</version>
       </dependency>
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis-spring</artifactId>
           <version>2.0.2</version>
       </dependency>
   
       <!--Spring-->
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-webmvc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-jdbc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->
       <dependency>
           <groupId>org.projectlombok</groupId>
           <artifactId>lombok</artifactId>
           <version>1.16.10</version>
       </dependency>
   </dependencies>
   ```

3. Maven资源过滤设置

   ```xml
   <build>
       <resources>
           <resource>
               <directory>src/main/java</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
           <resource>
               <directory>src/main/resources</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
       </resources>
   </build>
   ```

4. 建立基本结构和配置框架！

   - com.feige.pojo

   - com.feige.dao

   - com.feige.service

   - com.feige.controller

     在resources目录下创建

   - mybatis-config.xml

     ```xml
     <?xml version="1.0" encoding="UTF-8" ?>
     <!DOCTYPE configuration
             PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
             "http://mybatis.org/dtd/mybatis-3-config.dtd">
     <configuration>
     
     </configuration>
     ```

   - applicationContext.xml

     ```xml
     <?xml version="1.0" encoding="UTF-8"?>
     <beans xmlns="http://www.springframework.org/schema/beans"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://www.springframework.org/schema/beans
             http://www.springframework.org/schema/beans/spring-beans.xsd">
     
     </beans>
     ```

## 3、Mybatis层编写

1. 数据库配置文件 **database.properties**

   ```properties
   jdbc.driver=com.mysql.jdbc.Driver
   jdbc.url=jdbc:mysql://localhost:3306/ssmbuild?useSSL=true&useUnicode=true&characterEncoding=utf8
   jdbc.username=root
   jdbc.password=hufei169357
   ```

2. IDEA关联数据库

3. 编写MyBatis的核心配置文件

   ```xml
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE configuration
           PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-config.dtd">
   <configuration>
       
       <typeAliases>
           <package name="com.feige.pojo"/>
       </typeAliases>
       <mappers>
           <mapper resource="com/feige/dao/BookMapper.xml"/>
       </mappers>
   
   </configuration>
   ```

4. 编写数据库对应的实体类 com.feige.pojo.Books
   使用lombok插件！

   ```java
   package com.kuang.pojo;
   
   import lombok.AllArgsConstructor;
   import lombok.Data;
   import lombok.NoArgsConstructor;
   
   @Data
   @AllArgsConstructor
   @NoArgsConstructor
   public class Books {
       
       private int bookId;
       private String bookName;
       private int bookCounts;
       private String detail;
       
   }
   ```

5. 编写Dao层的 Mapper接口！

   ```java
   package com.kuang.dao;
   
   import com.kuang.pojo.Books;
   import java.util.List;
   
   public interface BookMapper {
   
       //增加一个Book
       int addBook(Books book);
   
       //根据id删除一个Book
       int deleteBookById(int id);
   
       //更新Book
       int updateBook(Books books);
   
       //根据id查询,返回一个Book
       Books queryBookById(int id);
   
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   
   }
   ```

6. 编写接口对应的 Mapper.xml 文件。需要导入MyBatis的包；

   ```xml
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE mapper
           PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
   
   <mapper namespace="com.feige.dao.BooksMapper">
   
       <!--增加一个Book-->
       <insert id="addBook" parameterType="Books">
           insert into books(bookName,bookCounts,detail)
           values (#{bookName}, #{bookCounts}, #{detail})
       </insert>
   
       <!--根据id删除一个Book-->
       <delete id="deleteBookById" parameterType="int">
           delete from books where bookId=#{bookId}
       </delete>
   
       <!--更新Book-->
       <update id="updateBook" parameterType="Books">
           update books
           set bookName = #{bookName},bookCounts = #{bookCounts},detail = #{detail}
           where bookId = #{bookId}
       </update>
   
       <!--根据id查询,返回一个Book-->
       <select id="queryBookById" resultType="Books">
           select * from books
           where bookID = #{bookId}
       </select>
   
       <!--查询全部Book-->
       <select id="queryAllBook" resultType="com.feige.pojo.Books">
           SELECT * from books
       </select>
   
   </mapper>
   ```

7. 编写Service层的接口和实现类
   接口：

   ```java
   package com.feige.service;
   
   import com.feige.pojo.Books;
   
   import java.util.List;
   
   //BookService:底下需要去实现,调用dao层
   public interface BookService {
       //增加一个Book
       int addBook(Books book);
       //根据id删除一个Book
       int deleteBookById(int id);
       //更新Book
       int updateBook(Books books);
       //根据id查询,返回一个Book
       Books queryBookById(int id);
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   }
   ```

实现类：

```java
package com.feige.service;

import com.feige.dao.BookMapper;
import com.feige.pojo.Books;
import java.util.List;

public class BookServiceImpl implements BookService {

    //调用dao层的操作，设置一个set接口，方便Spring管理
    private BookMapper bookMapper;

    public void setBookMapper(BookMapper bookMapper) {
        this.bookMapper = bookMapper;
    }
    
    public int addBook(Books book) {
        return bookMapper.addBook(book);
    }
    
    public int deleteBookById(int id) {
        return bookMapper.deleteBookById(id);
    }
    
    public int updateBook(Books books) {
        return bookMapper.updateBook(books);
    }
    
    public Books queryBookById(int id) {
        return bookMapper.queryBookById(id);
    }
    
    public List<Books> queryAllBook() {
        return bookMapper.queryAllBook();
    }
}
```

**OK，到此，底层需求操作编写完毕！**

## 4、Spring层

1. 配置**Spring整合MyBatis**，我们这里数据源使用c3p0连接池；

2. 我们去编写Spring整合Mybatis的相关的配置文件； spring-dao.xml

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans.xsd
   http://www.springframework.org/schema/context
   https://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 配置整合mybatis -->
       <!-- 1.关联数据库文件 -->
       <context:property-placeholder location="classpath:database.properties"/>
   
       <!-- 2.数据库连接池 -->
       <!--数据库连接池
   dbcp  半自动化操作  不能自动连接
   c3p0  自动化操作（自动的加载配置文件 并且设置到对象里面）
       -->
       <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
   <!-- 配置连接池属性 -->
   <property name="driverClass" value="${jdbc.driver}"/>
   <property name="jdbcUrl" value="${jdbc.url}"/>
   <property name="user" value="${jdbc.username}"/>
   <property name="password" value="${jdbc.password}"/>
   
   <!-- c3p0连接池的私有属性 -->
   <property name="maxPoolSize" value="30"/>
   <property name="minPoolSize" value="10"/>
   <!-- 关闭连接后不自动commit -->
   <property name="autoCommitOnClose" value="false"/>
   <!-- 获取连接超时时间 -->
   <property name="checkoutTimeout" value="10000"/>
   <!-- 当获取连接失败重试次数 -->
   <property name="acquireRetryAttempts" value="2"/>
       </bean>
   
       <!-- 3.配置SqlSessionFactory对象 -->
       <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource"/>
   <!-- 配置MyBaties全局配置文件:mybatis-config.xml -->
   <property name="configLocation" value="classpath:mybatis-config.xml"/>
       </bean>
   
       <!-- 4.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 -->
       <!--解释 ： https://www.cnblogs.com/jpfss/p/7799806.html-->
       <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
   <!-- 注入sqlSessionFactory -->
   <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
   <!-- 给出需要扫描Dao接口包 -->
   <property name="basePackage" value="com.feige.dao"/>
       </bean>
   
   </beans>
   ```

3. **Spring整合service层**

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 扫描service相关的bean -->
       <context:component-scan base-package="com.kuang.service" />
   
       <!--BookServiceImpl注入到IOC容器中-->
       <bean id="BookServiceImpl" class="com.kuang.service.BookServiceImpl">
   <property name="bookMapper" ref="bookMapper"/>
       </bean>
   
       <!-- 配置事务管理器 -->
       <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource" />
       </bean>
   
   </beans>
   ```

Spring层搞定！再次理解一下，Spring就是一个大杂烩，一个容器！对吧！

## 5、SpringMVC层

1. **web.xml**

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
            version="4.0">
   
       <!--DispatcherServlet-->
       <servlet>
           <servlet-name>DispatcherServlet</servlet-name>
           <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
           <init-param>
               <param-name>contextConfigLocation</param-name>
               <param-value>classpath:applicationContext.xml</param-value>
           </init-param>
           <load-on-startup>1</load-on-startup>
       </servlet>
       <servlet-mapping>
           <servlet-name>DispatcherServlet</servlet-name>
           <url-pattern>/</url-pattern>
       </servlet-mapping>
   
       <!--encodingFilter-->
       <filter>
           <filter-name>encodingFilter</filter-name>
           <filter-class>
               org.springframework.web.filter.CharacterEncodingFilter
           </filter-class>
           <init-param>
               <param-name>encoding</param-name>
               <param-value>utf-8</param-value>
           </init-param>
       </filter>
       <filter-mapping>
           <filter-name>encodingFilter</filter-name>
           <url-pattern>/*</url-pattern>
       </filter-mapping>
       
       <!--Session过期时间-->
       <session-config>
           <session-timeout>15</session-timeout>
       </session-config>
       
   </web-app>
   ```

2. **spring-mvc.xml**

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xmlns:mvc="http://www.springframework.org/schema/mvc"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       https://www.springframework.org/schema/mvc/spring-mvc.xsd">
   
       <!-- 配置SpringMVC -->
       <!-- 1.开启SpringMVC注解驱动 -->
       <mvc:annotation-driven>
           <mvc:message-converters register-defaults="true">
               <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                   <constructor-arg value="UTF-8"/>
               </bean>
               <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                   <property name="objectMapper">
                       <bean class="org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean">
                           <property name="failOnEmptyBeans" value="false"/>
                       </bean>
                   </property>
               </bean>
           </mvc:message-converters>
       </mvc:annotation-driven>
       <!--解决跨域问题-->
       <mvc:cors>
       <mvc:mapping path="/**"
                    allowed-origins="http://127.0.0.1:8090,http://localhost:8090"
                    allowed-methods="POST,GET, OPTIONS,DELETE,PUT"
                    allowed-headers="Content-Type,ContentType,Access-Control-Allow-Headers, Authorization, X-Requested-With"
                    allow-credentials="true"/>
       </mvc:cors>
       <!-- 2.静态资源默认servlet配置-->
       <mvc:default-servlet-handler/>
   
       <!-- 3.配置jsp 显示ViewResolver视图解析器 -->
       <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
           <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
           <property name="prefix" value="/WEB-INF/jsp/" />
           <property name="suffix" value=".jsp" />
       </bean>
   
       <!-- 4.扫描web相关的bean -->
       <context:component-scan base-package="com.feige.controller" />
   
   </beans>
   ```

3. **Spring配置整合文件，applicationContext.xml**

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd">
   
       <import resource="spring-dao.xml"/>
       <import resource="spring-service.xml"/>
       <import resource="spring-mvc.xml"/>
       
   </beans>
   ```

**配置文件，暂时结束！Controller 和 视图层编写**

1. BookController 类编写 ， 方法一：查询全部书籍

   ```java
   @Controller
   @RequestMapping("/book")
   public class BookController {
   
       @Autowired
       @Qualifier("BookServiceImpl")
       private BookService bookService;
   
       @RequestMapping("/allBook")
       public String list(Model model) {
           List<Books> list = bookService.queryAllBook();
           model.addAttribute("list", list);
           return "allBook";
       }
   }
   ```

2. 编写首页 **index.jsp**

   ```html
   <%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" %>
   <!DOCTYPE HTML>
   <html>
   <head>
       <title>首页</title>
       <style type="text/css">
           a {
               text-decoration: none;
               color: black;
               font-size: 18px;
           }
           h3 {
               width: 180px;
               height: 38px;
               margin: 100px auto;
               text-align: center;
               line-height: 38px;
               background: deepskyblue;
               border-radius: 4px;
           }
       </style>
   </head>
   <body>
   
   <h3>
       <a href="${pageContext.request.contextPath}/book/allBook">点击进入列表页</a>
   </h3>
   </body>
   </html>
   ```

3. 书籍列表页面 **allbook.jsp**

   ```jsp
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>书籍列表</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>书籍列表 —— 显示所有书籍</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <div class="row">
           <div class="col-md-4 column">
               <a class="btn btn-primary" href="${pageContext.request.contextPath}/book/toAddBook">新增</a>
           </div>
       </div>
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <table class="table table-hover table-striped">
                   <thead>
                   <tr>
                       <th>书籍编号</th>
                       <th>书籍名字</th>
                       <th>书籍数量</th>
                       <th>书籍详情</th>
                       <th>操作</th>
                   </tr>
                   </thead>
   
                   <tbody>
                   <c:forEach var="book" items="${requestScope.get('list')}">
                       <tr>
                           <td>${book.getBookId()}</td>
                           <td>${book.getBookName()}</td>
                           <td>${book.getBookCounts()}</td>
                           <td>${book.getDetail()}</td>
                           <td>
                               <a href="${pageContext.request.contextPath}/book/toUpdateBook?id=${book.getBookId()}">更改</a> |
                               <a href="${pageContext.request.contextPath}/book/del/${book.getBookId()}">删除</a>
                           </td>
                       </tr>
                   </c:forEach>
                   </tbody>
               </table>
           </div>
       </div>
   </div>
   ```

4. BookController 类编写 ， 方法二：添加书籍

   ```java
   @RequestMapping("/toAddBook")
   public String toAddPaper() {
       return "addBook";
   }
   
   @RequestMapping("/addBook")
   public String addPaper(Books books) {
       System.out.println(books);
       bookService.addBook(books);
       return "redirect:/book/allBook";
   }
   ```

5. 添加书籍页面：**addBook.jsp**

   ```jsp
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   
   <html>
   <head>
       <title>新增书籍</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>新增书籍</small>
                   </h1>
               </div>
           </div>
       </div>
       <form action="${pageContext.request.contextPath}/book/addBook" method="post">
           书籍名称：<input type="text" name="bookName"><br><br><br>
           书籍数量：<input type="text" name="bookCounts"><br><br><br>
           书籍详情：<input type="text" name="detail"><br><br><br>
           <input type="submit" value="添加">
       </form>
   
   </div>
   ```

6. BookController 类编写 ， 方法三：修改书籍

   ```java
   @RequestMapping("/toUpdateBook")
   public String toUpdateBook(Model model, int id) {
       Books books = bookService.queryBookById(id);
       System.out.println(books);
       model.addAttribute("book",books );
       return "updateBook";
   }
   
   @RequestMapping("/updateBook")
   public String updateBook(Model model, Books book) {
       bookService.updateBook(book);
       Books books = bookService.queryBookById(book.getBookID());
       model.addAttribute("books", books);
       return "redirect:/book/allBook";
   }
   ```

7. 修改书籍页面 **updateBook.jsp**

   ```jsp
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>修改信息</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>修改信息</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <form action="${pageContext.request.contextPath}/book/updateBook" method="post">
           <input type="hidden" name="bookID" value="${book.getBookId()}"/>
           书籍名称：<input type="text" name="bookName" value="${book.getBookName()}"/>
           书籍数量：<input type="text" name="bookCounts" value="${book.getBookCounts()}"/>
           书籍详情：<input type="text" name="detail" value="${book.getDetail() }"/>
           <input type="submit" value="提交"/>
       </form>
   
   </div>
   ```

8. BookController 类编写 ， 方法四：删除书籍

   ```java
   @RequestMapping("/del/{bookId}")
   public String deleteBook(@PathVariable("bookId") int id) {
       bookService.deleteBookById(id);
       return "redirect:/book/allBook";
   }
   ```

**配置Tomcat，进行运行！**

到目前为止，这个SSM项目整合已经完全的OK了，可以直接运行进行测试！这个练习十分的重要，大家需要保证，不看任何东西，自己也可以完整的实现出来！

## **6、项目结构图**

![1570186854191.png](https://blog.kuangstudy.com/usr/uploads/2019/10/1086489242.png)

![1570186868239.png](https://blog.kuangstudy.com/usr/uploads/2019/10/2326667495.png)

## 7、错误排查

### 1、访问出现404，排查步骤：**

1. 查看控制台输出，看一下是不是缺少了什么jar包。

2. 如果jar包存在，显示无法输出，就在IDEA的项目发布中，添加lib依赖！

   步骤：点击项目结构----->Artifacts----->点击自己的项目(ssm:war exploded)--->(点击工具栏的第一个)在WEB-INF目录下新建一个lib包----->选中lib------>点击工具栏的第三个然后选中第一个---->把里面的包全部选中点击ok---->点击Apply再ok

   ![image-20200128125126368](E:\Java资料\ssm整合.assets\image-20200128125126368.png)

   ![image-20200128125237179](E:\Java资料\ssm整合.assets\image-20200128125237179.png)

3. 重启Tomcat 即可解决！

### 2、其他错误

#### 1、bean不存在

​	步骤：

​		查看bean注入是否成功 

​		junit单元测试，看我们的代码是否能够查询出来

​		问题不在底层，是我们spring出了问题

​		springMVC整合时没有调用到service层的bean

​			applicationContext.xml没有注册bean

​			web.xml也绑定过配置文件要绑定大的applicationContext.xml

​			

## 8、小结及展望

这个是同学们的第一个SSM整合案例，一定要烂熟于心！

SSM框架的重要程度是不言而喻的，学到这里，大家已经可以进行基本网站的单独开发。但是这只是增删改查的基本操作。可以说学到这里，大家才算是真正的步入了后台开发的门。也就是能找一个后台相关工作的底线。

或许很多人，工作就做这些事情，但是对于个人的提高来说，还远远不够！, 2020-03-02 07:06:53.0, 2020-03-23 19:38:47.0, null, 10]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20007, rs-50030} Result: [17, springboot, , ss, 2020-02-24 03:07:20.0, 2020-03-20 00:07:13.0, admin, 11]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20007, rs-50030} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20007} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10003} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10003} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20009} Parameters : []
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20009} Types : []
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20009} executed. 0.890666 millis. select count(*) from `blog`
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20009, rs-50031} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20009, rs-50031} Header: [count(*)]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20009, rs-50031} Result: [13]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20009, rs-50031} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20009} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10003} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Connection]{conn-10003} pool-connect
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20002} Parameters : [13]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20003} Parameters : [13]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20002} Types : [INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} Parameters : [0, 30]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20003} Types : [INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} executed. 1.233777 millis. select id,type_name typeName
        from `type`
         
            limit ?,?
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50032} open
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20003} executed. 1.505776 millis. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog where id=?
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50032} Header: [id, type_name]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20003, rs-50033} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20003, rs-50033} Header: [id, type_name, title, content, create_time, change_time, author, view]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50032} Result: [3, mybatis]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50032} Result: [2, spring]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50032} Result: [1, springboot]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50032} Result: [4, springMVC]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20003, rs-50033} Result: [13, mybatis, ssm1整合, # ssm整合

## 1、数据库环境

创建一个存放书籍数据的数据库表

```sql
CREATE DATABASE `ssmbuild`;

USE `ssmbuild`;

DROP TABLE IF EXISTS `books`;

CREATE TABLE `books` (
  `bookId` INT PRIMARY KEY COMMENT '书id',
  `bookName` VARCHAR(100) NOT NULL COMMENT '书名',
  `bookCounts` INT(11) NOT NULL COMMENT '数量',
  ``ssmbuild``ssmbuild`` VARCHAR(200) NOT NULL COMMENT '描述'
) ENGINE=INNODB DEFAULT CHARSET=utf8

INSERT  INTO `books`(`bookId`,`bookName`,`bookCounts`,`detail`)VALUES 
(1,'Java',1,'从入门到放弃'),
(2,'MySQL',10,'从删库到跑路'),
(3,'Linux',5,'从进门到进牢');

SELECT * FROM books
```

## 2、基本环境搭建

1. 新建一Maven项目！ ssmbuild ， 添加web的支持

   ![image-20200128134359317](.\ssm整合.assets\image-20200128134359317.png)

2. 导入相关的pom依赖！

   ```xml
   <dependencies>
       <!--Junit-->
       <dependency>
           <groupId>junit</groupId>
           <artifactId>junit</artifactId>
           <version>4.12</version>
       </dependency>
       <!--数据库驱动-->
       <dependency>
           <groupId>mysql</groupId>
           <artifactId>mysql-connector-java</artifactId>
           <version>5.1.47</version>
       </dependency>
       <!-- 数据库连接池 -->
       <dependency>
           <groupId>com.mchange</groupId>
           <artifactId>c3p0</artifactId>
           <version>0.9.5.2</version>
       </dependency>
   
       <!--Servlet - JSP -->
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>servlet-api</artifactId>
           <version>2.5</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet.jsp</groupId>
           <artifactId>jsp-api</artifactId>
           <version>2.2</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>jstl</artifactId>
           <version>1.2</version>
       </dependency>
   
       <!--Mybatis-->
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis</artifactId>
           <version>3.5.2</version>
       </dependency>
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis-spring</artifactId>
           <version>2.0.2</version>
       </dependency>
   
       <!--Spring-->
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-webmvc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-jdbc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->
       <dependency>
           <groupId>org.projectlombok</groupId>
           <artifactId>lombok</artifactId>
           <version>1.16.10</version>
       </dependency>
   </dependencies>
   ```

3. Maven资源过滤设置

   ```xml
   <build>
       <resources>
           <resource>
               <directory>src/main/java</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
           <resource>
               <directory>src/main/resources</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
       </resources>
   </build>
   ```

4. 建立基本结构和配置框架！

   - com.feige.pojo

   - com.feige.dao

   - com.feige.service

   - com.feige.controller

     在resources目录下创建

   - mybatis-config.xml

     ```xml
     <?xml version="1.0" encoding="UTF-8" ?>
     <!DOCTYPE configuration
             PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
             "http://mybatis.org/dtd/mybatis-3-config.dtd">
     <configuration>
     
     </configuration>
     ```

   - applicationContext.xml

     ```xml
     <?xml version="1.0" encoding="UTF-8"?>
     <beans xmlns="http://www.springframework.org/schema/beans"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://www.springframework.org/schema/beans
             http://www.springframework.org/schema/beans/spring-beans.xsd">
     
     </beans>
     ```

## 3、Mybatis层编写

1. 数据库配置文件 **database.properties**

   ```properties
   jdbc.driver=com.mysql.jdbc.Driver
   jdbc.url=jdbc:mysql://localhost:3306/ssmbuild?useSSL=true&useUnicode=true&characterEncoding=utf8
   jdbc.username=root
   jdbc.password=hufei169357
   ```

2. IDEA关联数据库

3. 编写MyBatis的核心配置文件

   ```xml
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE configuration
           PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-config.dtd">
   <configuration>
       
       <typeAliases>
           <package name="com.feige.pojo"/>
       </typeAliases>
       <mappers>
           <mapper resource="com/feige/dao/BookMapper.xml"/>
       </mappers>
   
   </configuration>
   ```

4. 编写数据库对应的实体类 com.feige.pojo.Books
   使用lombok插件！

   ```java
   package com.kuang.pojo;
   
   import lombok.AllArgsConstructor;
   import lombok.Data;
   import lombok.NoArgsConstructor;
   
   @Data
   @AllArgsConstructor
   @NoArgsConstructor
   public class Books {
       
       private int bookId;
       private String bookName;
       private int bookCounts;
       private String detail;
       
   }
   ```

5. 编写Dao层的 Mapper接口！

   ```java
   package com.kuang.dao;
   
   import com.kuang.pojo.Books;
   import java.util.List;
   
   public interface BookMapper {
   
       //增加一个Book
       int addBook(Books book);
   
       //根据id删除一个Book
       int deleteBookById(int id);
   
       //更新Book
       int updateBook(Books books);
   
       //根据id查询,返回一个Book
       Books queryBookById(int id);
   
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   
   }
   ```

6. 编写接口对应的 Mapper.xml 文件。需要导入MyBatis的包；

   ```xml
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE mapper
           PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
   
   <mapper namespace="com.feige.dao.BooksMapper">
   
       <!--增加一个Book-->
       <insert id="addBook" parameterType="Books">
           insert into books(bookName,bookCounts,detail)
           values (#{bookName}, #{bookCounts}, #{detail})
       </insert>
   
       <!--根据id删除一个Book-->
       <delete id="deleteBookById" parameterType="int">
           delete from books where bookId=#{bookId}
       </delete>
   
       <!--更新Book-->
       <update id="updateBook" parameterType="Books">
           update books
           set bookName = #{bookName},bookCounts = #{bookCounts},detail = #{detail}
           where bookId = #{bookId}
       </update>
   
       <!--根据id查询,返回一个Book-->
       <select id="queryBookById" resultType="Books">
           select * from books
           where bookID = #{bookId}
       </select>
   
       <!--查询全部Book-->
       <select id="queryAllBook" resultType="com.feige.pojo.Books">
           SELECT * from books
       </select>
   
   </mapper>
   ```

7. 编写Service层的接口和实现类
   接口：

   ```java
   package com.feige.service;
   
   import com.feige.pojo.Books;
   
   import java.util.List;
   
   //BookService:底下需要去实现,调用dao层
   public interface BookService {
       //增加一个Book
       int addBook(Books book);
       //根据id删除一个Book
       int deleteBookById(int id);
       //更新Book
       int updateBook(Books books);
       //根据id查询,返回一个Book
       Books queryBookById(int id);
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   }
   ```

实现类：

```java
package com.feige.service;

import com.feige.dao.BookMapper;
import com.feige.pojo.Books;
import java.util.List;

public class BookServiceImpl implements BookService {

    //调用dao层的操作，设置一个set接口，方便Spring管理
    private BookMapper bookMapper;

    public void setBookMapper(BookMapper bookMapper) {
        this.bookMapper = bookMapper;
    }
    
    public int addBook(Books book) {
        return bookMapper.addBook(book);
    }
    
    public int deleteBookById(int id) {
        return bookMapper.deleteBookById(id);
    }
    
    public int updateBook(Books books) {
        return bookMapper.updateBook(books);
    }
    
    public Books queryBookById(int id) {
        return bookMapper.queryBookById(id);
    }
    
    public List<Books> queryAllBook() {
        return bookMapper.queryAllBook();
    }
}
```

**OK，到此，底层需求操作编写完毕！**

## 4、Spring层

1. 配置**Spring整合MyBatis**，我们这里数据源使用c3p0连接池；

2. 我们去编写Spring整合Mybatis的相关的配置文件； spring-dao.xml

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans.xsd
   http://www.springframework.org/schema/context
   https://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 配置整合mybatis -->
       <!-- 1.关联数据库文件 -->
       <context:property-placeholder location="classpath:database.properties"/>
   
       <!-- 2.数据库连接池 -->
       <!--数据库连接池
   dbcp  半自动化操作  不能自动连接
   c3p0  自动化操作（自动的加载配置文件 并且设置到对象里面）
       -->
       <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
   <!-- 配置连接池属性 -->
   <property name="driverClass" value="${jdbc.driver}"/>
   <property name="jdbcUrl" value="${jdbc.url}"/>
   <property name="user" value="${jdbc.username}"/>
   <property name="password" value="${jdbc.password}"/>
   
   <!-- c3p0连接池的私有属性 -->
   <property name="maxPoolSize" value="30"/>
   <property name="minPoolSize" value="10"/>
   <!-- 关闭连接后不自动commit -->
   <property name="autoCommitOnClose" value="false"/>
   <!-- 获取连接超时时间 -->
   <property name="checkoutTimeout" value="10000"/>
   <!-- 当获取连接失败重试次数 -->
   <property name="acquireRetryAttempts" value="2"/>
       </bean>
   
       <!-- 3.配置SqlSessionFactory对象 -->
       <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource"/>
   <!-- 配置MyBaties全局配置文件:mybatis-config.xml -->
   <property name="configLocation" value="classpath:mybatis-config.xml"/>
       </bean>
   
       <!-- 4.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 -->
       <!--解释 ： https://www.cnblogs.com/jpfss/p/7799806.html-->
       <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
   <!-- 注入sqlSessionFactory -->
   <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
   <!-- 给出需要扫描Dao接口包 -->
   <property name="basePackage" value="com.feige.dao"/>
       </bean>
   
   </beans>
   ```

3. **Spring整合service层**

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 扫描service相关的bean -->
       <context:component-scan base-package="com.kuang.service" />
   
       <!--BookServiceImpl注入到IOC容器中-->
       <bean id="BookServiceImpl" class="com.kuang.service.BookServiceImpl">
   <property name="bookMapper" ref="bookMapper"/>
       </bean>
   
       <!-- 配置事务管理器 -->
       <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource" />
       </bean>
   
   </beans>
   ```

Spring层搞定！再次理解一下，Spring就是一个大杂烩，一个容器！对吧！

## 5、SpringMVC层

1. **web.xml**

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
            version="4.0">
   
       <!--DispatcherServlet-->
       <servlet>
           <servlet-name>DispatcherServlet</servlet-name>
           <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
           <init-param>
               <param-name>contextConfigLocation</param-name>
               <param-value>classpath:applicationContext.xml</param-value>
           </init-param>
           <load-on-startup>1</load-on-startup>
       </servlet>
       <servlet-mapping>
           <servlet-name>DispatcherServlet</servlet-name>
           <url-pattern>/</url-pattern>
       </servlet-mapping>
   
       <!--encodingFilter-->
       <filter>
           <filter-name>encodingFilter</filter-name>
           <filter-class>
               org.springframework.web.filter.CharacterEncodingFilter
           </filter-class>
           <init-param>
               <param-name>encoding</param-name>
               <param-value>utf-8</param-value>
           </init-param>
       </filter>
       <filter-mapping>
           <filter-name>encodingFilter</filter-name>
           <url-pattern>/*</url-pattern>
       </filter-mapping>
       
       <!--Session过期时间-->
       <session-config>
           <session-timeout>15</session-timeout>
       </session-config>
       
   </web-app>
   ```

2. **spring-mvc.xml**

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xmlns:mvc="http://www.springframework.org/schema/mvc"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       https://www.springframework.org/schema/mvc/spring-mvc.xsd">
   
       <!-- 配置SpringMVC -->
       <!-- 1.开启SpringMVC注解驱动 -->
       <mvc:annotation-driven>
           <mvc:message-converters register-defaults="true">
               <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                   <constructor-arg value="UTF-8"/>
               </bean>
               <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                   <property name="objectMapper">
                       <bean class="org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean">
                           <property name="failOnEmptyBeans" value="false"/>
                       </bean>
                   </property>
               </bean>
           </mvc:message-converters>
       </mvc:annotation-driven>
       <!--解决跨域问题-->
       <mvc:cors>
       <mvc:mapping path="/**"
                    allowed-origins="http://127.0.0.1:8090,http://localhost:8090"
                    allowed-methods="POST,GET, OPTIONS,DELETE,PUT"
                    allowed-headers="Content-Type,ContentType,Access-Control-Allow-Headers, Authorization, X-Requested-With"
                    allow-credentials="true"/>
       </mvc:cors>
       <!-- 2.静态资源默认servlet配置-->
       <mvc:default-servlet-handler/>
   
       <!-- 3.配置jsp 显示ViewResolver视图解析器 -->
       <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
           <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
           <property name="prefix" value="/WEB-INF/jsp/" />
           <property name="suffix" value=".jsp" />
       </bean>
   
       <!-- 4.扫描web相关的bean -->
       <context:component-scan base-package="com.feige.controller" />
   
   </beans>
   ```

3. **Spring配置整合文件，applicationContext.xml**

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd">
   
       <import resource="spring-dao.xml"/>
       <import resource="spring-service.xml"/>
       <import resource="spring-mvc.xml"/>
       
   </beans>
   ```

**配置文件，暂时结束！Controller 和 视图层编写**

1. BookController 类编写 ， 方法一：查询全部书籍

   ```java
   @Controller
   @RequestMapping("/book")
   public class BookController {
   
       @Autowired
       @Qualifier("BookServiceImpl")
       private BookService bookService;
   
       @RequestMapping("/allBook")
       public String list(Model model) {
           List<Books> list = bookService.queryAllBook();
           model.addAttribute("list", list);
           return "allBook";
       }
   }
   ```

2. 编写首页 **index.jsp**

   ```html
   <%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" %>
   <!DOCTYPE HTML>
   <html>
   <head>
       <title>首页</title>
       <style type="text/css">
           a {
               text-decoration: none;
               color: black;
               font-size: 18px;
           }
           h3 {
               width: 180px;
               height: 38px;
               margin: 100px auto;
               text-align: center;
               line-height: 38px;
               background: deepskyblue;
               border-radius: 4px;
           }
       </style>
   </head>
   <body>
   
   <h3>
       <a href="${pageContext.request.contextPath}/book/allBook">点击进入列表页</a>
   </h3>
   </body>
   </html>
   ```

3. 书籍列表页面 **allbook.jsp**

   ```jsp
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>书籍列表</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>书籍列表 —— 显示所有书籍</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <div class="row">
           <div class="col-md-4 column">
               <a class="btn btn-primary" href="${pageContext.request.contextPath}/book/toAddBook">新增</a>
           </div>
       </div>
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <table class="table table-hover table-striped">
                   <thead>
                   <tr>
                       <th>书籍编号</th>
                       <th>书籍名字</th>
                       <th>书籍数量</th>
                       <th>书籍详情</th>
                       <th>操作</th>
                   </tr>
                   </thead>
   
                   <tbody>
                   <c:forEach var="book" items="${requestScope.get('list')}">
                       <tr>
                           <td>${book.getBookId()}</td>
                           <td>${book.getBookName()}</td>
                           <td>${book.getBookCounts()}</td>
                           <td>${book.getDetail()}</td>
                           <td>
                               <a href="${pageContext.request.contextPath}/book/toUpdateBook?id=${book.getBookId()}">更改</a> |
                               <a href="${pageContext.request.contextPath}/book/del/${book.getBookId()}">删除</a>
                           </td>
                       </tr>
                   </c:forEach>
                   </tbody>
               </table>
           </div>
       </div>
   </div>
   ```

4. BookController 类编写 ， 方法二：添加书籍

   ```java
   @RequestMapping("/toAddBook")
   public String toAddPaper() {
       return "addBook";
   }
   
   @RequestMapping("/addBook")
   public String addPaper(Books books) {
       System.out.println(books);
       bookService.addBook(books);
       return "redirect:/book/allBook";
   }
   ```

5. 添加书籍页面：**addBook.jsp**

   ```jsp
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   
   <html>
   <head>
       <title>新增书籍</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>新增书籍</small>
                   </h1>
               </div>
           </div>
       </div>
       <form action="${pageContext.request.contextPath}/book/addBook" method="post">
           书籍名称：<input type="text" name="bookName"><br><br><br>
           书籍数量：<input type="text" name="bookCounts"><br><br><br>
           书籍详情：<input type="text" name="detail"><br><br><br>
           <input type="submit" value="添加">
       </form>
   
   </div>
   ```

6. BookController 类编写 ， 方法三：修改书籍

   ```java
   @RequestMapping("/toUpdateBook")
   public String toUpdateBook(Model model, int id) {
       Books books = bookService.queryBookById(id);
       System.out.println(books);
       model.addAttribute("book",books );
       return "updateBook";
   }
   
   @RequestMapping("/updateBook")
   public String updateBook(Model model, Books book) {
       bookService.updateBook(book);
       Books books = bookService.queryBookById(book.getBookID());
       model.addAttribute("books", books);
       return "redirect:/book/allBook";
   }
   ```

7. 修改书籍页面 **updateBook.jsp**

   ```jsp
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>修改信息</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>修改信息</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <form action="${pageContext.request.contextPath}/book/updateBook" method="post">
           <input type="hidden" name="bookID" value="${book.getBookId()}"/>
           书籍名称：<input type="text" name="bookName" value="${book.getBookName()}"/>
           书籍数量：<input type="text" name="bookCounts" value="${book.getBookCounts()}"/>
           书籍详情：<input type="text" name="detail" value="${book.getDetail() }"/>
           <input type="submit" value="提交"/>
       </form>
   
   </div>
   ```

8. BookController 类编写 ， 方法四：删除书籍

   ```java
   @RequestMapping("/del/{bookId}")
   public String deleteBook(@PathVariable("bookId") int id) {
       bookService.deleteBookById(id);
       return "redirect:/book/allBook";
   }
   ```

**配置Tomcat，进行运行！**

到目前为止，这个SSM项目整合已经完全的OK了，可以直接运行进行测试！这个练习十分的重要，大家需要保证，不看任何东西，自己也可以完整的实现出来！

## **6、项目结构图**

![1570186854191.png](https://blog.kuangstudy.com/usr/uploads/2019/10/1086489242.png)

![1570186868239.png](https://blog.kuangstudy.com/usr/uploads/2019/10/2326667495.png)

## 7、错误排查

### 1、访问出现404，排查步骤：**

1. 查看控制台输出，看一下是不是缺少了什么jar包。

2. 如果jar包存在，显示无法输出，就在IDEA的项目发布中，添加lib依赖！

   步骤：点击项目结构----->Artifacts----->点击自己的项目(ssm:war exploded)--->(点击工具栏的第一个)在WEB-INF目录下新建一个lib包----->选中lib------>点击工具栏的第三个然后选中第一个---->把里面的包全部选中点击ok---->点击Apply再ok

   ![image-20200128125126368](E:\Java资料\ssm整合.assets\image-20200128125126368.png)

   ![image-20200128125237179](E:\Java资料\ssm整合.assets\image-20200128125237179.png)

3. 重启Tomcat 即可解决！

### 2、其他错误

#### 1、bean不存在

​	步骤：

​		查看bean注入是否成功 

​		junit单元测试，看我们的代码是否能够查询出来

​		问题不在底层，是我们spring出了问题

​		springMVC整合时没有调用到service层的bean

​			applicationContext.xml没有注册bean

​			web.xml也绑定过配置文件要绑定大的applicationContext.xml

​			

## 8、小结及展望

这个是同学们的第一个SSM整合案例，一定要烂熟于心！

SSM框架的重要程度是不言而喻的，学到这里，大家已经可以进行基本网站的单独开发。但是这只是增删改查的基本操作。可以说学到这里，大家才算是真正的步入了后台开发的门。也就是能找一个后台相关工作的底线。

或许很多人，工作就做这些事情，但是对于个人的提高来说，还远远不够！, 2020-03-02 07:06:53.0, 2020-03-23 19:38:47.0, null, 10]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50032} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} clearParameters. 
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20002} executed. 3.66933 millis. select distinct count(*) from comments c
        where c.blog_id=? and
        c.parent_id is null;
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20002, rs-50034} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20002, rs-50034} Header: [count(*)]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20003, rs-50033} closed
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20002, rs-50034} Result: [3]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20003} clearParameters. 
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20001} Parameters : []
[DEBUG][20-03-23][druid.sql.Connection]{conn-10003} pool-recycle
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20002, rs-50034} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20001} Types : []
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20002} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20001} executed. 0.932444 millis. select count(*) from `type`
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20004} Parameters : [13, 0, 10]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50035} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50035} Header: [count(*)]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20004} Types : [INTEGER, INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50035} Result: [4]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50035} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20001} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20004} executed. 2.799998 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id  and
        c.parent_id is null limit ?,?;;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20004, rs-50036} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20004, rs-50036} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20004, rs-50036} Result: [26, 好好, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:35.0, null]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20004, rs-50036} Result: [29, 太好了, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:13.0, null]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20004, rs-50036} Result: [32, <p>feige</p>, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 01:33:26.0, null]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20004, rs-50036} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20004} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} Parameters : [13, 26]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} executed. 6.667549 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50037} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50037} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50037} Result: [27, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:56.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50037} Result: [28, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:43:03.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50037} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} Parameters : [13, 26]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} executed. 5.367551 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50038} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50038} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50038} Result: [27, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:56.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50038} Result: [28, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:43:03.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50038} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} Parameters : [13, 27]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} executed. 1.607998 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50039} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50039} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50039} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} Parameters : [13, 27]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} executed. 1.287554 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50040} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50040} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50040} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} Parameters : [13, 29]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} executed. 3.397331 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50041} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50041} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50041} Result: [30, 谢谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:43.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50041} Result: [31, 不用谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:47:01.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50041} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} Parameters : [13, 29]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} executed. 3.492886 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50042} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50042} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50042} Result: [30, 谢谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:43.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50042} Result: [31, 不用谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:47:01.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50042} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} Parameters : [13, 30]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} executed. 0.806221 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50043} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50043} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50043} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} Parameters : [13, 30]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} executed. 0.784888 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50044} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50044} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50044} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} Parameters : [13, 32]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} executed. 0.618222 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50045} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50045} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50045} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20010} created. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog where id=?
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20010} Parameters : [13]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20010} Types : [INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20010} executed. 1.17911 millis. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog where id=?
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20010, rs-50046} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20010, rs-50046} Header: [id, type_name, title, content, create_time, change_time, author, view]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20010, rs-50046} Result: [13, mybatis, ssm1整合, # ssm整合

## 1、数据库环境

创建一个存放书籍数据的数据库表

```sql
CREATE DATABASE `ssmbuild`;

USE `ssmbuild`;

DROP TABLE IF EXISTS `books`;

CREATE TABLE `books` (
  `bookId` INT PRIMARY KEY COMMENT '书id',
  `bookName` VARCHAR(100) NOT NULL COMMENT '书名',
  `bookCounts` INT(11) NOT NULL COMMENT '数量',
  ``ssmbuild``ssmbuild`` VARCHAR(200) NOT NULL COMMENT '描述'
) ENGINE=INNODB DEFAULT CHARSET=utf8

INSERT  INTO `books`(`bookId`,`bookName`,`bookCounts`,`detail`)VALUES 
(1,'Java',1,'从入门到放弃'),
(2,'MySQL',10,'从删库到跑路'),
(3,'Linux',5,'从进门到进牢');

SELECT * FROM books
```

## 2、基本环境搭建

1. 新建一Maven项目！ ssmbuild ， 添加web的支持

   ![image-20200128134359317](.\ssm整合.assets\image-20200128134359317.png)

2. 导入相关的pom依赖！

   ```xml
   <dependencies>
       <!--Junit-->
       <dependency>
           <groupId>junit</groupId>
           <artifactId>junit</artifactId>
           <version>4.12</version>
       </dependency>
       <!--数据库驱动-->
       <dependency>
           <groupId>mysql</groupId>
           <artifactId>mysql-connector-java</artifactId>
           <version>5.1.47</version>
       </dependency>
       <!-- 数据库连接池 -->
       <dependency>
           <groupId>com.mchange</groupId>
           <artifactId>c3p0</artifactId>
           <version>0.9.5.2</version>
       </dependency>
   
       <!--Servlet - JSP -->
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>servlet-api</artifactId>
           <version>2.5</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet.jsp</groupId>
           <artifactId>jsp-api</artifactId>
           <version>2.2</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>jstl</artifactId>
           <version>1.2</version>
       </dependency>
   
       <!--Mybatis-->
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis</artifactId>
           <version>3.5.2</version>
       </dependency>
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis-spring</artifactId>
           <version>2.0.2</version>
       </dependency>
   
       <!--Spring-->
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-webmvc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-jdbc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->
       <dependency>
           <groupId>org.projectlombok</groupId>
           <artifactId>lombok</artifactId>
           <version>1.16.10</version>
       </dependency>
   </dependencies>
   ```

3. Maven资源过滤设置

   ```xml
   <build>
       <resources>
           <resource>
               <directory>src/main/java</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
           <resource>
               <directory>src/main/resources</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
       </resources>
   </build>
   ```

4. 建立基本结构和配置框架！

   - com.feige.pojo

   - com.feige.dao

   - com.feige.service

   - com.feige.controller

     在resources目录下创建

   - mybatis-config.xml

     ```xml
     <?xml version="1.0" encoding="UTF-8" ?>
     <!DOCTYPE configuration
             PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
             "http://mybatis.org/dtd/mybatis-3-config.dtd">
     <configuration>
     
     </configuration>
     ```

   - applicationContext.xml

     ```xml
     <?xml version="1.0" encoding="UTF-8"?>
     <beans xmlns="http://www.springframework.org/schema/beans"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://www.springframework.org/schema/beans
             http://www.springframework.org/schema/beans/spring-beans.xsd">
     
     </beans>
     ```

## 3、Mybatis层编写

1. 数据库配置文件 **database.properties**

   ```properties
   jdbc.driver=com.mysql.jdbc.Driver
   jdbc.url=jdbc:mysql://localhost:3306/ssmbuild?useSSL=true&useUnicode=true&characterEncoding=utf8
   jdbc.username=root
   jdbc.password=hufei169357
   ```

2. IDEA关联数据库

3. 编写MyBatis的核心配置文件

   ```xml
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE configuration
           PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-config.dtd">
   <configuration>
       
       <typeAliases>
           <package name="com.feige.pojo"/>
       </typeAliases>
       <mappers>
           <mapper resource="com/feige/dao/BookMapper.xml"/>
       </mappers>
   
   </configuration>
   ```

4. 编写数据库对应的实体类 com.feige.pojo.Books
   使用lombok插件！

   ```java
   package com.kuang.pojo;
   
   import lombok.AllArgsConstructor;
   import lombok.Data;
   import lombok.NoArgsConstructor;
   
   @Data
   @AllArgsConstructor
   @NoArgsConstructor
   public class Books {
       
       private int bookId;
       private String bookName;
       private int bookCounts;
       private String detail;
       
   }
   ```

5. 编写Dao层的 Mapper接口！

   ```java
   package com.kuang.dao;
   
   import com.kuang.pojo.Books;
   import java.util.List;
   
   public interface BookMapper {
   
       //增加一个Book
       int addBook(Books book);
   
       //根据id删除一个Book
       int deleteBookById(int id);
   
       //更新Book
       int updateBook(Books books);
   
       //根据id查询,返回一个Book
       Books queryBookById(int id);
   
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   
   }
   ```

6. 编写接口对应的 Mapper.xml 文件。需要导入MyBatis的包；

   ```xml
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE mapper
           PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
   
   <mapper namespace="com.feige.dao.BooksMapper">
   
       <!--增加一个Book-->
       <insert id="addBook" parameterType="Books">
           insert into books(bookName,bookCounts,detail)
           values (#{bookName}, #{bookCounts}, #{detail})
       </insert>
   
       <!--根据id删除一个Book-->
       <delete id="deleteBookById" parameterType="int">
           delete from books where bookId=#{bookId}
       </delete>
   
       <!--更新Book-->
       <update id="updateBook" parameterType="Books">
           update books
           set bookName = #{bookName},bookCounts = #{bookCounts},detail = #{detail}
           where bookId = #{bookId}
       </update>
   
       <!--根据id查询,返回一个Book-->
       <select id="queryBookById" resultType="Books">
           select * from books
           where bookID = #{bookId}
       </select>
   
       <!--查询全部Book-->
       <select id="queryAllBook" resultType="com.feige.pojo.Books">
           SELECT * from books
       </select>
   
   </mapper>
   ```

7. 编写Service层的接口和实现类
   接口：

   ```java
   package com.feige.service;
   
   import com.feige.pojo.Books;
   
   import java.util.List;
   
   //BookService:底下需要去实现,调用dao层
   public interface BookService {
       //增加一个Book
       int addBook(Books book);
       //根据id删除一个Book
       int deleteBookById(int id);
       //更新Book
       int updateBook(Books books);
       //根据id查询,返回一个Book
       Books queryBookById(int id);
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   }
   ```

实现类：

```java
package com.feige.service;

import com.feige.dao.BookMapper;
import com.feige.pojo.Books;
import java.util.List;

public class BookServiceImpl implements BookService {

    //调用dao层的操作，设置一个set接口，方便Spring管理
    private BookMapper bookMapper;

    public void setBookMapper(BookMapper bookMapper) {
        this.bookMapper = bookMapper;
    }
    
    public int addBook(Books book) {
        return bookMapper.addBook(book);
    }
    
    public int deleteBookById(int id) {
        return bookMapper.deleteBookById(id);
    }
    
    public int updateBook(Books books) {
        return bookMapper.updateBook(books);
    }
    
    public Books queryBookById(int id) {
        return bookMapper.queryBookById(id);
    }
    
    public List<Books> queryAllBook() {
        return bookMapper.queryAllBook();
    }
}
```

**OK，到此，底层需求操作编写完毕！**

## 4、Spring层

1. 配置**Spring整合MyBatis**，我们这里数据源使用c3p0连接池；

2. 我们去编写Spring整合Mybatis的相关的配置文件； spring-dao.xml

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans.xsd
   http://www.springframework.org/schema/context
   https://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 配置整合mybatis -->
       <!-- 1.关联数据库文件 -->
       <context:property-placeholder location="classpath:database.properties"/>
   
       <!-- 2.数据库连接池 -->
       <!--数据库连接池
   dbcp  半自动化操作  不能自动连接
   c3p0  自动化操作（自动的加载配置文件 并且设置到对象里面）
       -->
       <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
   <!-- 配置连接池属性 -->
   <property name="driverClass" value="${jdbc.driver}"/>
   <property name="jdbcUrl" value="${jdbc.url}"/>
   <property name="user" value="${jdbc.username}"/>
   <property name="password" value="${jdbc.password}"/>
   
   <!-- c3p0连接池的私有属性 -->
   <property name="maxPoolSize" value="30"/>
   <property name="minPoolSize" value="10"/>
   <!-- 关闭连接后不自动commit -->
   <property name="autoCommitOnClose" value="false"/>
   <!-- 获取连接超时时间 -->
   <property name="checkoutTimeout" value="10000"/>
   <!-- 当获取连接失败重试次数 -->
   <property name="acquireRetryAttempts" value="2"/>
       </bean>
   
       <!-- 3.配置SqlSessionFactory对象 -->
       <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource"/>
   <!-- 配置MyBaties全局配置文件:mybatis-config.xml -->
   <property name="configLocation" value="classpath:mybatis-config.xml"/>
       </bean>
   
       <!-- 4.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 -->
       <!--解释 ： https://www.cnblogs.com/jpfss/p/7799806.html-->
       <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
   <!-- 注入sqlSessionFactory -->
   <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
   <!-- 给出需要扫描Dao接口包 -->
   <property name="basePackage" value="com.feige.dao"/>
       </bean>
   
   </beans>
   ```

3. **Spring整合service层**

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 扫描service相关的bean -->
       <context:component-scan base-package="com.kuang.service" />
   
       <!--BookServiceImpl注入到IOC容器中-->
       <bean id="BookServiceImpl" class="com.kuang.service.BookServiceImpl">
   <property name="bookMapper" ref="bookMapper"/>
       </bean>
   
       <!-- 配置事务管理器 -->
       <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource" />
       </bean>
   
   </beans>
   ```

Spring层搞定！再次理解一下，Spring就是一个大杂烩，一个容器！对吧！

## 5、SpringMVC层

1. **web.xml**

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
            version="4.0">
   
       <!--DispatcherServlet-->
       <servlet>
           <servlet-name>DispatcherServlet</servlet-name>
           <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
           <init-param>
               <param-name>contextConfigLocation</param-name>
               <param-value>classpath:applicationContext.xml</param-value>
           </init-param>
           <load-on-startup>1</load-on-startup>
       </servlet>
       <servlet-mapping>
           <servlet-name>DispatcherServlet</servlet-name>
           <url-pattern>/</url-pattern>
       </servlet-mapping>
   
       <!--encodingFilter-->
       <filter>
           <filter-name>encodingFilter</filter-name>
           <filter-class>
               org.springframework.web.filter.CharacterEncodingFilter
           </filter-class>
           <init-param>
               <param-name>encoding</param-name>
               <param-value>utf-8</param-value>
           </init-param>
       </filter>
       <filter-mapping>
           <filter-name>encodingFilter</filter-name>
           <url-pattern>/*</url-pattern>
       </filter-mapping>
       
       <!--Session过期时间-->
       <session-config>
           <session-timeout>15</session-timeout>
       </session-config>
       
   </web-app>
   ```

2. **spring-mvc.xml**

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xmlns:mvc="http://www.springframework.org/schema/mvc"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       https://www.springframework.org/schema/mvc/spring-mvc.xsd">
   
       <!-- 配置SpringMVC -->
       <!-- 1.开启SpringMVC注解驱动 -->
       <mvc:annotation-driven>
           <mvc:message-converters register-defaults="true">
               <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                   <constructor-arg value="UTF-8"/>
               </bean>
               <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                   <property name="objectMapper">
                       <bean class="org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean">
                           <property name="failOnEmptyBeans" value="false"/>
                       </bean>
                   </property>
               </bean>
           </mvc:message-converters>
       </mvc:annotation-driven>
       <!--解决跨域问题-->
       <mvc:cors>
       <mvc:mapping path="/**"
                    allowed-origins="http://127.0.0.1:8090,http://localhost:8090"
                    allowed-methods="POST,GET, OPTIONS,DELETE,PUT"
                    allowed-headers="Content-Type,ContentType,Access-Control-Allow-Headers, Authorization, X-Requested-With"
                    allow-credentials="true"/>
       </mvc:cors>
       <!-- 2.静态资源默认servlet配置-->
       <mvc:default-servlet-handler/>
   
       <!-- 3.配置jsp 显示ViewResolver视图解析器 -->
       <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
           <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
           <property name="prefix" value="/WEB-INF/jsp/" />
           <property name="suffix" value=".jsp" />
       </bean>
   
       <!-- 4.扫描web相关的bean -->
       <context:component-scan base-package="com.feige.controller" />
   
   </beans>
   ```

3. **Spring配置整合文件，applicationContext.xml**

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd">
   
       <import resource="spring-dao.xml"/>
       <import resource="spring-service.xml"/>
       <import resource="spring-mvc.xml"/>
       
   </beans>
   ```

**配置文件，暂时结束！Controller 和 视图层编写**

1. BookController 类编写 ， 方法一：查询全部书籍

   ```java
   @Controller
   @RequestMapping("/book")
   public class BookController {
   
       @Autowired
       @Qualifier("BookServiceImpl")
       private BookService bookService;
   
       @RequestMapping("/allBook")
       public String list(Model model) {
           List<Books> list = bookService.queryAllBook();
           model.addAttribute("list", list);
           return "allBook";
       }
   }
   ```

2. 编写首页 **index.jsp**

   ```html
   <%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" %>
   <!DOCTYPE HTML>
   <html>
   <head>
       <title>首页</title>
       <style type="text/css">
           a {
               text-decoration: none;
               color: black;
               font-size: 18px;
           }
           h3 {
               width: 180px;
               height: 38px;
               margin: 100px auto;
               text-align: center;
               line-height: 38px;
               background: deepskyblue;
               border-radius: 4px;
           }
       </style>
   </head>
   <body>
   
   <h3>
       <a href="${pageContext.request.contextPath}/book/allBook">点击进入列表页</a>
   </h3>
   </body>
   </html>
   ```

3. 书籍列表页面 **allbook.jsp**

   ```jsp
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>书籍列表</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>书籍列表 —— 显示所有书籍</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <div class="row">
           <div class="col-md-4 column">
               <a class="btn btn-primary" href="${pageContext.request.contextPath}/book/toAddBook">新增</a>
           </div>
       </div>
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <table class="table table-hover table-striped">
                   <thead>
                   <tr>
                       <th>书籍编号</th>
                       <th>书籍名字</th>
                       <th>书籍数量</th>
                       <th>书籍详情</th>
                       <th>操作</th>
                   </tr>
                   </thead>
   
                   <tbody>
                   <c:forEach var="book" items="${requestScope.get('list')}">
                       <tr>
                           <td>${book.getBookId()}</td>
                           <td>${book.getBookName()}</td>
                           <td>${book.getBookCounts()}</td>
                           <td>${book.getDetail()}</td>
                           <td>
                               <a href="${pageContext.request.contextPath}/book/toUpdateBook?id=${book.getBookId()}">更改</a> |
                               <a href="${pageContext.request.contextPath}/book/del/${book.getBookId()}">删除</a>
                           </td>
                       </tr>
                   </c:forEach>
                   </tbody>
               </table>
           </div>
       </div>
   </div>
   ```

4. BookController 类编写 ， 方法二：添加书籍

   ```java
   @RequestMapping("/toAddBook")
   public String toAddPaper() {
       return "addBook";
   }
   
   @RequestMapping("/addBook")
   public String addPaper(Books books) {
       System.out.println(books);
       bookService.addBook(books);
       return "redirect:/book/allBook";
   }
   ```

5. 添加书籍页面：**addBook.jsp**

   ```jsp
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   
   <html>
   <head>
       <title>新增书籍</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>新增书籍</small>
                   </h1>
               </div>
           </div>
       </div>
       <form action="${pageContext.request.contextPath}/book/addBook" method="post">
           书籍名称：<input type="text" name="bookName"><br><br><br>
           书籍数量：<input type="text" name="bookCounts"><br><br><br>
           书籍详情：<input type="text" name="detail"><br><br><br>
           <input type="submit" value="添加">
       </form>
   
   </div>
   ```

6. BookController 类编写 ， 方法三：修改书籍

   ```java
   @RequestMapping("/toUpdateBook")
   public String toUpdateBook(Model model, int id) {
       Books books = bookService.queryBookById(id);
       System.out.println(books);
       model.addAttribute("book",books );
       return "updateBook";
   }
   
   @RequestMapping("/updateBook")
   public String updateBook(Model model, Books book) {
       bookService.updateBook(book);
       Books books = bookService.queryBookById(book.getBookID());
       model.addAttribute("books", books);
       return "redirect:/book/allBook";
   }
   ```

7. 修改书籍页面 **updateBook.jsp**

   ```jsp
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>修改信息</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>修改信息</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <form action="${pageContext.request.contextPath}/book/updateBook" method="post">
           <input type="hidden" name="bookID" value="${book.getBookId()}"/>
           书籍名称：<input type="text" name="bookName" value="${book.getBookName()}"/>
           书籍数量：<input type="text" name="bookCounts" value="${book.getBookCounts()}"/>
           书籍详情：<input type="text" name="detail" value="${book.getDetail() }"/>
           <input type="submit" value="提交"/>
       </form>
   
   </div>
   ```

8. BookController 类编写 ， 方法四：删除书籍

   ```java
   @RequestMapping("/del/{bookId}")
   public String deleteBook(@PathVariable("bookId") int id) {
       bookService.deleteBookById(id);
       return "redirect:/book/allBook";
   }
   ```

**配置Tomcat，进行运行！**

到目前为止，这个SSM项目整合已经完全的OK了，可以直接运行进行测试！这个练习十分的重要，大家需要保证，不看任何东西，自己也可以完整的实现出来！

## **6、项目结构图**

![1570186854191.png](https://blog.kuangstudy.com/usr/uploads/2019/10/1086489242.png)

![1570186868239.png](https://blog.kuangstudy.com/usr/uploads/2019/10/2326667495.png)

## 7、错误排查

### 1、访问出现404，排查步骤：**

1. 查看控制台输出，看一下是不是缺少了什么jar包。

2. 如果jar包存在，显示无法输出，就在IDEA的项目发布中，添加lib依赖！

   步骤：点击项目结构----->Artifacts----->点击自己的项目(ssm:war exploded)--->(点击工具栏的第一个)在WEB-INF目录下新建一个lib包----->选中lib------>点击工具栏的第三个然后选中第一个---->把里面的包全部选中点击ok---->点击Apply再ok

   ![image-20200128125126368](E:\Java资料\ssm整合.assets\image-20200128125126368.png)

   ![image-20200128125237179](E:\Java资料\ssm整合.assets\image-20200128125237179.png)

3. 重启Tomcat 即可解决！

### 2、其他错误

#### 1、bean不存在

​	步骤：

​		查看bean注入是否成功 

​		junit单元测试，看我们的代码是否能够查询出来

​		问题不在底层，是我们spring出了问题

​		springMVC整合时没有调用到service层的bean

​			applicationContext.xml没有注册bean

​			web.xml也绑定过配置文件要绑定大的applicationContext.xml

​			

## 8、小结及展望

这个是同学们的第一个SSM整合案例，一定要烂熟于心！

SSM框架的重要程度是不言而喻的，学到这里，大家已经可以进行基本网站的单独开发。但是这只是增删改查的基本操作。可以说学到这里，大家才算是真正的步入了后台开发的门。也就是能找一个后台相关工作的底线。

或许很多人，工作就做这些事情，但是对于个人的提高来说，还远远不够！, 2020-03-02 07:06:53.0, 2020-03-23 19:38:47.0, null, 10]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20010, rs-50046} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20010} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20010} Parameters : [13]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20010} Types : [INTEGER]
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20010} executed. 1.380443 millis. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog where id=?
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} Parameters : [0, 30]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20010, rs-50047} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20010, rs-50047} Header: [id, type_name, title, content, create_time, change_time, author, view]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20010, rs-50047} Result: [13, mybatis, ssm1整合, # ssm整合

## 1、数据库环境

创建一个存放书籍数据的数据库表

```sql
CREATE DATABASE `ssmbuild`;

USE `ssmbuild`;

DROP TABLE IF EXISTS `books`;

CREATE TABLE `books` (
  `bookId` INT PRIMARY KEY COMMENT '书id',
  `bookName` VARCHAR(100) NOT NULL COMMENT '书名',
  `bookCounts` INT(11) NOT NULL COMMENT '数量',
  ``ssmbuild``ssmbuild`` VARCHAR(200) NOT NULL COMMENT '描述'
) ENGINE=INNODB DEFAULT CHARSET=utf8

INSERT  INTO `books`(`bookId`,`bookName`,`bookCounts`,`detail`)VALUES 
(1,'Java',1,'从入门到放弃'),
(2,'MySQL',10,'从删库到跑路'),
(3,'Linux',5,'从进门到进牢');

SELECT * FROM books
```

## 2、基本环境搭建

1. 新建一Maven项目！ ssmbuild ， 添加web的支持

   ![image-20200128134359317](.\ssm整合.assets\image-20200128134359317.png)

2. 导入相关的pom依赖！

   ```xml
   <dependencies>
       <!--Junit-->
       <dependency>
           <groupId>junit</groupId>
           <artifactId>junit</artifactId>
           <version>4.12</version>
       </dependency>
       <!--数据库驱动-->
       <dependency>
           <groupId>mysql</groupId>
           <artifactId>mysql-connector-java</artifactId>
           <version>5.1.47</version>
       </dependency>
       <!-- 数据库连接池 -->
       <dependency>
           <groupId>com.mchange</groupId>
           <artifactId>c3p0</artifactId>
           <version>0.9.5.2</version>
       </dependency>
   
       <!--Servlet - JSP -->
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>servlet-api</artifactId>
           <version>2.5</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet.jsp</groupId>
           <artifactId>jsp-api</artifactId>
           <version>2.2</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>jstl</artifactId>
           <version>1.2</version>
       </dependency>
   
       <!--Mybatis-->
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis</artifactId>
           <version>3.5.2</version>
       </dependency>
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis-spring</artifactId>
           <version>2.0.2</version>
       </dependency>
   
       <!--Spring-->
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-webmvc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-jdbc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->
       <dependency>
           <groupId>org.projectlombok</groupId>
           <artifactId>lombok</artifactId>
           <version>1.16.10</version>
       </dependency>
   </dependencies>
   ```

3. Maven资源过滤设置

   ```xml
   <build>
       <resources>
           <resource>
               <directory>src/main/java</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
           <resource>
               <directory>src/main/resources</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
       </resources>
   </build>
   ```

4. 建立基本结构和配置框架！

   - com.feige.pojo

   - com.feige.dao

   - com.feige.service

   - com.feige.controller

     在resources目录下创建

   - mybatis-config.xml

     ```xml
     <?xml version="1.0" encoding="UTF-8" ?>
     <!DOCTYPE configuration
             PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
             "http://mybatis.org/dtd/mybatis-3-config.dtd">
     <configuration>
     
     </configuration>
     ```

   - applicationContext.xml

     ```xml
     <?xml version="1.0" encoding="UTF-8"?>
     <beans xmlns="http://www.springframework.org/schema/beans"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://www.springframework.org/schema/beans
             http://www.springframework.org/schema/beans/spring-beans.xsd">
     
     </beans>
     ```

## 3、Mybatis层编写

1. 数据库配置文件 **database.properties**

   ```properties
   jdbc.driver=com.mysql.jdbc.Driver
   jdbc.url=jdbc:mysql://localhost:3306/ssmbuild?useSSL=true&useUnicode=true&characterEncoding=utf8
   jdbc.username=root
   jdbc.password=hufei169357
   ```

2. IDEA关联数据库

3. 编写MyBatis的核心配置文件

   ```xml
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE configuration
           PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-config.dtd">
   <configuration>
       
       <typeAliases>
           <package name="com.feige.pojo"/>
       </typeAliases>
       <mappers>
           <mapper resource="com/feige/dao/BookMapper.xml"/>
       </mappers>
   
   </configuration>
   ```

4. 编写数据库对应的实体类 com.feige.pojo.Books
   使用lombok插件！

   ```java
   package com.kuang.pojo;
   
   import lombok.AllArgsConstructor;
   import lombok.Data;
   import lombok.NoArgsConstructor;
   
   @Data
   @AllArgsConstructor
   @NoArgsConstructor
   public class Books {
       
       private int bookId;
       private String bookName;
       private int bookCounts;
       private String detail;
       
   }
   ```

5. 编写Dao层的 Mapper接口！

   ```java
   package com.kuang.dao;
   
   import com.kuang.pojo.Books;
   import java.util.List;
   
   public interface BookMapper {
   
       //增加一个Book
       int addBook(Books book);
   
       //根据id删除一个Book
       int deleteBookById(int id);
   
       //更新Book
       int updateBook(Books books);
   
       //根据id查询,返回一个Book
       Books queryBookById(int id);
   
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   
   }
   ```

6. 编写接口对应的 Mapper.xml 文件。需要导入MyBatis的包；

   ```xml
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE mapper
           PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
   
   <mapper namespace="com.feige.dao.BooksMapper">
   
       <!--增加一个Book-->
       <insert id="addBook" parameterType="Books">
           insert into books(bookName,bookCounts,detail)
           values (#{bookName}, #{bookCounts}, #{detail})
       </insert>
   
       <!--根据id删除一个Book-->
       <delete id="deleteBookById" parameterType="int">
           delete from books where bookId=#{bookId}
       </delete>
   
       <!--更新Book-->
       <update id="updateBook" parameterType="Books">
           update books
           set bookName = #{bookName},bookCounts = #{bookCounts},detail = #{detail}
           where bookId = #{bookId}
       </update>
   
       <!--根据id查询,返回一个Book-->
       <select id="queryBookById" resultType="Books">
           select * from books
           where bookID = #{bookId}
       </select>
   
       <!--查询全部Book-->
       <select id="queryAllBook" resultType="com.feige.pojo.Books">
           SELECT * from books
       </select>
   
   </mapper>
   ```

7. 编写Service层的接口和实现类
   接口：

   ```java
   package com.feige.service;
   
   import com.feige.pojo.Books;
   
   import java.util.List;
   
   //BookService:底下需要去实现,调用dao层
   public interface BookService {
       //增加一个Book
       int addBook(Books book);
       //根据id删除一个Book
       int deleteBookById(int id);
       //更新Book
       int updateBook(Books books);
       //根据id查询,返回一个Book
       Books queryBookById(int id);
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   }
   ```

实现类：

```java
package com.feige.service;

import com.feige.dao.BookMapper;
import com.feige.pojo.Books;
import java.util.List;

public class BookServiceImpl implements BookService {

    //调用dao层的操作，设置一个set接口，方便Spring管理
    private BookMapper bookMapper;

    public void setBookMapper(BookMapper bookMapper) {
        this.bookMapper = bookMapper;
    }
    
    public int addBook(Books book) {
        return bookMapper.addBook(book);
    }
    
    public int deleteBookById(int id) {
        return bookMapper.deleteBookById(id);
    }
    
    public int updateBook(Books books) {
        return bookMapper.updateBook(books);
    }
    
    public Books queryBookById(int id) {
        return bookMapper.queryBookById(id);
    }
    
    public List<Books> queryAllBook() {
        return bookMapper.queryAllBook();
    }
}
```

**OK，到此，底层需求操作编写完毕！**

## 4、Spring层

1. 配置**Spring整合MyBatis**，我们这里数据源使用c3p0连接池；

2. 我们去编写Spring整合Mybatis的相关的配置文件； spring-dao.xml

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans.xsd
   http://www.springframework.org/schema/context
   https://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 配置整合mybatis -->
       <!-- 1.关联数据库文件 -->
       <context:property-placeholder location="classpath:database.properties"/>
   
       <!-- 2.数据库连接池 -->
       <!--数据库连接池
   dbcp  半自动化操作  不能自动连接
   c3p0  自动化操作（自动的加载配置文件 并且设置到对象里面）
       -->
       <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
   <!-- 配置连接池属性 -->
   <property name="driverClass" value="${jdbc.driver}"/>
   <property name="jdbcUrl" value="${jdbc.url}"/>
   <property name="user" value="${jdbc.username}"/>
   <property name="password" value="${jdbc.password}"/>
   
   <!-- c3p0连接池的私有属性 -->
   <property name="maxPoolSize" value="30"/>
   <property name="minPoolSize" value="10"/>
   <!-- 关闭连接后不自动commit -->
   <property name="autoCommitOnClose" value="false"/>
   <!-- 获取连接超时时间 -->
   <property name="checkoutTimeout" value="10000"/>
   <!-- 当获取连接失败重试次数 -->
   <property name="acquireRetryAttempts" value="2"/>
       </bean>
   
       <!-- 3.配置SqlSessionFactory对象 -->
       <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource"/>
   <!-- 配置MyBaties全局配置文件:mybatis-config.xml -->
   <property name="configLocation" value="classpath:mybatis-config.xml"/>
       </bean>
   
       <!-- 4.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 -->
       <!--解释 ： https://www.cnblogs.com/jpfss/p/7799806.html-->
       <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
   <!-- 注入sqlSessionFactory -->
   <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
   <!-- 给出需要扫描Dao接口包 -->
   <property name="basePackage" value="com.feige.dao"/>
       </bean>
   
   </beans>
   ```

3. **Spring整合service层**

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 扫描service相关的bean -->
       <context:component-scan base-package="com.kuang.service" />
   
       <!--BookServiceImpl注入到IOC容器中-->
       <bean id="BookServiceImpl" class="com.kuang.service.BookServiceImpl">
   <property name="bookMapper" ref="bookMapper"/>
       </bean>
   
       <!-- 配置事务管理器 -->
       <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource" />
       </bean>
   
   </beans>
   ```

Spring层搞定！再次理解一下，Spring就是一个大杂烩，一个容器！对吧！

## 5、SpringMVC层

1. **web.xml**

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
            version="4.0">
   
       <!--DispatcherServlet-->
       <servlet>
           <servlet-name>DispatcherServlet</servlet-name>
           <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
           <init-param>
               <param-name>contextConfigLocation</param-name>
               <param-value>classpath:applicationContext.xml</param-value>
           </init-param>
           <load-on-startup>1</load-on-startup>
       </servlet>
       <servlet-mapping>
           <servlet-name>DispatcherServlet</servlet-name>
           <url-pattern>/</url-pattern>
       </servlet-mapping>
   
       <!--encodingFilter-->
       <filter>
           <filter-name>encodingFilter</filter-name>
           <filter-class>
               org.springframework.web.filter.CharacterEncodingFilter
           </filter-class>
           <init-param>
               <param-name>encoding</param-name>
               <param-value>utf-8</param-value>
           </init-param>
       </filter>
       <filter-mapping>
           <filter-name>encodingFilter</filter-name>
           <url-pattern>/*</url-pattern>
       </filter-mapping>
       
       <!--Session过期时间-->
       <session-config>
           <session-timeout>15</session-timeout>
       </session-config>
       
   </web-app>
   ```

2. **spring-mvc.xml**

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xmlns:mvc="http://www.springframework.org/schema/mvc"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       https://www.springframework.org/schema/mvc/spring-mvc.xsd">
   
       <!-- 配置SpringMVC -->
       <!-- 1.开启SpringMVC注解驱动 -->
       <mvc:annotation-driven>
           <mvc:message-converters register-defaults="true">
               <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                   <constructor-arg value="UTF-8"/>
               </bean>
               <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                   <property name="objectMapper">
                       <bean class="org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean">
                           <property name="failOnEmptyBeans" value="false"/>
                       </bean>
                   </property>
               </bean>
           </mvc:message-converters>
       </mvc:annotation-driven>
       <!--解决跨域问题-->
       <mvc:cors>
       <mvc:mapping path="/**"
                    allowed-origins="http://127.0.0.1:8090,http://localhost:8090"
                    allowed-methods="POST,GET, OPTIONS,DELETE,PUT"
                    allowed-headers="Content-Type,ContentType,Access-Control-Allow-Headers, Authorization, X-Requested-With"
                    allow-credentials="true"/>
       </mvc:cors>
       <!-- 2.静态资源默认servlet配置-->
       <mvc:default-servlet-handler/>
   
       <!-- 3.配置jsp 显示ViewResolver视图解析器 -->
       <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
           <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
           <property name="prefix" value="/WEB-INF/jsp/" />
           <property name="suffix" value=".jsp" />
       </bean>
   
       <!-- 4.扫描web相关的bean -->
       <context:component-scan base-package="com.feige.controller" />
   
   </beans>
   ```

3. **Spring配置整合文件，applicationContext.xml**

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd">
   
       <import resource="spring-dao.xml"/>
       <import resource="spring-service.xml"/>
       <import resource="spring-mvc.xml"/>
       
   </beans>
   ```

**配置文件，暂时结束！Controller 和 视图层编写**

1. BookController 类编写 ， 方法一：查询全部书籍

   ```java
   @Controller
   @RequestMapping("/book")
   public class BookController {
   
       @Autowired
       @Qualifier("BookServiceImpl")
       private BookService bookService;
   
       @RequestMapping("/allBook")
       public String list(Model model) {
           List<Books> list = bookService.queryAllBook();
           model.addAttribute("list", list);
           return "allBook";
       }
   }
   ```

2. 编写首页 **index.jsp**

   ```html
   <%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" %>
   <!DOCTYPE HTML>
   <html>
   <head>
       <title>首页</title>
       <style type="text/css">
           a {
               text-decoration: none;
               color: black;
               font-size: 18px;
           }
           h3 {
               width: 180px;
               height: 38px;
               margin: 100px auto;
               text-align: center;
               line-height: 38px;
               background: deepskyblue;
               border-radius: 4px;
           }
       </style>
   </head>
   <body>
   
   <h3>
       <a href="${pageContext.request.contextPath}/book/allBook">点击进入列表页</a>
   </h3>
   </body>
   </html>
   ```

3. 书籍列表页面 **allbook.jsp**

   ```jsp
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>书籍列表</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>书籍列表 —— 显示所有书籍</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <div class="row">
           <div class="col-md-4 column">
               <a class="btn btn-primary" href="${pageContext.request.contextPath}/book/toAddBook">新增</a>
           </div>
       </div>
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <table class="table table-hover table-striped">
                   <thead>
                   <tr>
                       <th>书籍编号</th>
                       <th>书籍名字</th>
                       <th>书籍数量</th>
                       <th>书籍详情</th>
                       <th>操作</th>
                   </tr>
                   </thead>
   
                   <tbody>
                   <c:forEach var="book" items="${requestScope.get('list')}">
                       <tr>
                           <td>${book.getBookId()}</td>
                           <td>${book.getBookName()}</td>
                           <td>${book.getBookCounts()}</td>
                           <td>${book.getDetail()}</td>
                           <td>
                               <a href="${pageContext.request.contextPath}/book/toUpdateBook?id=${book.getBookId()}">更改</a> |
                               <a href="${pageContext.request.contextPath}/book/del/${book.getBookId()}">删除</a>
                           </td>
                       </tr>
                   </c:forEach>
                   </tbody>
               </table>
           </div>
       </div>
   </div>
   ```

4. BookController 类编写 ， 方法二：添加书籍

   ```java
   @RequestMapping("/toAddBook")
   public String toAddPaper() {
       return "addBook";
   }
   
   @RequestMapping("/addBook")
   public String addPaper(Books books) {
       System.out.println(books);
       bookService.addBook(books);
       return "redirect:/book/allBook";
   }
   ```

5. 添加书籍页面：**addBook.jsp**

   ```jsp
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   
   <html>
   <head>
       <title>新增书籍</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>新增书籍</small>
                   </h1>
               </div>
           </div>
       </div>
       <form action="${pageContext.request.contextPath}/book/addBook" method="post">
           书籍名称：<input type="text" name="bookName"><br><br><br>
           书籍数量：<input type="text" name="bookCounts"><br><br><br>
           书籍详情：<input type="text" name="detail"><br><br><br>
           <input type="submit" value="添加">
       </form>
   
   </div>
   ```

6. BookController 类编写 ， 方法三：修改书籍

   ```java
   @RequestMapping("/toUpdateBook")
   public String toUpdateBook(Model model, int id) {
       Books books = bookService.queryBookById(id);
       System.out.println(books);
       model.addAttribute("book",books );
       return "updateBook";
   }
   
   @RequestMapping("/updateBook")
   public String updateBook(Model model, Books book) {
       bookService.updateBook(book);
       Books books = bookService.queryBookById(book.getBookID());
       model.addAttribute("books", books);
       return "redirect:/book/allBook";
   }
   ```

7. 修改书籍页面 **updateBook.jsp**

   ```jsp
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>修改信息</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>修改信息</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <form action="${pageContext.request.contextPath}/book/updateBook" method="post">
           <input type="hidden" name="bookID" value="${book.getBookId()}"/>
           书籍名称：<input type="text" name="bookName" value="${book.getBookName()}"/>
           书籍数量：<input type="text" name="bookCounts" value="${book.getBookCounts()}"/>
           书籍详情：<input type="text" name="detail" value="${book.getDetail() }"/>
           <input type="submit" value="提交"/>
       </form>
   
   </div>
   ```

8. BookController 类编写 ， 方法四：删除书籍

   ```java
   @RequestMapping("/del/{bookId}")
   public String deleteBook(@PathVariable("bookId") int id) {
       bookService.deleteBookById(id);
       return "redirect:/book/allBook";
   }
   ```

**配置Tomcat，进行运行！**

到目前为止，这个SSM项目整合已经完全的OK了，可以直接运行进行测试！这个练习十分的重要，大家需要保证，不看任何东西，自己也可以完整的实现出来！

## **6、项目结构图**

![1570186854191.png](https://blog.kuangstudy.com/usr/uploads/2019/10/1086489242.png)

![1570186868239.png](https://blog.kuangstudy.com/usr/uploads/2019/10/2326667495.png)

## 7、错误排查

### 1、访问出现404，排查步骤：**

1. 查看控制台输出，看一下是不是缺少了什么jar包。

2. 如果jar包存在，显示无法输出，就在IDEA的项目发布中，添加lib依赖！

   步骤：点击项目结构----->Artifacts----->点击自己的项目(ssm:war exploded)--->(点击工具栏的第一个)在WEB-INF目录下新建一个lib包----->选中lib------>点击工具栏的第三个然后选中第一个---->把里面的包全部选中点击ok---->点击Apply再ok

   ![image-20200128125126368](E:\Java资料\ssm整合.assets\image-20200128125126368.png)

   ![image-20200128125237179](E:\Java资料\ssm整合.assets\image-20200128125237179.png)

3. 重启Tomcat 即可解决！

### 2、其他错误

#### 1、bean不存在

​	步骤：

​		查看bean注入是否成功 

​		junit单元测试，看我们的代码是否能够查询出来

​		问题不在底层，是我们spring出了问题

​		springMVC整合时没有调用到service层的bean

​			applicationContext.xml没有注册bean

​			web.xml也绑定过配置文件要绑定大的applicationContext.xml

​			

## 8、小结及展望

这个是同学们的第一个SSM整合案例，一定要烂熟于心！

SSM框架的重要程度是不言而喻的，学到这里，大家已经可以进行基本网站的单独开发。但是这只是增删改查的基本操作。可以说学到这里，大家才算是真正的步入了后台开发的门。也就是能找一个后台相关工作的底线。

或许很多人，工作就做这些事情，但是对于个人的提高来说，还远远不够！, 2020-03-02 07:06:53.0, 2020-03-23 19:38:47.0, null, 10]
[DEBUG][20-03-23][druid.sql.Connection]{conn-10003} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} executed. 0.719555 millis. select id,type_name typeName
        from `type`
         
            limit ?,?
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50048} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50048} Header: [id, type_name]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20011} created. select distinct count(*) from comments c
        where c.blog_id=? and
        c.parent_id is null;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50048} Result: [3, mybatis]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50048} Result: [2, spring]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50048} Result: [1, springboot]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20010, rs-50047} closed
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50048} Result: [4, springMVC]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20011} Parameters : [13]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20010} clearParameters. 
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20011} Types : [INTEGER]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50048} closed
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20001} Parameters : []
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20001} Types : []
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20001} executed. 0.670666 millis. select count(*) from `type`
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50049} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50049} Header: [count(*)]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50049} Result: [4]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50049} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20001} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20011} executed. 11.003546 millis. select distinct count(*) from comments c
        where c.blog_id=? and
        c.parent_id is null;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20011, rs-50050} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20011, rs-50050} Header: [count(*)]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20011, rs-50050} Result: [3]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20011, rs-50050} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20011} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10003} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10003} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20012} created. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id  and
        c.parent_id is null limit ?,?;;
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20012} Parameters : [13, 0, 10]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20012} Types : [INTEGER, INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20012} executed. 4.929329 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id  and
        c.parent_id is null limit ?,?;;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20012, rs-50051} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20012, rs-50051} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20012, rs-50051} Result: [26, 好好, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:35.0, null]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20012, rs-50051} Result: [29, 太好了, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:13.0, null]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20012, rs-50051} Result: [32, <p>feige</p>, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 01:33:26.0, null]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20012, rs-50051} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20012} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10003} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10003} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20013} created. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20013} Parameters : [13, 26]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20013} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20013} executed. 5.414662 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20013, rs-50052} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20013, rs-50052} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20013, rs-50052} Result: [27, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:56.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20013, rs-50052} Result: [28, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:43:03.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20013, rs-50052} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20013} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10003} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10003} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20013} Parameters : [13, 26]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20013} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20013} executed. 4.686218 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20013, rs-50053} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20013, rs-50053} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20013, rs-50053} Result: [27, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:56.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20013, rs-50053} Result: [28, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:43:03.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20013, rs-50053} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20013} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10003} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10003} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20013} Parameters : [13, 27]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20013} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20013} executed. 1.125777 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20013, rs-50054} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20013, rs-50054} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20013, rs-50054} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20013} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10003} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10003} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20013} Parameters : [13, 27]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20013} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20013} executed. 3.720886 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20013, rs-50055} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20013, rs-50055} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20013, rs-50055} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20013} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10003} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10003} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20013} Parameters : [13, 29]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20013} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20013} executed. 4.233774 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20013, rs-50056} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20013, rs-50056} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20013, rs-50056} Result: [30, 谢谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:43.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20013, rs-50056} Result: [31, 不用谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:47:01.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20013, rs-50056} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20013} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10003} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10003} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20013} Parameters : [13, 29]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20013} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20013} executed. 9.407991 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20013, rs-50057} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20013, rs-50057} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20013, rs-50057} Result: [30, 谢谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:43.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20013, rs-50057} Result: [31, 不用谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:47:01.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20013, rs-50057} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20013} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10003} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10003} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20013} Parameters : [13, 30]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20013} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20013} executed. 1.010221 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20013, rs-50058} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20013, rs-50058} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20013, rs-50058} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20013} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10003} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10003} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20013} Parameters : [13, 30]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20013} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20013} executed. 1.805332 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20013, rs-50059} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20013, rs-50059} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20013, rs-50059} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20013} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10003} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10003} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20013} Parameters : [13, 32]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20013} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20013} executed. 2.060888 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20013, rs-50060} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20013, rs-50060} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20013, rs-50060} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20013} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10003} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10003} pool-connect
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20014} created. select id,type_name typeName
        from `type`
         
            limit ?,?
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20015} created. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog
         
            limit ?,?
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20015} Parameters : [0, 10]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20015} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20014} Parameters : [0, 30]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20014} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20015} executed. 0.822666 millis. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog
         
            limit ?,?
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20015, rs-50061} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20015, rs-50061} Header: [id, type_name, title, content, create_time, change_time, author, view]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20015, rs-50061} Result: [1, springboot, springboot入门, springb自动装配, 2020-02-23 21:43:36.0, 2020-02-24 03:06:48.0, admin, 0]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20015, rs-50061} Result: [2, mybatis, 配置, 得到的, 2020-02-24 02:05:36.0, 2020-03-13 06:39:47.0, admin, 3]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20015, rs-50061} Result: [4, springMVC, mybatis-plus, ##飞哥, 2020-02-24 02:10:09.0, 2020-02-25 22:42:23.0, admin, 111]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20015, rs-50061} Result: [5, springboot, 人, 嗯嗯, 2020-02-24 03:07:20.0, 2020-02-24 03:07:20.0, admin, 2]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20015, rs-50061} Result: [6, mybatis, mybatis入门, <h2>1、Mybatis简介</h2>
<p><img src="https://blog.kuangstudy.com/usr/uploads/2019/10/1296229149.png" referrerpolicy="no-referrer" alt="1567007421329.png"></p>
<h3>什么是MyBatis</h3>
<ul>
<li>MyBatis 是一款优秀的<strong>持久层框架</strong></li>
<li>MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集的过程</li>
<li>MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 实体类 【Plain Old Java Objects,普通的 Java对象】映射成数据库中的记录。</li>
<li>MyBatis 本是apache的一个开源项目ibatis, 2010年这个项目由apache 迁移到了google code，并且改名为MyBatis 。</li>
<li>2013年11月迁移到<strong>Github</strong> .</li>
<li>Mybatis官方文档 : <a href='http://www.mybatis.org/mybatis-3/zh/index.html' target='_blank' class='url'>http://www.mybatis.org/mybatis-3/zh/index.html</a></li>
<li>GitHub : <a href='https://github.com/mybatis/mybatis-3' target='_blank' class='url'>https://github.com/mybatis/mybatis-3</a></li>

</ul>
<h3>持久化</h3>
<ul>
<li><p><strong>持久化是将程序数据在持久状态和瞬时状态间转换的机制。</strong></p>
<ul>
<li>即把数据（如内存中的对象）保存到可永久保存的存储设备中（如磁盘）。持久化的主要应用是将内存中的对象存储在数据库中，或者存储在磁盘文件中、XML数据文件中等等。</li>
<li>JDBC就是一种持久化机制。文件IO也是一种持久化机制。</li>
<li>在生活中 : 将鲜肉冷藏，吃的时候再解冻的方法也是。将水果做成罐头的方法也是。</li>

</ul>
</li>
<li><p><strong>为什么需要持久化服务呢？那是由于内存本身的缺陷引起的</strong></p>
<ul>
<li>内存断电后数据会丢失，但有一些对象是无论如何都不能丢失的，比如银行账号等，遗憾的是，人们还无法保证内存永不掉电。</li>
<li>内存过于昂贵，与硬盘、光盘等外存相比，内存的价格要高2~3个数量级，而且维持成本也高，至少需要一直供电吧。所以即使对象不需要永久保存，也会因为内存的容量限制不能一直呆在内存中，需要持久化来缓存到外存。</li>

</ul>
</li>

</ul>
<h3>持久层</h3>
<ul>
<li><p>什么是持久层？</p>
<ul>
<li>完成持久化工作的代码块 . ----&gt; dao层 【DAO (Data Access Object) 数据访问对象】</li>
<li>大多数情况下特别是企业级应用，数据持久化往往也就意味着将内存中的数据保存到磁盘上加以固化，而持久化的实现过程则大多通过各种<strong>关系数据库</strong>来完成。</li>
<li>不过这里有一个字需要特别强调，也就是所谓的“层”。对于应用系统而言，数据持久功能大多是必不可少的组成部分。也就是说，我们的系统中，已经天然的具备了“持久层”概念？也许是，但也许实际情况并非如此。之所以要独立出一个“持久层”的概念,而不是“持久模块”，“持久单元”，也就意味着，我们的系统架构中，应该有一个相对独立的逻辑层面，专著于数据持久化逻辑的实现.</li>
<li>与系统其他部分相对而言，这个层面应该具有一个较为清晰和严格的逻辑边界。 【说白了就是用来操作数据库存在的！】</li>

</ul>
</li>

</ul>
<h3>为什么需要Mybatis</h3>
<ul>
<li><p>Mybatis就是帮助程序猿将数据存入数据库中 , 和从数据库中取数据 .</p>
</li>
<li><p>传统的jdbc操作 , 有很多重复代码块 .比如 : 数据取出时的封装 , 数据库的建立连接等等... , 通过框架可以减少重复代码,提高开发效率 .</p>
</li>
<li><p>MyBatis 是一个半自动化的<strong>ORM框架 (Object Relationship Mapping) --&gt;对象关系映射</strong></p>
</li>
<li><p>所有的事情，不用Mybatis依旧可以做到，只是用了它，所有实现会更加简单！<strong>技术没有高低之分，只有使用这个技术的人有高低之别</strong></p>
</li>
<li><p>MyBatis的优点</p>
<ul>
<li>简单易学：本身就很小且简单。没有任何第三方依赖，最简单安装只要两个jar文件+配置几个sql映射文件就可以了，易于学习，易于使用，通过文档和源代码，可以比较完全的掌握它的设计思路和实现。</li>
<li>灵活：mybatis不会对应用程序或者数据库的现有设计强加任何影响。 sql写在xml里，便于统一管理和优化。通过sql语句可以满足操作数据库的所有需求。</li>
<li>解除sql与程序代码的耦合：通过提供DAO层，将业务逻辑和数据访问逻辑分离，使系统的设计更清晰，更易维护，更易单元测试。sql和代码的分离，提高了可维护性。</li>
<li>提供xml标签，支持编写动态sql。</li>
<li>.......</li>

</ul>
</li>
<li><p>最重要的一点，使用的人多！公司需要！</p>
</li>
<li><p>环境说明：</p>
<ul>
<li>jdk 8 +</li>
<li>MySQL 5.7.19</li>
<li>maven-3.6.0</li>
<li>IDEA</li>

</ul>
<p>学习前需要掌握：</p>
<ul>
<li>JDBC</li>
<li>MySQL</li>
<li>Java 基础</li>
<li>Maven</li>
<li>Junit</li>

</ul>
</li>

</ul>
<h2>2、mybatis crud（实现增删改查）</h2>
<h4>1.1、创建一个maven项目</h4>
<p>		导入依赖</p>
<pre><code class='language-xml' lang='xml'>&lt;dependencies&gt;
    &lt;!--mysql驱动--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;mysql&lt;/groupId&gt;
        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
        &lt;version&gt;5.1.47&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;!--mybatis支持--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.mybatis&lt;/groupId&gt;
        &lt;artifactId&gt;mybatis&lt;/artifactId&gt;
        &lt;version&gt;3.5.2&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;!--junit支持--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;junit&lt;/groupId&gt;
        &lt;artifactId&gt;junit&lt;/artifactId&gt;
        &lt;version&gt;4.12&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
</code></pre>
<p>注意点 : pom文件的设置中需要设置资源过滤 , 否则会有资源文件打包不成功问题，导致项目无法运行；</p>
<pre><code class='language-xml' lang='xml'>&lt;build&gt;
    &lt;resources&gt;
        &lt;resource&gt;
            &lt;directory&gt;src/main/java&lt;/directory&gt;
            &lt;includes&gt;
                &lt;include&gt;**/*.properties&lt;/include&gt;
                &lt;include&gt;**/*.xml&lt;/include&gt;
            &lt;/includes&gt;
            &lt;filtering&gt;true&lt;/filtering&gt;
        &lt;/resource&gt;
    &lt;/resources&gt;
&lt;/build&gt;
</code></pre>
<p>&nbsp;</p>
<h4>1.2、创建数据库和表</h4>
<pre><code class='language-sql' lang='sql'>CREATE DATABASE mybatis CHARACTER SET utf8;
CREATE TABLE USER(
	id INT PRIMARY KEY,
	username VARCHAR(15) NOT NULL,
	pwd VARCHAR(20) NOT NULL
)
INSERT INTO USER VALUES(2018143114,&#39;张三&#39;,&#39;123456&#39;),(2018143115,&#39;李四&#39;,&#39;1234567&#39;),(2018143116,&#39;王五&#39;,&#39;147258&#39;);
SELECT * FROM USER;
</code></pre>
<h4>1.3、编写mybatis配置文件</h4>
<p>在resource里新建一个mybatis-config.xml文件</p>
<pre><code class='language-xml' lang='xml'>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE configuration
        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;
&lt;configuration&gt;
    &lt;environments default=&quot;development&quot;&gt;
        &lt;environment id=&quot;development&quot;&gt;
            &lt;transactionManager type=&quot;JDBC&quot;/&gt;
            &lt;dataSource type=&quot;POOLED&quot;&gt;
                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;
                &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;amp;useUnicode=true&amp;amp;characterEncoding=utf8&quot;/&gt;
                &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;
                &lt;property name=&quot;password&quot; value=&quot;hufei169357&quot;/&gt;
            &lt;/dataSource&gt;
        &lt;/environment&gt;
    &lt;/environments&gt;
    &lt;mappers&gt;
        &lt;mapper resource=&quot;com/feige/dao/userMapper.xml&quot;/&gt;
    &lt;/mappers&gt;
&lt;/configuration&gt;
</code></pre>
<h4>1.4、新建一个工具类用来获取SqlSession对象</h4>
<pre><code class='language-java' lang='java'>package com.feige.utils;

import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import java.io.IOException;
import java.io.InputStream;
//sqlSessionFactory-sqlSession
public class MybatisUtils {
    private static SqlSessionFactory sqlSessionFactory;
    static {
        try {
            //使用mybatis第一步：获取sqlSessionFactory对象
            String resource = &quot;mybatis-config.xml&quot;;
            InputStream inputStream = Resources.getResourceAsStream(resource);
            sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    //既然有了sqlSessionFactory，顾名思义，我们就可以从中获得sqlSession的实例
    public static SqlSession getSqlSessioon(){
        return sqlSessionFactory.openSession();
    }
}

</code></pre>
<p>&nbsp;</p>
<h4>1.5、编写一个pojo（实体类）</h4>
<pre><code class='language-java' lang='java'>package com.feige.pojo;

public class User {
    private int id;
    private String username;
    private String pwd;

    public User() {
    }

    public User(int id, String username, String pwd) {
        this.id = id;
        this.username = username;
        this.pwd = pwd;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getPwd() {
        return pwd;
    }

    public void setPwd(String pwd) {
        this.pwd = pwd;
    }
    @Override
    public String toString() {
        return &quot;User{&quot; +
                &quot;id=&quot; + id +
                &quot;, username=&#39;&quot; + username + &#39;\&#39;&#39; +
                &quot;, pwd=&#39;&quot; + pwd + &#39;\&#39;&#39; +
                &#39;}&#39;;
    }
}

</code></pre>
<h4>1.6、新建一个userMapper接口</h4>
<pre><code class='language-java' lang='java'>package com.feige.dao;

import com.feige.pojo.User;

import java.util.List;
import java.util.Map;

public interface UserMapper {
    //查询全部用户
    List&lt;User&gt; getAllUser();
    //通过一个id查询一个用户
    User getUserById(int id);
    //通过id修改一个用户
    int updateUserById(Map map);
    //通过id删除一个用户
    int deleteUserById(int id);
    //插入一条数据
    int insertUser(User user);
}

</code></pre>
<h4>1.7、新建一个userMapper.xml文件</h4>
<pre><code class='language-xml' lang='xml'>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE mapper
        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;com.feige.dao.UserMapper&quot;&gt;
    &lt;!--每个语句要对应相应的标签select对应&lt;select&gt; delete 对应&lt;delete&gt; update 对应&lt;update&gt; insert 对应&lt;insert&gt;--&gt;
    &lt;select id=&quot;getAllUser&quot; resultType=&quot;com.feige.pojo.User&quot;&gt;
        select * from user
    &lt;/select&gt;
    &lt;select id=&quot;getUserById&quot; resultType=&quot;com.feige.pojo.User&quot; parameterType=&quot;int&quot;&gt;
        select * from user where id=#{id}
    &lt;/select&gt;
    &lt;update id=&quot;updateUserById&quot; parameterType=&quot;map&quot;&gt;
        update user set pwd=#{pwd} where id=#{id}
    &lt;/update&gt;
    &lt;delete id=&quot;deleteUserById&quot; parameterType=&quot;int&quot;&gt;
        delete from user where id=#{id}
    &lt;/delete&gt;
    &lt;insert id=&quot;insertUser&quot; parameterType=&quot;com.feige.pojo.User&quot;&gt;
        insert into user values (#{id},#{username},#{pwd})
    &lt;/insert&gt;
&lt;/mapper&gt;
</code></pre>
<h4>1.8、测试代码</h4>
<pre><code class='language-java' lang='java'>package com.feige.mybatisTest;

import com.feige.dao.UserMapper;
import com.feige.pojo.User;
import com.feige.utils.MybatisUtils;
import org.apache.ibatis.session.SqlSession;
import org.junit.Test;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MybatisTest {
    @Test
    public void mybatisTest1(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        List&lt;User&gt; allUser = mapper.getAllUser();
        for (User user : allUser) {
            System.out.println(user);
        }
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest2(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        User userById = mapper.getUserById(2018143114);
        System.out.println(userById);
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest3() {
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        //使用万能map传参
        Map&lt;String,Object&gt; map = new HashMap&lt;String, Object&gt;();
        map.put(&quot;pwd&quot;,2018143114);
        map.put(&quot;id&quot;,2018143114);

        int i = mapper.updateUserById(map);
        if (i &gt; 0) {
            System.out.println(&quot;修改成功！&quot;+i);
        }
        //增删改需要提交事务
        sqlSessioon.commit();

        sqlSessioon.close();

    }
    @Test
    public void mybatisTest4(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        int i = mapper.deleteUserById(2018143117);
        if (i &gt; 0) {
            System.out.println(&quot;删除成功！&quot;+i);
        }
        sqlSessioon.commit();
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest5(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        User user = new User(2018143117, &quot;杨帆东&quot;, &quot;2018143117&quot;);
        int i = mapper.insertUser(user);
        if (i &gt; 0) {
            System.out.println(&quot;插入成功！&quot;+i);
        }
        sqlSessioon.commit();
        sqlSessioon.close();

    }
}

</code></pre>
<p>&nbsp;</p>
<p>		</p>, 2020-02-24 03:15:45.0, 2020-02-24 03:15:50.0, admin, 0]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20015, rs-50061} Result: [7, mybatis, mybatis啊, 作者, 2020-02-24 03:27:18.0, 2020-02-24 03:27:18.0, admin, 1]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20015, rs-50061} Result: [8, springboot, aaa, [TOC]
                            #### Disabled options

                            - TeX (Based on KaTeX);
                            - Emoji;
                            - Task lists;
                            - HTML tags decode;
                            - Flowchart and Sequence Diagram;
                            #### Editor.md directory

                                editor.md/
                                        lib/
                                        css/
                                        scss/
                                        tests/
                                        fonts/
                                        images/
                                        plugins/
                                        examples/
                                        languages/
                                        editormd.js
                                        ...

                            ```html
                            <!-- English -->
                            <script src="../dist/js/languages/en.js"></script>

                            <!-- 繁體中文 -->
                            <script src="../dist/js/languages/zh-tw.js"></script>
                            ```
                        , 2020-02-25 03:39:36.0, 2020-02-25 22:38:07.0, admin, 1]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20015, rs-50061} Result: [9, mybatis, bbb, [TOC]

                            #### Disabled options

                            - TeX (Based on KaTeX);
                            - Emoji;
                            - Task lists;
                            - HTML tags decode;
                            - Flowchart and Sequence Diagram;

                            #### Editor.md directory

                                editor.md/
                                        lib/
                                        css/
                                        scss/
                                        tests/
                                        fonts/
                                        images/
                                        plugins/
                                        examples/
                                        languages/
                                        editormd.js
                                        ...

                            ```html
                            <!-- English -->
                            <script src="../dist/js/languages/en.js"></script>

                            <!-- 繁體中文 -->
                            <script src="../dist/js/languages/zh-tw.js"></script>
                            ```
                        , 2020-02-25 03:44:09.0, 2020-02-25 03:44:09.0, admin, 1]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20015, rs-50061} Result: [10, springboot, 飞哥, #大哥的Markdown, 2020-02-25 22:43:28.0, 2020-02-25 22:43:28.0, admin, 1]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20015, rs-50061} Result: [11, mybatis, 大哥, #飞哥的博客后台管理系统, 2020-02-25 22:49:26.0, 2020-02-25 22:49:26.0, admin, 1]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20015, rs-50061} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20015} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20016} created. select count(*) from `blog`
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20016} Parameters : []
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20016} Types : []
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20016} executed. 0.63911 millis. select count(*) from `blog`
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20016, rs-50062} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20016, rs-50062} Header: [count(*)]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20016, rs-50062} Result: [13]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20016, rs-50062} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20016} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20014} executed. 11.4831 millis. select id,type_name typeName
        from `type`
         
            limit ?,?
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20014, rs-50063} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20014, rs-50063} Header: [id, type_name]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20014, rs-50063} Result: [3, mybatis]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20014, rs-50063} Result: [2, spring]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20014, rs-50063} Result: [1, springboot]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20014, rs-50063} Result: [4, springMVC]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20014, rs-50063} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20014} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10003} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10003} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20017} created. select count(*) from `type`
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20017} Parameters : []
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20017} Types : []
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20017} executed. 0.675111 millis. select count(*) from `type`
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20017, rs-50064} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20017, rs-50064} Header: [count(*)]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20017, rs-50064} Result: [4]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20017, rs-50064} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20017} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10003} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10003} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20003} Parameters : [1]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20003} Types : [INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20003} executed. 0.842666 millis. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog where id=?
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20003, rs-50065} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20003, rs-50065} Header: [id, type_name, title, content, create_time, change_time, author, view]
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20003, rs-50065} Result: [1, springboot, springboot入门, springb自动装配, 2020-02-23 21:43:36.0, 2020-02-24 03:06:48.0, admin, 0]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20006} Parameters : [0, 30]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20006} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20003, rs-50065} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20003} clearParameters. 
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20006} executed. 1.738221 millis. select id,type_name typeName
        from `type`
         
            limit ?,?
[DEBUG][20-03-23][druid.sql.Connection]{conn-10003} pool-recycle
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20006, rs-50066} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20006, rs-50066} Header: [id, type_name]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20006, rs-50066} Result: [3, mybatis]
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20006, rs-50066} Result: [2, spring]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20006, rs-50066} Result: [1, springboot]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20018} created. select distinct count(*) from comments c
        where c.blog_id=? and
        c.parent_id is null;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20006, rs-50066} Result: [4, springMVC]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20006, rs-50066} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20018} Parameters : [1]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20006} clearParameters. 
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20018} Types : [INTEGER]
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20008} Parameters : []
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20008} Types : []
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20008} executed. 1.421332 millis. select count(*) from `type`
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50067} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50067} Header: [count(*)]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50067} Result: [4]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50067} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20008} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20018} executed. 8.039993 millis. select distinct count(*) from comments c
        where c.blog_id=? and
        c.parent_id is null;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20018, rs-50068} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20018, rs-50068} Header: [count(*)]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20018, rs-50068} Result: [12]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20018, rs-50068} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20018} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20019} created. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id  and
        c.parent_id is null limit ?,?;;
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20019} Parameters : [1, 0, 10]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20019} Types : [INTEGER, INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20019} executed. 5.712884 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id  and
        c.parent_id is null limit ?,?;;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20019, rs-50069} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20019, rs-50069} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20019, rs-50069} Result: [1, aaaaa, null, 22, https://www.pyfeige.com/static/img/bg7.png, feige, 2020-02-24 04:04:34.0, null]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20019, rs-50069} Result: [6, aa, null, 222, https://www.pyfeige.com/static/img/bg7.png, feige, 2020-02-24 06:22:08.0, null]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20019, rs-50069} Result: [12, hufeigegege, null, 0, https://www.pyfeige.com/static/img/4.jpg, dage, 2020-02-26 09:54:47.0, null]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20019, rs-50069} Result: [14, qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq, null, 0, https://www.pyfeige.com/static/img/bg7.png, dd, 2020-02-26 10:12:44.0, null]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20019, rs-50069} Result: [16, qqqq, null, 0, https://www.pyfeige.com/static/img/3.png, 1, 2020-02-26 21:24:26.0, null]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20019, rs-50069} Result: [17, sssss, null, 0, https://www.pyfeige.com/static/img/3.png, 1, 2020-02-26 21:24:37.0, null]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20019, rs-50069} Result: [18, ssss, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-02-26 21:24:53.0, null]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20019, rs-50069} Result: [19, ssssxxx, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-02-26 21:24:57.0, null]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20019, rs-50069} Result: [20, ssssxxxxxx, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-02-26 21:25:00.0, null]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20019, rs-50069} Result: [21, ssssxxxxxxxxxxx, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-02-26 21:25:03.0, null]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20019, rs-50069} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20019} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} created. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} Parameters : [1, 1]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} executed. 2.118665 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50070} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50070} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50070} Result: [2, hhh, 1, 122, https://www.pyfeige.com/static/img/4.jpg, dage, 2020-02-24 04:05:59.0, feige]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50070} Result: [4, cc, 1, 122, https://www.pyfeige.com/static/img/bg7.png, feige, 2020-02-24 04:17:34.0, feige]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50070} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} Parameters : [1, 1]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} executed. 0.984888 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50071} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50071} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50071} Result: [2, hhh, 1, 122, https://www.pyfeige.com/static/img/4.jpg, dage, 2020-02-24 04:05:59.0, feige]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50071} Result: [4, cc, 1, 122, https://www.pyfeige.com/static/img/bg7.png, feige, 2020-02-24 04:17:34.0, feige]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50071} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} Parameters : [1, 2]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} executed. 1.29911 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50072} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50072} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50072} Result: [3, xx, 2, 122, https://www.pyfeige.com/static/img/bg7.png, dd, 2020-02-24 04:06:56.0, dage]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50072} Result: [5, vv, 2, 122, https://www.pyfeige.com/static/img/bg7.png, dd, 2020-02-24 04:18:31.0, dage]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50072} Result: [8, dage, 2, 6222, https://www.pyfeige.com/static/img/bg7.png, feige, 2020-02-24 06:23:39.0, dage]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50072} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} Parameters : [1, 2]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} executed. 2.595553 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50073} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50073} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50073} Result: [3, xx, 2, 122, https://www.pyfeige.com/static/img/bg7.png, dd, 2020-02-24 04:06:56.0, dage]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50073} Result: [5, vv, 2, 122, https://www.pyfeige.com/static/img/bg7.png, dd, 2020-02-24 04:18:31.0, dage]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50073} Result: [8, dage, 2, 6222, https://www.pyfeige.com/static/img/bg7.png, feige, 2020-02-24 06:23:39.0, dage]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50073} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} Parameters : [1, 3]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} executed. 0.886222 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50074} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50074} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50074} Result: [7, feige, 3, 6222, https://www.pyfeige.com/static/img/bg7.png, dd, 2020-02-24 06:22:57.0, dd]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50074} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} Parameters : [1, 3]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} executed. 1.18311 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50075} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50075} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50075} Result: [7, feige, 3, 6222, https://www.pyfeige.com/static/img/bg7.png, dd, 2020-02-24 06:22:57.0, dd]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50075} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} Parameters : [1, 7]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} executed. 0.567111 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50076} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50076} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50076} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} Parameters : [1, 7]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} executed. 0.480888 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50077} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50077} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50077} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} Parameters : [1, 7]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} executed. 0.440444 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50078} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50078} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50078} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} Parameters : [1, 7]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} executed. 0.448889 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50079} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50079} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50079} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} Parameters : [1, 6]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} executed. 0.556 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50080} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50080} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50080} Result: [11, adddddddddddddddddd, 6, 222, https://www.pyfeige.com/static/img/4.jpg, dage, 2020-02-26 09:24:43.0, hufeige]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50080} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} Parameters : [1, 6]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} executed. 0.693777 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50081} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50081} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50081} Result: [11, adddddddddddddddddd, 6, 222, https://www.pyfeige.com/static/img/4.jpg, dage, 2020-02-26 09:24:43.0, hufeige]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50081} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} Parameters : [1, 11]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} executed. 0.464444 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50082} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50082} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50082} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} Parameters : [1, 12]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} executed. 0.559555 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50083} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50083} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50083} Result: [13, aaaaaa, 12, 0, https://www.pyfeige.com/static/img/4.jpg, dage, 2020-02-26 09:55:11.0, dage]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50083} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} Parameters : [1, 12]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} executed. 0.632444 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50084} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50084} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50084} Result: [13, aaaaaa, 12, 0, https://www.pyfeige.com/static/img/4.jpg, dage, 2020-02-26 09:55:11.0, dage]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50084} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} Parameters : [1, 13]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} executed. 0.467556 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50085} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50085} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50085} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} Parameters : [1, 14]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} executed. 0.625333 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50086} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50086} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50086} Result: [15, dffffffffffffffffffffffffffffff, 14, 0, https://www.pyfeige.com/static/img/bg7.png, dd, 2020-02-26 10:13:13.0, dd]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50086} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} Parameters : [1, 14]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} executed. 0.585333 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50087} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50087} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50087} Result: [15, dffffffffffffffffffffffffffffff, 14, 0, https://www.pyfeige.com/static/img/bg7.png, dd, 2020-02-26 10:13:13.0, dd]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50087} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} Parameters : [1, 15]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} executed. 0.623555 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50088} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50088} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50088} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} Parameters : [1, 16]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} executed. 0.535556 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50089} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50089} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50089} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} Parameters : [1, 17]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} executed. 0.541332 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50090} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50090} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50090} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} Parameters : [1, 18]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} executed. 0.471555 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50091} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50091} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50091} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} Parameters : [1, 19]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} executed. 0.433778 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50092} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50092} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50092} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} Parameters : [1, 20]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} executed. 0.400444 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50093} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50093} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50093} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} Parameters : [1, 21]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} executed. 0.488889 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50094} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50094} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50094} Result: [23, aaaaaaaaaaaaaaaaaaaa, 21, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-02-26 21:26:14.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50094} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} Parameters : [1, 21]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} executed. 0.534666 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50095} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50095} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50095} Result: [23, aaaaaaaaaaaaaaaaaaaa, 21, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-02-26 21:26:14.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50095} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} Parameters : [1, 23]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} executed. 0.497777 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50096} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50096} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50096} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} Parameters : [0, 30]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20021} created. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog
         
            limit ?,?
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20021} Parameters : [0, 10]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20021} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} executed. 0.505778 millis. select id,type_name typeName
        from `type`
         
            limit ?,?
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50097} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50097} Header: [id, type_name]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50097} Result: [3, mybatis]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50097} Result: [2, spring]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50097} Result: [1, springboot]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20021} executed. 0.678666 millis. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog
         
            limit ?,?
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50097} Result: [4, springMVC]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20021, rs-50098} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20021, rs-50098} Header: [id, type_name, title, content, create_time, change_time, author, view]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50097} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} clearParameters. 
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20021, rs-50098} Result: [1, springboot, springboot入门, springb自动装配, 2020-02-23 21:43:36.0, 2020-02-24 03:06:48.0, admin, 0]
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20001} Parameters : []
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20001} Types : []
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20021, rs-50098} Result: [2, mybatis, 配置, 得到的, 2020-02-24 02:05:36.0, 2020-03-13 06:39:47.0, admin, 3]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20021, rs-50098} Result: [4, springMVC, mybatis-plus, ##飞哥, 2020-02-24 02:10:09.0, 2020-02-25 22:42:23.0, admin, 111]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20021, rs-50098} Result: [5, springboot, 人, 嗯嗯, 2020-02-24 03:07:20.0, 2020-02-24 03:07:20.0, admin, 2]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20001} executed. 0.520889 millis. select count(*) from `type`
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50099} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50099} Header: [count(*)]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20021, rs-50098} Result: [6, mybatis, mybatis入门, <h2>1、Mybatis简介</h2>
<p><img src="https://blog.kuangstudy.com/usr/uploads/2019/10/1296229149.png" referrerpolicy="no-referrer" alt="1567007421329.png"></p>
<h3>什么是MyBatis</h3>
<ul>
<li>MyBatis 是一款优秀的<strong>持久层框架</strong></li>
<li>MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集的过程</li>
<li>MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 实体类 【Plain Old Java Objects,普通的 Java对象】映射成数据库中的记录。</li>
<li>MyBatis 本是apache的一个开源项目ibatis, 2010年这个项目由apache 迁移到了google code，并且改名为MyBatis 。</li>
<li>2013年11月迁移到<strong>Github</strong> .</li>
<li>Mybatis官方文档 : <a href='http://www.mybatis.org/mybatis-3/zh/index.html' target='_blank' class='url'>http://www.mybatis.org/mybatis-3/zh/index.html</a></li>
<li>GitHub : <a href='https://github.com/mybatis/mybatis-3' target='_blank' class='url'>https://github.com/mybatis/mybatis-3</a></li>

</ul>
<h3>持久化</h3>
<ul>
<li><p><strong>持久化是将程序数据在持久状态和瞬时状态间转换的机制。</strong></p>
<ul>
<li>即把数据（如内存中的对象）保存到可永久保存的存储设备中（如磁盘）。持久化的主要应用是将内存中的对象存储在数据库中，或者存储在磁盘文件中、XML数据文件中等等。</li>
<li>JDBC就是一种持久化机制。文件IO也是一种持久化机制。</li>
<li>在生活中 : 将鲜肉冷藏，吃的时候再解冻的方法也是。将水果做成罐头的方法也是。</li>

</ul>
</li>
<li><p><strong>为什么需要持久化服务呢？那是由于内存本身的缺陷引起的</strong></p>
<ul>
<li>内存断电后数据会丢失，但有一些对象是无论如何都不能丢失的，比如银行账号等，遗憾的是，人们还无法保证内存永不掉电。</li>
<li>内存过于昂贵，与硬盘、光盘等外存相比，内存的价格要高2~3个数量级，而且维持成本也高，至少需要一直供电吧。所以即使对象不需要永久保存，也会因为内存的容量限制不能一直呆在内存中，需要持久化来缓存到外存。</li>

</ul>
</li>

</ul>
<h3>持久层</h3>
<ul>
<li><p>什么是持久层？</p>
<ul>
<li>完成持久化工作的代码块 . ----&gt; dao层 【DAO (Data Access Object) 数据访问对象】</li>
<li>大多数情况下特别是企业级应用，数据持久化往往也就意味着将内存中的数据保存到磁盘上加以固化，而持久化的实现过程则大多通过各种<strong>关系数据库</strong>来完成。</li>
<li>不过这里有一个字需要特别强调，也就是所谓的“层”。对于应用系统而言，数据持久功能大多是必不可少的组成部分。也就是说，我们的系统中，已经天然的具备了“持久层”概念？也许是，但也许实际情况并非如此。之所以要独立出一个“持久层”的概念,而不是“持久模块”，“持久单元”，也就意味着，我们的系统架构中，应该有一个相对独立的逻辑层面，专著于数据持久化逻辑的实现.</li>
<li>与系统其他部分相对而言，这个层面应该具有一个较为清晰和严格的逻辑边界。 【说白了就是用来操作数据库存在的！】</li>

</ul>
</li>

</ul>
<h3>为什么需要Mybatis</h3>
<ul>
<li><p>Mybatis就是帮助程序猿将数据存入数据库中 , 和从数据库中取数据 .</p>
</li>
<li><p>传统的jdbc操作 , 有很多重复代码块 .比如 : 数据取出时的封装 , 数据库的建立连接等等... , 通过框架可以减少重复代码,提高开发效率 .</p>
</li>
<li><p>MyBatis 是一个半自动化的<strong>ORM框架 (Object Relationship Mapping) --&gt;对象关系映射</strong></p>
</li>
<li><p>所有的事情，不用Mybatis依旧可以做到，只是用了它，所有实现会更加简单！<strong>技术没有高低之分，只有使用这个技术的人有高低之别</strong></p>
</li>
<li><p>MyBatis的优点</p>
<ul>
<li>简单易学：本身就很小且简单。没有任何第三方依赖，最简单安装只要两个jar文件+配置几个sql映射文件就可以了，易于学习，易于使用，通过文档和源代码，可以比较完全的掌握它的设计思路和实现。</li>
<li>灵活：mybatis不会对应用程序或者数据库的现有设计强加任何影响。 sql写在xml里，便于统一管理和优化。通过sql语句可以满足操作数据库的所有需求。</li>
<li>解除sql与程序代码的耦合：通过提供DAO层，将业务逻辑和数据访问逻辑分离，使系统的设计更清晰，更易维护，更易单元测试。sql和代码的分离，提高了可维护性。</li>
<li>提供xml标签，支持编写动态sql。</li>
<li>.......</li>

</ul>
</li>
<li><p>最重要的一点，使用的人多！公司需要！</p>
</li>
<li><p>环境说明：</p>
<ul>
<li>jdk 8 +</li>
<li>MySQL 5.7.19</li>
<li>maven-3.6.0</li>
<li>IDEA</li>

</ul>
<p>学习前需要掌握：</p>
<ul>
<li>JDBC</li>
<li>MySQL</li>
<li>Java 基础</li>
<li>Maven</li>
<li>Junit</li>

</ul>
</li>

</ul>
<h2>2、mybatis crud（实现增删改查）</h2>
<h4>1.1、创建一个maven项目</h4>
<p>		导入依赖</p>
<pre><code class='language-xml' lang='xml'>&lt;dependencies&gt;
    &lt;!--mysql驱动--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;mysql&lt;/groupId&gt;
        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
        &lt;version&gt;5.1.47&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;!--mybatis支持--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.mybatis&lt;/groupId&gt;
        &lt;artifactId&gt;mybatis&lt;/artifactId&gt;
        &lt;version&gt;3.5.2&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;!--junit支持--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;junit&lt;/groupId&gt;
        &lt;artifactId&gt;junit&lt;/artifactId&gt;
        &lt;version&gt;4.12&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
</code></pre>
<p>注意点 : pom文件的设置中需要设置资源过滤 , 否则会有资源文件打包不成功问题，导致项目无法运行；</p>
<pre><code class='language-xml' lang='xml'>&lt;build&gt;
    &lt;resources&gt;
        &lt;resource&gt;
            &lt;directory&gt;src/main/java&lt;/directory&gt;
            &lt;includes&gt;
                &lt;include&gt;**/*.properties&lt;/include&gt;
                &lt;include&gt;**/*.xml&lt;/include&gt;
            &lt;/includes&gt;
            &lt;filtering&gt;true&lt;/filtering&gt;
        &lt;/resource&gt;
    &lt;/resources&gt;
&lt;/build&gt;
</code></pre>
<p>&nbsp;</p>
<h4>1.2、创建数据库和表</h4>
<pre><code class='language-sql' lang='sql'>CREATE DATABASE mybatis CHARACTER SET utf8;
CREATE TABLE USER(
	id INT PRIMARY KEY,
	username VARCHAR(15) NOT NULL,
	pwd VARCHAR(20) NOT NULL
)
INSERT INTO USER VALUES(2018143114,&#39;张三&#39;,&#39;123456&#39;),(2018143115,&#39;李四&#39;,&#39;1234567&#39;),(2018143116,&#39;王五&#39;,&#39;147258&#39;);
SELECT * FROM USER;
</code></pre>
<h4>1.3、编写mybatis配置文件</h4>
<p>在resource里新建一个mybatis-config.xml文件</p>
<pre><code class='language-xml' lang='xml'>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE configuration
        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;
&lt;configuration&gt;
    &lt;environments default=&quot;development&quot;&gt;
        &lt;environment id=&quot;development&quot;&gt;
            &lt;transactionManager type=&quot;JDBC&quot;/&gt;
            &lt;dataSource type=&quot;POOLED&quot;&gt;
                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;
                &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;amp;useUnicode=true&amp;amp;characterEncoding=utf8&quot;/&gt;
                &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;
                &lt;property name=&quot;password&quot; value=&quot;hufei169357&quot;/&gt;
            &lt;/dataSource&gt;
        &lt;/environment&gt;
    &lt;/environments&gt;
    &lt;mappers&gt;
        &lt;mapper resource=&quot;com/feige/dao/userMapper.xml&quot;/&gt;
    &lt;/mappers&gt;
&lt;/configuration&gt;
</code></pre>
<h4>1.4、新建一个工具类用来获取SqlSession对象</h4>
<pre><code class='language-java' lang='java'>package com.feige.utils;

import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import java.io.IOException;
import java.io.InputStream;
//sqlSessionFactory-sqlSession
public class MybatisUtils {
    private static SqlSessionFactory sqlSessionFactory;
    static {
        try {
            //使用mybatis第一步：获取sqlSessionFactory对象
            String resource = &quot;mybatis-config.xml&quot;;
            InputStream inputStream = Resources.getResourceAsStream(resource);
            sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    //既然有了sqlSessionFactory，顾名思义，我们就可以从中获得sqlSession的实例
    public static SqlSession getSqlSessioon(){
        return sqlSessionFactory.openSession();
    }
}

</code></pre>
<p>&nbsp;</p>
<h4>1.5、编写一个pojo（实体类）</h4>
<pre><code class='language-java' lang='java'>package com.feige.pojo;

public class User {
    private int id;
    private String username;
    private String pwd;

    public User() {
    }

    public User(int id, String username, String pwd) {
        this.id = id;
        this.username = username;
        this.pwd = pwd;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getPwd() {
        return pwd;
    }

    public void setPwd(String pwd) {
        this.pwd = pwd;
    }
    @Override
    public String toString() {
        return &quot;User{&quot; +
                &quot;id=&quot; + id +
                &quot;, username=&#39;&quot; + username + &#39;\&#39;&#39; +
                &quot;, pwd=&#39;&quot; + pwd + &#39;\&#39;&#39; +
                &#39;}&#39;;
    }
}

</code></pre>
<h4>1.6、新建一个userMapper接口</h4>
<pre><code class='language-java' lang='java'>package com.feige.dao;

import com.feige.pojo.User;

import java.util.List;
import java.util.Map;

public interface UserMapper {
    //查询全部用户
    List&lt;User&gt; getAllUser();
    //通过一个id查询一个用户
    User getUserById(int id);
    //通过id修改一个用户
    int updateUserById(Map map);
    //通过id删除一个用户
    int deleteUserById(int id);
    //插入一条数据
    int insertUser(User user);
}

</code></pre>
<h4>1.7、新建一个userMapper.xml文件</h4>
<pre><code class='language-xml' lang='xml'>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE mapper
        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;com.feige.dao.UserMapper&quot;&gt;
    &lt;!--每个语句要对应相应的标签select对应&lt;select&gt; delete 对应&lt;delete&gt; update 对应&lt;update&gt; insert 对应&lt;insert&gt;--&gt;
    &lt;select id=&quot;getAllUser&quot; resultType=&quot;com.feige.pojo.User&quot;&gt;
        select * from user
    &lt;/select&gt;
    &lt;select id=&quot;getUserById&quot; resultType=&quot;com.feige.pojo.User&quot; parameterType=&quot;int&quot;&gt;
        select * from user where id=#{id}
    &lt;/select&gt;
    &lt;update id=&quot;updateUserById&quot; parameterType=&quot;map&quot;&gt;
        update user set pwd=#{pwd} where id=#{id}
    &lt;/update&gt;
    &lt;delete id=&quot;deleteUserById&quot; parameterType=&quot;int&quot;&gt;
        delete from user where id=#{id}
    &lt;/delete&gt;
    &lt;insert id=&quot;insertUser&quot; parameterType=&quot;com.feige.pojo.User&quot;&gt;
        insert into user values (#{id},#{username},#{pwd})
    &lt;/insert&gt;
&lt;/mapper&gt;
</code></pre>
<h4>1.8、测试代码</h4>
<pre><code class='language-java' lang='java'>package com.feige.mybatisTest;

import com.feige.dao.UserMapper;
import com.feige.pojo.User;
import com.feige.utils.MybatisUtils;
import org.apache.ibatis.session.SqlSession;
import org.junit.Test;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MybatisTest {
    @Test
    public void mybatisTest1(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        List&lt;User&gt; allUser = mapper.getAllUser();
        for (User user : allUser) {
            System.out.println(user);
        }
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest2(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        User userById = mapper.getUserById(2018143114);
        System.out.println(userById);
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest3() {
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        //使用万能map传参
        Map&lt;String,Object&gt; map = new HashMap&lt;String, Object&gt;();
        map.put(&quot;pwd&quot;,2018143114);
        map.put(&quot;id&quot;,2018143114);

        int i = mapper.updateUserById(map);
        if (i &gt; 0) {
            System.out.println(&quot;修改成功！&quot;+i);
        }
        //增删改需要提交事务
        sqlSessioon.commit();

        sqlSessioon.close();

    }
    @Test
    public void mybatisTest4(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        int i = mapper.deleteUserById(2018143117);
        if (i &gt; 0) {
            System.out.println(&quot;删除成功！&quot;+i);
        }
        sqlSessioon.commit();
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest5(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        User user = new User(2018143117, &quot;杨帆东&quot;, &quot;2018143117&quot;);
        int i = mapper.insertUser(user);
        if (i &gt; 0) {
            System.out.println(&quot;插入成功！&quot;+i);
        }
        sqlSessioon.commit();
        sqlSessioon.close();

    }
}

</code></pre>
<p>&nbsp;</p>
<p>		</p>, 2020-02-24 03:15:45.0, 2020-02-24 03:15:50.0, admin, 0]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50099} Result: [4]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50099} closed
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20021, rs-50098} Result: [7, mybatis, mybatis啊, 作者, 2020-02-24 03:27:18.0, 2020-02-24 03:27:18.0, admin, 1]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20001} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20021, rs-50098} Result: [8, springboot, aaa, [TOC]
                            #### Disabled options

                            - TeX (Based on KaTeX);
                            - Emoji;
                            - Task lists;
                            - HTML tags decode;
                            - Flowchart and Sequence Diagram;
                            #### Editor.md directory

                                editor.md/
                                        lib/
                                        css/
                                        scss/
                                        tests/
                                        fonts/
                                        images/
                                        plugins/
                                        examples/
                                        languages/
                                        editormd.js
                                        ...

                            ```html
                            <!-- English -->
                            <script src="../dist/js/languages/en.js"></script>

                            <!-- 繁體中文 -->
                            <script src="../dist/js/languages/zh-tw.js"></script>
                            ```
                        , 2020-02-25 03:39:36.0, 2020-02-25 22:38:07.0, admin, 1]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20021, rs-50098} Result: [9, mybatis, bbb, [TOC]

                            #### Disabled options

                            - TeX (Based on KaTeX);
                            - Emoji;
                            - Task lists;
                            - HTML tags decode;
                            - Flowchart and Sequence Diagram;

                            #### Editor.md directory

                                editor.md/
                                        lib/
                                        css/
                                        scss/
                                        tests/
                                        fonts/
                                        images/
                                        plugins/
                                        examples/
                                        languages/
                                        editormd.js
                                        ...

                            ```html
                            <!-- English -->
                            <script src="../dist/js/languages/en.js"></script>

                            <!-- 繁體中文 -->
                            <script src="../dist/js/languages/zh-tw.js"></script>
                            ```
                        , 2020-02-25 03:44:09.0, 2020-02-25 03:44:09.0, admin, 1]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20021, rs-50098} Result: [10, springboot, 飞哥, #大哥的Markdown, 2020-02-25 22:43:28.0, 2020-02-25 22:43:28.0, admin, 1]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20021, rs-50098} Result: [11, mybatis, 大哥, #飞哥的博客后台管理系统, 2020-02-25 22:49:26.0, 2020-02-25 22:49:26.0, admin, 1]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20021, rs-50098} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20021} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20022} created. select count(*) from `blog`
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20022} Parameters : []
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20022} Types : []
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20022} executed. 0.852888 millis. select count(*) from `blog`
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20022, rs-50100} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20022, rs-50100} Header: [count(*)]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20022, rs-50100} Result: [13]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20022, rs-50100} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20022} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20021} Parameters : [10, 10]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20021} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20021} executed. 0.747999 millis. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog
         
            limit ?,?
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20021, rs-50101} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20021, rs-50101} Header: [id, type_name, title, content, create_time, change_time, author, view]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20021, rs-50101} Result: [12, mybatis, 56, ##等待, 2020-02-25 22:50:53.0, 2020-02-25 22:50:53.0, admin, 5]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20021, rs-50101} Result: [13, mybatis, ssm1整合, # ssm整合

## 1、数据库环境

创建一个存放书籍数据的数据库表

```sql
CREATE DATABASE `ssmbuild`;

USE `ssmbuild`;

DROP TABLE IF EXISTS `books`;

CREATE TABLE `books` (
  `bookId` INT PRIMARY KEY COMMENT '书id',
  `bookName` VARCHAR(100) NOT NULL COMMENT '书名',
  `bookCounts` INT(11) NOT NULL COMMENT '数量',
  ``ssmbuild``ssmbuild`` VARCHAR(200) NOT NULL COMMENT '描述'
) ENGINE=INNODB DEFAULT CHARSET=utf8

INSERT  INTO `books`(`bookId`,`bookName`,`bookCounts`,`detail`)VALUES 
(1,'Java',1,'从入门到放弃'),
(2,'MySQL',10,'从删库到跑路'),
(3,'Linux',5,'从进门到进牢');

SELECT * FROM books
```

## 2、基本环境搭建

1. 新建一Maven项目！ ssmbuild ， 添加web的支持

   ![image-20200128134359317](.\ssm整合.assets\image-20200128134359317.png)

2. 导入相关的pom依赖！

   ```xml
   <dependencies>
       <!--Junit-->
       <dependency>
           <groupId>junit</groupId>
           <artifactId>junit</artifactId>
           <version>4.12</version>
       </dependency>
       <!--数据库驱动-->
       <dependency>
           <groupId>mysql</groupId>
           <artifactId>mysql-connector-java</artifactId>
           <version>5.1.47</version>
       </dependency>
       <!-- 数据库连接池 -->
       <dependency>
           <groupId>com.mchange</groupId>
           <artifactId>c3p0</artifactId>
           <version>0.9.5.2</version>
       </dependency>
   
       <!--Servlet - JSP -->
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>servlet-api</artifactId>
           <version>2.5</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet.jsp</groupId>
           <artifactId>jsp-api</artifactId>
           <version>2.2</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>jstl</artifactId>
           <version>1.2</version>
       </dependency>
   
       <!--Mybatis-->
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis</artifactId>
           <version>3.5.2</version>
       </dependency>
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis-spring</artifactId>
           <version>2.0.2</version>
       </dependency>
   
       <!--Spring-->
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-webmvc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-jdbc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->
       <dependency>
           <groupId>org.projectlombok</groupId>
           <artifactId>lombok</artifactId>
           <version>1.16.10</version>
       </dependency>
   </dependencies>
   ```

3. Maven资源过滤设置

   ```xml
   <build>
       <resources>
           <resource>
               <directory>src/main/java</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
           <resource>
               <directory>src/main/resources</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
       </resources>
   </build>
   ```

4. 建立基本结构和配置框架！

   - com.feige.pojo

   - com.feige.dao

   - com.feige.service

   - com.feige.controller

     在resources目录下创建

   - mybatis-config.xml

     ```xml
     <?xml version="1.0" encoding="UTF-8" ?>
     <!DOCTYPE configuration
             PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
             "http://mybatis.org/dtd/mybatis-3-config.dtd">
     <configuration>
     
     </configuration>
     ```

   - applicationContext.xml

     ```xml
     <?xml version="1.0" encoding="UTF-8"?>
     <beans xmlns="http://www.springframework.org/schema/beans"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://www.springframework.org/schema/beans
             http://www.springframework.org/schema/beans/spring-beans.xsd">
     
     </beans>
     ```

## 3、Mybatis层编写

1. 数据库配置文件 **database.properties**

   ```properties
   jdbc.driver=com.mysql.jdbc.Driver
   jdbc.url=jdbc:mysql://localhost:3306/ssmbuild?useSSL=true&useUnicode=true&characterEncoding=utf8
   jdbc.username=root
   jdbc.password=hufei169357
   ```

2. IDEA关联数据库

3. 编写MyBatis的核心配置文件

   ```xml
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE configuration
           PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-config.dtd">
   <configuration>
       
       <typeAliases>
           <package name="com.feige.pojo"/>
       </typeAliases>
       <mappers>
           <mapper resource="com/feige/dao/BookMapper.xml"/>
       </mappers>
   
   </configuration>
   ```

4. 编写数据库对应的实体类 com.feige.pojo.Books
   使用lombok插件！

   ```java
   package com.kuang.pojo;
   
   import lombok.AllArgsConstructor;
   import lombok.Data;
   import lombok.NoArgsConstructor;
   
   @Data
   @AllArgsConstructor
   @NoArgsConstructor
   public class Books {
       
       private int bookId;
       private String bookName;
       private int bookCounts;
       private String detail;
       
   }
   ```

5. 编写Dao层的 Mapper接口！

   ```java
   package com.kuang.dao;
   
   import com.kuang.pojo.Books;
   import java.util.List;
   
   public interface BookMapper {
   
       //增加一个Book
       int addBook(Books book);
   
       //根据id删除一个Book
       int deleteBookById(int id);
   
       //更新Book
       int updateBook(Books books);
   
       //根据id查询,返回一个Book
       Books queryBookById(int id);
   
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   
   }
   ```

6. 编写接口对应的 Mapper.xml 文件。需要导入MyBatis的包；

   ```xml
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE mapper
           PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
   
   <mapper namespace="com.feige.dao.BooksMapper">
   
       <!--增加一个Book-->
       <insert id="addBook" parameterType="Books">
           insert into books(bookName,bookCounts,detail)
           values (#{bookName}, #{bookCounts}, #{detail})
       </insert>
   
       <!--根据id删除一个Book-->
       <delete id="deleteBookById" parameterType="int">
           delete from books where bookId=#{bookId}
       </delete>
   
       <!--更新Book-->
       <update id="updateBook" parameterType="Books">
           update books
           set bookName = #{bookName},bookCounts = #{bookCounts},detail = #{detail}
           where bookId = #{bookId}
       </update>
   
       <!--根据id查询,返回一个Book-->
       <select id="queryBookById" resultType="Books">
           select * from books
           where bookID = #{bookId}
       </select>
   
       <!--查询全部Book-->
       <select id="queryAllBook" resultType="com.feige.pojo.Books">
           SELECT * from books
       </select>
   
   </mapper>
   ```

7. 编写Service层的接口和实现类
   接口：

   ```java
   package com.feige.service;
   
   import com.feige.pojo.Books;
   
   import java.util.List;
   
   //BookService:底下需要去实现,调用dao层
   public interface BookService {
       //增加一个Book
       int addBook(Books book);
       //根据id删除一个Book
       int deleteBookById(int id);
       //更新Book
       int updateBook(Books books);
       //根据id查询,返回一个Book
       Books queryBookById(int id);
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   }
   ```

实现类：

```java
package com.feige.service;

import com.feige.dao.BookMapper;
import com.feige.pojo.Books;
import java.util.List;

public class BookServiceImpl implements BookService {

    //调用dao层的操作，设置一个set接口，方便Spring管理
    private BookMapper bookMapper;

    public void setBookMapper(BookMapper bookMapper) {
        this.bookMapper = bookMapper;
    }
    
    public int addBook(Books book) {
        return bookMapper.addBook(book);
    }
    
    public int deleteBookById(int id) {
        return bookMapper.deleteBookById(id);
    }
    
    public int updateBook(Books books) {
        return bookMapper.updateBook(books);
    }
    
    public Books queryBookById(int id) {
        return bookMapper.queryBookById(id);
    }
    
    public List<Books> queryAllBook() {
        return bookMapper.queryAllBook();
    }
}
```

**OK，到此，底层需求操作编写完毕！**

## 4、Spring层

1. 配置**Spring整合MyBatis**，我们这里数据源使用c3p0连接池；

2. 我们去编写Spring整合Mybatis的相关的配置文件； spring-dao.xml

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans.xsd
   http://www.springframework.org/schema/context
   https://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 配置整合mybatis -->
       <!-- 1.关联数据库文件 -->
       <context:property-placeholder location="classpath:database.properties"/>
   
       <!-- 2.数据库连接池 -->
       <!--数据库连接池
   dbcp  半自动化操作  不能自动连接
   c3p0  自动化操作（自动的加载配置文件 并且设置到对象里面）
       -->
       <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
   <!-- 配置连接池属性 -->
   <property name="driverClass" value="${jdbc.driver}"/>
   <property name="jdbcUrl" value="${jdbc.url}"/>
   <property name="user" value="${jdbc.username}"/>
   <property name="password" value="${jdbc.password}"/>
   
   <!-- c3p0连接池的私有属性 -->
   <property name="maxPoolSize" value="30"/>
   <property name="minPoolSize" value="10"/>
   <!-- 关闭连接后不自动commit -->
   <property name="autoCommitOnClose" value="false"/>
   <!-- 获取连接超时时间 -->
   <property name="checkoutTimeout" value="10000"/>
   <!-- 当获取连接失败重试次数 -->
   <property name="acquireRetryAttempts" value="2"/>
       </bean>
   
       <!-- 3.配置SqlSessionFactory对象 -->
       <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource"/>
   <!-- 配置MyBaties全局配置文件:mybatis-config.xml -->
   <property name="configLocation" value="classpath:mybatis-config.xml"/>
       </bean>
   
       <!-- 4.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 -->
       <!--解释 ： https://www.cnblogs.com/jpfss/p/7799806.html-->
       <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
   <!-- 注入sqlSessionFactory -->
   <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
   <!-- 给出需要扫描Dao接口包 -->
   <property name="basePackage" value="com.feige.dao"/>
       </bean>
   
   </beans>
   ```

3. **Spring整合service层**

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 扫描service相关的bean -->
       <context:component-scan base-package="com.kuang.service" />
   
       <!--BookServiceImpl注入到IOC容器中-->
       <bean id="BookServiceImpl" class="com.kuang.service.BookServiceImpl">
   <property name="bookMapper" ref="bookMapper"/>
       </bean>
   
       <!-- 配置事务管理器 -->
       <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource" />
       </bean>
   
   </beans>
   ```

Spring层搞定！再次理解一下，Spring就是一个大杂烩，一个容器！对吧！

## 5、SpringMVC层

1. **web.xml**

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
            version="4.0">
   
       <!--DispatcherServlet-->
       <servlet>
           <servlet-name>DispatcherServlet</servlet-name>
           <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
           <init-param>
               <param-name>contextConfigLocation</param-name>
               <param-value>classpath:applicationContext.xml</param-value>
           </init-param>
           <load-on-startup>1</load-on-startup>
       </servlet>
       <servlet-mapping>
           <servlet-name>DispatcherServlet</servlet-name>
           <url-pattern>/</url-pattern>
       </servlet-mapping>
   
       <!--encodingFilter-->
       <filter>
           <filter-name>encodingFilter</filter-name>
           <filter-class>
               org.springframework.web.filter.CharacterEncodingFilter
           </filter-class>
           <init-param>
               <param-name>encoding</param-name>
               <param-value>utf-8</param-value>
           </init-param>
       </filter>
       <filter-mapping>
           <filter-name>encodingFilter</filter-name>
           <url-pattern>/*</url-pattern>
       </filter-mapping>
       
       <!--Session过期时间-->
       <session-config>
           <session-timeout>15</session-timeout>
       </session-config>
       
   </web-app>
   ```

2. **spring-mvc.xml**

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xmlns:mvc="http://www.springframework.org/schema/mvc"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       https://www.springframework.org/schema/mvc/spring-mvc.xsd">
   
       <!-- 配置SpringMVC -->
       <!-- 1.开启SpringMVC注解驱动 -->
       <mvc:annotation-driven>
           <mvc:message-converters register-defaults="true">
               <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                   <constructor-arg value="UTF-8"/>
               </bean>
               <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                   <property name="objectMapper">
                       <bean class="org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean">
                           <property name="failOnEmptyBeans" value="false"/>
                       </bean>
                   </property>
               </bean>
           </mvc:message-converters>
       </mvc:annotation-driven>
       <!--解决跨域问题-->
       <mvc:cors>
       <mvc:mapping path="/**"
                    allowed-origins="http://127.0.0.1:8090,http://localhost:8090"
                    allowed-methods="POST,GET, OPTIONS,DELETE,PUT"
                    allowed-headers="Content-Type,ContentType,Access-Control-Allow-Headers, Authorization, X-Requested-With"
                    allow-credentials="true"/>
       </mvc:cors>
       <!-- 2.静态资源默认servlet配置-->
       <mvc:default-servlet-handler/>
   
       <!-- 3.配置jsp 显示ViewResolver视图解析器 -->
       <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
           <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
           <property name="prefix" value="/WEB-INF/jsp/" />
           <property name="suffix" value=".jsp" />
       </bean>
   
       <!-- 4.扫描web相关的bean -->
       <context:component-scan base-package="com.feige.controller" />
   
   </beans>
   ```

3. **Spring配置整合文件，applicationContext.xml**

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd">
   
       <import resource="spring-dao.xml"/>
       <import resource="spring-service.xml"/>
       <import resource="spring-mvc.xml"/>
       
   </beans>
   ```

**配置文件，暂时结束！Controller 和 视图层编写**

1. BookController 类编写 ， 方法一：查询全部书籍

   ```java
   @Controller
   @RequestMapping("/book")
   public class BookController {
   
       @Autowired
       @Qualifier("BookServiceImpl")
       private BookService bookService;
   
       @RequestMapping("/allBook")
       public String list(Model model) {
           List<Books> list = bookService.queryAllBook();
           model.addAttribute("list", list);
           return "allBook";
       }
   }
   ```

2. 编写首页 **index.jsp**

   ```html
   <%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" %>
   <!DOCTYPE HTML>
   <html>
   <head>
       <title>首页</title>
       <style type="text/css">
           a {
               text-decoration: none;
               color: black;
               font-size: 18px;
           }
           h3 {
               width: 180px;
               height: 38px;
               margin: 100px auto;
               text-align: center;
               line-height: 38px;
               background: deepskyblue;
               border-radius: 4px;
           }
       </style>
   </head>
   <body>
   
   <h3>
       <a href="${pageContext.request.contextPath}/book/allBook">点击进入列表页</a>
   </h3>
   </body>
   </html>
   ```

3. 书籍列表页面 **allbook.jsp**

   ```jsp
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>书籍列表</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>书籍列表 —— 显示所有书籍</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <div class="row">
           <div class="col-md-4 column">
               <a class="btn btn-primary" href="${pageContext.request.contextPath}/book/toAddBook">新增</a>
           </div>
       </div>
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <table class="table table-hover table-striped">
                   <thead>
                   <tr>
                       <th>书籍编号</th>
                       <th>书籍名字</th>
                       <th>书籍数量</th>
                       <th>书籍详情</th>
                       <th>操作</th>
                   </tr>
                   </thead>
   
                   <tbody>
                   <c:forEach var="book" items="${requestScope.get('list')}">
                       <tr>
                           <td>${book.getBookId()}</td>
                           <td>${book.getBookName()}</td>
                           <td>${book.getBookCounts()}</td>
                           <td>${book.getDetail()}</td>
                           <td>
                               <a href="${pageContext.request.contextPath}/book/toUpdateBook?id=${book.getBookId()}">更改</a> |
                               <a href="${pageContext.request.contextPath}/book/del/${book.getBookId()}">删除</a>
                           </td>
                       </tr>
                   </c:forEach>
                   </tbody>
               </table>
           </div>
       </div>
   </div>
   ```

4. BookController 类编写 ， 方法二：添加书籍

   ```java
   @RequestMapping("/toAddBook")
   public String toAddPaper() {
       return "addBook";
   }
   
   @RequestMapping("/addBook")
   public String addPaper(Books books) {
       System.out.println(books);
       bookService.addBook(books);
       return "redirect:/book/allBook";
   }
   ```

5. 添加书籍页面：**addBook.jsp**

   ```jsp
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   
   <html>
   <head>
       <title>新增书籍</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>新增书籍</small>
                   </h1>
               </div>
           </div>
       </div>
       <form action="${pageContext.request.contextPath}/book/addBook" method="post">
           书籍名称：<input type="text" name="bookName"><br><br><br>
           书籍数量：<input type="text" name="bookCounts"><br><br><br>
           书籍详情：<input type="text" name="detail"><br><br><br>
           <input type="submit" value="添加">
       </form>
   
   </div>
   ```

6. BookController 类编写 ， 方法三：修改书籍

   ```java
   @RequestMapping("/toUpdateBook")
   public String toUpdateBook(Model model, int id) {
       Books books = bookService.queryBookById(id);
       System.out.println(books);
       model.addAttribute("book",books );
       return "updateBook";
   }
   
   @RequestMapping("/updateBook")
   public String updateBook(Model model, Books book) {
       bookService.updateBook(book);
       Books books = bookService.queryBookById(book.getBookID());
       model.addAttribute("books", books);
       return "redirect:/book/allBook";
   }
   ```

7. 修改书籍页面 **updateBook.jsp**

   ```jsp
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>修改信息</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>修改信息</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <form action="${pageContext.request.contextPath}/book/updateBook" method="post">
           <input type="hidden" name="bookID" value="${book.getBookId()}"/>
           书籍名称：<input type="text" name="bookName" value="${book.getBookName()}"/>
           书籍数量：<input type="text" name="bookCounts" value="${book.getBookCounts()}"/>
           书籍详情：<input type="text" name="detail" value="${book.getDetail() }"/>
           <input type="submit" value="提交"/>
       </form>
   
   </div>
   ```

8. BookController 类编写 ， 方法四：删除书籍

   ```java
   @RequestMapping("/del/{bookId}")
   public String deleteBook(@PathVariable("bookId") int id) {
       bookService.deleteBookById(id);
       return "redirect:/book/allBook";
   }
   ```

**配置Tomcat，进行运行！**

到目前为止，这个SSM项目整合已经完全的OK了，可以直接运行进行测试！这个练习十分的重要，大家需要保证，不看任何东西，自己也可以完整的实现出来！

## **6、项目结构图**

![1570186854191.png](https://blog.kuangstudy.com/usr/uploads/2019/10/1086489242.png)

![1570186868239.png](https://blog.kuangstudy.com/usr/uploads/2019/10/2326667495.png)

## 7、错误排查

### 1、访问出现404，排查步骤：**

1. 查看控制台输出，看一下是不是缺少了什么jar包。

2. 如果jar包存在，显示无法输出，就在IDEA的项目发布中，添加lib依赖！

   步骤：点击项目结构----->Artifacts----->点击自己的项目(ssm:war exploded)--->(点击工具栏的第一个)在WEB-INF目录下新建一个lib包----->选中lib------>点击工具栏的第三个然后选中第一个---->把里面的包全部选中点击ok---->点击Apply再ok

   ![image-20200128125126368](E:\Java资料\ssm整合.assets\image-20200128125126368.png)

   ![image-20200128125237179](E:\Java资料\ssm整合.assets\image-20200128125237179.png)

3. 重启Tomcat 即可解决！

### 2、其他错误

#### 1、bean不存在

​	步骤：

​		查看bean注入是否成功 

​		junit单元测试，看我们的代码是否能够查询出来

​		问题不在底层，是我们spring出了问题

​		springMVC整合时没有调用到service层的bean

​			applicationContext.xml没有注册bean

​			web.xml也绑定过配置文件要绑定大的applicationContext.xml

​			

## 8、小结及展望

这个是同学们的第一个SSM整合案例，一定要烂熟于心！

SSM框架的重要程度是不言而喻的，学到这里，大家已经可以进行基本网站的单独开发。但是这只是增删改查的基本操作。可以说学到这里，大家才算是真正的步入了后台开发的门。也就是能找一个后台相关工作的底线。

或许很多人，工作就做这些事情，但是对于个人的提高来说，还远远不够！, 2020-03-02 07:06:53.0, 2020-03-23 19:38:47.0, null, 10]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20021, rs-50101} Result: [17, springboot, , ss, 2020-02-24 03:07:20.0, 2020-03-20 00:07:13.0, admin, 11]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20021, rs-50101} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20021} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20022} Parameters : []
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20022} Types : []
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20022} executed. 0.605777 millis. select count(*) from `blog`
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20022, rs-50102} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20022, rs-50102} Header: [count(*)]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20022, rs-50102} Result: [13]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20022, rs-50102} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20022} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20010} Parameters : [13]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} Parameters : [0, 30]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20010} Types : [INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Connection]{conn-10003} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20011} Parameters : [13]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20011} Types : [INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20010} executed. 1.279999 millis. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog where id=?
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} executed. 1.27911 millis. select id,type_name typeName
        from `type`
         
            limit ?,?
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20010, rs-50103} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50104} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20010, rs-50103} Header: [id, type_name, title, content, create_time, change_time, author, view]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50104} Header: [id, type_name]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50104} Result: [3, mybatis]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50104} Result: [2, spring]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20010, rs-50103} Result: [13, mybatis, ssm1整合, # ssm整合

## 1、数据库环境

创建一个存放书籍数据的数据库表

```sql
CREATE DATABASE `ssmbuild`;

USE `ssmbuild`;

DROP TABLE IF EXISTS `books`;

CREATE TABLE `books` (
  `bookId` INT PRIMARY KEY COMMENT '书id',
  `bookName` VARCHAR(100) NOT NULL COMMENT '书名',
  `bookCounts` INT(11) NOT NULL COMMENT '数量',
  ``ssmbuild``ssmbuild`` VARCHAR(200) NOT NULL COMMENT '描述'
) ENGINE=INNODB DEFAULT CHARSET=utf8

INSERT  INTO `books`(`bookId`,`bookName`,`bookCounts`,`detail`)VALUES 
(1,'Java',1,'从入门到放弃'),
(2,'MySQL',10,'从删库到跑路'),
(3,'Linux',5,'从进门到进牢');

SELECT * FROM books
```

## 2、基本环境搭建

1. 新建一Maven项目！ ssmbuild ， 添加web的支持

   ![image-20200128134359317](.\ssm整合.assets\image-20200128134359317.png)

2. 导入相关的pom依赖！

   ```xml
   <dependencies>
       <!--Junit-->
       <dependency>
           <groupId>junit</groupId>
           <artifactId>junit</artifactId>
           <version>4.12</version>
       </dependency>
       <!--数据库驱动-->
       <dependency>
           <groupId>mysql</groupId>
           <artifactId>mysql-connector-java</artifactId>
           <version>5.1.47</version>
       </dependency>
       <!-- 数据库连接池 -->
       <dependency>
           <groupId>com.mchange</groupId>
           <artifactId>c3p0</artifactId>
           <version>0.9.5.2</version>
       </dependency>
   
       <!--Servlet - JSP -->
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>servlet-api</artifactId>
           <version>2.5</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet.jsp</groupId>
           <artifactId>jsp-api</artifactId>
           <version>2.2</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>jstl</artifactId>
           <version>1.2</version>
       </dependency>
   
       <!--Mybatis-->
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis</artifactId>
           <version>3.5.2</version>
       </dependency>
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis-spring</artifactId>
           <version>2.0.2</version>
       </dependency>
   
       <!--Spring-->
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-webmvc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-jdbc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->
       <dependency>
           <groupId>org.projectlombok</groupId>
           <artifactId>lombok</artifactId>
           <version>1.16.10</version>
       </dependency>
   </dependencies>
   ```

3. Maven资源过滤设置

   ```xml
   <build>
       <resources>
           <resource>
               <directory>src/main/java</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
           <resource>
               <directory>src/main/resources</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
       </resources>
   </build>
   ```

4. 建立基本结构和配置框架！

   - com.feige.pojo

   - com.feige.dao

   - com.feige.service

   - com.feige.controller

     在resources目录下创建

   - mybatis-config.xml

     ```xml
     <?xml version="1.0" encoding="UTF-8" ?>
     <!DOCTYPE configuration
             PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
             "http://mybatis.org/dtd/mybatis-3-config.dtd">
     <configuration>
     
     </configuration>
     ```

   - applicationContext.xml

     ```xml
     <?xml version="1.0" encoding="UTF-8"?>
     <beans xmlns="http://www.springframework.org/schema/beans"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://www.springframework.org/schema/beans
             http://www.springframework.org/schema/beans/spring-beans.xsd">
     
     </beans>
     ```

## 3、Mybatis层编写

1. 数据库配置文件 **database.properties**

   ```properties
   jdbc.driver=com.mysql.jdbc.Driver
   jdbc.url=jdbc:mysql://localhost:3306/ssmbuild?useSSL=true&useUnicode=true&characterEncoding=utf8
   jdbc.username=root
   jdbc.password=hufei169357
   ```

2. IDEA关联数据库

3. 编写MyBatis的核心配置文件

   ```xml
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE configuration
           PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-config.dtd">
   <configuration>
       
       <typeAliases>
           <package name="com.feige.pojo"/>
       </typeAliases>
       <mappers>
           <mapper resource="com/feige/dao/BookMapper.xml"/>
       </mappers>
   
   </configuration>
   ```

4. 编写数据库对应的实体类 com.feige.pojo.Books
   使用lombok插件！

   ```java
   package com.kuang.pojo;
   
   import lombok.AllArgsConstructor;
   import lombok.Data;
   import lombok.NoArgsConstructor;
   
   @Data
   @AllArgsConstructor
   @NoArgsConstructor
   public class Books {
       
       private int bookId;
       private String bookName;
       private int bookCounts;
       private String detail;
       
   }
   ```

5. 编写Dao层的 Mapper接口！

   ```java
   package com.kuang.dao;
   
   import com.kuang.pojo.Books;
   import java.util.List;
   
   public interface BookMapper {
   
       //增加一个Book
       int addBook(Books book);
   
       //根据id删除一个Book
       int deleteBookById(int id);
   
       //更新Book
       int updateBook(Books books);
   
       //根据id查询,返回一个Book
       Books queryBookById(int id);
   
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   
   }
   ```

6. 编写接口对应的 Mapper.xml 文件。需要导入MyBatis的包；

   ```xml
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE mapper
           PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
   
   <mapper namespace="com.feige.dao.BooksMapper">
   
       <!--增加一个Book-->
       <insert id="addBook" parameterType="Books">
           insert into books(bookName,bookCounts,detail)
           values (#{bookName}, #{bookCounts}, #{detail})
       </insert>
   
       <!--根据id删除一个Book-->
       <delete id="deleteBookById" parameterType="int">
           delete from books where bookId=#{bookId}
       </delete>
   
       <!--更新Book-->
       <update id="updateBook" parameterType="Books">
           update books
           set bookName = #{bookName},bookCounts = #{bookCounts},detail = #{detail}
           where bookId = #{bookId}
       </update>
   
       <!--根据id查询,返回一个Book-->
       <select id="queryBookById" resultType="Books">
           select * from books
           where bookID = #{bookId}
       </select>
   
       <!--查询全部Book-->
       <select id="queryAllBook" resultType="com.feige.pojo.Books">
           SELECT * from books
       </select>
   
   </mapper>
   ```

7. 编写Service层的接口和实现类
   接口：

   ```java
   package com.feige.service;
   
   import com.feige.pojo.Books;
   
   import java.util.List;
   
   //BookService:底下需要去实现,调用dao层
   public interface BookService {
       //增加一个Book
       int addBook(Books book);
       //根据id删除一个Book
       int deleteBookById(int id);
       //更新Book
       int updateBook(Books books);
       //根据id查询,返回一个Book
       Books queryBookById(int id);
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   }
   ```

实现类：

```java
package com.feige.service;

import com.feige.dao.BookMapper;
import com.feige.pojo.Books;
import java.util.List;

public class BookServiceImpl implements BookService {

    //调用dao层的操作，设置一个set接口，方便Spring管理
    private BookMapper bookMapper;

    public void setBookMapper(BookMapper bookMapper) {
        this.bookMapper = bookMapper;
    }
    
    public int addBook(Books book) {
        return bookMapper.addBook(book);
    }
    
    public int deleteBookById(int id) {
        return bookMapper.deleteBookById(id);
    }
    
    public int updateBook(Books books) {
        return bookMapper.updateBook(books);
    }
    
    public Books queryBookById(int id) {
        return bookMapper.queryBookById(id);
    }
    
    public List<Books> queryAllBook() {
        return bookMapper.queryAllBook();
    }
}
```

**OK，到此，底层需求操作编写完毕！**

## 4、Spring层

1. 配置**Spring整合MyBatis**，我们这里数据源使用c3p0连接池；

2. 我们去编写Spring整合Mybatis的相关的配置文件； spring-dao.xml

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans.xsd
   http://www.springframework.org/schema/context
   https://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 配置整合mybatis -->
       <!-- 1.关联数据库文件 -->
       <context:property-placeholder location="classpath:database.properties"/>
   
       <!-- 2.数据库连接池 -->
       <!--数据库连接池
   dbcp  半自动化操作  不能自动连接
   c3p0  自动化操作（自动的加载配置文件 并且设置到对象里面）
       -->
       <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
   <!-- 配置连接池属性 -->
   <property name="driverClass" value="${jdbc.driver}"/>
   <property name="jdbcUrl" value="${jdbc.url}"/>
   <property name="user" value="${jdbc.username}"/>
   <property name="password" value="${jdbc.password}"/>
   
   <!-- c3p0连接池的私有属性 -->
   <property name="maxPoolSize" value="30"/>
   <property name="minPoolSize" value="10"/>
   <!-- 关闭连接后不自动commit -->
   <property name="autoCommitOnClose" value="false"/>
   <!-- 获取连接超时时间 -->
   <property name="checkoutTimeout" value="10000"/>
   <!-- 当获取连接失败重试次数 -->
   <property name="acquireRetryAttempts" value="2"/>
       </bean>
   
       <!-- 3.配置SqlSessionFactory对象 -->
       <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource"/>
   <!-- 配置MyBaties全局配置文件:mybatis-config.xml -->
   <property name="configLocation" value="classpath:mybatis-config.xml"/>
       </bean>
   
       <!-- 4.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 -->
       <!--解释 ： https://www.cnblogs.com/jpfss/p/7799806.html-->
       <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
   <!-- 注入sqlSessionFactory -->
   <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
   <!-- 给出需要扫描Dao接口包 -->
   <property name="basePackage" value="com.feige.dao"/>
       </bean>
   
   </beans>
   ```

3. **Spring整合service层**

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 扫描service相关的bean -->
       <context:component-scan base-package="com.kuang.service" />
   
       <!--BookServiceImpl注入到IOC容器中-->
       <bean id="BookServiceImpl" class="com.kuang.service.BookServiceImpl">
   <property name="bookMapper" ref="bookMapper"/>
       </bean>
   
       <!-- 配置事务管理器 -->
       <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource" />
       </bean>
   
   </beans>
   ```

Spring层搞定！再次理解一下，Spring就是一个大杂烩，一个容器！对吧！

## 5、SpringMVC层

1. **web.xml**

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
            version="4.0">
   
       <!--DispatcherServlet-->
       <servlet>
           <servlet-name>DispatcherServlet</servlet-name>
           <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
           <init-param>
               <param-name>contextConfigLocation</param-name>
               <param-value>classpath:applicationContext.xml</param-value>
           </init-param>
           <load-on-startup>1</load-on-startup>
       </servlet>
       <servlet-mapping>
           <servlet-name>DispatcherServlet</servlet-name>
           <url-pattern>/</url-pattern>
       </servlet-mapping>
   
       <!--encodingFilter-->
       <filter>
           <filter-name>encodingFilter</filter-name>
           <filter-class>
               org.springframework.web.filter.CharacterEncodingFilter
           </filter-class>
           <init-param>
               <param-name>encoding</param-name>
               <param-value>utf-8</param-value>
           </init-param>
       </filter>
       <filter-mapping>
           <filter-name>encodingFilter</filter-name>
           <url-pattern>/*</url-pattern>
       </filter-mapping>
       
       <!--Session过期时间-->
       <session-config>
           <session-timeout>15</session-timeout>
       </session-config>
       
   </web-app>
   ```

2. **spring-mvc.xml**

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xmlns:mvc="http://www.springframework.org/schema/mvc"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       https://www.springframework.org/schema/mvc/spring-mvc.xsd">
   
       <!-- 配置SpringMVC -->
       <!-- 1.开启SpringMVC注解驱动 -->
       <mvc:annotation-driven>
           <mvc:message-converters register-defaults="true">
               <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                   <constructor-arg value="UTF-8"/>
               </bean>
               <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                   <property name="objectMapper">
                       <bean class="org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean">
                           <property name="failOnEmptyBeans" value="false"/>
                       </bean>
                   </property>
               </bean>
           </mvc:message-converters>
       </mvc:annotation-driven>
       <!--解决跨域问题-->
       <mvc:cors>
       <mvc:mapping path="/**"
                    allowed-origins="http://127.0.0.1:8090,http://localhost:8090"
                    allowed-methods="POST,GET, OPTIONS,DELETE,PUT"
                    allowed-headers="Content-Type,ContentType,Access-Control-Allow-Headers, Authorization, X-Requested-With"
                    allow-credentials="true"/>
       </mvc:cors>
       <!-- 2.静态资源默认servlet配置-->
       <mvc:default-servlet-handler/>
   
       <!-- 3.配置jsp 显示ViewResolver视图解析器 -->
       <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
           <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
           <property name="prefix" value="/WEB-INF/jsp/" />
           <property name="suffix" value=".jsp" />
       </bean>
   
       <!-- 4.扫描web相关的bean -->
       <context:component-scan base-package="com.feige.controller" />
   
   </beans>
   ```

3. **Spring配置整合文件，applicationContext.xml**

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd">
   
       <import resource="spring-dao.xml"/>
       <import resource="spring-service.xml"/>
       <import resource="spring-mvc.xml"/>
       
   </beans>
   ```

**配置文件，暂时结束！Controller 和 视图层编写**

1. BookController 类编写 ， 方法一：查询全部书籍

   ```java
   @Controller
   @RequestMapping("/book")
   public class BookController {
   
       @Autowired
       @Qualifier("BookServiceImpl")
       private BookService bookService;
   
       @RequestMapping("/allBook")
       public String list(Model model) {
           List<Books> list = bookService.queryAllBook();
           model.addAttribute("list", list);
           return "allBook";
       }
   }
   ```

2. 编写首页 **index.jsp**

   ```html
   <%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" %>
   <!DOCTYPE HTML>
   <html>
   <head>
       <title>首页</title>
       <style type="text/css">
           a {
               text-decoration: none;
               color: black;
               font-size: 18px;
           }
           h3 {
               width: 180px;
               height: 38px;
               margin: 100px auto;
               text-align: center;
               line-height: 38px;
               background: deepskyblue;
               border-radius: 4px;
           }
       </style>
   </head>
   <body>
   
   <h3>
       <a href="${pageContext.request.contextPath}/book/allBook">点击进入列表页</a>
   </h3>
   </body>
   </html>
   ```

3. 书籍列表页面 **allbook.jsp**

   ```jsp
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>书籍列表</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>书籍列表 —— 显示所有书籍</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <div class="row">
           <div class="col-md-4 column">
               <a class="btn btn-primary" href="${pageContext.request.contextPath}/book/toAddBook">新增</a>
           </div>
       </div>
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <table class="table table-hover table-striped">
                   <thead>
                   <tr>
                       <th>书籍编号</th>
                       <th>书籍名字</th>
                       <th>书籍数量</th>
                       <th>书籍详情</th>
                       <th>操作</th>
                   </tr>
                   </thead>
   
                   <tbody>
                   <c:forEach var="book" items="${requestScope.get('list')}">
                       <tr>
                           <td>${book.getBookId()}</td>
                           <td>${book.getBookName()}</td>
                           <td>${book.getBookCounts()}</td>
                           <td>${book.getDetail()}</td>
                           <td>
                               <a href="${pageContext.request.contextPath}/book/toUpdateBook?id=${book.getBookId()}">更改</a> |
                               <a href="${pageContext.request.contextPath}/book/del/${book.getBookId()}">删除</a>
                           </td>
                       </tr>
                   </c:forEach>
                   </tbody>
               </table>
           </div>
       </div>
   </div>
   ```

4. BookController 类编写 ， 方法二：添加书籍

   ```java
   @RequestMapping("/toAddBook")
   public String toAddPaper() {
       return "addBook";
   }
   
   @RequestMapping("/addBook")
   public String addPaper(Books books) {
       System.out.println(books);
       bookService.addBook(books);
       return "redirect:/book/allBook";
   }
   ```

5. 添加书籍页面：**addBook.jsp**

   ```jsp
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   
   <html>
   <head>
       <title>新增书籍</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>新增书籍</small>
                   </h1>
               </div>
           </div>
       </div>
       <form action="${pageContext.request.contextPath}/book/addBook" method="post">
           书籍名称：<input type="text" name="bookName"><br><br><br>
           书籍数量：<input type="text" name="bookCounts"><br><br><br>
           书籍详情：<input type="text" name="detail"><br><br><br>
           <input type="submit" value="添加">
       </form>
   
   </div>
   ```

6. BookController 类编写 ， 方法三：修改书籍

   ```java
   @RequestMapping("/toUpdateBook")
   public String toUpdateBook(Model model, int id) {
       Books books = bookService.queryBookById(id);
       System.out.println(books);
       model.addAttribute("book",books );
       return "updateBook";
   }
   
   @RequestMapping("/updateBook")
   public String updateBook(Model model, Books book) {
       bookService.updateBook(book);
       Books books = bookService.queryBookById(book.getBookID());
       model.addAttribute("books", books);
       return "redirect:/book/allBook";
   }
   ```

7. 修改书籍页面 **updateBook.jsp**

   ```jsp
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>修改信息</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>修改信息</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <form action="${pageContext.request.contextPath}/book/updateBook" method="post">
           <input type="hidden" name="bookID" value="${book.getBookId()}"/>
           书籍名称：<input type="text" name="bookName" value="${book.getBookName()}"/>
           书籍数量：<input type="text" name="bookCounts" value="${book.getBookCounts()}"/>
           书籍详情：<input type="text" name="detail" value="${book.getDetail() }"/>
           <input type="submit" value="提交"/>
       </form>
   
   </div>
   ```

8. BookController 类编写 ， 方法四：删除书籍

   ```java
   @RequestMapping("/del/{bookId}")
   public String deleteBook(@PathVariable("bookId") int id) {
       bookService.deleteBookById(id);
       return "redirect:/book/allBook";
   }
   ```

**配置Tomcat，进行运行！**

到目前为止，这个SSM项目整合已经完全的OK了，可以直接运行进行测试！这个练习十分的重要，大家需要保证，不看任何东西，自己也可以完整的实现出来！

## **6、项目结构图**

![1570186854191.png](https://blog.kuangstudy.com/usr/uploads/2019/10/1086489242.png)

![1570186868239.png](https://blog.kuangstudy.com/usr/uploads/2019/10/2326667495.png)

## 7、错误排查

### 1、访问出现404，排查步骤：**

1. 查看控制台输出，看一下是不是缺少了什么jar包。

2. 如果jar包存在，显示无法输出，就在IDEA的项目发布中，添加lib依赖！

   步骤：点击项目结构----->Artifacts----->点击自己的项目(ssm:war exploded)--->(点击工具栏的第一个)在WEB-INF目录下新建一个lib包----->选中lib------>点击工具栏的第三个然后选中第一个---->把里面的包全部选中点击ok---->点击Apply再ok

   ![image-20200128125126368](E:\Java资料\ssm整合.assets\image-20200128125126368.png)

   ![image-20200128125237179](E:\Java资料\ssm整合.assets\image-20200128125237179.png)

3. 重启Tomcat 即可解决！

### 2、其他错误

#### 1、bean不存在

​	步骤：

​		查看bean注入是否成功 

​		junit单元测试，看我们的代码是否能够查询出来

​		问题不在底层，是我们spring出了问题

​		springMVC整合时没有调用到service层的bean

​			applicationContext.xml没有注册bean

​			web.xml也绑定过配置文件要绑定大的applicationContext.xml

​			

## 8、小结及展望

这个是同学们的第一个SSM整合案例，一定要烂熟于心！

SSM框架的重要程度是不言而喻的，学到这里，大家已经可以进行基本网站的单独开发。但是这只是增删改查的基本操作。可以说学到这里，大家才算是真正的步入了后台开发的门。也就是能找一个后台相关工作的底线。

或许很多人，工作就做这些事情，但是对于个人的提高来说，还远远不够！, 2020-03-02 07:06:53.0, 2020-03-23 19:38:47.0, null, 10]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50104} Result: [1, springboot]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50104} Result: [4, springMVC]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50104} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} clearParameters. 
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20010, rs-50103} closed
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20010} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20011} executed. 2.665776 millis. select distinct count(*) from comments c
        where c.blog_id=? and
        c.parent_id is null;
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20011, rs-50105} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20011, rs-50105} Header: [count(*)]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20008} Parameters : []
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20008} Types : []
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20011, rs-50105} Result: [3]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20011, rs-50105} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20011} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10003} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10003} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20012} Parameters : [13, 0, 10]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20012} Types : [INTEGER, INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20008} executed. 7.900882 millis. select count(*) from `type`
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50106} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50106} Header: [count(*)]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50106} Result: [4]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20008, rs-50106} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20008} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20012} executed. 4.10044 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id  and
        c.parent_id is null limit ?,?;;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20012, rs-50107} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20012, rs-50107} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20012, rs-50107} Result: [26, 好好, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:35.0, null]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20012, rs-50107} Result: [29, 太好了, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:13.0, null]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20012, rs-50107} Result: [32, <p>feige</p>, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 01:33:26.0, null]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20012, rs-50107} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20012} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10003} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10003} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20013} Parameters : [13, 26]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20013} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20013} executed. 4.719551 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20013, rs-50108} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20013, rs-50108} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20013, rs-50108} Result: [27, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:56.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20013, rs-50108} Result: [28, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:43:03.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20013, rs-50108} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20013} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10003} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10003} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20013} Parameters : [13, 26]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20013} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20013} executed. 3.904886 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20013, rs-50109} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20013, rs-50109} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20013, rs-50109} Result: [27, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:56.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20013, rs-50109} Result: [28, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:43:03.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20013, rs-50109} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20013} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10003} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10003} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20013} Parameters : [13, 27]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20013} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20013} executed. 0.675999 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20013, rs-50110} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20013, rs-50110} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20013, rs-50110} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20013} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10003} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10003} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20013} Parameters : [13, 27]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20013} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20013} executed. 0.802666 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20013, rs-50111} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20013, rs-50111} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20013, rs-50111} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20013} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10003} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10003} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20013} Parameters : [13, 29]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20013} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20013} executed. 3.744886 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20013, rs-50112} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20013, rs-50112} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20013, rs-50112} Result: [30, 谢谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:43.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20013, rs-50112} Result: [31, 不用谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:47:01.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20013, rs-50112} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20013} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10003} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10003} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20013} Parameters : [13, 29]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20013} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20013} executed. 3.428886 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20013, rs-50113} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20013, rs-50113} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20013, rs-50113} Result: [30, 谢谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:43.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20013, rs-50113} Result: [31, 不用谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:47:01.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20013, rs-50113} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20013} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10003} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10003} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20013} Parameters : [13, 30]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20013} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20013} executed. 0.858222 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20013, rs-50114} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20013, rs-50114} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20013, rs-50114} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20013} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10003} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10003} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20013} Parameters : [13, 30]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20013} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20013} executed. 0.550666 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20013, rs-50115} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20013, rs-50115} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20013, rs-50115} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20013} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10003} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10003} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20013} Parameters : [13, 32]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20013} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20013} executed. 0.508444 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20013, rs-50116} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20013, rs-50116} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20013, rs-50116} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20013} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10003} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10003} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20003} Parameters : [13]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20003} Types : [INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20003} executed. 1.123554 millis. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog where id=?
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20003, rs-50117} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20003, rs-50117} Header: [id, type_name, title, content, create_time, change_time, author, view]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20003, rs-50117} Result: [13, mybatis, ssm1整合, # ssm整合

## 1、数据库环境

创建一个存放书籍数据的数据库表

```sql
CREATE DATABASE `ssmbuild`;

USE `ssmbuild`;

DROP TABLE IF EXISTS `books`;

CREATE TABLE `books` (
  `bookId` INT PRIMARY KEY COMMENT '书id',
  `bookName` VARCHAR(100) NOT NULL COMMENT '书名',
  `bookCounts` INT(11) NOT NULL COMMENT '数量',
  ``ssmbuild``ssmbuild`` VARCHAR(200) NOT NULL COMMENT '描述'
) ENGINE=INNODB DEFAULT CHARSET=utf8

INSERT  INTO `books`(`bookId`,`bookName`,`bookCounts`,`detail`)VALUES 
(1,'Java',1,'从入门到放弃'),
(2,'MySQL',10,'从删库到跑路'),
(3,'Linux',5,'从进门到进牢');

SELECT * FROM books
```

## 2、基本环境搭建

1. 新建一Maven项目！ ssmbuild ， 添加web的支持

   ![image-20200128134359317](.\ssm整合.assets\image-20200128134359317.png)

2. 导入相关的pom依赖！

   ```xml
   <dependencies>
       <!--Junit-->
       <dependency>
           <groupId>junit</groupId>
           <artifactId>junit</artifactId>
           <version>4.12</version>
       </dependency>
       <!--数据库驱动-->
       <dependency>
           <groupId>mysql</groupId>
           <artifactId>mysql-connector-java</artifactId>
           <version>5.1.47</version>
       </dependency>
       <!-- 数据库连接池 -->
       <dependency>
           <groupId>com.mchange</groupId>
           <artifactId>c3p0</artifactId>
           <version>0.9.5.2</version>
       </dependency>
   
       <!--Servlet - JSP -->
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>servlet-api</artifactId>
           <version>2.5</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet.jsp</groupId>
           <artifactId>jsp-api</artifactId>
           <version>2.2</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>jstl</artifactId>
           <version>1.2</version>
       </dependency>
   
       <!--Mybatis-->
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis</artifactId>
           <version>3.5.2</version>
       </dependency>
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis-spring</artifactId>
           <version>2.0.2</version>
       </dependency>
   
       <!--Spring-->
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-webmvc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-jdbc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->
       <dependency>
           <groupId>org.projectlombok</groupId>
           <artifactId>lombok</artifactId>
           <version>1.16.10</version>
       </dependency>
   </dependencies>
   ```

3. Maven资源过滤设置

   ```xml
   <build>
       <resources>
           <resource>
               <directory>src/main/java</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
           <resource>
               <directory>src/main/resources</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
       </resources>
   </build>
   ```

4. 建立基本结构和配置框架！

   - com.feige.pojo

   - com.feige.dao

   - com.feige.service

   - com.feige.controller

     在resources目录下创建

   - mybatis-config.xml

     ```xml
     <?xml version="1.0" encoding="UTF-8" ?>
     <!DOCTYPE configuration
             PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
             "http://mybatis.org/dtd/mybatis-3-config.dtd">
     <configuration>
     
     </configuration>
     ```

   - applicationContext.xml

     ```xml
     <?xml version="1.0" encoding="UTF-8"?>
     <beans xmlns="http://www.springframework.org/schema/beans"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://www.springframework.org/schema/beans
             http://www.springframework.org/schema/beans/spring-beans.xsd">
     
     </beans>
     ```

## 3、Mybatis层编写

1. 数据库配置文件 **database.properties**

   ```properties
   jdbc.driver=com.mysql.jdbc.Driver
   jdbc.url=jdbc:mysql://localhost:3306/ssmbuild?useSSL=true&useUnicode=true&characterEncoding=utf8
   jdbc.username=root
   jdbc.password=hufei169357
   ```

2. IDEA关联数据库

3. 编写MyBatis的核心配置文件

   ```xml
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE configuration
           PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-config.dtd">
   <configuration>
       
       <typeAliases>
           <package name="com.feige.pojo"/>
       </typeAliases>
       <mappers>
           <mapper resource="com/feige/dao/BookMapper.xml"/>
       </mappers>
   
   </configuration>
   ```

4. 编写数据库对应的实体类 com.feige.pojo.Books
   使用lombok插件！

   ```java
   package com.kuang.pojo;
   
   import lombok.AllArgsConstructor;
   import lombok.Data;
   import lombok.NoArgsConstructor;
   
   @Data
   @AllArgsConstructor
   @NoArgsConstructor
   public class Books {
       
       private int bookId;
       private String bookName;
       private int bookCounts;
       private String detail;
       
   }
   ```

5. 编写Dao层的 Mapper接口！

   ```java
   package com.kuang.dao;
   
   import com.kuang.pojo.Books;
   import java.util.List;
   
   public interface BookMapper {
   
       //增加一个Book
       int addBook(Books book);
   
       //根据id删除一个Book
       int deleteBookById(int id);
   
       //更新Book
       int updateBook(Books books);
   
       //根据id查询,返回一个Book
       Books queryBookById(int id);
   
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   
   }
   ```

6. 编写接口对应的 Mapper.xml 文件。需要导入MyBatis的包；

   ```xml
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE mapper
           PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
   
   <mapper namespace="com.feige.dao.BooksMapper">
   
       <!--增加一个Book-->
       <insert id="addBook" parameterType="Books">
           insert into books(bookName,bookCounts,detail)
           values (#{bookName}, #{bookCounts}, #{detail})
       </insert>
   
       <!--根据id删除一个Book-->
       <delete id="deleteBookById" parameterType="int">
           delete from books where bookId=#{bookId}
       </delete>
   
       <!--更新Book-->
       <update id="updateBook" parameterType="Books">
           update books
           set bookName = #{bookName},bookCounts = #{bookCounts},detail = #{detail}
           where bookId = #{bookId}
       </update>
   
       <!--根据id查询,返回一个Book-->
       <select id="queryBookById" resultType="Books">
           select * from books
           where bookID = #{bookId}
       </select>
   
       <!--查询全部Book-->
       <select id="queryAllBook" resultType="com.feige.pojo.Books">
           SELECT * from books
       </select>
   
   </mapper>
   ```

7. 编写Service层的接口和实现类
   接口：

   ```java
   package com.feige.service;
   
   import com.feige.pojo.Books;
   
   import java.util.List;
   
   //BookService:底下需要去实现,调用dao层
   public interface BookService {
       //增加一个Book
       int addBook(Books book);
       //根据id删除一个Book
       int deleteBookById(int id);
       //更新Book
       int updateBook(Books books);
       //根据id查询,返回一个Book
       Books queryBookById(int id);
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   }
   ```

实现类：

```java
package com.feige.service;

import com.feige.dao.BookMapper;
import com.feige.pojo.Books;
import java.util.List;

public class BookServiceImpl implements BookService {

    //调用dao层的操作，设置一个set接口，方便Spring管理
    private BookMapper bookMapper;

    public void setBookMapper(BookMapper bookMapper) {
        this.bookMapper = bookMapper;
    }
    
    public int addBook(Books book) {
        return bookMapper.addBook(book);
    }
    
    public int deleteBookById(int id) {
        return bookMapper.deleteBookById(id);
    }
    
    public int updateBook(Books books) {
        return bookMapper.updateBook(books);
    }
    
    public Books queryBookById(int id) {
        return bookMapper.queryBookById(id);
    }
    
    public List<Books> queryAllBook() {
        return bookMapper.queryAllBook();
    }
}
```

**OK，到此，底层需求操作编写完毕！**

## 4、Spring层

1. 配置**Spring整合MyBatis**，我们这里数据源使用c3p0连接池；

2. 我们去编写Spring整合Mybatis的相关的配置文件； spring-dao.xml

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans.xsd
   http://www.springframework.org/schema/context
   https://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 配置整合mybatis -->
       <!-- 1.关联数据库文件 -->
       <context:property-placeholder location="classpath:database.properties"/>
   
       <!-- 2.数据库连接池 -->
       <!--数据库连接池
   dbcp  半自动化操作  不能自动连接
   c3p0  自动化操作（自动的加载配置文件 并且设置到对象里面）
       -->
       <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
   <!-- 配置连接池属性 -->
   <property name="driverClass" value="${jdbc.driver}"/>
   <property name="jdbcUrl" value="${jdbc.url}"/>
   <property name="user" value="${jdbc.username}"/>
   <property name="password" value="${jdbc.password}"/>
   
   <!-- c3p0连接池的私有属性 -->
   <property name="maxPoolSize" value="30"/>
   <property name="minPoolSize" value="10"/>
   <!-- 关闭连接后不自动commit -->
   <property name="autoCommitOnClose" value="false"/>
   <!-- 获取连接超时时间 -->
   <property name="checkoutTimeout" value="10000"/>
   <!-- 当获取连接失败重试次数 -->
   <property name="acquireRetryAttempts" value="2"/>
       </bean>
   
       <!-- 3.配置SqlSessionFactory对象 -->
       <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource"/>
   <!-- 配置MyBaties全局配置文件:mybatis-config.xml -->
   <property name="configLocation" value="classpath:mybatis-config.xml"/>
       </bean>
   
       <!-- 4.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 -->
       <!--解释 ： https://www.cnblogs.com/jpfss/p/7799806.html-->
       <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
   <!-- 注入sqlSessionFactory -->
   <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
   <!-- 给出需要扫描Dao接口包 -->
   <property name="basePackage" value="com.feige.dao"/>
       </bean>
   
   </beans>
   ```

3. **Spring整合service层**

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 扫描service相关的bean -->
       <context:component-scan base-package="com.kuang.service" />
   
       <!--BookServiceImpl注入到IOC容器中-->
       <bean id="BookServiceImpl" class="com.kuang.service.BookServiceImpl">
   <property name="bookMapper" ref="bookMapper"/>
       </bean>
   
       <!-- 配置事务管理器 -->
       <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource" />
       </bean>
   
   </beans>
   ```

Spring层搞定！再次理解一下，Spring就是一个大杂烩，一个容器！对吧！

## 5、SpringMVC层

1. **web.xml**

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
            version="4.0">
   
       <!--DispatcherServlet-->
       <servlet>
           <servlet-name>DispatcherServlet</servlet-name>
           <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
           <init-param>
               <param-name>contextConfigLocation</param-name>
               <param-value>classpath:applicationContext.xml</param-value>
           </init-param>
           <load-on-startup>1</load-on-startup>
       </servlet>
       <servlet-mapping>
           <servlet-name>DispatcherServlet</servlet-name>
           <url-pattern>/</url-pattern>
       </servlet-mapping>
   
       <!--encodingFilter-->
       <filter>
           <filter-name>encodingFilter</filter-name>
           <filter-class>
               org.springframework.web.filter.CharacterEncodingFilter
           </filter-class>
           <init-param>
               <param-name>encoding</param-name>
               <param-value>utf-8</param-value>
           </init-param>
       </filter>
       <filter-mapping>
           <filter-name>encodingFilter</filter-name>
           <url-pattern>/*</url-pattern>
       </filter-mapping>
       
       <!--Session过期时间-->
       <session-config>
           <session-timeout>15</session-timeout>
       </session-config>
       
   </web-app>
   ```

2. **spring-mvc.xml**

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xmlns:mvc="http://www.springframework.org/schema/mvc"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       https://www.springframework.org/schema/mvc/spring-mvc.xsd">
   
       <!-- 配置SpringMVC -->
       <!-- 1.开启SpringMVC注解驱动 -->
       <mvc:annotation-driven>
           <mvc:message-converters register-defaults="true">
               <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                   <constructor-arg value="UTF-8"/>
               </bean>
               <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                   <property name="objectMapper">
                       <bean class="org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean">
                           <property name="failOnEmptyBeans" value="false"/>
                       </bean>
                   </property>
               </bean>
           </mvc:message-converters>
       </mvc:annotation-driven>
       <!--解决跨域问题-->
       <mvc:cors>
       <mvc:mapping path="/**"
                    allowed-origins="http://127.0.0.1:8090,http://localhost:8090"
                    allowed-methods="POST,GET, OPTIONS,DELETE,PUT"
                    allowed-headers="Content-Type,ContentType,Access-Control-Allow-Headers, Authorization, X-Requested-With"
                    allow-credentials="true"/>
       </mvc:cors>
       <!-- 2.静态资源默认servlet配置-->
       <mvc:default-servlet-handler/>
   
       <!-- 3.配置jsp 显示ViewResolver视图解析器 -->
       <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
           <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
           <property name="prefix" value="/WEB-INF/jsp/" />
           <property name="suffix" value=".jsp" />
       </bean>
   
       <!-- 4.扫描web相关的bean -->
       <context:component-scan base-package="com.feige.controller" />
   
   </beans>
   ```

3. **Spring配置整合文件，applicationContext.xml**

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd">
   
       <import resource="spring-dao.xml"/>
       <import resource="spring-service.xml"/>
       <import resource="spring-mvc.xml"/>
       
   </beans>
   ```

**配置文件，暂时结束！Controller 和 视图层编写**

1. BookController 类编写 ， 方法一：查询全部书籍

   ```java
   @Controller
   @RequestMapping("/book")
   public class BookController {
   
       @Autowired
       @Qualifier("BookServiceImpl")
       private BookService bookService;
   
       @RequestMapping("/allBook")
       public String list(Model model) {
           List<Books> list = bookService.queryAllBook();
           model.addAttribute("list", list);
           return "allBook";
       }
   }
   ```

2. 编写首页 **index.jsp**

   ```html
   <%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" %>
   <!DOCTYPE HTML>
   <html>
   <head>
       <title>首页</title>
       <style type="text/css">
           a {
               text-decoration: none;
               color: black;
               font-size: 18px;
           }
           h3 {
               width: 180px;
               height: 38px;
               margin: 100px auto;
               text-align: center;
               line-height: 38px;
               background: deepskyblue;
               border-radius: 4px;
           }
       </style>
   </head>
   <body>
   
   <h3>
       <a href="${pageContext.request.contextPath}/book/allBook">点击进入列表页</a>
   </h3>
   </body>
   </html>
   ```

3. 书籍列表页面 **allbook.jsp**

   ```jsp
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>书籍列表</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>书籍列表 —— 显示所有书籍</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <div class="row">
           <div class="col-md-4 column">
               <a class="btn btn-primary" href="${pageContext.request.contextPath}/book/toAddBook">新增</a>
           </div>
       </div>
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <table class="table table-hover table-striped">
                   <thead>
                   <tr>
                       <th>书籍编号</th>
                       <th>书籍名字</th>
                       <th>书籍数量</th>
                       <th>书籍详情</th>
                       <th>操作</th>
                   </tr>
                   </thead>
   
                   <tbody>
                   <c:forEach var="book" items="${requestScope.get('list')}">
                       <tr>
                           <td>${book.getBookId()}</td>
                           <td>${book.getBookName()}</td>
                           <td>${book.getBookCounts()}</td>
                           <td>${book.getDetail()}</td>
                           <td>
                               <a href="${pageContext.request.contextPath}/book/toUpdateBook?id=${book.getBookId()}">更改</a> |
                               <a href="${pageContext.request.contextPath}/book/del/${book.getBookId()}">删除</a>
                           </td>
                       </tr>
                   </c:forEach>
                   </tbody>
               </table>
           </div>
       </div>
   </div>
   ```

4. BookController 类编写 ， 方法二：添加书籍

   ```java
   @RequestMapping("/toAddBook")
   public String toAddPaper() {
       return "addBook";
   }
   
   @RequestMapping("/addBook")
   public String addPaper(Books books) {
       System.out.println(books);
       bookService.addBook(books);
       return "redirect:/book/allBook";
   }
   ```

5. 添加书籍页面：**addBook.jsp**

   ```jsp
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   
   <html>
   <head>
       <title>新增书籍</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>新增书籍</small>
                   </h1>
               </div>
           </div>
       </div>
       <form action="${pageContext.request.contextPath}/book/addBook" method="post">
           书籍名称：<input type="text" name="bookName"><br><br><br>
           书籍数量：<input type="text" name="bookCounts"><br><br><br>
           书籍详情：<input type="text" name="detail"><br><br><br>
           <input type="submit" value="添加">
       </form>
   
   </div>
   ```

6. BookController 类编写 ， 方法三：修改书籍

   ```java
   @RequestMapping("/toUpdateBook")
   public String toUpdateBook(Model model, int id) {
       Books books = bookService.queryBookById(id);
       System.out.println(books);
       model.addAttribute("book",books );
       return "updateBook";
   }
   
   @RequestMapping("/updateBook")
   public String updateBook(Model model, Books book) {
       bookService.updateBook(book);
       Books books = bookService.queryBookById(book.getBookID());
       model.addAttribute("books", books);
       return "redirect:/book/allBook";
   }
   ```

7. 修改书籍页面 **updateBook.jsp**

   ```jsp
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>修改信息</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>修改信息</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <form action="${pageContext.request.contextPath}/book/updateBook" method="post">
           <input type="hidden" name="bookID" value="${book.getBookId()}"/>
           书籍名称：<input type="text" name="bookName" value="${book.getBookName()}"/>
           书籍数量：<input type="text" name="bookCounts" value="${book.getBookCounts()}"/>
           书籍详情：<input type="text" name="detail" value="${book.getDetail() }"/>
           <input type="submit" value="提交"/>
       </form>
   
   </div>
   ```

8. BookController 类编写 ， 方法四：删除书籍

   ```java
   @RequestMapping("/del/{bookId}")
   public String deleteBook(@PathVariable("bookId") int id) {
       bookService.deleteBookById(id);
       return "redirect:/book/allBook";
   }
   ```

**配置Tomcat，进行运行！**

到目前为止，这个SSM项目整合已经完全的OK了，可以直接运行进行测试！这个练习十分的重要，大家需要保证，不看任何东西，自己也可以完整的实现出来！

## **6、项目结构图**

![1570186854191.png](https://blog.kuangstudy.com/usr/uploads/2019/10/1086489242.png)

![1570186868239.png](https://blog.kuangstudy.com/usr/uploads/2019/10/2326667495.png)

## 7、错误排查

### 1、访问出现404，排查步骤：**

1. 查看控制台输出，看一下是不是缺少了什么jar包。

2. 如果jar包存在，显示无法输出，就在IDEA的项目发布中，添加lib依赖！

   步骤：点击项目结构----->Artifacts----->点击自己的项目(ssm:war exploded)--->(点击工具栏的第一个)在WEB-INF目录下新建一个lib包----->选中lib------>点击工具栏的第三个然后选中第一个---->把里面的包全部选中点击ok---->点击Apply再ok

   ![image-20200128125126368](E:\Java资料\ssm整合.assets\image-20200128125126368.png)

   ![image-20200128125237179](E:\Java资料\ssm整合.assets\image-20200128125237179.png)

3. 重启Tomcat 即可解决！

### 2、其他错误

#### 1、bean不存在

​	步骤：

​		查看bean注入是否成功 

​		junit单元测试，看我们的代码是否能够查询出来

​		问题不在底层，是我们spring出了问题

​		springMVC整合时没有调用到service层的bean

​			applicationContext.xml没有注册bean

​			web.xml也绑定过配置文件要绑定大的applicationContext.xml

​			

## 8、小结及展望

这个是同学们的第一个SSM整合案例，一定要烂熟于心！

SSM框架的重要程度是不言而喻的，学到这里，大家已经可以进行基本网站的单独开发。但是这只是增删改查的基本操作。可以说学到这里，大家才算是真正的步入了后台开发的门。也就是能找一个后台相关工作的底线。

或许很多人，工作就做这些事情，但是对于个人的提高来说，还远远不够！, 2020-03-02 07:06:53.0, 2020-03-23 19:38:47.0, null, 10]
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} Parameters : [0, 30]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20003, rs-50117} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20003} clearParameters. 
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} executed. 1.197332 millis. select id,type_name typeName
        from `type`
         
            limit ?,?
[DEBUG][20-03-23][druid.sql.Connection]{conn-10003} pool-recycle
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50118} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50118} Header: [id, type_name]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50118} Result: [3, mybatis]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50118} Result: [2, spring]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50118} Result: [1, springboot]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50118} Result: [4, springMVC]
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50118} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20000} clearParameters. 
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20002} Parameters : [13]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20002} Types : [INTEGER]
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20001} Parameters : []
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20001} Types : []
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20001} executed. 0.316 millis. select count(*) from `type`
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50119} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50119} Header: [count(*)]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50119} Result: [4]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50119} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20001} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20002} executed. 2.587553 millis. select distinct count(*) from comments c
        where c.blog_id=? and
        c.parent_id is null;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20002, rs-50120} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20002, rs-50120} Header: [count(*)]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20002, rs-50120} Result: [3]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20002, rs-50120} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20002} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20004} Parameters : [13, 0, 10]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20004} Types : [INTEGER, INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20004} executed. 1.401332 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id  and
        c.parent_id is null limit ?,?;;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20004, rs-50121} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20004, rs-50121} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20004, rs-50121} Result: [26, 好好, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:35.0, null]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20004, rs-50121} Result: [29, 太好了, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:13.0, null]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20004, rs-50121} Result: [32, <p>feige</p>, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 01:33:26.0, null]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20004, rs-50121} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20004} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} Parameters : [13, 26]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} executed. 3.611553 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50122} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50122} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50122} Result: [27, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:56.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50122} Result: [28, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:43:03.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50122} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} Parameters : [13, 26]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} executed. 5.773773 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50123} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50123} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50123} Result: [27, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:56.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50123} Result: [28, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:43:03.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50123} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} Parameters : [13, 27]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} executed. 0.861777 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50124} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50124} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50124} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} Parameters : [13, 27]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} executed. 0.716444 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50125} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50125} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50125} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} Parameters : [13, 29]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} executed. 3.360441 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50126} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50126} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50126} Result: [30, 谢谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:43.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50126} Result: [31, 不用谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:47:01.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50126} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} Parameters : [13, 29]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} executed. 4.154218 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50127} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50127} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50127} Result: [30, 谢谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:43.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50127} Result: [31, 不用谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:47:01.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50127} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} Parameters : [13, 30]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} executed. 4.847552 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50128} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50128} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50128} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} Parameters : [13, 30]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} executed. 2.41022 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50129} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50129} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50129} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} Parameters : [13, 32]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} executed. 1.559109 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50130} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50130} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50130} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20002} Parameters : [13]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20002} Types : [INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20002} executed. 3.413774 millis. select distinct count(*) from comments c
        where c.blog_id=? and
        c.parent_id is null;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20002, rs-50131} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20002, rs-50131} Header: [count(*)]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20002, rs-50131} Result: [3]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20002, rs-50131} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20002} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20004} Parameters : [13, 0, 10]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20004} Types : [INTEGER, INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20004} executed. 1.031555 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id  and
        c.parent_id is null limit ?,?;;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20004, rs-50132} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20004, rs-50132} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20004, rs-50132} Result: [26, 好好, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:35.0, null]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20004, rs-50132} Result: [29, 太好了, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:13.0, null]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20004, rs-50132} Result: [32, <p>feige</p>, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 01:33:26.0, null]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20004, rs-50132} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20004} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} Parameters : [13, 26]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} executed. 3.57333 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50133} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50133} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50133} Result: [27, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:56.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50133} Result: [28, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:43:03.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50133} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} Parameters : [13, 26]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} executed. 3.528885 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50134} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50134} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50134} Result: [27, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:56.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50134} Result: [28, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:43:03.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50134} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} Parameters : [13, 27]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} executed. 0.739555 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50135} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50135} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50135} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} Parameters : [13, 27]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} executed. 0.521333 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50136} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50136} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50136} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} Parameters : [13, 29]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} executed. 3.943552 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50137} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50137} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50137} Result: [30, 谢谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:43.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50137} Result: [31, 不用谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:47:01.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50137} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} Parameters : [13, 29]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} executed. 4.192441 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50138} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50138} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50138} Result: [30, 谢谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:43.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50138} Result: [31, 不用谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:47:01.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50138} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} Parameters : [13, 30]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} executed. 0.665777 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50139} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50139} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50139} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} Parameters : [13, 30]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} executed. 0.47911 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50140} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50140} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50140} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} Parameters : [13, 32]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} executed. 0.430222 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50141} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50141} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20005, rs-50141} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20005} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20010} Parameters : [13]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20010} Types : [INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20010} executed. 1.378665 millis. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog where id=?
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20010, rs-50142} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20010, rs-50142} Header: [id, type_name, title, content, create_time, change_time, author, view]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20010, rs-50142} Result: [13, mybatis, ssm1整合, # ssm整合

## 1、数据库环境

创建一个存放书籍数据的数据库表

```sql
CREATE DATABASE `ssmbuild`;

USE `ssmbuild`;

DROP TABLE IF EXISTS `books`;

CREATE TABLE `books` (
  `bookId` INT PRIMARY KEY COMMENT '书id',
  `bookName` VARCHAR(100) NOT NULL COMMENT '书名',
  `bookCounts` INT(11) NOT NULL COMMENT '数量',
  ``ssmbuild``ssmbuild`` VARCHAR(200) NOT NULL COMMENT '描述'
) ENGINE=INNODB DEFAULT CHARSET=utf8

INSERT  INTO `books`(`bookId`,`bookName`,`bookCounts`,`detail`)VALUES 
(1,'Java',1,'从入门到放弃'),
(2,'MySQL',10,'从删库到跑路'),
(3,'Linux',5,'从进门到进牢');

SELECT * FROM books
```

## 2、基本环境搭建

1. 新建一Maven项目！ ssmbuild ， 添加web的支持

   ![image-20200128134359317](.\ssm整合.assets\image-20200128134359317.png)

2. 导入相关的pom依赖！

   ```xml
   <dependencies>
       <!--Junit-->
       <dependency>
           <groupId>junit</groupId>
           <artifactId>junit</artifactId>
           <version>4.12</version>
       </dependency>
       <!--数据库驱动-->
       <dependency>
           <groupId>mysql</groupId>
           <artifactId>mysql-connector-java</artifactId>
           <version>5.1.47</version>
       </dependency>
       <!-- 数据库连接池 -->
       <dependency>
           <groupId>com.mchange</groupId>
           <artifactId>c3p0</artifactId>
           <version>0.9.5.2</version>
       </dependency>
   
       <!--Servlet - JSP -->
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>servlet-api</artifactId>
           <version>2.5</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet.jsp</groupId>
           <artifactId>jsp-api</artifactId>
           <version>2.2</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>jstl</artifactId>
           <version>1.2</version>
       </dependency>
   
       <!--Mybatis-->
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis</artifactId>
           <version>3.5.2</version>
       </dependency>
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis-spring</artifactId>
           <version>2.0.2</version>
       </dependency>
   
       <!--Spring-->
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-webmvc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-jdbc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->
       <dependency>
           <groupId>org.projectlombok</groupId>
           <artifactId>lombok</artifactId>
           <version>1.16.10</version>
       </dependency>
   </dependencies>
   ```

3. Maven资源过滤设置

   ```xml
   <build>
       <resources>
           <resource>
               <directory>src/main/java</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
           <resource>
               <directory>src/main/resources</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
       </resources>
   </build>
   ```

4. 建立基本结构和配置框架！

   - com.feige.pojo

   - com.feige.dao

   - com.feige.service

   - com.feige.controller

     在resources目录下创建

   - mybatis-config.xml

     ```xml
     <?xml version="1.0" encoding="UTF-8" ?>
     <!DOCTYPE configuration
             PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
             "http://mybatis.org/dtd/mybatis-3-config.dtd">
     <configuration>
     
     </configuration>
     ```

   - applicationContext.xml

     ```xml
     <?xml version="1.0" encoding="UTF-8"?>
     <beans xmlns="http://www.springframework.org/schema/beans"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://www.springframework.org/schema/beans
             http://www.springframework.org/schema/beans/spring-beans.xsd">
     
     </beans>
     ```

## 3、Mybatis层编写

1. 数据库配置文件 **database.properties**

   ```properties
   jdbc.driver=com.mysql.jdbc.Driver
   jdbc.url=jdbc:mysql://localhost:3306/ssmbuild?useSSL=true&useUnicode=true&characterEncoding=utf8
   jdbc.username=root
   jdbc.password=hufei169357
   ```

2. IDEA关联数据库

3. 编写MyBatis的核心配置文件

   ```xml
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE configuration
           PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-config.dtd">
   <configuration>
       
       <typeAliases>
           <package name="com.feige.pojo"/>
       </typeAliases>
       <mappers>
           <mapper resource="com/feige/dao/BookMapper.xml"/>
       </mappers>
   
   </configuration>
   ```

4. 编写数据库对应的实体类 com.feige.pojo.Books
   使用lombok插件！

   ```java
   package com.kuang.pojo;
   
   import lombok.AllArgsConstructor;
   import lombok.Data;
   import lombok.NoArgsConstructor;
   
   @Data
   @AllArgsConstructor
   @NoArgsConstructor
   public class Books {
       
       private int bookId;
       private String bookName;
       private int bookCounts;
       private String detail;
       
   }
   ```

5. 编写Dao层的 Mapper接口！

   ```java
   package com.kuang.dao;
   
   import com.kuang.pojo.Books;
   import java.util.List;
   
   public interface BookMapper {
   
       //增加一个Book
       int addBook(Books book);
   
       //根据id删除一个Book
       int deleteBookById(int id);
   
       //更新Book
       int updateBook(Books books);
   
       //根据id查询,返回一个Book
       Books queryBookById(int id);
   
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   
   }
   ```

6. 编写接口对应的 Mapper.xml 文件。需要导入MyBatis的包；

   ```xml
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE mapper
           PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
   
   <mapper namespace="com.feige.dao.BooksMapper">
   
       <!--增加一个Book-->
       <insert id="addBook" parameterType="Books">
           insert into books(bookName,bookCounts,detail)
           values (#{bookName}, #{bookCounts}, #{detail})
       </insert>
   
       <!--根据id删除一个Book-->
       <delete id="deleteBookById" parameterType="int">
           delete from books where bookId=#{bookId}
       </delete>
   
       <!--更新Book-->
       <update id="updateBook" parameterType="Books">
           update books
           set bookName = #{bookName},bookCounts = #{bookCounts},detail = #{detail}
           where bookId = #{bookId}
       </update>
   
       <!--根据id查询,返回一个Book-->
       <select id="queryBookById" resultType="Books">
           select * from books
           where bookID = #{bookId}
       </select>
   
       <!--查询全部Book-->
       <select id="queryAllBook" resultType="com.feige.pojo.Books">
           SELECT * from books
       </select>
   
   </mapper>
   ```

7. 编写Service层的接口和实现类
   接口：

   ```java
   package com.feige.service;
   
   import com.feige.pojo.Books;
   
   import java.util.List;
   
   //BookService:底下需要去实现,调用dao层
   public interface BookService {
       //增加一个Book
       int addBook(Books book);
       //根据id删除一个Book
       int deleteBookById(int id);
       //更新Book
       int updateBook(Books books);
       //根据id查询,返回一个Book
       Books queryBookById(int id);
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   }
   ```

实现类：

```java
package com.feige.service;

import com.feige.dao.BookMapper;
import com.feige.pojo.Books;
import java.util.List;

public class BookServiceImpl implements BookService {

    //调用dao层的操作，设置一个set接口，方便Spring管理
    private BookMapper bookMapper;

    public void setBookMapper(BookMapper bookMapper) {
        this.bookMapper = bookMapper;
    }
    
    public int addBook(Books book) {
        return bookMapper.addBook(book);
    }
    
    public int deleteBookById(int id) {
        return bookMapper.deleteBookById(id);
    }
    
    public int updateBook(Books books) {
        return bookMapper.updateBook(books);
    }
    
    public Books queryBookById(int id) {
        return bookMapper.queryBookById(id);
    }
    
    public List<Books> queryAllBook() {
        return bookMapper.queryAllBook();
    }
}
```

**OK，到此，底层需求操作编写完毕！**

## 4、Spring层

1. 配置**Spring整合MyBatis**，我们这里数据源使用c3p0连接池；

2. 我们去编写Spring整合Mybatis的相关的配置文件； spring-dao.xml

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans.xsd
   http://www.springframework.org/schema/context
   https://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 配置整合mybatis -->
       <!-- 1.关联数据库文件 -->
       <context:property-placeholder location="classpath:database.properties"/>
   
       <!-- 2.数据库连接池 -->
       <!--数据库连接池
   dbcp  半自动化操作  不能自动连接
   c3p0  自动化操作（自动的加载配置文件 并且设置到对象里面）
       -->
       <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
   <!-- 配置连接池属性 -->
   <property name="driverClass" value="${jdbc.driver}"/>
   <property name="jdbcUrl" value="${jdbc.url}"/>
   <property name="user" value="${jdbc.username}"/>
   <property name="password" value="${jdbc.password}"/>
   
   <!-- c3p0连接池的私有属性 -->
   <property name="maxPoolSize" value="30"/>
   <property name="minPoolSize" value="10"/>
   <!-- 关闭连接后不自动commit -->
   <property name="autoCommitOnClose" value="false"/>
   <!-- 获取连接超时时间 -->
   <property name="checkoutTimeout" value="10000"/>
   <!-- 当获取连接失败重试次数 -->
   <property name="acquireRetryAttempts" value="2"/>
       </bean>
   
       <!-- 3.配置SqlSessionFactory对象 -->
       <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource"/>
   <!-- 配置MyBaties全局配置文件:mybatis-config.xml -->
   <property name="configLocation" value="classpath:mybatis-config.xml"/>
       </bean>
   
       <!-- 4.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 -->
       <!--解释 ： https://www.cnblogs.com/jpfss/p/7799806.html-->
       <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
   <!-- 注入sqlSessionFactory -->
   <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
   <!-- 给出需要扫描Dao接口包 -->
   <property name="basePackage" value="com.feige.dao"/>
       </bean>
   
   </beans>
   ```

3. **Spring整合service层**

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 扫描service相关的bean -->
       <context:component-scan base-package="com.kuang.service" />
   
       <!--BookServiceImpl注入到IOC容器中-->
       <bean id="BookServiceImpl" class="com.kuang.service.BookServiceImpl">
   <property name="bookMapper" ref="bookMapper"/>
       </bean>
   
       <!-- 配置事务管理器 -->
       <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource" />
       </bean>
   
   </beans>
   ```

Spring层搞定！再次理解一下，Spring就是一个大杂烩，一个容器！对吧！

## 5、SpringMVC层

1. **web.xml**

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
            version="4.0">
   
       <!--DispatcherServlet-->
       <servlet>
           <servlet-name>DispatcherServlet</servlet-name>
           <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
           <init-param>
               <param-name>contextConfigLocation</param-name>
               <param-value>classpath:applicationContext.xml</param-value>
           </init-param>
           <load-on-startup>1</load-on-startup>
       </servlet>
       <servlet-mapping>
           <servlet-name>DispatcherServlet</servlet-name>
           <url-pattern>/</url-pattern>
       </servlet-mapping>
   
       <!--encodingFilter-->
       <filter>
           <filter-name>encodingFilter</filter-name>
           <filter-class>
               org.springframework.web.filter.CharacterEncodingFilter
           </filter-class>
           <init-param>
               <param-name>encoding</param-name>
               <param-value>utf-8</param-value>
           </init-param>
       </filter>
       <filter-mapping>
           <filter-name>encodingFilter</filter-name>
           <url-pattern>/*</url-pattern>
       </filter-mapping>
       
       <!--Session过期时间-->
       <session-config>
           <session-timeout>15</session-timeout>
       </session-config>
       
   </web-app>
   ```

2. **spring-mvc.xml**

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xmlns:mvc="http://www.springframework.org/schema/mvc"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       https://www.springframework.org/schema/mvc/spring-mvc.xsd">
   
       <!-- 配置SpringMVC -->
       <!-- 1.开启SpringMVC注解驱动 -->
       <mvc:annotation-driven>
           <mvc:message-converters register-defaults="true">
               <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                   <constructor-arg value="UTF-8"/>
               </bean>
               <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                   <property name="objectMapper">
                       <bean class="org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean">
                           <property name="failOnEmptyBeans" value="false"/>
                       </bean>
                   </property>
               </bean>
           </mvc:message-converters>
       </mvc:annotation-driven>
       <!--解决跨域问题-->
       <mvc:cors>
       <mvc:mapping path="/**"
                    allowed-origins="http://127.0.0.1:8090,http://localhost:8090"
                    allowed-methods="POST,GET, OPTIONS,DELETE,PUT"
                    allowed-headers="Content-Type,ContentType,Access-Control-Allow-Headers, Authorization, X-Requested-With"
                    allow-credentials="true"/>
       </mvc:cors>
       <!-- 2.静态资源默认servlet配置-->
       <mvc:default-servlet-handler/>
   
       <!-- 3.配置jsp 显示ViewResolver视图解析器 -->
       <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
           <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
           <property name="prefix" value="/WEB-INF/jsp/" />
           <property name="suffix" value=".jsp" />
       </bean>
   
       <!-- 4.扫描web相关的bean -->
       <context:component-scan base-package="com.feige.controller" />
   
   </beans>
   ```

3. **Spring配置整合文件，applicationContext.xml**

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd">
   
       <import resource="spring-dao.xml"/>
       <import resource="spring-service.xml"/>
       <import resource="spring-mvc.xml"/>
       
   </beans>
   ```

**配置文件，暂时结束！Controller 和 视图层编写**

1. BookController 类编写 ， 方法一：查询全部书籍

   ```java
   @Controller
   @RequestMapping("/book")
   public class BookController {
   
       @Autowired
       @Qualifier("BookServiceImpl")
       private BookService bookService;
   
       @RequestMapping("/allBook")
       public String list(Model model) {
           List<Books> list = bookService.queryAllBook();
           model.addAttribute("list", list);
           return "allBook";
       }
   }
   ```

2. 编写首页 **index.jsp**

   ```html
   <%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" %>
   <!DOCTYPE HTML>
   <html>
   <head>
       <title>首页</title>
       <style type="text/css">
           a {
               text-decoration: none;
               color: black;
               font-size: 18px;
           }
           h3 {
               width: 180px;
               height: 38px;
               margin: 100px auto;
               text-align: center;
               line-height: 38px;
               background: deepskyblue;
               border-radius: 4px;
           }
       </style>
   </head>
   <body>
   
   <h3>
       <a href="${pageContext.request.contextPath}/book/allBook">点击进入列表页</a>
   </h3>
   </body>
   </html>
   ```

3. 书籍列表页面 **allbook.jsp**

   ```jsp
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>书籍列表</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>书籍列表 —— 显示所有书籍</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <div class="row">
           <div class="col-md-4 column">
               <a class="btn btn-primary" href="${pageContext.request.contextPath}/book/toAddBook">新增</a>
           </div>
       </div>
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <table class="table table-hover table-striped">
                   <thead>
                   <tr>
                       <th>书籍编号</th>
                       <th>书籍名字</th>
                       <th>书籍数量</th>
                       <th>书籍详情</th>
                       <th>操作</th>
                   </tr>
                   </thead>
   
                   <tbody>
                   <c:forEach var="book" items="${requestScope.get('list')}">
                       <tr>
                           <td>${book.getBookId()}</td>
                           <td>${book.getBookName()}</td>
                           <td>${book.getBookCounts()}</td>
                           <td>${book.getDetail()}</td>
                           <td>
                               <a href="${pageContext.request.contextPath}/book/toUpdateBook?id=${book.getBookId()}">更改</a> |
                               <a href="${pageContext.request.contextPath}/book/del/${book.getBookId()}">删除</a>
                           </td>
                       </tr>
                   </c:forEach>
                   </tbody>
               </table>
           </div>
       </div>
   </div>
   ```

4. BookController 类编写 ， 方法二：添加书籍

   ```java
   @RequestMapping("/toAddBook")
   public String toAddPaper() {
       return "addBook";
   }
   
   @RequestMapping("/addBook")
   public String addPaper(Books books) {
       System.out.println(books);
       bookService.addBook(books);
       return "redirect:/book/allBook";
   }
   ```

5. 添加书籍页面：**addBook.jsp**

   ```jsp
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   
   <html>
   <head>
       <title>新增书籍</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>新增书籍</small>
                   </h1>
               </div>
           </div>
       </div>
       <form action="${pageContext.request.contextPath}/book/addBook" method="post">
           书籍名称：<input type="text" name="bookName"><br><br><br>
           书籍数量：<input type="text" name="bookCounts"><br><br><br>
           书籍详情：<input type="text" name="detail"><br><br><br>
           <input type="submit" value="添加">
       </form>
   
   </div>
   ```

6. BookController 类编写 ， 方法三：修改书籍

   ```java
   @RequestMapping("/toUpdateBook")
   public String toUpdateBook(Model model, int id) {
       Books books = bookService.queryBookById(id);
       System.out.println(books);
       model.addAttribute("book",books );
       return "updateBook";
   }
   
   @RequestMapping("/updateBook")
   public String updateBook(Model model, Books book) {
       bookService.updateBook(book);
       Books books = bookService.queryBookById(book.getBookID());
       model.addAttribute("books", books);
       return "redirect:/book/allBook";
   }
   ```

7. 修改书籍页面 **updateBook.jsp**

   ```jsp
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>修改信息</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>修改信息</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <form action="${pageContext.request.contextPath}/book/updateBook" method="post">
           <input type="hidden" name="bookID" value="${book.getBookId()}"/>
           书籍名称：<input type="text" name="bookName" value="${book.getBookName()}"/>
           书籍数量：<input type="text" name="bookCounts" value="${book.getBookCounts()}"/>
           书籍详情：<input type="text" name="detail" value="${book.getDetail() }"/>
           <input type="submit" value="提交"/>
       </form>
   
   </div>
   ```

8. BookController 类编写 ， 方法四：删除书籍

   ```java
   @RequestMapping("/del/{bookId}")
   public String deleteBook(@PathVariable("bookId") int id) {
       bookService.deleteBookById(id);
       return "redirect:/book/allBook";
   }
   ```

**配置Tomcat，进行运行！**

到目前为止，这个SSM项目整合已经完全的OK了，可以直接运行进行测试！这个练习十分的重要，大家需要保证，不看任何东西，自己也可以完整的实现出来！

## **6、项目结构图**

![1570186854191.png](https://blog.kuangstudy.com/usr/uploads/2019/10/1086489242.png)

![1570186868239.png](https://blog.kuangstudy.com/usr/uploads/2019/10/2326667495.png)

## 7、错误排查

### 1、访问出现404，排查步骤：**

1. 查看控制台输出，看一下是不是缺少了什么jar包。

2. 如果jar包存在，显示无法输出，就在IDEA的项目发布中，添加lib依赖！

   步骤：点击项目结构----->Artifacts----->点击自己的项目(ssm:war exploded)--->(点击工具栏的第一个)在WEB-INF目录下新建一个lib包----->选中lib------>点击工具栏的第三个然后选中第一个---->把里面的包全部选中点击ok---->点击Apply再ok

   ![image-20200128125126368](E:\Java资料\ssm整合.assets\image-20200128125126368.png)

   ![image-20200128125237179](E:\Java资料\ssm整合.assets\image-20200128125237179.png)

3. 重启Tomcat 即可解决！

### 2、其他错误

#### 1、bean不存在

​	步骤：

​		查看bean注入是否成功 

​		junit单元测试，看我们的代码是否能够查询出来

​		问题不在底层，是我们spring出了问题

​		springMVC整合时没有调用到service层的bean

​			applicationContext.xml没有注册bean

​			web.xml也绑定过配置文件要绑定大的applicationContext.xml

​			

## 8、小结及展望

这个是同学们的第一个SSM整合案例，一定要烂熟于心！

SSM框架的重要程度是不言而喻的，学到这里，大家已经可以进行基本网站的单独开发。但是这只是增删改查的基本操作。可以说学到这里，大家才算是真正的步入了后台开发的门。也就是能找一个后台相关工作的底线。

或许很多人，工作就做这些事情，但是对于个人的提高来说，还远远不够！, 2020-03-02 07:06:53.0, 2020-03-23 19:38:47.0, null, 10]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10004, pstmt-20010, rs-50142} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10004, pstmt-20010} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10003} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20014} Parameters : [0, 30]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20014} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20014} executed. 0.865332 millis. select id,type_name typeName
        from `type`
         
            limit ?,?
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20014, rs-50143} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20014, rs-50143} Header: [id, type_name]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20014, rs-50143} Result: [3, mybatis]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20014, rs-50143} Result: [2, spring]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20014, rs-50143} Result: [1, springboot]
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20014, rs-50143} Result: [4, springMVC]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20014, rs-50143} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20018} Parameters : [13]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20018} Types : [INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20014} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10003} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10003} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20017} Parameters : []
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20017} Types : []
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20017} executed. 0.745332 millis. select count(*) from `type`
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20017, rs-50144} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20017, rs-50144} Header: [count(*)]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20017, rs-50144} Result: [4]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10003, pstmt-20017, rs-50144} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10003, pstmt-20017} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10003} pool-recycle
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20018} executed. 2.816887 millis. select distinct count(*) from comments c
        where c.blog_id=? and
        c.parent_id is null;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20018, rs-50145} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20018, rs-50145} Header: [count(*)]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20018, rs-50145} Result: [3]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20018, rs-50145} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20018} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20019} Parameters : [13, 0, 10]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20019} Types : [INTEGER, INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20019} executed. 3.020442 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id  and
        c.parent_id is null limit ?,?;;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20019, rs-50146} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20019, rs-50146} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20019, rs-50146} Result: [26, 好好, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:35.0, null]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20019, rs-50146} Result: [29, 太好了, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:13.0, null]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20019, rs-50146} Result: [32, <p>feige</p>, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 01:33:26.0, null]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20019, rs-50146} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20019} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} Parameters : [13, 26]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} executed. 3.742219 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50147} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50147} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50147} Result: [27, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:56.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50147} Result: [28, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:43:03.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50147} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} Parameters : [13, 26]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} executed. 3.232442 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50148} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50148} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50148} Result: [27, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:56.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50148} Result: [28, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:43:03.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50148} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} Parameters : [13, 27]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} executed. 0.755554 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50149} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50149} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50149} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} Parameters : [13, 27]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} executed. 0.540888 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50150} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50150} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50150} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} Parameters : [13, 29]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} executed. 3.669775 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50151} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50151} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50151} Result: [30, 谢谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:43.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50151} Result: [31, 不用谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:47:01.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50151} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} Parameters : [13, 29]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} executed. 3.659553 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50152} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50152} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50152} Result: [30, 谢谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:43.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50152} Result: [31, 不用谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:47:01.0, sss]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50152} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} Parameters : [13, 30]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} executed. 0.757777 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50153} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50153} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50153} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} Parameters : [13, 30]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} executed. 0.601333 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50154} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50154} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50154} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} Parameters : [13, 32]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} Types : [INTEGER, INTEGER]
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} executed. 0.753777 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50155} open
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50155} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-23][druid.sql.ResultSet]{conn-10005, pstmt-20020, rs-50155} closed
[DEBUG][20-03-23][druid.sql.Statement]{conn-10005, pstmt-20020} clearParameters. 
[DEBUG][20-03-23][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-27][druid.sql.Connection]{conn-10001} connected
[DEBUG][20-03-27][druid.sql.Connection]{conn-10002} connected
[DEBUG][20-03-27][druid.sql.Connection]{conn-10003} connected
[DEBUG][20-03-27][druid.sql.Connection]{conn-10004} connected
[DEBUG][20-03-27][druid.sql.Connection]{conn-10005} connected
[DEBUG][20-03-27][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-27][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-27][druid.sql.Statement]{conn-10004, pstmt-20000} created. select id,type_name typeName
        from `type`
         
            limit ?,?
[DEBUG][20-03-27][druid.sql.Statement]{conn-10005, pstmt-20001} created. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog
         
            limit ?,?
[DEBUG][20-03-27][druid.sql.Statement]{conn-10005, pstmt-20001} Parameters : [0, 10]
[DEBUG][20-03-27][druid.sql.Statement]{conn-10005, pstmt-20001} Types : [INTEGER, INTEGER]
[DEBUG][20-03-27][druid.sql.Statement]{conn-10004, pstmt-20000} Parameters : [0, 30]
[DEBUG][20-03-27][druid.sql.Statement]{conn-10004, pstmt-20000} Types : [INTEGER, INTEGER]
[DEBUG][20-03-27][druid.sql.Statement]{conn-10005, pstmt-20001} executed. 18.911983 millis. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog
         
            limit ?,?
[DEBUG][20-03-27][druid.sql.Statement]{conn-10004, pstmt-20000} executed. 18.921316 millis. select id,type_name typeName
        from `type`
         
            limit ?,?
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50000} open
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10004, pstmt-20000, rs-50001} open
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10004, pstmt-20000, rs-50001} Header: [id, type_name]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50000} Header: [id, type_name, title, content, create_time, change_time, author, view]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10004, pstmt-20000, rs-50001} Result: [3, mybatis]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50000} Result: [1, springboot, springboot入门, springb自动装配, 2020-02-23 21:43:36.0, 2020-02-24 03:06:48.0, admin, 0]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10004, pstmt-20000, rs-50001} Result: [2, spring]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10004, pstmt-20000, rs-50001} Result: [1, springboot]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10004, pstmt-20000, rs-50001} Result: [4, springMVC]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10004, pstmt-20000, rs-50001} closed
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50000} Result: [2, mybatis, 配置, 得到的, 2020-02-24 02:05:36.0, 2020-03-13 06:39:47.0, admin, 3]
[DEBUG][20-03-27][druid.sql.Statement]{conn-10004, pstmt-20000} clearParameters. 
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50000} Result: [4, springMVC, mybatis-plus, ##飞哥, 2020-02-24 02:10:09.0, 2020-02-25 22:42:23.0, admin, 111]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50000} Result: [5, springboot, 人, 嗯嗯, 2020-02-24 03:07:20.0, 2020-02-24 03:07:20.0, admin, 2]
[DEBUG][20-03-27][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-27][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50000} Result: [6, mybatis, mybatis入门, <h2>1、Mybatis简介</h2>
<p><img src="https://blog.kuangstudy.com/usr/uploads/2019/10/1296229149.png" referrerpolicy="no-referrer" alt="1567007421329.png"></p>
<h3>什么是MyBatis</h3>
<ul>
<li>MyBatis 是一款优秀的<strong>持久层框架</strong></li>
<li>MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集的过程</li>
<li>MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 实体类 【Plain Old Java Objects,普通的 Java对象】映射成数据库中的记录。</li>
<li>MyBatis 本是apache的一个开源项目ibatis, 2010年这个项目由apache 迁移到了google code，并且改名为MyBatis 。</li>
<li>2013年11月迁移到<strong>Github</strong> .</li>
<li>Mybatis官方文档 : <a href='http://www.mybatis.org/mybatis-3/zh/index.html' target='_blank' class='url'>http://www.mybatis.org/mybatis-3/zh/index.html</a></li>
<li>GitHub : <a href='https://github.com/mybatis/mybatis-3' target='_blank' class='url'>https://github.com/mybatis/mybatis-3</a></li>

</ul>
<h3>持久化</h3>
<ul>
<li><p><strong>持久化是将程序数据在持久状态和瞬时状态间转换的机制。</strong></p>
<ul>
<li>即把数据（如内存中的对象）保存到可永久保存的存储设备中（如磁盘）。持久化的主要应用是将内存中的对象存储在数据库中，或者存储在磁盘文件中、XML数据文件中等等。</li>
<li>JDBC就是一种持久化机制。文件IO也是一种持久化机制。</li>
<li>在生活中 : 将鲜肉冷藏，吃的时候再解冻的方法也是。将水果做成罐头的方法也是。</li>

</ul>
</li>
<li><p><strong>为什么需要持久化服务呢？那是由于内存本身的缺陷引起的</strong></p>
<ul>
<li>内存断电后数据会丢失，但有一些对象是无论如何都不能丢失的，比如银行账号等，遗憾的是，人们还无法保证内存永不掉电。</li>
<li>内存过于昂贵，与硬盘、光盘等外存相比，内存的价格要高2~3个数量级，而且维持成本也高，至少需要一直供电吧。所以即使对象不需要永久保存，也会因为内存的容量限制不能一直呆在内存中，需要持久化来缓存到外存。</li>

</ul>
</li>

</ul>
<h3>持久层</h3>
<ul>
<li><p>什么是持久层？</p>
<ul>
<li>完成持久化工作的代码块 . ----&gt; dao层 【DAO (Data Access Object) 数据访问对象】</li>
<li>大多数情况下特别是企业级应用，数据持久化往往也就意味着将内存中的数据保存到磁盘上加以固化，而持久化的实现过程则大多通过各种<strong>关系数据库</strong>来完成。</li>
<li>不过这里有一个字需要特别强调，也就是所谓的“层”。对于应用系统而言，数据持久功能大多是必不可少的组成部分。也就是说，我们的系统中，已经天然的具备了“持久层”概念？也许是，但也许实际情况并非如此。之所以要独立出一个“持久层”的概念,而不是“持久模块”，“持久单元”，也就意味着，我们的系统架构中，应该有一个相对独立的逻辑层面，专著于数据持久化逻辑的实现.</li>
<li>与系统其他部分相对而言，这个层面应该具有一个较为清晰和严格的逻辑边界。 【说白了就是用来操作数据库存在的！】</li>

</ul>
</li>

</ul>
<h3>为什么需要Mybatis</h3>
<ul>
<li><p>Mybatis就是帮助程序猿将数据存入数据库中 , 和从数据库中取数据 .</p>
</li>
<li><p>传统的jdbc操作 , 有很多重复代码块 .比如 : 数据取出时的封装 , 数据库的建立连接等等... , 通过框架可以减少重复代码,提高开发效率 .</p>
</li>
<li><p>MyBatis 是一个半自动化的<strong>ORM框架 (Object Relationship Mapping) --&gt;对象关系映射</strong></p>
</li>
<li><p>所有的事情，不用Mybatis依旧可以做到，只是用了它，所有实现会更加简单！<strong>技术没有高低之分，只有使用这个技术的人有高低之别</strong></p>
</li>
<li><p>MyBatis的优点</p>
<ul>
<li>简单易学：本身就很小且简单。没有任何第三方依赖，最简单安装只要两个jar文件+配置几个sql映射文件就可以了，易于学习，易于使用，通过文档和源代码，可以比较完全的掌握它的设计思路和实现。</li>
<li>灵活：mybatis不会对应用程序或者数据库的现有设计强加任何影响。 sql写在xml里，便于统一管理和优化。通过sql语句可以满足操作数据库的所有需求。</li>
<li>解除sql与程序代码的耦合：通过提供DAO层，将业务逻辑和数据访问逻辑分离，使系统的设计更清晰，更易维护，更易单元测试。sql和代码的分离，提高了可维护性。</li>
<li>提供xml标签，支持编写动态sql。</li>
<li>.......</li>

</ul>
</li>
<li><p>最重要的一点，使用的人多！公司需要！</p>
</li>
<li><p>环境说明：</p>
<ul>
<li>jdk 8 +</li>
<li>MySQL 5.7.19</li>
<li>maven-3.6.0</li>
<li>IDEA</li>

</ul>
<p>学习前需要掌握：</p>
<ul>
<li>JDBC</li>
<li>MySQL</li>
<li>Java 基础</li>
<li>Maven</li>
<li>Junit</li>

</ul>
</li>

</ul>
<h2>2、mybatis crud（实现增删改查）</h2>
<h4>1.1、创建一个maven项目</h4>
<p>		导入依赖</p>
<pre><code class='language-xml' lang='xml'>&lt;dependencies&gt;
    &lt;!--mysql驱动--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;mysql&lt;/groupId&gt;
        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
        &lt;version&gt;5.1.47&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;!--mybatis支持--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.mybatis&lt;/groupId&gt;
        &lt;artifactId&gt;mybatis&lt;/artifactId&gt;
        &lt;version&gt;3.5.2&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;!--junit支持--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;junit&lt;/groupId&gt;
        &lt;artifactId&gt;junit&lt;/artifactId&gt;
        &lt;version&gt;4.12&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
</code></pre>
<p>注意点 : pom文件的设置中需要设置资源过滤 , 否则会有资源文件打包不成功问题，导致项目无法运行；</p>
<pre><code class='language-xml' lang='xml'>&lt;build&gt;
    &lt;resources&gt;
        &lt;resource&gt;
            &lt;directory&gt;src/main/java&lt;/directory&gt;
            &lt;includes&gt;
                &lt;include&gt;**/*.properties&lt;/include&gt;
                &lt;include&gt;**/*.xml&lt;/include&gt;
            &lt;/includes&gt;
            &lt;filtering&gt;true&lt;/filtering&gt;
        &lt;/resource&gt;
    &lt;/resources&gt;
&lt;/build&gt;
</code></pre>
<p>&nbsp;</p>
<h4>1.2、创建数据库和表</h4>
<pre><code class='language-sql' lang='sql'>CREATE DATABASE mybatis CHARACTER SET utf8;
CREATE TABLE USER(
	id INT PRIMARY KEY,
	username VARCHAR(15) NOT NULL,
	pwd VARCHAR(20) NOT NULL
)
INSERT INTO USER VALUES(2018143114,&#39;张三&#39;,&#39;123456&#39;),(2018143115,&#39;李四&#39;,&#39;1234567&#39;),(2018143116,&#39;王五&#39;,&#39;147258&#39;);
SELECT * FROM USER;
</code></pre>
<h4>1.3、编写mybatis配置文件</h4>
<p>在resource里新建一个mybatis-config.xml文件</p>
<pre><code class='language-xml' lang='xml'>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE configuration
        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;
&lt;configuration&gt;
    &lt;environments default=&quot;development&quot;&gt;
        &lt;environment id=&quot;development&quot;&gt;
            &lt;transactionManager type=&quot;JDBC&quot;/&gt;
            &lt;dataSource type=&quot;POOLED&quot;&gt;
                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;
                &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;amp;useUnicode=true&amp;amp;characterEncoding=utf8&quot;/&gt;
                &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;
                &lt;property name=&quot;password&quot; value=&quot;hufei169357&quot;/&gt;
            &lt;/dataSource&gt;
        &lt;/environment&gt;
    &lt;/environments&gt;
    &lt;mappers&gt;
        &lt;mapper resource=&quot;com/feige/dao/userMapper.xml&quot;/&gt;
    &lt;/mappers&gt;
&lt;/configuration&gt;
</code></pre>
<h4>1.4、新建一个工具类用来获取SqlSession对象</h4>
<pre><code class='language-java' lang='java'>package com.feige.utils;

import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import java.io.IOException;
import java.io.InputStream;
//sqlSessionFactory-sqlSession
public class MybatisUtils {
    private static SqlSessionFactory sqlSessionFactory;
    static {
        try {
            //使用mybatis第一步：获取sqlSessionFactory对象
            String resource = &quot;mybatis-config.xml&quot;;
            InputStream inputStream = Resources.getResourceAsStream(resource);
            sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    //既然有了sqlSessionFactory，顾名思义，我们就可以从中获得sqlSession的实例
    public static SqlSession getSqlSessioon(){
        return sqlSessionFactory.openSession();
    }
}

</code></pre>
<p>&nbsp;</p>
<h4>1.5、编写一个pojo（实体类）</h4>
<pre><code class='language-java' lang='java'>package com.feige.pojo;

public class User {
    private int id;
    private String username;
    private String pwd;

    public User() {
    }

    public User(int id, String username, String pwd) {
        this.id = id;
        this.username = username;
        this.pwd = pwd;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getPwd() {
        return pwd;
    }

    public void setPwd(String pwd) {
        this.pwd = pwd;
    }
    @Override
    public String toString() {
        return &quot;User{&quot; +
                &quot;id=&quot; + id +
                &quot;, username=&#39;&quot; + username + &#39;\&#39;&#39; +
                &quot;, pwd=&#39;&quot; + pwd + &#39;\&#39;&#39; +
                &#39;}&#39;;
    }
}

</code></pre>
<h4>1.6、新建一个userMapper接口</h4>
<pre><code class='language-java' lang='java'>package com.feige.dao;

import com.feige.pojo.User;

import java.util.List;
import java.util.Map;

public interface UserMapper {
    //查询全部用户
    List&lt;User&gt; getAllUser();
    //通过一个id查询一个用户
    User getUserById(int id);
    //通过id修改一个用户
    int updateUserById(Map map);
    //通过id删除一个用户
    int deleteUserById(int id);
    //插入一条数据
    int insertUser(User user);
}

</code></pre>
<h4>1.7、新建一个userMapper.xml文件</h4>
<pre><code class='language-xml' lang='xml'>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE mapper
        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;com.feige.dao.UserMapper&quot;&gt;
    &lt;!--每个语句要对应相应的标签select对应&lt;select&gt; delete 对应&lt;delete&gt; update 对应&lt;update&gt; insert 对应&lt;insert&gt;--&gt;
    &lt;select id=&quot;getAllUser&quot; resultType=&quot;com.feige.pojo.User&quot;&gt;
        select * from user
    &lt;/select&gt;
    &lt;select id=&quot;getUserById&quot; resultType=&quot;com.feige.pojo.User&quot; parameterType=&quot;int&quot;&gt;
        select * from user where id=#{id}
    &lt;/select&gt;
    &lt;update id=&quot;updateUserById&quot; parameterType=&quot;map&quot;&gt;
        update user set pwd=#{pwd} where id=#{id}
    &lt;/update&gt;
    &lt;delete id=&quot;deleteUserById&quot; parameterType=&quot;int&quot;&gt;
        delete from user where id=#{id}
    &lt;/delete&gt;
    &lt;insert id=&quot;insertUser&quot; parameterType=&quot;com.feige.pojo.User&quot;&gt;
        insert into user values (#{id},#{username},#{pwd})
    &lt;/insert&gt;
&lt;/mapper&gt;
</code></pre>
<h4>1.8、测试代码</h4>
<pre><code class='language-java' lang='java'>package com.feige.mybatisTest;

import com.feige.dao.UserMapper;
import com.feige.pojo.User;
import com.feige.utils.MybatisUtils;
import org.apache.ibatis.session.SqlSession;
import org.junit.Test;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MybatisTest {
    @Test
    public void mybatisTest1(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        List&lt;User&gt; allUser = mapper.getAllUser();
        for (User user : allUser) {
            System.out.println(user);
        }
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest2(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        User userById = mapper.getUserById(2018143114);
        System.out.println(userById);
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest3() {
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        //使用万能map传参
        Map&lt;String,Object&gt; map = new HashMap&lt;String, Object&gt;();
        map.put(&quot;pwd&quot;,2018143114);
        map.put(&quot;id&quot;,2018143114);

        int i = mapper.updateUserById(map);
        if (i &gt; 0) {
            System.out.println(&quot;修改成功！&quot;+i);
        }
        //增删改需要提交事务
        sqlSessioon.commit();

        sqlSessioon.close();

    }
    @Test
    public void mybatisTest4(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        int i = mapper.deleteUserById(2018143117);
        if (i &gt; 0) {
            System.out.println(&quot;删除成功！&quot;+i);
        }
        sqlSessioon.commit();
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest5(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        User user = new User(2018143117, &quot;杨帆东&quot;, &quot;2018143117&quot;);
        int i = mapper.insertUser(user);
        if (i &gt; 0) {
            System.out.println(&quot;插入成功！&quot;+i);
        }
        sqlSessioon.commit();
        sqlSessioon.close();

    }
}

</code></pre>
<p>&nbsp;</p>
<p>		</p>, 2020-02-24 03:15:45.0, 2020-02-24 03:15:50.0, admin, 0]
[DEBUG][20-03-27][druid.sql.Statement]{conn-10004, pstmt-20002} created. select count(*) from `type`
[DEBUG][20-03-27][druid.sql.Statement]{conn-10004, pstmt-20002} Parameters : []
[DEBUG][20-03-27][druid.sql.Statement]{conn-10004, pstmt-20002} Types : []
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50000} Result: [7, mybatis, mybatis啊, 作者, 2020-02-24 03:27:18.0, 2020-02-24 03:27:18.0, admin, 1]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50000} Result: [8, springboot, aaa, [TOC]
                            #### Disabled options

                            - TeX (Based on KaTeX);
                            - Emoji;
                            - Task lists;
                            - HTML tags decode;
                            - Flowchart and Sequence Diagram;
                            #### Editor.md directory

                                editor.md/
                                        lib/
                                        css/
                                        scss/
                                        tests/
                                        fonts/
                                        images/
                                        plugins/
                                        examples/
                                        languages/
                                        editormd.js
                                        ...

                            ```html
                            <!-- English -->
                            <script src="../dist/js/languages/en.js"></script>

                            <!-- 繁體中文 -->
                            <script src="../dist/js/languages/zh-tw.js"></script>
                            ```
                        , 2020-02-25 03:39:36.0, 2020-02-25 22:38:07.0, admin, 1]
[DEBUG][20-03-27][druid.sql.Statement]{conn-10004, pstmt-20002} executed. 1.965776 millis. select count(*) from `type`
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10004, pstmt-20002, rs-50002} open
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10004, pstmt-20002, rs-50002} Header: [count(*)]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50000} Result: [9, mybatis, bbb, [TOC]

                            #### Disabled options

                            - TeX (Based on KaTeX);
                            - Emoji;
                            - Task lists;
                            - HTML tags decode;
                            - Flowchart and Sequence Diagram;

                            #### Editor.md directory

                                editor.md/
                                        lib/
                                        css/
                                        scss/
                                        tests/
                                        fonts/
                                        images/
                                        plugins/
                                        examples/
                                        languages/
                                        editormd.js
                                        ...

                            ```html
                            <!-- English -->
                            <script src="../dist/js/languages/en.js"></script>

                            <!-- 繁體中文 -->
                            <script src="../dist/js/languages/zh-tw.js"></script>
                            ```
                        , 2020-02-25 03:44:09.0, 2020-02-25 03:44:09.0, admin, 1]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10004, pstmt-20002, rs-50002} Result: [4]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50000} Result: [10, springboot, 飞哥, #大哥的Markdown, 2020-02-25 22:43:28.0, 2020-02-25 22:43:28.0, admin, 1]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50000} Result: [11, mybatis, 大哥, #飞哥的博客后台管理系统, 2020-02-25 22:49:26.0, 2020-02-25 22:49:26.0, admin, 1]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10004, pstmt-20002, rs-50002} closed
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50000} closed
[DEBUG][20-03-27][druid.sql.Statement]{conn-10004, pstmt-20002} clearParameters. 
[DEBUG][20-03-27][druid.sql.Statement]{conn-10005, pstmt-20001} clearParameters. 
[DEBUG][20-03-27][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-27][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-27][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-27][druid.sql.Statement]{conn-10005, pstmt-20003} created. select count(*) from `blog`
[DEBUG][20-03-27][druid.sql.Statement]{conn-10005, pstmt-20003} Parameters : []
[DEBUG][20-03-27][druid.sql.Statement]{conn-10005, pstmt-20003} Types : []
[DEBUG][20-03-27][druid.sql.Statement]{conn-10005, pstmt-20003} executed. 2.668887 millis. select count(*) from `blog`
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10005, pstmt-20003, rs-50003} open
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10005, pstmt-20003, rs-50003} Header: [count(*)]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10005, pstmt-20003, rs-50003} Result: [13]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10005, pstmt-20003, rs-50003} closed
[DEBUG][20-03-27][druid.sql.Statement]{conn-10005, pstmt-20003} clearParameters. 
[DEBUG][20-03-27][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-27][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-27][druid.sql.Statement]{conn-10005, pstmt-20001} Parameters : [10, 10]
[DEBUG][20-03-27][druid.sql.Statement]{conn-10005, pstmt-20001} Types : [INTEGER, INTEGER]
[DEBUG][20-03-27][druid.sql.Statement]{conn-10005, pstmt-20001} executed. 6.529328 millis. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog
         
            limit ?,?
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50004} open
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50004} Header: [id, type_name, title, content, create_time, change_time, author, view]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50004} Result: [12, mybatis, 56, ##等待, 2020-02-25 22:50:53.0, 2020-02-25 22:50:53.0, admin, 5]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50004} Result: [13, mybatis, ssm1整合, # ssm整合

## 1、数据库环境

创建一个存放书籍数据的数据库表

```sql
CREATE DATABASE `ssmbuild`;

USE `ssmbuild`;

DROP TABLE IF EXISTS `books`;

CREATE TABLE `books` (
  `bookId` INT PRIMARY KEY COMMENT '书id',
  `bookName` VARCHAR(100) NOT NULL COMMENT '书名',
  `bookCounts` INT(11) NOT NULL COMMENT '数量',
  ``ssmbuild``ssmbuild`` VARCHAR(200) NOT NULL COMMENT '描述'
) ENGINE=INNODB DEFAULT CHARSET=utf8

INSERT  INTO `books`(`bookId`,`bookName`,`bookCounts`,`detail`)VALUES 
(1,'Java',1,'从入门到放弃'),
(2,'MySQL',10,'从删库到跑路'),
(3,'Linux',5,'从进门到进牢');

SELECT * FROM books
```

## 2、基本环境搭建

1. 新建一Maven项目！ ssmbuild ， 添加web的支持

   ![image-20200128134359317](.\ssm整合.assets\image-20200128134359317.png)

2. 导入相关的pom依赖！

   ```xml
   <dependencies>
       <!--Junit-->
       <dependency>
           <groupId>junit</groupId>
           <artifactId>junit</artifactId>
           <version>4.12</version>
       </dependency>
       <!--数据库驱动-->
       <dependency>
           <groupId>mysql</groupId>
           <artifactId>mysql-connector-java</artifactId>
           <version>5.1.47</version>
       </dependency>
       <!-- 数据库连接池 -->
       <dependency>
           <groupId>com.mchange</groupId>
           <artifactId>c3p0</artifactId>
           <version>0.9.5.2</version>
       </dependency>
   
       <!--Servlet - JSP -->
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>servlet-api</artifactId>
           <version>2.5</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet.jsp</groupId>
           <artifactId>jsp-api</artifactId>
           <version>2.2</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>jstl</artifactId>
           <version>1.2</version>
       </dependency>
   
       <!--Mybatis-->
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis</artifactId>
           <version>3.5.2</version>
       </dependency>
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis-spring</artifactId>
           <version>2.0.2</version>
       </dependency>
   
       <!--Spring-->
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-webmvc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-jdbc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->
       <dependency>
           <groupId>org.projectlombok</groupId>
           <artifactId>lombok</artifactId>
           <version>1.16.10</version>
       </dependency>
   </dependencies>
   ```

3. Maven资源过滤设置

   ```xml
   <build>
       <resources>
           <resource>
               <directory>src/main/java</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
           <resource>
               <directory>src/main/resources</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
       </resources>
   </build>
   ```

4. 建立基本结构和配置框架！

   - com.feige.pojo

   - com.feige.dao

   - com.feige.service

   - com.feige.controller

     在resources目录下创建

   - mybatis-config.xml

     ```xml
     <?xml version="1.0" encoding="UTF-8" ?>
     <!DOCTYPE configuration
             PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
             "http://mybatis.org/dtd/mybatis-3-config.dtd">
     <configuration>
     
     </configuration>
     ```

   - applicationContext.xml

     ```xml
     <?xml version="1.0" encoding="UTF-8"?>
     <beans xmlns="http://www.springframework.org/schema/beans"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://www.springframework.org/schema/beans
             http://www.springframework.org/schema/beans/spring-beans.xsd">
     
     </beans>
     ```

## 3、Mybatis层编写

1. 数据库配置文件 **database.properties**

   ```properties
   jdbc.driver=com.mysql.jdbc.Driver
   jdbc.url=jdbc:mysql://localhost:3306/ssmbuild?useSSL=true&useUnicode=true&characterEncoding=utf8
   jdbc.username=root
   jdbc.password=hufei169357
   ```

2. IDEA关联数据库

3. 编写MyBatis的核心配置文件

   ```xml
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE configuration
           PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-config.dtd">
   <configuration>
       
       <typeAliases>
           <package name="com.feige.pojo"/>
       </typeAliases>
       <mappers>
           <mapper resource="com/feige/dao/BookMapper.xml"/>
       </mappers>
   
   </configuration>
   ```

4. 编写数据库对应的实体类 com.feige.pojo.Books
   使用lombok插件！

   ```java
   package com.kuang.pojo;
   
   import lombok.AllArgsConstructor;
   import lombok.Data;
   import lombok.NoArgsConstructor;
   
   @Data
   @AllArgsConstructor
   @NoArgsConstructor
   public class Books {
       
       private int bookId;
       private String bookName;
       private int bookCounts;
       private String detail;
       
   }
   ```

5. 编写Dao层的 Mapper接口！

   ```java
   package com.kuang.dao;
   
   import com.kuang.pojo.Books;
   import java.util.List;
   
   public interface BookMapper {
   
       //增加一个Book
       int addBook(Books book);
   
       //根据id删除一个Book
       int deleteBookById(int id);
   
       //更新Book
       int updateBook(Books books);
   
       //根据id查询,返回一个Book
       Books queryBookById(int id);
   
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   
   }
   ```

6. 编写接口对应的 Mapper.xml 文件。需要导入MyBatis的包；

   ```xml
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE mapper
           PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
   
   <mapper namespace="com.feige.dao.BooksMapper">
   
       <!--增加一个Book-->
       <insert id="addBook" parameterType="Books">
           insert into books(bookName,bookCounts,detail)
           values (#{bookName}, #{bookCounts}, #{detail})
       </insert>
   
       <!--根据id删除一个Book-->
       <delete id="deleteBookById" parameterType="int">
           delete from books where bookId=#{bookId}
       </delete>
   
       <!--更新Book-->
       <update id="updateBook" parameterType="Books">
           update books
           set bookName = #{bookName},bookCounts = #{bookCounts},detail = #{detail}
           where bookId = #{bookId}
       </update>
   
       <!--根据id查询,返回一个Book-->
       <select id="queryBookById" resultType="Books">
           select * from books
           where bookID = #{bookId}
       </select>
   
       <!--查询全部Book-->
       <select id="queryAllBook" resultType="com.feige.pojo.Books">
           SELECT * from books
       </select>
   
   </mapper>
   ```

7. 编写Service层的接口和实现类
   接口：

   ```java
   package com.feige.service;
   
   import com.feige.pojo.Books;
   
   import java.util.List;
   
   //BookService:底下需要去实现,调用dao层
   public interface BookService {
       //增加一个Book
       int addBook(Books book);
       //根据id删除一个Book
       int deleteBookById(int id);
       //更新Book
       int updateBook(Books books);
       //根据id查询,返回一个Book
       Books queryBookById(int id);
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   }
   ```

实现类：

```java
package com.feige.service;

import com.feige.dao.BookMapper;
import com.feige.pojo.Books;
import java.util.List;

public class BookServiceImpl implements BookService {

    //调用dao层的操作，设置一个set接口，方便Spring管理
    private BookMapper bookMapper;

    public void setBookMapper(BookMapper bookMapper) {
        this.bookMapper = bookMapper;
    }
    
    public int addBook(Books book) {
        return bookMapper.addBook(book);
    }
    
    public int deleteBookById(int id) {
        return bookMapper.deleteBookById(id);
    }
    
    public int updateBook(Books books) {
        return bookMapper.updateBook(books);
    }
    
    public Books queryBookById(int id) {
        return bookMapper.queryBookById(id);
    }
    
    public List<Books> queryAllBook() {
        return bookMapper.queryAllBook();
    }
}
```

**OK，到此，底层需求操作编写完毕！**

## 4、Spring层

1. 配置**Spring整合MyBatis**，我们这里数据源使用c3p0连接池；

2. 我们去编写Spring整合Mybatis的相关的配置文件； spring-dao.xml

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans.xsd
   http://www.springframework.org/schema/context
   https://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 配置整合mybatis -->
       <!-- 1.关联数据库文件 -->
       <context:property-placeholder location="classpath:database.properties"/>
   
       <!-- 2.数据库连接池 -->
       <!--数据库连接池
   dbcp  半自动化操作  不能自动连接
   c3p0  自动化操作（自动的加载配置文件 并且设置到对象里面）
       -->
       <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
   <!-- 配置连接池属性 -->
   <property name="driverClass" value="${jdbc.driver}"/>
   <property name="jdbcUrl" value="${jdbc.url}"/>
   <property name="user" value="${jdbc.username}"/>
   <property name="password" value="${jdbc.password}"/>
   
   <!-- c3p0连接池的私有属性 -->
   <property name="maxPoolSize" value="30"/>
   <property name="minPoolSize" value="10"/>
   <!-- 关闭连接后不自动commit -->
   <property name="autoCommitOnClose" value="false"/>
   <!-- 获取连接超时时间 -->
   <property name="checkoutTimeout" value="10000"/>
   <!-- 当获取连接失败重试次数 -->
   <property name="acquireRetryAttempts" value="2"/>
       </bean>
   
       <!-- 3.配置SqlSessionFactory对象 -->
       <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource"/>
   <!-- 配置MyBaties全局配置文件:mybatis-config.xml -->
   <property name="configLocation" value="classpath:mybatis-config.xml"/>
       </bean>
   
       <!-- 4.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 -->
       <!--解释 ： https://www.cnblogs.com/jpfss/p/7799806.html-->
       <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
   <!-- 注入sqlSessionFactory -->
   <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
   <!-- 给出需要扫描Dao接口包 -->
   <property name="basePackage" value="com.feige.dao"/>
       </bean>
   
   </beans>
   ```

3. **Spring整合service层**

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 扫描service相关的bean -->
       <context:component-scan base-package="com.kuang.service" />
   
       <!--BookServiceImpl注入到IOC容器中-->
       <bean id="BookServiceImpl" class="com.kuang.service.BookServiceImpl">
   <property name="bookMapper" ref="bookMapper"/>
       </bean>
   
       <!-- 配置事务管理器 -->
       <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource" />
       </bean>
   
   </beans>
   ```

Spring层搞定！再次理解一下，Spring就是一个大杂烩，一个容器！对吧！

## 5、SpringMVC层

1. **web.xml**

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
            version="4.0">
   
       <!--DispatcherServlet-->
       <servlet>
           <servlet-name>DispatcherServlet</servlet-name>
           <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
           <init-param>
               <param-name>contextConfigLocation</param-name>
               <param-value>classpath:applicationContext.xml</param-value>
           </init-param>
           <load-on-startup>1</load-on-startup>
       </servlet>
       <servlet-mapping>
           <servlet-name>DispatcherServlet</servlet-name>
           <url-pattern>/</url-pattern>
       </servlet-mapping>
   
       <!--encodingFilter-->
       <filter>
           <filter-name>encodingFilter</filter-name>
           <filter-class>
               org.springframework.web.filter.CharacterEncodingFilter
           </filter-class>
           <init-param>
               <param-name>encoding</param-name>
               <param-value>utf-8</param-value>
           </init-param>
       </filter>
       <filter-mapping>
           <filter-name>encodingFilter</filter-name>
           <url-pattern>/*</url-pattern>
       </filter-mapping>
       
       <!--Session过期时间-->
       <session-config>
           <session-timeout>15</session-timeout>
       </session-config>
       
   </web-app>
   ```

2. **spring-mvc.xml**

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xmlns:mvc="http://www.springframework.org/schema/mvc"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       https://www.springframework.org/schema/mvc/spring-mvc.xsd">
   
       <!-- 配置SpringMVC -->
       <!-- 1.开启SpringMVC注解驱动 -->
       <mvc:annotation-driven>
           <mvc:message-converters register-defaults="true">
               <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                   <constructor-arg value="UTF-8"/>
               </bean>
               <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                   <property name="objectMapper">
                       <bean class="org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean">
                           <property name="failOnEmptyBeans" value="false"/>
                       </bean>
                   </property>
               </bean>
           </mvc:message-converters>
       </mvc:annotation-driven>
       <!--解决跨域问题-->
       <mvc:cors>
       <mvc:mapping path="/**"
                    allowed-origins="http://127.0.0.1:8090,http://localhost:8090"
                    allowed-methods="POST,GET, OPTIONS,DELETE,PUT"
                    allowed-headers="Content-Type,ContentType,Access-Control-Allow-Headers, Authorization, X-Requested-With"
                    allow-credentials="true"/>
       </mvc:cors>
       <!-- 2.静态资源默认servlet配置-->
       <mvc:default-servlet-handler/>
   
       <!-- 3.配置jsp 显示ViewResolver视图解析器 -->
       <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
           <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
           <property name="prefix" value="/WEB-INF/jsp/" />
           <property name="suffix" value=".jsp" />
       </bean>
   
       <!-- 4.扫描web相关的bean -->
       <context:component-scan base-package="com.feige.controller" />
   
   </beans>
   ```

3. **Spring配置整合文件，applicationContext.xml**

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd">
   
       <import resource="spring-dao.xml"/>
       <import resource="spring-service.xml"/>
       <import resource="spring-mvc.xml"/>
       
   </beans>
   ```

**配置文件，暂时结束！Controller 和 视图层编写**

1. BookController 类编写 ， 方法一：查询全部书籍

   ```java
   @Controller
   @RequestMapping("/book")
   public class BookController {
   
       @Autowired
       @Qualifier("BookServiceImpl")
       private BookService bookService;
   
       @RequestMapping("/allBook")
       public String list(Model model) {
           List<Books> list = bookService.queryAllBook();
           model.addAttribute("list", list);
           return "allBook";
       }
   }
   ```

2. 编写首页 **index.jsp**

   ```html
   <%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" %>
   <!DOCTYPE HTML>
   <html>
   <head>
       <title>首页</title>
       <style type="text/css">
           a {
               text-decoration: none;
               color: black;
               font-size: 18px;
           }
           h3 {
               width: 180px;
               height: 38px;
               margin: 100px auto;
               text-align: center;
               line-height: 38px;
               background: deepskyblue;
               border-radius: 4px;
           }
       </style>
   </head>
   <body>
   
   <h3>
       <a href="${pageContext.request.contextPath}/book/allBook">点击进入列表页</a>
   </h3>
   </body>
   </html>
   ```

3. 书籍列表页面 **allbook.jsp**

   ```jsp
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>书籍列表</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>书籍列表 —— 显示所有书籍</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <div class="row">
           <div class="col-md-4 column">
               <a class="btn btn-primary" href="${pageContext.request.contextPath}/book/toAddBook">新增</a>
           </div>
       </div>
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <table class="table table-hover table-striped">
                   <thead>
                   <tr>
                       <th>书籍编号</th>
                       <th>书籍名字</th>
                       <th>书籍数量</th>
                       <th>书籍详情</th>
                       <th>操作</th>
                   </tr>
                   </thead>
   
                   <tbody>
                   <c:forEach var="book" items="${requestScope.get('list')}">
                       <tr>
                           <td>${book.getBookId()}</td>
                           <td>${book.getBookName()}</td>
                           <td>${book.getBookCounts()}</td>
                           <td>${book.getDetail()}</td>
                           <td>
                               <a href="${pageContext.request.contextPath}/book/toUpdateBook?id=${book.getBookId()}">更改</a> |
                               <a href="${pageContext.request.contextPath}/book/del/${book.getBookId()}">删除</a>
                           </td>
                       </tr>
                   </c:forEach>
                   </tbody>
               </table>
           </div>
       </div>
   </div>
   ```

4. BookController 类编写 ， 方法二：添加书籍

   ```java
   @RequestMapping("/toAddBook")
   public String toAddPaper() {
       return "addBook";
   }
   
   @RequestMapping("/addBook")
   public String addPaper(Books books) {
       System.out.println(books);
       bookService.addBook(books);
       return "redirect:/book/allBook";
   }
   ```

5. 添加书籍页面：**addBook.jsp**

   ```jsp
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   
   <html>
   <head>
       <title>新增书籍</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>新增书籍</small>
                   </h1>
               </div>
           </div>
       </div>
       <form action="${pageContext.request.contextPath}/book/addBook" method="post">
           书籍名称：<input type="text" name="bookName"><br><br><br>
           书籍数量：<input type="text" name="bookCounts"><br><br><br>
           书籍详情：<input type="text" name="detail"><br><br><br>
           <input type="submit" value="添加">
       </form>
   
   </div>
   ```

6. BookController 类编写 ， 方法三：修改书籍

   ```java
   @RequestMapping("/toUpdateBook")
   public String toUpdateBook(Model model, int id) {
       Books books = bookService.queryBookById(id);
       System.out.println(books);
       model.addAttribute("book",books );
       return "updateBook";
   }
   
   @RequestMapping("/updateBook")
   public String updateBook(Model model, Books book) {
       bookService.updateBook(book);
       Books books = bookService.queryBookById(book.getBookID());
       model.addAttribute("books", books);
       return "redirect:/book/allBook";
   }
   ```

7. 修改书籍页面 **updateBook.jsp**

   ```jsp
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>修改信息</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>修改信息</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <form action="${pageContext.request.contextPath}/book/updateBook" method="post">
           <input type="hidden" name="bookID" value="${book.getBookId()}"/>
           书籍名称：<input type="text" name="bookName" value="${book.getBookName()}"/>
           书籍数量：<input type="text" name="bookCounts" value="${book.getBookCounts()}"/>
           书籍详情：<input type="text" name="detail" value="${book.getDetail() }"/>
           <input type="submit" value="提交"/>
       </form>
   
   </div>
   ```

8. BookController 类编写 ， 方法四：删除书籍

   ```java
   @RequestMapping("/del/{bookId}")
   public String deleteBook(@PathVariable("bookId") int id) {
       bookService.deleteBookById(id);
       return "redirect:/book/allBook";
   }
   ```

**配置Tomcat，进行运行！**

到目前为止，这个SSM项目整合已经完全的OK了，可以直接运行进行测试！这个练习十分的重要，大家需要保证，不看任何东西，自己也可以完整的实现出来！

## **6、项目结构图**

![1570186854191.png](https://blog.kuangstudy.com/usr/uploads/2019/10/1086489242.png)

![1570186868239.png](https://blog.kuangstudy.com/usr/uploads/2019/10/2326667495.png)

## 7、错误排查

### 1、访问出现404，排查步骤：**

1. 查看控制台输出，看一下是不是缺少了什么jar包。

2. 如果jar包存在，显示无法输出，就在IDEA的项目发布中，添加lib依赖！

   步骤：点击项目结构----->Artifacts----->点击自己的项目(ssm:war exploded)--->(点击工具栏的第一个)在WEB-INF目录下新建一个lib包----->选中lib------>点击工具栏的第三个然后选中第一个---->把里面的包全部选中点击ok---->点击Apply再ok

   ![image-20200128125126368](E:\Java资料\ssm整合.assets\image-20200128125126368.png)

   ![image-20200128125237179](E:\Java资料\ssm整合.assets\image-20200128125237179.png)

3. 重启Tomcat 即可解决！

### 2、其他错误

#### 1、bean不存在

​	步骤：

​		查看bean注入是否成功 

​		junit单元测试，看我们的代码是否能够查询出来

​		问题不在底层，是我们spring出了问题

​		springMVC整合时没有调用到service层的bean

​			applicationContext.xml没有注册bean

​			web.xml也绑定过配置文件要绑定大的applicationContext.xml

​			

## 8、小结及展望

这个是同学们的第一个SSM整合案例，一定要烂熟于心！

SSM框架的重要程度是不言而喻的，学到这里，大家已经可以进行基本网站的单独开发。但是这只是增删改查的基本操作。可以说学到这里，大家才算是真正的步入了后台开发的门。也就是能找一个后台相关工作的底线。

或许很多人，工作就做这些事情，但是对于个人的提高来说，还远远不够！, 2020-03-02 07:06:53.0, 2020-03-23 19:38:47.0, null, 10]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50004} Result: [17, springboot, , ss, 2020-02-24 03:07:20.0, 2020-03-20 00:07:13.0, admin, 11]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10005, pstmt-20001, rs-50004} closed
[DEBUG][20-03-27][druid.sql.Statement]{conn-10005, pstmt-20001} clearParameters. 
[DEBUG][20-03-27][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-27][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-27][druid.sql.Statement]{conn-10005, pstmt-20003} Parameters : []
[DEBUG][20-03-27][druid.sql.Statement]{conn-10005, pstmt-20003} Types : []
[DEBUG][20-03-27][druid.sql.Statement]{conn-10005, pstmt-20003} executed. 0.814666 millis. select count(*) from `blog`
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10005, pstmt-20003, rs-50005} open
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10005, pstmt-20003, rs-50005} Header: [count(*)]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10005, pstmt-20003, rs-50005} Result: [13]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10005, pstmt-20003, rs-50005} closed
[DEBUG][20-03-27][druid.sql.Statement]{conn-10005, pstmt-20003} clearParameters. 
[DEBUG][20-03-27][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-27][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-27][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-27][druid.sql.Connection]{conn-10003} pool-connect
[DEBUG][20-03-27][druid.sql.Statement]{conn-10005, pstmt-20004} created. select id,type_name typeName
        from `type`
         
            limit ?,?
[DEBUG][20-03-27][druid.sql.Statement]{conn-10005, pstmt-20004} Parameters : [0, 30]
[DEBUG][20-03-27][druid.sql.Statement]{conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]
[DEBUG][20-03-27][druid.sql.Statement]{conn-10005, pstmt-20004} executed. 2.887998 millis. select id,type_name typeName
        from `type`
         
            limit ?,?
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50006} open
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50006} Header: [id, type_name]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50006} Result: [3, mybatis]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50006} Result: [2, spring]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50006} Result: [1, springboot]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50006} Result: [4, springMVC]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50006} closed
[DEBUG][20-03-27][druid.sql.Statement]{conn-10005, pstmt-20004} clearParameters. 
[DEBUG][20-03-27][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-27][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-27][druid.sql.Statement]{conn-10005, pstmt-20005} created. select count(*) from `type`
[DEBUG][20-03-27][druid.sql.Statement]{conn-10005, pstmt-20005} Parameters : []
[DEBUG][20-03-27][druid.sql.Statement]{conn-10005, pstmt-20005} Types : []
[DEBUG][20-03-27][druid.sql.Statement]{conn-10005, pstmt-20005} executed. 0.997777 millis. select count(*) from `type`
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50007} open
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50007} Header: [count(*)]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50007} Result: [4]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50007} closed
[DEBUG][20-03-27][druid.sql.Statement]{conn-10005, pstmt-20005} clearParameters. 
[DEBUG][20-03-27][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-27][druid.sql.Statement]{conn-10004, pstmt-20006} created. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog where id=?
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20007} created. select distinct count(*) from comments c
        where c.blog_id=? and
        c.parent_id is null;
[DEBUG][20-03-27][druid.sql.Statement]{conn-10004, pstmt-20006} Parameters : [13]
[DEBUG][20-03-27][druid.sql.Statement]{conn-10004, pstmt-20006} Types : [INTEGER]
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20007} Parameters : [13]
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20007} Types : [INTEGER]
[DEBUG][20-03-27][druid.sql.Statement]{conn-10004, pstmt-20006} executed. 6.079994 millis. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog where id=?
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10004, pstmt-20006, rs-50008} open
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10004, pstmt-20006, rs-50008} Header: [id, type_name, title, content, create_time, change_time, author, view]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10004, pstmt-20006, rs-50008} Result: [13, mybatis, ssm1整合, # ssm整合

## 1、数据库环境

创建一个存放书籍数据的数据库表

```sql
CREATE DATABASE `ssmbuild`;

USE `ssmbuild`;

DROP TABLE IF EXISTS `books`;

CREATE TABLE `books` (
  `bookId` INT PRIMARY KEY COMMENT '书id',
  `bookName` VARCHAR(100) NOT NULL COMMENT '书名',
  `bookCounts` INT(11) NOT NULL COMMENT '数量',
  ``ssmbuild``ssmbuild`` VARCHAR(200) NOT NULL COMMENT '描述'
) ENGINE=INNODB DEFAULT CHARSET=utf8

INSERT  INTO `books`(`bookId`,`bookName`,`bookCounts`,`detail`)VALUES 
(1,'Java',1,'从入门到放弃'),
(2,'MySQL',10,'从删库到跑路'),
(3,'Linux',5,'从进门到进牢');

SELECT * FROM books
```

## 2、基本环境搭建

1. 新建一Maven项目！ ssmbuild ， 添加web的支持

   ![image-20200128134359317](.\ssm整合.assets\image-20200128134359317.png)

2. 导入相关的pom依赖！

   ```xml
   <dependencies>
       <!--Junit-->
       <dependency>
           <groupId>junit</groupId>
           <artifactId>junit</artifactId>
           <version>4.12</version>
       </dependency>
       <!--数据库驱动-->
       <dependency>
           <groupId>mysql</groupId>
           <artifactId>mysql-connector-java</artifactId>
           <version>5.1.47</version>
       </dependency>
       <!-- 数据库连接池 -->
       <dependency>
           <groupId>com.mchange</groupId>
           <artifactId>c3p0</artifactId>
           <version>0.9.5.2</version>
       </dependency>
   
       <!--Servlet - JSP -->
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>servlet-api</artifactId>
           <version>2.5</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet.jsp</groupId>
           <artifactId>jsp-api</artifactId>
           <version>2.2</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>jstl</artifactId>
           <version>1.2</version>
       </dependency>
   
       <!--Mybatis-->
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis</artifactId>
           <version>3.5.2</version>
       </dependency>
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis-spring</artifactId>
           <version>2.0.2</version>
       </dependency>
   
       <!--Spring-->
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-webmvc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-jdbc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->
       <dependency>
           <groupId>org.projectlombok</groupId>
           <artifactId>lombok</artifactId>
           <version>1.16.10</version>
       </dependency>
   </dependencies>
   ```

3. Maven资源过滤设置

   ```xml
   <build>
       <resources>
           <resource>
               <directory>src/main/java</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
           <resource>
               <directory>src/main/resources</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
       </resources>
   </build>
   ```

4. 建立基本结构和配置框架！

   - com.feige.pojo

   - com.feige.dao

   - com.feige.service

   - com.feige.controller

     在resources目录下创建

   - mybatis-config.xml

     ```xml
     <?xml version="1.0" encoding="UTF-8" ?>
     <!DOCTYPE configuration
             PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
             "http://mybatis.org/dtd/mybatis-3-config.dtd">
     <configuration>
     
     </configuration>
     ```

   - applicationContext.xml

     ```xml
     <?xml version="1.0" encoding="UTF-8"?>
     <beans xmlns="http://www.springframework.org/schema/beans"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://www.springframework.org/schema/beans
             http://www.springframework.org/schema/beans/spring-beans.xsd">
     
     </beans>
     ```

## 3、Mybatis层编写

1. 数据库配置文件 **database.properties**

   ```properties
   jdbc.driver=com.mysql.jdbc.Driver
   jdbc.url=jdbc:mysql://localhost:3306/ssmbuild?useSSL=true&useUnicode=true&characterEncoding=utf8
   jdbc.username=root
   jdbc.password=hufei169357
   ```

2. IDEA关联数据库

3. 编写MyBatis的核心配置文件

   ```xml
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE configuration
           PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-config.dtd">
   <configuration>
       
       <typeAliases>
           <package name="com.feige.pojo"/>
       </typeAliases>
       <mappers>
           <mapper resource="com/feige/dao/BookMapper.xml"/>
       </mappers>
   
   </configuration>
   ```

4. 编写数据库对应的实体类 com.feige.pojo.Books
   使用lombok插件！

   ```java
   package com.kuang.pojo;
   
   import lombok.AllArgsConstructor;
   import lombok.Data;
   import lombok.NoArgsConstructor;
   
   @Data
   @AllArgsConstructor
   @NoArgsConstructor
   public class Books {
       
       private int bookId;
       private String bookName;
       private int bookCounts;
       private String detail;
       
   }
   ```

5. 编写Dao层的 Mapper接口！

   ```java
   package com.kuang.dao;
   
   import com.kuang.pojo.Books;
   import java.util.List;
   
   public interface BookMapper {
   
       //增加一个Book
       int addBook(Books book);
   
       //根据id删除一个Book
       int deleteBookById(int id);
   
       //更新Book
       int updateBook(Books books);
   
       //根据id查询,返回一个Book
       Books queryBookById(int id);
   
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   
   }
   ```

6. 编写接口对应的 Mapper.xml 文件。需要导入MyBatis的包；

   ```xml
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE mapper
           PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
   
   <mapper namespace="com.feige.dao.BooksMapper">
   
       <!--增加一个Book-->
       <insert id="addBook" parameterType="Books">
           insert into books(bookName,bookCounts,detail)
           values (#{bookName}, #{bookCounts}, #{detail})
       </insert>
   
       <!--根据id删除一个Book-->
       <delete id="deleteBookById" parameterType="int">
           delete from books where bookId=#{bookId}
       </delete>
   
       <!--更新Book-->
       <update id="updateBook" parameterType="Books">
           update books
           set bookName = #{bookName},bookCounts = #{bookCounts},detail = #{detail}
           where bookId = #{bookId}
       </update>
   
       <!--根据id查询,返回一个Book-->
       <select id="queryBookById" resultType="Books">
           select * from books
           where bookID = #{bookId}
       </select>
   
       <!--查询全部Book-->
       <select id="queryAllBook" resultType="com.feige.pojo.Books">
           SELECT * from books
       </select>
   
   </mapper>
   ```

7. 编写Service层的接口和实现类
   接口：

   ```java
   package com.feige.service;
   
   import com.feige.pojo.Books;
   
   import java.util.List;
   
   //BookService:底下需要去实现,调用dao层
   public interface BookService {
       //增加一个Book
       int addBook(Books book);
       //根据id删除一个Book
       int deleteBookById(int id);
       //更新Book
       int updateBook(Books books);
       //根据id查询,返回一个Book
       Books queryBookById(int id);
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   }
   ```

实现类：

```java
package com.feige.service;

import com.feige.dao.BookMapper;
import com.feige.pojo.Books;
import java.util.List;

public class BookServiceImpl implements BookService {

    //调用dao层的操作，设置一个set接口，方便Spring管理
    private BookMapper bookMapper;

    public void setBookMapper(BookMapper bookMapper) {
        this.bookMapper = bookMapper;
    }
    
    public int addBook(Books book) {
        return bookMapper.addBook(book);
    }
    
    public int deleteBookById(int id) {
        return bookMapper.deleteBookById(id);
    }
    
    public int updateBook(Books books) {
        return bookMapper.updateBook(books);
    }
    
    public Books queryBookById(int id) {
        return bookMapper.queryBookById(id);
    }
    
    public List<Books> queryAllBook() {
        return bookMapper.queryAllBook();
    }
}
```

**OK，到此，底层需求操作编写完毕！**

## 4、Spring层

1. 配置**Spring整合MyBatis**，我们这里数据源使用c3p0连接池；

2. 我们去编写Spring整合Mybatis的相关的配置文件； spring-dao.xml

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans.xsd
   http://www.springframework.org/schema/context
   https://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 配置整合mybatis -->
       <!-- 1.关联数据库文件 -->
       <context:property-placeholder location="classpath:database.properties"/>
   
       <!-- 2.数据库连接池 -->
       <!--数据库连接池
   dbcp  半自动化操作  不能自动连接
   c3p0  自动化操作（自动的加载配置文件 并且设置到对象里面）
       -->
       <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
   <!-- 配置连接池属性 -->
   <property name="driverClass" value="${jdbc.driver}"/>
   <property name="jdbcUrl" value="${jdbc.url}"/>
   <property name="user" value="${jdbc.username}"/>
   <property name="password" value="${jdbc.password}"/>
   
   <!-- c3p0连接池的私有属性 -->
   <property name="maxPoolSize" value="30"/>
   <property name="minPoolSize" value="10"/>
   <!-- 关闭连接后不自动commit -->
   <property name="autoCommitOnClose" value="false"/>
   <!-- 获取连接超时时间 -->
   <property name="checkoutTimeout" value="10000"/>
   <!-- 当获取连接失败重试次数 -->
   <property name="acquireRetryAttempts" value="2"/>
       </bean>
   
       <!-- 3.配置SqlSessionFactory对象 -->
       <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource"/>
   <!-- 配置MyBaties全局配置文件:mybatis-config.xml -->
   <property name="configLocation" value="classpath:mybatis-config.xml"/>
       </bean>
   
       <!-- 4.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 -->
       <!--解释 ： https://www.cnblogs.com/jpfss/p/7799806.html-->
       <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
   <!-- 注入sqlSessionFactory -->
   <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
   <!-- 给出需要扫描Dao接口包 -->
   <property name="basePackage" value="com.feige.dao"/>
       </bean>
   
   </beans>
   ```

3. **Spring整合service层**

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 扫描service相关的bean -->
       <context:component-scan base-package="com.kuang.service" />
   
       <!--BookServiceImpl注入到IOC容器中-->
       <bean id="BookServiceImpl" class="com.kuang.service.BookServiceImpl">
   <property name="bookMapper" ref="bookMapper"/>
       </bean>
   
       <!-- 配置事务管理器 -->
       <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource" />
       </bean>
   
   </beans>
   ```

Spring层搞定！再次理解一下，Spring就是一个大杂烩，一个容器！对吧！

## 5、SpringMVC层

1. **web.xml**

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
            version="4.0">
   
       <!--DispatcherServlet-->
       <servlet>
           <servlet-name>DispatcherServlet</servlet-name>
           <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
           <init-param>
               <param-name>contextConfigLocation</param-name>
               <param-value>classpath:applicationContext.xml</param-value>
           </init-param>
           <load-on-startup>1</load-on-startup>
       </servlet>
       <servlet-mapping>
           <servlet-name>DispatcherServlet</servlet-name>
           <url-pattern>/</url-pattern>
       </servlet-mapping>
   
       <!--encodingFilter-->
       <filter>
           <filter-name>encodingFilter</filter-name>
           <filter-class>
               org.springframework.web.filter.CharacterEncodingFilter
           </filter-class>
           <init-param>
               <param-name>encoding</param-name>
               <param-value>utf-8</param-value>
           </init-param>
       </filter>
       <filter-mapping>
           <filter-name>encodingFilter</filter-name>
           <url-pattern>/*</url-pattern>
       </filter-mapping>
       
       <!--Session过期时间-->
       <session-config>
           <session-timeout>15</session-timeout>
       </session-config>
       
   </web-app>
   ```

2. **spring-mvc.xml**

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xmlns:mvc="http://www.springframework.org/schema/mvc"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       https://www.springframework.org/schema/mvc/spring-mvc.xsd">
   
       <!-- 配置SpringMVC -->
       <!-- 1.开启SpringMVC注解驱动 -->
       <mvc:annotation-driven>
           <mvc:message-converters register-defaults="true">
               <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                   <constructor-arg value="UTF-8"/>
               </bean>
               <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                   <property name="objectMapper">
                       <bean class="org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean">
                           <property name="failOnEmptyBeans" value="false"/>
                       </bean>
                   </property>
               </bean>
           </mvc:message-converters>
       </mvc:annotation-driven>
       <!--解决跨域问题-->
       <mvc:cors>
       <mvc:mapping path="/**"
                    allowed-origins="http://127.0.0.1:8090,http://localhost:8090"
                    allowed-methods="POST,GET, OPTIONS,DELETE,PUT"
                    allowed-headers="Content-Type,ContentType,Access-Control-Allow-Headers, Authorization, X-Requested-With"
                    allow-credentials="true"/>
       </mvc:cors>
       <!-- 2.静态资源默认servlet配置-->
       <mvc:default-servlet-handler/>
   
       <!-- 3.配置jsp 显示ViewResolver视图解析器 -->
       <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
           <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
           <property name="prefix" value="/WEB-INF/jsp/" />
           <property name="suffix" value=".jsp" />
       </bean>
   
       <!-- 4.扫描web相关的bean -->
       <context:component-scan base-package="com.feige.controller" />
   
   </beans>
   ```

3. **Spring配置整合文件，applicationContext.xml**

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd">
   
       <import resource="spring-dao.xml"/>
       <import resource="spring-service.xml"/>
       <import resource="spring-mvc.xml"/>
       
   </beans>
   ```

**配置文件，暂时结束！Controller 和 视图层编写**

1. BookController 类编写 ， 方法一：查询全部书籍

   ```java
   @Controller
   @RequestMapping("/book")
   public class BookController {
   
       @Autowired
       @Qualifier("BookServiceImpl")
       private BookService bookService;
   
       @RequestMapping("/allBook")
       public String list(Model model) {
           List<Books> list = bookService.queryAllBook();
           model.addAttribute("list", list);
           return "allBook";
       }
   }
   ```

2. 编写首页 **index.jsp**

   ```html
   <%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" %>
   <!DOCTYPE HTML>
   <html>
   <head>
       <title>首页</title>
       <style type="text/css">
           a {
               text-decoration: none;
               color: black;
               font-size: 18px;
           }
           h3 {
               width: 180px;
               height: 38px;
               margin: 100px auto;
               text-align: center;
               line-height: 38px;
               background: deepskyblue;
               border-radius: 4px;
           }
       </style>
   </head>
   <body>
   
   <h3>
       <a href="${pageContext.request.contextPath}/book/allBook">点击进入列表页</a>
   </h3>
   </body>
   </html>
   ```

3. 书籍列表页面 **allbook.jsp**

   ```jsp
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>书籍列表</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>书籍列表 —— 显示所有书籍</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <div class="row">
           <div class="col-md-4 column">
               <a class="btn btn-primary" href="${pageContext.request.contextPath}/book/toAddBook">新增</a>
           </div>
       </div>
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <table class="table table-hover table-striped">
                   <thead>
                   <tr>
                       <th>书籍编号</th>
                       <th>书籍名字</th>
                       <th>书籍数量</th>
                       <th>书籍详情</th>
                       <th>操作</th>
                   </tr>
                   </thead>
   
                   <tbody>
                   <c:forEach var="book" items="${requestScope.get('list')}">
                       <tr>
                           <td>${book.getBookId()}</td>
                           <td>${book.getBookName()}</td>
                           <td>${book.getBookCounts()}</td>
                           <td>${book.getDetail()}</td>
                           <td>
                               <a href="${pageContext.request.contextPath}/book/toUpdateBook?id=${book.getBookId()}">更改</a> |
                               <a href="${pageContext.request.contextPath}/book/del/${book.getBookId()}">删除</a>
                           </td>
                       </tr>
                   </c:forEach>
                   </tbody>
               </table>
           </div>
       </div>
   </div>
   ```

4. BookController 类编写 ， 方法二：添加书籍

   ```java
   @RequestMapping("/toAddBook")
   public String toAddPaper() {
       return "addBook";
   }
   
   @RequestMapping("/addBook")
   public String addPaper(Books books) {
       System.out.println(books);
       bookService.addBook(books);
       return "redirect:/book/allBook";
   }
   ```

5. 添加书籍页面：**addBook.jsp**

   ```jsp
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   
   <html>
   <head>
       <title>新增书籍</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>新增书籍</small>
                   </h1>
               </div>
           </div>
       </div>
       <form action="${pageContext.request.contextPath}/book/addBook" method="post">
           书籍名称：<input type="text" name="bookName"><br><br><br>
           书籍数量：<input type="text" name="bookCounts"><br><br><br>
           书籍详情：<input type="text" name="detail"><br><br><br>
           <input type="submit" value="添加">
       </form>
   
   </div>
   ```

6. BookController 类编写 ， 方法三：修改书籍

   ```java
   @RequestMapping("/toUpdateBook")
   public String toUpdateBook(Model model, int id) {
       Books books = bookService.queryBookById(id);
       System.out.println(books);
       model.addAttribute("book",books );
       return "updateBook";
   }
   
   @RequestMapping("/updateBook")
   public String updateBook(Model model, Books book) {
       bookService.updateBook(book);
       Books books = bookService.queryBookById(book.getBookID());
       model.addAttribute("books", books);
       return "redirect:/book/allBook";
   }
   ```

7. 修改书籍页面 **updateBook.jsp**

   ```jsp
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>修改信息</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>修改信息</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <form action="${pageContext.request.contextPath}/book/updateBook" method="post">
           <input type="hidden" name="bookID" value="${book.getBookId()}"/>
           书籍名称：<input type="text" name="bookName" value="${book.getBookName()}"/>
           书籍数量：<input type="text" name="bookCounts" value="${book.getBookCounts()}"/>
           书籍详情：<input type="text" name="detail" value="${book.getDetail() }"/>
           <input type="submit" value="提交"/>
       </form>
   
   </div>
   ```

8. BookController 类编写 ， 方法四：删除书籍

   ```java
   @RequestMapping("/del/{bookId}")
   public String deleteBook(@PathVariable("bookId") int id) {
       bookService.deleteBookById(id);
       return "redirect:/book/allBook";
   }
   ```

**配置Tomcat，进行运行！**

到目前为止，这个SSM项目整合已经完全的OK了，可以直接运行进行测试！这个练习十分的重要，大家需要保证，不看任何东西，自己也可以完整的实现出来！

## **6、项目结构图**

![1570186854191.png](https://blog.kuangstudy.com/usr/uploads/2019/10/1086489242.png)

![1570186868239.png](https://blog.kuangstudy.com/usr/uploads/2019/10/2326667495.png)

## 7、错误排查

### 1、访问出现404，排查步骤：**

1. 查看控制台输出，看一下是不是缺少了什么jar包。

2. 如果jar包存在，显示无法输出，就在IDEA的项目发布中，添加lib依赖！

   步骤：点击项目结构----->Artifacts----->点击自己的项目(ssm:war exploded)--->(点击工具栏的第一个)在WEB-INF目录下新建一个lib包----->选中lib------>点击工具栏的第三个然后选中第一个---->把里面的包全部选中点击ok---->点击Apply再ok

   ![image-20200128125126368](E:\Java资料\ssm整合.assets\image-20200128125126368.png)

   ![image-20200128125237179](E:\Java资料\ssm整合.assets\image-20200128125237179.png)

3. 重启Tomcat 即可解决！

### 2、其他错误

#### 1、bean不存在

​	步骤：

​		查看bean注入是否成功 

​		junit单元测试，看我们的代码是否能够查询出来

​		问题不在底层，是我们spring出了问题

​		springMVC整合时没有调用到service层的bean

​			applicationContext.xml没有注册bean

​			web.xml也绑定过配置文件要绑定大的applicationContext.xml

​			

## 8、小结及展望

这个是同学们的第一个SSM整合案例，一定要烂熟于心！

SSM框架的重要程度是不言而喻的，学到这里，大家已经可以进行基本网站的单独开发。但是这只是增删改查的基本操作。可以说学到这里，大家才算是真正的步入了后台开发的门。也就是能找一个后台相关工作的底线。

或许很多人，工作就做这些事情，但是对于个人的提高来说，还远远不够！, 2020-03-02 07:06:53.0, 2020-03-23 19:38:47.0, null, 10]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10004, pstmt-20006, rs-50008} closed
[DEBUG][20-03-27][druid.sql.Statement]{conn-10004, pstmt-20006} clearParameters. 
[DEBUG][20-03-27][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20007} executed. 17.757762 millis. select distinct count(*) from comments c
        where c.blog_id=? and
        c.parent_id is null;
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20007, rs-50009} open
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20007, rs-50009} Header: [count(*)]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20007, rs-50009} Result: [3]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20007, rs-50009} closed
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20007} clearParameters. 
[DEBUG][20-03-27][druid.sql.Connection]{conn-10003} pool-recycle
[DEBUG][20-03-27][druid.sql.Connection]{conn-10003} pool-connect
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20008} created. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id  and
        c.parent_id is null limit ?,?;;
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20008} Parameters : [13, 0, 10]
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20008} Types : [INTEGER, INTEGER, INTEGER]
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20008} executed. 13.720432 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id  and
        c.parent_id is null limit ?,?;;
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20008, rs-50010} open
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20008, rs-50010} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20008, rs-50010} Result: [26, 好好, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:35.0, null]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20008, rs-50010} Result: [29, 太好了, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:13.0, null]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20008, rs-50010} Result: [32, <p>feige</p>, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 01:33:26.0, null]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20008, rs-50010} closed
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20008} clearParameters. 
[DEBUG][20-03-27][druid.sql.Connection]{conn-10003} pool-recycle
[DEBUG][20-03-27][druid.sql.Connection]{conn-10003} pool-connect
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20009} created. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20009} Parameters : [13, 26]
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20009} Types : [INTEGER, INTEGER]
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20009} executed. 4.858218 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20009, rs-50011} open
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20009, rs-50011} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20009, rs-50011} Result: [27, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:56.0, sss]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20009, rs-50011} Result: [28, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:43:03.0, sss]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20009, rs-50011} closed
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20009} clearParameters. 
[DEBUG][20-03-27][druid.sql.Connection]{conn-10003} pool-recycle
[DEBUG][20-03-27][druid.sql.Connection]{conn-10003} pool-connect
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20009} Parameters : [13, 26]
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20009} Types : [INTEGER, INTEGER]
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20009} executed. 4.458218 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20009, rs-50012} open
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20009, rs-50012} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20009, rs-50012} Result: [27, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:56.0, sss]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20009, rs-50012} Result: [28, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:43:03.0, sss]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20009, rs-50012} closed
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20009} clearParameters. 
[DEBUG][20-03-27][druid.sql.Connection]{conn-10003} pool-recycle
[DEBUG][20-03-27][druid.sql.Connection]{conn-10003} pool-connect
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20009} Parameters : [13, 27]
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20009} Types : [INTEGER, INTEGER]
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20009} executed. 1.485332 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20009, rs-50013} open
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20009, rs-50013} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20009, rs-50013} closed
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20009} clearParameters. 
[DEBUG][20-03-27][druid.sql.Connection]{conn-10003} pool-recycle
[DEBUG][20-03-27][druid.sql.Connection]{conn-10003} pool-connect
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20009} Parameters : [13, 27]
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20009} Types : [INTEGER, INTEGER]
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20009} executed. 0.938221 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20009, rs-50014} open
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20009, rs-50014} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20009, rs-50014} closed
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20009} clearParameters. 
[DEBUG][20-03-27][druid.sql.Connection]{conn-10003} pool-recycle
[DEBUG][20-03-27][druid.sql.Connection]{conn-10003} pool-connect
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20009} Parameters : [13, 29]
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20009} Types : [INTEGER, INTEGER]
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20009} executed. 3.807552 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20009, rs-50015} open
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20009, rs-50015} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20009, rs-50015} Result: [30, 谢谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:43.0, sss]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20009, rs-50015} Result: [31, 不用谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:47:01.0, sss]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20009, rs-50015} closed
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20009} clearParameters. 
[DEBUG][20-03-27][druid.sql.Connection]{conn-10003} pool-recycle
[DEBUG][20-03-27][druid.sql.Connection]{conn-10003} pool-connect
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20009} Parameters : [13, 29]
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20009} Types : [INTEGER, INTEGER]
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20009} executed. 5.241329 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20009, rs-50016} open
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20009, rs-50016} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20009, rs-50016} Result: [30, 谢谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:43.0, sss]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20009, rs-50016} Result: [31, 不用谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:47:01.0, sss]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20009, rs-50016} closed
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20009} clearParameters. 
[DEBUG][20-03-27][druid.sql.Connection]{conn-10003} pool-recycle
[DEBUG][20-03-27][druid.sql.Connection]{conn-10003} pool-connect
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20009} Parameters : [13, 30]
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20009} Types : [INTEGER, INTEGER]
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20009} executed. 1.102666 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20009, rs-50017} open
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20009, rs-50017} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20009, rs-50017} closed
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20009} clearParameters. 
[DEBUG][20-03-27][druid.sql.Connection]{conn-10003} pool-recycle
[DEBUG][20-03-27][druid.sql.Connection]{conn-10003} pool-connect
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20009} Parameters : [13, 30]
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20009} Types : [INTEGER, INTEGER]
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20009} executed. 0.982665 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20009, rs-50018} open
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20009, rs-50018} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20009, rs-50018} closed
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20009} clearParameters. 
[DEBUG][20-03-27][druid.sql.Connection]{conn-10003} pool-recycle
[DEBUG][20-03-27][druid.sql.Connection]{conn-10003} pool-connect
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20009} Parameters : [13, 32]
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20009} Types : [INTEGER, INTEGER]
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20009} executed. 0.981333 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20009, rs-50019} open
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20009, rs-50019} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20009, rs-50019} closed
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20009} clearParameters. 
[DEBUG][20-03-27][druid.sql.Connection]{conn-10003} pool-recycle
[DEBUG][20-03-27][druid.sql.Connection]{conn-10003} pool-connect
[DEBUG][20-03-27][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20010} created. select id,type_name typeName
        from `type`
         
            limit ?,?
[DEBUG][20-03-27][druid.sql.Statement]{conn-10004, pstmt-20011} created. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog
         
            limit ?,?
[DEBUG][20-03-27][druid.sql.Statement]{conn-10004, pstmt-20011} Parameters : [0, 10]
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20010} Parameters : [0, 30]
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20010} Types : [INTEGER, INTEGER]
[DEBUG][20-03-27][druid.sql.Statement]{conn-10004, pstmt-20011} Types : [INTEGER, INTEGER]
[DEBUG][20-03-27][druid.sql.Statement]{conn-10004, pstmt-20011} executed. 1.613332 millis. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog
         
            limit ?,?
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10004, pstmt-20011, rs-50020} open
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10004, pstmt-20011, rs-50020} Header: [id, type_name, title, content, create_time, change_time, author, view]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10004, pstmt-20011, rs-50020} Result: [1, springboot, springboot入门, springb自动装配, 2020-02-23 21:43:36.0, 2020-02-24 03:06:48.0, admin, 0]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10004, pstmt-20011, rs-50020} Result: [2, mybatis, 配置, 得到的, 2020-02-24 02:05:36.0, 2020-03-13 06:39:47.0, admin, 3]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10004, pstmt-20011, rs-50020} Result: [4, springMVC, mybatis-plus, ##飞哥, 2020-02-24 02:10:09.0, 2020-02-25 22:42:23.0, admin, 111]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10004, pstmt-20011, rs-50020} Result: [5, springboot, 人, 嗯嗯, 2020-02-24 03:07:20.0, 2020-02-24 03:07:20.0, admin, 2]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10004, pstmt-20011, rs-50020} Result: [6, mybatis, mybatis入门, <h2>1、Mybatis简介</h2>
<p><img src="https://blog.kuangstudy.com/usr/uploads/2019/10/1296229149.png" referrerpolicy="no-referrer" alt="1567007421329.png"></p>
<h3>什么是MyBatis</h3>
<ul>
<li>MyBatis 是一款优秀的<strong>持久层框架</strong></li>
<li>MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集的过程</li>
<li>MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 实体类 【Plain Old Java Objects,普通的 Java对象】映射成数据库中的记录。</li>
<li>MyBatis 本是apache的一个开源项目ibatis, 2010年这个项目由apache 迁移到了google code，并且改名为MyBatis 。</li>
<li>2013年11月迁移到<strong>Github</strong> .</li>
<li>Mybatis官方文档 : <a href='http://www.mybatis.org/mybatis-3/zh/index.html' target='_blank' class='url'>http://www.mybatis.org/mybatis-3/zh/index.html</a></li>
<li>GitHub : <a href='https://github.com/mybatis/mybatis-3' target='_blank' class='url'>https://github.com/mybatis/mybatis-3</a></li>

</ul>
<h3>持久化</h3>
<ul>
<li><p><strong>持久化是将程序数据在持久状态和瞬时状态间转换的机制。</strong></p>
<ul>
<li>即把数据（如内存中的对象）保存到可永久保存的存储设备中（如磁盘）。持久化的主要应用是将内存中的对象存储在数据库中，或者存储在磁盘文件中、XML数据文件中等等。</li>
<li>JDBC就是一种持久化机制。文件IO也是一种持久化机制。</li>
<li>在生活中 : 将鲜肉冷藏，吃的时候再解冻的方法也是。将水果做成罐头的方法也是。</li>

</ul>
</li>
<li><p><strong>为什么需要持久化服务呢？那是由于内存本身的缺陷引起的</strong></p>
<ul>
<li>内存断电后数据会丢失，但有一些对象是无论如何都不能丢失的，比如银行账号等，遗憾的是，人们还无法保证内存永不掉电。</li>
<li>内存过于昂贵，与硬盘、光盘等外存相比，内存的价格要高2~3个数量级，而且维持成本也高，至少需要一直供电吧。所以即使对象不需要永久保存，也会因为内存的容量限制不能一直呆在内存中，需要持久化来缓存到外存。</li>

</ul>
</li>

</ul>
<h3>持久层</h3>
<ul>
<li><p>什么是持久层？</p>
<ul>
<li>完成持久化工作的代码块 . ----&gt; dao层 【DAO (Data Access Object) 数据访问对象】</li>
<li>大多数情况下特别是企业级应用，数据持久化往往也就意味着将内存中的数据保存到磁盘上加以固化，而持久化的实现过程则大多通过各种<strong>关系数据库</strong>来完成。</li>
<li>不过这里有一个字需要特别强调，也就是所谓的“层”。对于应用系统而言，数据持久功能大多是必不可少的组成部分。也就是说，我们的系统中，已经天然的具备了“持久层”概念？也许是，但也许实际情况并非如此。之所以要独立出一个“持久层”的概念,而不是“持久模块”，“持久单元”，也就意味着，我们的系统架构中，应该有一个相对独立的逻辑层面，专著于数据持久化逻辑的实现.</li>
<li>与系统其他部分相对而言，这个层面应该具有一个较为清晰和严格的逻辑边界。 【说白了就是用来操作数据库存在的！】</li>

</ul>
</li>

</ul>
<h3>为什么需要Mybatis</h3>
<ul>
<li><p>Mybatis就是帮助程序猿将数据存入数据库中 , 和从数据库中取数据 .</p>
</li>
<li><p>传统的jdbc操作 , 有很多重复代码块 .比如 : 数据取出时的封装 , 数据库的建立连接等等... , 通过框架可以减少重复代码,提高开发效率 .</p>
</li>
<li><p>MyBatis 是一个半自动化的<strong>ORM框架 (Object Relationship Mapping) --&gt;对象关系映射</strong></p>
</li>
<li><p>所有的事情，不用Mybatis依旧可以做到，只是用了它，所有实现会更加简单！<strong>技术没有高低之分，只有使用这个技术的人有高低之别</strong></p>
</li>
<li><p>MyBatis的优点</p>
<ul>
<li>简单易学：本身就很小且简单。没有任何第三方依赖，最简单安装只要两个jar文件+配置几个sql映射文件就可以了，易于学习，易于使用，通过文档和源代码，可以比较完全的掌握它的设计思路和实现。</li>
<li>灵活：mybatis不会对应用程序或者数据库的现有设计强加任何影响。 sql写在xml里，便于统一管理和优化。通过sql语句可以满足操作数据库的所有需求。</li>
<li>解除sql与程序代码的耦合：通过提供DAO层，将业务逻辑和数据访问逻辑分离，使系统的设计更清晰，更易维护，更易单元测试。sql和代码的分离，提高了可维护性。</li>
<li>提供xml标签，支持编写动态sql。</li>
<li>.......</li>

</ul>
</li>
<li><p>最重要的一点，使用的人多！公司需要！</p>
</li>
<li><p>环境说明：</p>
<ul>
<li>jdk 8 +</li>
<li>MySQL 5.7.19</li>
<li>maven-3.6.0</li>
<li>IDEA</li>

</ul>
<p>学习前需要掌握：</p>
<ul>
<li>JDBC</li>
<li>MySQL</li>
<li>Java 基础</li>
<li>Maven</li>
<li>Junit</li>

</ul>
</li>

</ul>
<h2>2、mybatis crud（实现增删改查）</h2>
<h4>1.1、创建一个maven项目</h4>
<p>		导入依赖</p>
<pre><code class='language-xml' lang='xml'>&lt;dependencies&gt;
    &lt;!--mysql驱动--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;mysql&lt;/groupId&gt;
        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
        &lt;version&gt;5.1.47&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;!--mybatis支持--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.mybatis&lt;/groupId&gt;
        &lt;artifactId&gt;mybatis&lt;/artifactId&gt;
        &lt;version&gt;3.5.2&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;!--junit支持--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;junit&lt;/groupId&gt;
        &lt;artifactId&gt;junit&lt;/artifactId&gt;
        &lt;version&gt;4.12&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
</code></pre>
<p>注意点 : pom文件的设置中需要设置资源过滤 , 否则会有资源文件打包不成功问题，导致项目无法运行；</p>
<pre><code class='language-xml' lang='xml'>&lt;build&gt;
    &lt;resources&gt;
        &lt;resource&gt;
            &lt;directory&gt;src/main/java&lt;/directory&gt;
            &lt;includes&gt;
                &lt;include&gt;**/*.properties&lt;/include&gt;
                &lt;include&gt;**/*.xml&lt;/include&gt;
            &lt;/includes&gt;
            &lt;filtering&gt;true&lt;/filtering&gt;
        &lt;/resource&gt;
    &lt;/resources&gt;
&lt;/build&gt;
</code></pre>
<p>&nbsp;</p>
<h4>1.2、创建数据库和表</h4>
<pre><code class='language-sql' lang='sql'>CREATE DATABASE mybatis CHARACTER SET utf8;
CREATE TABLE USER(
	id INT PRIMARY KEY,
	username VARCHAR(15) NOT NULL,
	pwd VARCHAR(20) NOT NULL
)
INSERT INTO USER VALUES(2018143114,&#39;张三&#39;,&#39;123456&#39;),(2018143115,&#39;李四&#39;,&#39;1234567&#39;),(2018143116,&#39;王五&#39;,&#39;147258&#39;);
SELECT * FROM USER;
</code></pre>
<h4>1.3、编写mybatis配置文件</h4>
<p>在resource里新建一个mybatis-config.xml文件</p>
<pre><code class='language-xml' lang='xml'>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE configuration
        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;
&lt;configuration&gt;
    &lt;environments default=&quot;development&quot;&gt;
        &lt;environment id=&quot;development&quot;&gt;
            &lt;transactionManager type=&quot;JDBC&quot;/&gt;
            &lt;dataSource type=&quot;POOLED&quot;&gt;
                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;
                &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;amp;useUnicode=true&amp;amp;characterEncoding=utf8&quot;/&gt;
                &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;
                &lt;property name=&quot;password&quot; value=&quot;hufei169357&quot;/&gt;
            &lt;/dataSource&gt;
        &lt;/environment&gt;
    &lt;/environments&gt;
    &lt;mappers&gt;
        &lt;mapper resource=&quot;com/feige/dao/userMapper.xml&quot;/&gt;
    &lt;/mappers&gt;
&lt;/configuration&gt;
</code></pre>
<h4>1.4、新建一个工具类用来获取SqlSession对象</h4>
<pre><code class='language-java' lang='java'>package com.feige.utils;

import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import java.io.IOException;
import java.io.InputStream;
//sqlSessionFactory-sqlSession
public class MybatisUtils {
    private static SqlSessionFactory sqlSessionFactory;
    static {
        try {
            //使用mybatis第一步：获取sqlSessionFactory对象
            String resource = &quot;mybatis-config.xml&quot;;
            InputStream inputStream = Resources.getResourceAsStream(resource);
            sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    //既然有了sqlSessionFactory，顾名思义，我们就可以从中获得sqlSession的实例
    public static SqlSession getSqlSessioon(){
        return sqlSessionFactory.openSession();
    }
}

</code></pre>
<p>&nbsp;</p>
<h4>1.5、编写一个pojo（实体类）</h4>
<pre><code class='language-java' lang='java'>package com.feige.pojo;

public class User {
    private int id;
    private String username;
    private String pwd;

    public User() {
    }

    public User(int id, String username, String pwd) {
        this.id = id;
        this.username = username;
        this.pwd = pwd;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getPwd() {
        return pwd;
    }

    public void setPwd(String pwd) {
        this.pwd = pwd;
    }
    @Override
    public String toString() {
        return &quot;User{&quot; +
                &quot;id=&quot; + id +
                &quot;, username=&#39;&quot; + username + &#39;\&#39;&#39; +
                &quot;, pwd=&#39;&quot; + pwd + &#39;\&#39;&#39; +
                &#39;}&#39;;
    }
}

</code></pre>
<h4>1.6、新建一个userMapper接口</h4>
<pre><code class='language-java' lang='java'>package com.feige.dao;

import com.feige.pojo.User;

import java.util.List;
import java.util.Map;

public interface UserMapper {
    //查询全部用户
    List&lt;User&gt; getAllUser();
    //通过一个id查询一个用户
    User getUserById(int id);
    //通过id修改一个用户
    int updateUserById(Map map);
    //通过id删除一个用户
    int deleteUserById(int id);
    //插入一条数据
    int insertUser(User user);
}

</code></pre>
<h4>1.7、新建一个userMapper.xml文件</h4>
<pre><code class='language-xml' lang='xml'>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE mapper
        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;com.feige.dao.UserMapper&quot;&gt;
    &lt;!--每个语句要对应相应的标签select对应&lt;select&gt; delete 对应&lt;delete&gt; update 对应&lt;update&gt; insert 对应&lt;insert&gt;--&gt;
    &lt;select id=&quot;getAllUser&quot; resultType=&quot;com.feige.pojo.User&quot;&gt;
        select * from user
    &lt;/select&gt;
    &lt;select id=&quot;getUserById&quot; resultType=&quot;com.feige.pojo.User&quot; parameterType=&quot;int&quot;&gt;
        select * from user where id=#{id}
    &lt;/select&gt;
    &lt;update id=&quot;updateUserById&quot; parameterType=&quot;map&quot;&gt;
        update user set pwd=#{pwd} where id=#{id}
    &lt;/update&gt;
    &lt;delete id=&quot;deleteUserById&quot; parameterType=&quot;int&quot;&gt;
        delete from user where id=#{id}
    &lt;/delete&gt;
    &lt;insert id=&quot;insertUser&quot; parameterType=&quot;com.feige.pojo.User&quot;&gt;
        insert into user values (#{id},#{username},#{pwd})
    &lt;/insert&gt;
&lt;/mapper&gt;
</code></pre>
<h4>1.8、测试代码</h4>
<pre><code class='language-java' lang='java'>package com.feige.mybatisTest;

import com.feige.dao.UserMapper;
import com.feige.pojo.User;
import com.feige.utils.MybatisUtils;
import org.apache.ibatis.session.SqlSession;
import org.junit.Test;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MybatisTest {
    @Test
    public void mybatisTest1(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        List&lt;User&gt; allUser = mapper.getAllUser();
        for (User user : allUser) {
            System.out.println(user);
        }
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest2(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        User userById = mapper.getUserById(2018143114);
        System.out.println(userById);
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest3() {
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        //使用万能map传参
        Map&lt;String,Object&gt; map = new HashMap&lt;String, Object&gt;();
        map.put(&quot;pwd&quot;,2018143114);
        map.put(&quot;id&quot;,2018143114);

        int i = mapper.updateUserById(map);
        if (i &gt; 0) {
            System.out.println(&quot;修改成功！&quot;+i);
        }
        //增删改需要提交事务
        sqlSessioon.commit();

        sqlSessioon.close();

    }
    @Test
    public void mybatisTest4(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        int i = mapper.deleteUserById(2018143117);
        if (i &gt; 0) {
            System.out.println(&quot;删除成功！&quot;+i);
        }
        sqlSessioon.commit();
        sqlSessioon.close();

    }
    @Test
    public void mybatisTest5(){
        SqlSession sqlSessioon = MybatisUtils.getSqlSessioon();
        UserMapper mapper = sqlSessioon.getMapper(UserMapper.class);
        User user = new User(2018143117, &quot;杨帆东&quot;, &quot;2018143117&quot;);
        int i = mapper.insertUser(user);
        if (i &gt; 0) {
            System.out.println(&quot;插入成功！&quot;+i);
        }
        sqlSessioon.commit();
        sqlSessioon.close();

    }
}

</code></pre>
<p>&nbsp;</p>
<p>		</p>, 2020-02-24 03:15:45.0, 2020-02-24 03:15:50.0, admin, 0]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10004, pstmt-20011, rs-50020} Result: [7, mybatis, mybatis啊, 作者, 2020-02-24 03:27:18.0, 2020-02-24 03:27:18.0, admin, 1]
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20010} executed. 14.46932 millis. select id,type_name typeName
        from `type`
         
            limit ?,?
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20010, rs-50021} open
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20010, rs-50021} Header: [id, type_name]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10004, pstmt-20011, rs-50020} Result: [8, springboot, aaa, [TOC]
                            #### Disabled options

                            - TeX (Based on KaTeX);
                            - Emoji;
                            - Task lists;
                            - HTML tags decode;
                            - Flowchart and Sequence Diagram;
                            #### Editor.md directory

                                editor.md/
                                        lib/
                                        css/
                                        scss/
                                        tests/
                                        fonts/
                                        images/
                                        plugins/
                                        examples/
                                        languages/
                                        editormd.js
                                        ...

                            ```html
                            <!-- English -->
                            <script src="../dist/js/languages/en.js"></script>

                            <!-- 繁體中文 -->
                            <script src="../dist/js/languages/zh-tw.js"></script>
                            ```
                        , 2020-02-25 03:39:36.0, 2020-02-25 22:38:07.0, admin, 1]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20010, rs-50021} Result: [3, mybatis]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20010, rs-50021} Result: [2, spring]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10004, pstmt-20011, rs-50020} Result: [9, mybatis, bbb, [TOC]

                            #### Disabled options

                            - TeX (Based on KaTeX);
                            - Emoji;
                            - Task lists;
                            - HTML tags decode;
                            - Flowchart and Sequence Diagram;

                            #### Editor.md directory

                                editor.md/
                                        lib/
                                        css/
                                        scss/
                                        tests/
                                        fonts/
                                        images/
                                        plugins/
                                        examples/
                                        languages/
                                        editormd.js
                                        ...

                            ```html
                            <!-- English -->
                            <script src="../dist/js/languages/en.js"></script>

                            <!-- 繁體中文 -->
                            <script src="../dist/js/languages/zh-tw.js"></script>
                            ```
                        , 2020-02-25 03:44:09.0, 2020-02-25 03:44:09.0, admin, 1]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20010, rs-50021} Result: [1, springboot]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20010, rs-50021} Result: [4, springMVC]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10004, pstmt-20011, rs-50020} Result: [10, springboot, 飞哥, #大哥的Markdown, 2020-02-25 22:43:28.0, 2020-02-25 22:43:28.0, admin, 1]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20010, rs-50021} closed
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20010} clearParameters. 
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10004, pstmt-20011, rs-50020} Result: [11, mybatis, 大哥, #飞哥的博客后台管理系统, 2020-02-25 22:49:26.0, 2020-02-25 22:49:26.0, admin, 1]
[DEBUG][20-03-27][druid.sql.Connection]{conn-10003} pool-recycle
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10004, pstmt-20011, rs-50020} closed
[DEBUG][20-03-27][druid.sql.Connection]{conn-10003} pool-connect
[DEBUG][20-03-27][druid.sql.Statement]{conn-10004, pstmt-20011} clearParameters. 
[DEBUG][20-03-27][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20012} created. select count(*) from `type`
[DEBUG][20-03-27][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-27][druid.sql.Statement]{conn-10004, pstmt-20013} created. select count(*) from `blog`
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20012} Parameters : []
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20012} Types : []
[DEBUG][20-03-27][druid.sql.Statement]{conn-10004, pstmt-20013} Parameters : []
[DEBUG][20-03-27][druid.sql.Statement]{conn-10004, pstmt-20013} Types : []
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20012} executed. 0.676 millis. select count(*) from `type`
[DEBUG][20-03-27][druid.sql.Statement]{conn-10004, pstmt-20013} executed. 0.582222 millis. select count(*) from `blog`
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20012, rs-50022} open
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10004, pstmt-20013, rs-50023} open
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10004, pstmt-20013, rs-50023} Header: [count(*)]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20012, rs-50022} Header: [count(*)]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10004, pstmt-20013, rs-50023} Result: [13]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20012, rs-50022} Result: [4]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10004, pstmt-20013, rs-50023} closed
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20012, rs-50022} closed
[DEBUG][20-03-27][druid.sql.Statement]{conn-10004, pstmt-20013} clearParameters. 
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20012} clearParameters. 
[DEBUG][20-03-27][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-27][druid.sql.Connection]{conn-10003} pool-recycle
[DEBUG][20-03-27][druid.sql.Connection]{conn-10003} pool-connect
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20014} created. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog
         
            limit ?,?
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20014} Parameters : [10, 10]
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20014} Types : [INTEGER, INTEGER]
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20014} executed. 1.380444 millis. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog
         
            limit ?,?
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20014, rs-50024} open
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20014, rs-50024} Header: [id, type_name, title, content, create_time, change_time, author, view]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20014, rs-50024} Result: [12, mybatis, 56, ##等待, 2020-02-25 22:50:53.0, 2020-02-25 22:50:53.0, admin, 5]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20014, rs-50024} Result: [13, mybatis, ssm1整合, # ssm整合

## 1、数据库环境

创建一个存放书籍数据的数据库表

```sql
CREATE DATABASE `ssmbuild`;

USE `ssmbuild`;

DROP TABLE IF EXISTS `books`;

CREATE TABLE `books` (
  `bookId` INT PRIMARY KEY COMMENT '书id',
  `bookName` VARCHAR(100) NOT NULL COMMENT '书名',
  `bookCounts` INT(11) NOT NULL COMMENT '数量',
  ``ssmbuild``ssmbuild`` VARCHAR(200) NOT NULL COMMENT '描述'
) ENGINE=INNODB DEFAULT CHARSET=utf8

INSERT  INTO `books`(`bookId`,`bookName`,`bookCounts`,`detail`)VALUES 
(1,'Java',1,'从入门到放弃'),
(2,'MySQL',10,'从删库到跑路'),
(3,'Linux',5,'从进门到进牢');

SELECT * FROM books
```

## 2、基本环境搭建

1. 新建一Maven项目！ ssmbuild ， 添加web的支持

   ![image-20200128134359317](.\ssm整合.assets\image-20200128134359317.png)

2. 导入相关的pom依赖！

   ```xml
   <dependencies>
       <!--Junit-->
       <dependency>
           <groupId>junit</groupId>
           <artifactId>junit</artifactId>
           <version>4.12</version>
       </dependency>
       <!--数据库驱动-->
       <dependency>
           <groupId>mysql</groupId>
           <artifactId>mysql-connector-java</artifactId>
           <version>5.1.47</version>
       </dependency>
       <!-- 数据库连接池 -->
       <dependency>
           <groupId>com.mchange</groupId>
           <artifactId>c3p0</artifactId>
           <version>0.9.5.2</version>
       </dependency>
   
       <!--Servlet - JSP -->
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>servlet-api</artifactId>
           <version>2.5</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet.jsp</groupId>
           <artifactId>jsp-api</artifactId>
           <version>2.2</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>jstl</artifactId>
           <version>1.2</version>
       </dependency>
   
       <!--Mybatis-->
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis</artifactId>
           <version>3.5.2</version>
       </dependency>
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis-spring</artifactId>
           <version>2.0.2</version>
       </dependency>
   
       <!--Spring-->
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-webmvc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-jdbc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->
       <dependency>
           <groupId>org.projectlombok</groupId>
           <artifactId>lombok</artifactId>
           <version>1.16.10</version>
       </dependency>
   </dependencies>
   ```

3. Maven资源过滤设置

   ```xml
   <build>
       <resources>
           <resource>
               <directory>src/main/java</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
           <resource>
               <directory>src/main/resources</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
       </resources>
   </build>
   ```

4. 建立基本结构和配置框架！

   - com.feige.pojo

   - com.feige.dao

   - com.feige.service

   - com.feige.controller

     在resources目录下创建

   - mybatis-config.xml

     ```xml
     <?xml version="1.0" encoding="UTF-8" ?>
     <!DOCTYPE configuration
             PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
             "http://mybatis.org/dtd/mybatis-3-config.dtd">
     <configuration>
     
     </configuration>
     ```

   - applicationContext.xml

     ```xml
     <?xml version="1.0" encoding="UTF-8"?>
     <beans xmlns="http://www.springframework.org/schema/beans"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://www.springframework.org/schema/beans
             http://www.springframework.org/schema/beans/spring-beans.xsd">
     
     </beans>
     ```

## 3、Mybatis层编写

1. 数据库配置文件 **database.properties**

   ```properties
   jdbc.driver=com.mysql.jdbc.Driver
   jdbc.url=jdbc:mysql://localhost:3306/ssmbuild?useSSL=true&useUnicode=true&characterEncoding=utf8
   jdbc.username=root
   jdbc.password=hufei169357
   ```

2. IDEA关联数据库

3. 编写MyBatis的核心配置文件

   ```xml
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE configuration
           PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-config.dtd">
   <configuration>
       
       <typeAliases>
           <package name="com.feige.pojo"/>
       </typeAliases>
       <mappers>
           <mapper resource="com/feige/dao/BookMapper.xml"/>
       </mappers>
   
   </configuration>
   ```

4. 编写数据库对应的实体类 com.feige.pojo.Books
   使用lombok插件！

   ```java
   package com.kuang.pojo;
   
   import lombok.AllArgsConstructor;
   import lombok.Data;
   import lombok.NoArgsConstructor;
   
   @Data
   @AllArgsConstructor
   @NoArgsConstructor
   public class Books {
       
       private int bookId;
       private String bookName;
       private int bookCounts;
       private String detail;
       
   }
   ```

5. 编写Dao层的 Mapper接口！

   ```java
   package com.kuang.dao;
   
   import com.kuang.pojo.Books;
   import java.util.List;
   
   public interface BookMapper {
   
       //增加一个Book
       int addBook(Books book);
   
       //根据id删除一个Book
       int deleteBookById(int id);
   
       //更新Book
       int updateBook(Books books);
   
       //根据id查询,返回一个Book
       Books queryBookById(int id);
   
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   
   }
   ```

6. 编写接口对应的 Mapper.xml 文件。需要导入MyBatis的包；

   ```xml
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE mapper
           PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
   
   <mapper namespace="com.feige.dao.BooksMapper">
   
       <!--增加一个Book-->
       <insert id="addBook" parameterType="Books">
           insert into books(bookName,bookCounts,detail)
           values (#{bookName}, #{bookCounts}, #{detail})
       </insert>
   
       <!--根据id删除一个Book-->
       <delete id="deleteBookById" parameterType="int">
           delete from books where bookId=#{bookId}
       </delete>
   
       <!--更新Book-->
       <update id="updateBook" parameterType="Books">
           update books
           set bookName = #{bookName},bookCounts = #{bookCounts},detail = #{detail}
           where bookId = #{bookId}
       </update>
   
       <!--根据id查询,返回一个Book-->
       <select id="queryBookById" resultType="Books">
           select * from books
           where bookID = #{bookId}
       </select>
   
       <!--查询全部Book-->
       <select id="queryAllBook" resultType="com.feige.pojo.Books">
           SELECT * from books
       </select>
   
   </mapper>
   ```

7. 编写Service层的接口和实现类
   接口：

   ```java
   package com.feige.service;
   
   import com.feige.pojo.Books;
   
   import java.util.List;
   
   //BookService:底下需要去实现,调用dao层
   public interface BookService {
       //增加一个Book
       int addBook(Books book);
       //根据id删除一个Book
       int deleteBookById(int id);
       //更新Book
       int updateBook(Books books);
       //根据id查询,返回一个Book
       Books queryBookById(int id);
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   }
   ```

实现类：

```java
package com.feige.service;

import com.feige.dao.BookMapper;
import com.feige.pojo.Books;
import java.util.List;

public class BookServiceImpl implements BookService {

    //调用dao层的操作，设置一个set接口，方便Spring管理
    private BookMapper bookMapper;

    public void setBookMapper(BookMapper bookMapper) {
        this.bookMapper = bookMapper;
    }
    
    public int addBook(Books book) {
        return bookMapper.addBook(book);
    }
    
    public int deleteBookById(int id) {
        return bookMapper.deleteBookById(id);
    }
    
    public int updateBook(Books books) {
        return bookMapper.updateBook(books);
    }
    
    public Books queryBookById(int id) {
        return bookMapper.queryBookById(id);
    }
    
    public List<Books> queryAllBook() {
        return bookMapper.queryAllBook();
    }
}
```

**OK，到此，底层需求操作编写完毕！**

## 4、Spring层

1. 配置**Spring整合MyBatis**，我们这里数据源使用c3p0连接池；

2. 我们去编写Spring整合Mybatis的相关的配置文件； spring-dao.xml

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans.xsd
   http://www.springframework.org/schema/context
   https://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 配置整合mybatis -->
       <!-- 1.关联数据库文件 -->
       <context:property-placeholder location="classpath:database.properties"/>
   
       <!-- 2.数据库连接池 -->
       <!--数据库连接池
   dbcp  半自动化操作  不能自动连接
   c3p0  自动化操作（自动的加载配置文件 并且设置到对象里面）
       -->
       <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
   <!-- 配置连接池属性 -->
   <property name="driverClass" value="${jdbc.driver}"/>
   <property name="jdbcUrl" value="${jdbc.url}"/>
   <property name="user" value="${jdbc.username}"/>
   <property name="password" value="${jdbc.password}"/>
   
   <!-- c3p0连接池的私有属性 -->
   <property name="maxPoolSize" value="30"/>
   <property name="minPoolSize" value="10"/>
   <!-- 关闭连接后不自动commit -->
   <property name="autoCommitOnClose" value="false"/>
   <!-- 获取连接超时时间 -->
   <property name="checkoutTimeout" value="10000"/>
   <!-- 当获取连接失败重试次数 -->
   <property name="acquireRetryAttempts" value="2"/>
       </bean>
   
       <!-- 3.配置SqlSessionFactory对象 -->
       <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource"/>
   <!-- 配置MyBaties全局配置文件:mybatis-config.xml -->
   <property name="configLocation" value="classpath:mybatis-config.xml"/>
       </bean>
   
       <!-- 4.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 -->
       <!--解释 ： https://www.cnblogs.com/jpfss/p/7799806.html-->
       <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
   <!-- 注入sqlSessionFactory -->
   <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
   <!-- 给出需要扫描Dao接口包 -->
   <property name="basePackage" value="com.feige.dao"/>
       </bean>
   
   </beans>
   ```

3. **Spring整合service层**

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 扫描service相关的bean -->
       <context:component-scan base-package="com.kuang.service" />
   
       <!--BookServiceImpl注入到IOC容器中-->
       <bean id="BookServiceImpl" class="com.kuang.service.BookServiceImpl">
   <property name="bookMapper" ref="bookMapper"/>
       </bean>
   
       <!-- 配置事务管理器 -->
       <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource" />
       </bean>
   
   </beans>
   ```

Spring层搞定！再次理解一下，Spring就是一个大杂烩，一个容器！对吧！

## 5、SpringMVC层

1. **web.xml**

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
            version="4.0">
   
       <!--DispatcherServlet-->
       <servlet>
           <servlet-name>DispatcherServlet</servlet-name>
           <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
           <init-param>
               <param-name>contextConfigLocation</param-name>
               <param-value>classpath:applicationContext.xml</param-value>
           </init-param>
           <load-on-startup>1</load-on-startup>
       </servlet>
       <servlet-mapping>
           <servlet-name>DispatcherServlet</servlet-name>
           <url-pattern>/</url-pattern>
       </servlet-mapping>
   
       <!--encodingFilter-->
       <filter>
           <filter-name>encodingFilter</filter-name>
           <filter-class>
               org.springframework.web.filter.CharacterEncodingFilter
           </filter-class>
           <init-param>
               <param-name>encoding</param-name>
               <param-value>utf-8</param-value>
           </init-param>
       </filter>
       <filter-mapping>
           <filter-name>encodingFilter</filter-name>
           <url-pattern>/*</url-pattern>
       </filter-mapping>
       
       <!--Session过期时间-->
       <session-config>
           <session-timeout>15</session-timeout>
       </session-config>
       
   </web-app>
   ```

2. **spring-mvc.xml**

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xmlns:mvc="http://www.springframework.org/schema/mvc"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       https://www.springframework.org/schema/mvc/spring-mvc.xsd">
   
       <!-- 配置SpringMVC -->
       <!-- 1.开启SpringMVC注解驱动 -->
       <mvc:annotation-driven>
           <mvc:message-converters register-defaults="true">
               <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                   <constructor-arg value="UTF-8"/>
               </bean>
               <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                   <property name="objectMapper">
                       <bean class="org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean">
                           <property name="failOnEmptyBeans" value="false"/>
                       </bean>
                   </property>
               </bean>
           </mvc:message-converters>
       </mvc:annotation-driven>
       <!--解决跨域问题-->
       <mvc:cors>
       <mvc:mapping path="/**"
                    allowed-origins="http://127.0.0.1:8090,http://localhost:8090"
                    allowed-methods="POST,GET, OPTIONS,DELETE,PUT"
                    allowed-headers="Content-Type,ContentType,Access-Control-Allow-Headers, Authorization, X-Requested-With"
                    allow-credentials="true"/>
       </mvc:cors>
       <!-- 2.静态资源默认servlet配置-->
       <mvc:default-servlet-handler/>
   
       <!-- 3.配置jsp 显示ViewResolver视图解析器 -->
       <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
           <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
           <property name="prefix" value="/WEB-INF/jsp/" />
           <property name="suffix" value=".jsp" />
       </bean>
   
       <!-- 4.扫描web相关的bean -->
       <context:component-scan base-package="com.feige.controller" />
   
   </beans>
   ```

3. **Spring配置整合文件，applicationContext.xml**

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd">
   
       <import resource="spring-dao.xml"/>
       <import resource="spring-service.xml"/>
       <import resource="spring-mvc.xml"/>
       
   </beans>
   ```

**配置文件，暂时结束！Controller 和 视图层编写**

1. BookController 类编写 ， 方法一：查询全部书籍

   ```java
   @Controller
   @RequestMapping("/book")
   public class BookController {
   
       @Autowired
       @Qualifier("BookServiceImpl")
       private BookService bookService;
   
       @RequestMapping("/allBook")
       public String list(Model model) {
           List<Books> list = bookService.queryAllBook();
           model.addAttribute("list", list);
           return "allBook";
       }
   }
   ```

2. 编写首页 **index.jsp**

   ```html
   <%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" %>
   <!DOCTYPE HTML>
   <html>
   <head>
       <title>首页</title>
       <style type="text/css">
           a {
               text-decoration: none;
               color: black;
               font-size: 18px;
           }
           h3 {
               width: 180px;
               height: 38px;
               margin: 100px auto;
               text-align: center;
               line-height: 38px;
               background: deepskyblue;
               border-radius: 4px;
           }
       </style>
   </head>
   <body>
   
   <h3>
       <a href="${pageContext.request.contextPath}/book/allBook">点击进入列表页</a>
   </h3>
   </body>
   </html>
   ```

3. 书籍列表页面 **allbook.jsp**

   ```jsp
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>书籍列表</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>书籍列表 —— 显示所有书籍</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <div class="row">
           <div class="col-md-4 column">
               <a class="btn btn-primary" href="${pageContext.request.contextPath}/book/toAddBook">新增</a>
           </div>
       </div>
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <table class="table table-hover table-striped">
                   <thead>
                   <tr>
                       <th>书籍编号</th>
                       <th>书籍名字</th>
                       <th>书籍数量</th>
                       <th>书籍详情</th>
                       <th>操作</th>
                   </tr>
                   </thead>
   
                   <tbody>
                   <c:forEach var="book" items="${requestScope.get('list')}">
                       <tr>
                           <td>${book.getBookId()}</td>
                           <td>${book.getBookName()}</td>
                           <td>${book.getBookCounts()}</td>
                           <td>${book.getDetail()}</td>
                           <td>
                               <a href="${pageContext.request.contextPath}/book/toUpdateBook?id=${book.getBookId()}">更改</a> |
                               <a href="${pageContext.request.contextPath}/book/del/${book.getBookId()}">删除</a>
                           </td>
                       </tr>
                   </c:forEach>
                   </tbody>
               </table>
           </div>
       </div>
   </div>
   ```

4. BookController 类编写 ， 方法二：添加书籍

   ```java
   @RequestMapping("/toAddBook")
   public String toAddPaper() {
       return "addBook";
   }
   
   @RequestMapping("/addBook")
   public String addPaper(Books books) {
       System.out.println(books);
       bookService.addBook(books);
       return "redirect:/book/allBook";
   }
   ```

5. 添加书籍页面：**addBook.jsp**

   ```jsp
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   
   <html>
   <head>
       <title>新增书籍</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>新增书籍</small>
                   </h1>
               </div>
           </div>
       </div>
       <form action="${pageContext.request.contextPath}/book/addBook" method="post">
           书籍名称：<input type="text" name="bookName"><br><br><br>
           书籍数量：<input type="text" name="bookCounts"><br><br><br>
           书籍详情：<input type="text" name="detail"><br><br><br>
           <input type="submit" value="添加">
       </form>
   
   </div>
   ```

6. BookController 类编写 ， 方法三：修改书籍

   ```java
   @RequestMapping("/toUpdateBook")
   public String toUpdateBook(Model model, int id) {
       Books books = bookService.queryBookById(id);
       System.out.println(books);
       model.addAttribute("book",books );
       return "updateBook";
   }
   
   @RequestMapping("/updateBook")
   public String updateBook(Model model, Books book) {
       bookService.updateBook(book);
       Books books = bookService.queryBookById(book.getBookID());
       model.addAttribute("books", books);
       return "redirect:/book/allBook";
   }
   ```

7. 修改书籍页面 **updateBook.jsp**

   ```jsp
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>修改信息</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>修改信息</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <form action="${pageContext.request.contextPath}/book/updateBook" method="post">
           <input type="hidden" name="bookID" value="${book.getBookId()}"/>
           书籍名称：<input type="text" name="bookName" value="${book.getBookName()}"/>
           书籍数量：<input type="text" name="bookCounts" value="${book.getBookCounts()}"/>
           书籍详情：<input type="text" name="detail" value="${book.getDetail() }"/>
           <input type="submit" value="提交"/>
       </form>
   
   </div>
   ```

8. BookController 类编写 ， 方法四：删除书籍

   ```java
   @RequestMapping("/del/{bookId}")
   public String deleteBook(@PathVariable("bookId") int id) {
       bookService.deleteBookById(id);
       return "redirect:/book/allBook";
   }
   ```

**配置Tomcat，进行运行！**

到目前为止，这个SSM项目整合已经完全的OK了，可以直接运行进行测试！这个练习十分的重要，大家需要保证，不看任何东西，自己也可以完整的实现出来！

## **6、项目结构图**

![1570186854191.png](https://blog.kuangstudy.com/usr/uploads/2019/10/1086489242.png)

![1570186868239.png](https://blog.kuangstudy.com/usr/uploads/2019/10/2326667495.png)

## 7、错误排查

### 1、访问出现404，排查步骤：**

1. 查看控制台输出，看一下是不是缺少了什么jar包。

2. 如果jar包存在，显示无法输出，就在IDEA的项目发布中，添加lib依赖！

   步骤：点击项目结构----->Artifacts----->点击自己的项目(ssm:war exploded)--->(点击工具栏的第一个)在WEB-INF目录下新建一个lib包----->选中lib------>点击工具栏的第三个然后选中第一个---->把里面的包全部选中点击ok---->点击Apply再ok

   ![image-20200128125126368](E:\Java资料\ssm整合.assets\image-20200128125126368.png)

   ![image-20200128125237179](E:\Java资料\ssm整合.assets\image-20200128125237179.png)

3. 重启Tomcat 即可解决！

### 2、其他错误

#### 1、bean不存在

​	步骤：

​		查看bean注入是否成功 

​		junit单元测试，看我们的代码是否能够查询出来

​		问题不在底层，是我们spring出了问题

​		springMVC整合时没有调用到service层的bean

​			applicationContext.xml没有注册bean

​			web.xml也绑定过配置文件要绑定大的applicationContext.xml

​			

## 8、小结及展望

这个是同学们的第一个SSM整合案例，一定要烂熟于心！

SSM框架的重要程度是不言而喻的，学到这里，大家已经可以进行基本网站的单独开发。但是这只是增删改查的基本操作。可以说学到这里，大家才算是真正的步入了后台开发的门。也就是能找一个后台相关工作的底线。

或许很多人，工作就做这些事情，但是对于个人的提高来说，还远远不够！, 2020-03-02 07:06:53.0, 2020-03-23 19:38:47.0, null, 10]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20014, rs-50024} Result: [17, springboot, , ss, 2020-02-24 03:07:20.0, 2020-03-20 00:07:13.0, admin, 11]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20014, rs-50024} closed
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20014} clearParameters. 
[DEBUG][20-03-27][druid.sql.Connection]{conn-10003} pool-recycle
[DEBUG][20-03-27][druid.sql.Connection]{conn-10003} pool-connect
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20015} created. select count(*) from `blog`
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20015} Parameters : []
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20015} Types : []
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20015} executed. 0.629333 millis. select count(*) from `blog`
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20015, rs-50025} open
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20015, rs-50025} Header: [count(*)]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20015, rs-50025} Result: [13]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20015, rs-50025} closed
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20015} clearParameters. 
[DEBUG][20-03-27][druid.sql.Connection]{conn-10003} pool-recycle
[DEBUG][20-03-27][druid.sql.Connection]{conn-10003} pool-connect
[DEBUG][20-03-27][druid.sql.Connection]{conn-10004} pool-connect
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20007} Parameters : [13]
[DEBUG][20-03-27][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-27][druid.sql.Statement]{conn-10004, pstmt-20006} Parameters : [13]
[DEBUG][20-03-27][druid.sql.Statement]{conn-10004, pstmt-20006} Types : [INTEGER]
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20007} Types : [INTEGER]
[DEBUG][20-03-27][druid.sql.Statement]{conn-10005, pstmt-20004} Parameters : [0, 30]
[DEBUG][20-03-27][druid.sql.Statement]{conn-10004, pstmt-20006} executed. 1.63111 millis. select id,type_name typeName,title,content,create_time createTime,change_time changeTime,author,view from blog where id=?
[DEBUG][20-03-27][druid.sql.Statement]{conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10004, pstmt-20006, rs-50026} open
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10004, pstmt-20006, rs-50026} Header: [id, type_name, title, content, create_time, change_time, author, view]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10004, pstmt-20006, rs-50026} Result: [13, mybatis, ssm1整合, # ssm整合

## 1、数据库环境

创建一个存放书籍数据的数据库表

```sql
CREATE DATABASE `ssmbuild`;

USE `ssmbuild`;

DROP TABLE IF EXISTS `books`;

CREATE TABLE `books` (
  `bookId` INT PRIMARY KEY COMMENT '书id',
  `bookName` VARCHAR(100) NOT NULL COMMENT '书名',
  `bookCounts` INT(11) NOT NULL COMMENT '数量',
  ``ssmbuild``ssmbuild`` VARCHAR(200) NOT NULL COMMENT '描述'
) ENGINE=INNODB DEFAULT CHARSET=utf8

INSERT  INTO `books`(`bookId`,`bookName`,`bookCounts`,`detail`)VALUES 
(1,'Java',1,'从入门到放弃'),
(2,'MySQL',10,'从删库到跑路'),
(3,'Linux',5,'从进门到进牢');

SELECT * FROM books
```

## 2、基本环境搭建

1. 新建一Maven项目！ ssmbuild ， 添加web的支持

   ![image-20200128134359317](.\ssm整合.assets\image-20200128134359317.png)

2. 导入相关的pom依赖！

   ```xml
   <dependencies>
       <!--Junit-->
       <dependency>
           <groupId>junit</groupId>
           <artifactId>junit</artifactId>
           <version>4.12</version>
       </dependency>
       <!--数据库驱动-->
       <dependency>
           <groupId>mysql</groupId>
           <artifactId>mysql-connector-java</artifactId>
           <version>5.1.47</version>
       </dependency>
       <!-- 数据库连接池 -->
       <dependency>
           <groupId>com.mchange</groupId>
           <artifactId>c3p0</artifactId>
           <version>0.9.5.2</version>
       </dependency>
   
       <!--Servlet - JSP -->
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>servlet-api</artifactId>
           <version>2.5</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet.jsp</groupId>
           <artifactId>jsp-api</artifactId>
           <version>2.2</version>
       </dependency>
       <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>jstl</artifactId>
           <version>1.2</version>
       </dependency>
   
       <!--Mybatis-->
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis</artifactId>
           <version>3.5.2</version>
       </dependency>
       <dependency>
           <groupId>org.mybatis</groupId>
           <artifactId>mybatis-spring</artifactId>
           <version>2.0.2</version>
       </dependency>
   
       <!--Spring-->
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-webmvc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <dependency>
           <groupId>org.springframework</groupId>
           <artifactId>spring-jdbc</artifactId>
           <version>5.1.9.RELEASE</version>
       </dependency>
       <!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->
       <dependency>
           <groupId>org.projectlombok</groupId>
           <artifactId>lombok</artifactId>
           <version>1.16.10</version>
       </dependency>
   </dependencies>
   ```

3. Maven资源过滤设置

   ```xml
   <build>
       <resources>
           <resource>
               <directory>src/main/java</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
           <resource>
               <directory>src/main/resources</directory>
               <includes>
                   <include>**/*.properties</include>
                   <include>**/*.xml</include>
               </includes>
               <filtering>false</filtering>
           </resource>
       </resources>
   </build>
   ```

4. 建立基本结构和配置框架！

   - com.feige.pojo

   - com.feige.dao

   - com.feige.service

   - com.feige.controller

     在resources目录下创建

   - mybatis-config.xml

     ```xml
     <?xml version="1.0" encoding="UTF-8" ?>
     <!DOCTYPE configuration
             PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
             "http://mybatis.org/dtd/mybatis-3-config.dtd">
     <configuration>
     
     </configuration>
     ```

   - applicationContext.xml

     ```xml
     <?xml version="1.0" encoding="UTF-8"?>
     <beans xmlns="http://www.springframework.org/schema/beans"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://www.springframework.org/schema/beans
             http://www.springframework.org/schema/beans/spring-beans.xsd">
     
     </beans>
     ```

## 3、Mybatis层编写

1. 数据库配置文件 **database.properties**

   ```properties
   jdbc.driver=com.mysql.jdbc.Driver
   jdbc.url=jdbc:mysql://localhost:3306/ssmbuild?useSSL=true&useUnicode=true&characterEncoding=utf8
   jdbc.username=root
   jdbc.password=hufei169357
   ```

2. IDEA关联数据库

3. 编写MyBatis的核心配置文件

   ```xml
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE configuration
           PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-config.dtd">
   <configuration>
       
       <typeAliases>
           <package name="com.feige.pojo"/>
       </typeAliases>
       <mappers>
           <mapper resource="com/feige/dao/BookMapper.xml"/>
       </mappers>
   
   </configuration>
   ```

4. 编写数据库对应的实体类 com.feige.pojo.Books
   使用lombok插件！

   ```java
   package com.kuang.pojo;
   
   import lombok.AllArgsConstructor;
   import lombok.Data;
   import lombok.NoArgsConstructor;
   
   @Data
   @AllArgsConstructor
   @NoArgsConstructor
   public class Books {
       
       private int bookId;
       private String bookName;
       private int bookCounts;
       private String detail;
       
   }
   ```

5. 编写Dao层的 Mapper接口！

   ```java
   package com.kuang.dao;
   
   import com.kuang.pojo.Books;
   import java.util.List;
   
   public interface BookMapper {
   
       //增加一个Book
       int addBook(Books book);
   
       //根据id删除一个Book
       int deleteBookById(int id);
   
       //更新Book
       int updateBook(Books books);
   
       //根据id查询,返回一个Book
       Books queryBookById(int id);
   
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   
   }
   ```

6. 编写接口对应的 Mapper.xml 文件。需要导入MyBatis的包；

   ```xml
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE mapper
           PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
           "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
   
   <mapper namespace="com.feige.dao.BooksMapper">
   
       <!--增加一个Book-->
       <insert id="addBook" parameterType="Books">
           insert into books(bookName,bookCounts,detail)
           values (#{bookName}, #{bookCounts}, #{detail})
       </insert>
   
       <!--根据id删除一个Book-->
       <delete id="deleteBookById" parameterType="int">
           delete from books where bookId=#{bookId}
       </delete>
   
       <!--更新Book-->
       <update id="updateBook" parameterType="Books">
           update books
           set bookName = #{bookName},bookCounts = #{bookCounts},detail = #{detail}
           where bookId = #{bookId}
       </update>
   
       <!--根据id查询,返回一个Book-->
       <select id="queryBookById" resultType="Books">
           select * from books
           where bookID = #{bookId}
       </select>
   
       <!--查询全部Book-->
       <select id="queryAllBook" resultType="com.feige.pojo.Books">
           SELECT * from books
       </select>
   
   </mapper>
   ```

7. 编写Service层的接口和实现类
   接口：

   ```java
   package com.feige.service;
   
   import com.feige.pojo.Books;
   
   import java.util.List;
   
   //BookService:底下需要去实现,调用dao层
   public interface BookService {
       //增加一个Book
       int addBook(Books book);
       //根据id删除一个Book
       int deleteBookById(int id);
       //更新Book
       int updateBook(Books books);
       //根据id查询,返回一个Book
       Books queryBookById(int id);
       //查询全部Book,返回list集合
       List<Books> queryAllBook();
   }
   ```

实现类：

```java
package com.feige.service;

import com.feige.dao.BookMapper;
import com.feige.pojo.Books;
import java.util.List;

public class BookServiceImpl implements BookService {

    //调用dao层的操作，设置一个set接口，方便Spring管理
    private BookMapper bookMapper;

    public void setBookMapper(BookMapper bookMapper) {
        this.bookMapper = bookMapper;
    }
    
    public int addBook(Books book) {
        return bookMapper.addBook(book);
    }
    
    public int deleteBookById(int id) {
        return bookMapper.deleteBookById(id);
    }
    
    public int updateBook(Books books) {
        return bookMapper.updateBook(books);
    }
    
    public Books queryBookById(int id) {
        return bookMapper.queryBookById(id);
    }
    
    public List<Books> queryAllBook() {
        return bookMapper.queryAllBook();
    }
}
```

**OK，到此，底层需求操作编写完毕！**

## 4、Spring层

1. 配置**Spring整合MyBatis**，我们这里数据源使用c3p0连接池；

2. 我们去编写Spring整合Mybatis的相关的配置文件； spring-dao.xml

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans.xsd
   http://www.springframework.org/schema/context
   https://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 配置整合mybatis -->
       <!-- 1.关联数据库文件 -->
       <context:property-placeholder location="classpath:database.properties"/>
   
       <!-- 2.数据库连接池 -->
       <!--数据库连接池
   dbcp  半自动化操作  不能自动连接
   c3p0  自动化操作（自动的加载配置文件 并且设置到对象里面）
       -->
       <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
   <!-- 配置连接池属性 -->
   <property name="driverClass" value="${jdbc.driver}"/>
   <property name="jdbcUrl" value="${jdbc.url}"/>
   <property name="user" value="${jdbc.username}"/>
   <property name="password" value="${jdbc.password}"/>
   
   <!-- c3p0连接池的私有属性 -->
   <property name="maxPoolSize" value="30"/>
   <property name="minPoolSize" value="10"/>
   <!-- 关闭连接后不自动commit -->
   <property name="autoCommitOnClose" value="false"/>
   <!-- 获取连接超时时间 -->
   <property name="checkoutTimeout" value="10000"/>
   <!-- 当获取连接失败重试次数 -->
   <property name="acquireRetryAttempts" value="2"/>
       </bean>
   
       <!-- 3.配置SqlSessionFactory对象 -->
       <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource"/>
   <!-- 配置MyBaties全局配置文件:mybatis-config.xml -->
   <property name="configLocation" value="classpath:mybatis-config.xml"/>
       </bean>
   
       <!-- 4.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 -->
       <!--解释 ： https://www.cnblogs.com/jpfss/p/7799806.html-->
       <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
   <!-- 注入sqlSessionFactory -->
   <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
   <!-- 给出需要扫描Dao接口包 -->
   <property name="basePackage" value="com.feige.dao"/>
       </bean>
   
   </beans>
   ```

3. **Spring整合service层**

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">
   
       <!-- 扫描service相关的bean -->
       <context:component-scan base-package="com.kuang.service" />
   
       <!--BookServiceImpl注入到IOC容器中-->
       <bean id="BookServiceImpl" class="com.kuang.service.BookServiceImpl">
   <property name="bookMapper" ref="bookMapper"/>
       </bean>
   
       <!-- 配置事务管理器 -->
       <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
   <!-- 注入数据库连接池 -->
   <property name="dataSource" ref="dataSource" />
       </bean>
   
   </beans>
   ```

Spring层搞定！再次理解一下，Spring就是一个大杂烩，一个容器！对吧！

## 5、SpringMVC层

1. **web.xml**

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
            version="4.0">
   
       <!--DispatcherServlet-->
       <servlet>
           <servlet-name>DispatcherServlet</servlet-name>
           <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
           <init-param>
               <param-name>contextConfigLocation</param-name>
               <param-value>classpath:applicationContext.xml</param-value>
           </init-param>
           <load-on-startup>1</load-on-startup>
       </servlet>
       <servlet-mapping>
           <servlet-name>DispatcherServlet</servlet-name>
           <url-pattern>/</url-pattern>
       </servlet-mapping>
   
       <!--encodingFilter-->
       <filter>
           <filter-name>encodingFilter</filter-name>
           <filter-class>
               org.springframework.web.filter.CharacterEncodingFilter
           </filter-class>
           <init-param>
               <param-name>encoding</param-name>
               <param-value>utf-8</param-value>
           </init-param>
       </filter>
       <filter-mapping>
           <filter-name>encodingFilter</filter-name>
           <url-pattern>/*</url-pattern>
       </filter-mapping>
       
       <!--Session过期时间-->
       <session-config>
           <session-timeout>15</session-timeout>
       </session-config>
       
   </web-app>
   ```

2. **spring-mvc.xml**

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xmlns:mvc="http://www.springframework.org/schema/mvc"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       https://www.springframework.org/schema/mvc/spring-mvc.xsd">
   
       <!-- 配置SpringMVC -->
       <!-- 1.开启SpringMVC注解驱动 -->
       <mvc:annotation-driven>
           <mvc:message-converters register-defaults="true">
               <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                   <constructor-arg value="UTF-8"/>
               </bean>
               <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                   <property name="objectMapper">
                       <bean class="org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean">
                           <property name="failOnEmptyBeans" value="false"/>
                       </bean>
                   </property>
               </bean>
           </mvc:message-converters>
       </mvc:annotation-driven>
       <!--解决跨域问题-->
       <mvc:cors>
       <mvc:mapping path="/**"
                    allowed-origins="http://127.0.0.1:8090,http://localhost:8090"
                    allowed-methods="POST,GET, OPTIONS,DELETE,PUT"
                    allowed-headers="Content-Type,ContentType,Access-Control-Allow-Headers, Authorization, X-Requested-With"
                    allow-credentials="true"/>
       </mvc:cors>
       <!-- 2.静态资源默认servlet配置-->
       <mvc:default-servlet-handler/>
   
       <!-- 3.配置jsp 显示ViewResolver视图解析器 -->
       <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
           <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
           <property name="prefix" value="/WEB-INF/jsp/" />
           <property name="suffix" value=".jsp" />
       </bean>
   
       <!-- 4.扫描web相关的bean -->
       <context:component-scan base-package="com.feige.controller" />
   
   </beans>
   ```

3. **Spring配置整合文件，applicationContext.xml**

   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd">
   
       <import resource="spring-dao.xml"/>
       <import resource="spring-service.xml"/>
       <import resource="spring-mvc.xml"/>
       
   </beans>
   ```

**配置文件，暂时结束！Controller 和 视图层编写**

1. BookController 类编写 ， 方法一：查询全部书籍

   ```java
   @Controller
   @RequestMapping("/book")
   public class BookController {
   
       @Autowired
       @Qualifier("BookServiceImpl")
       private BookService bookService;
   
       @RequestMapping("/allBook")
       public String list(Model model) {
           List<Books> list = bookService.queryAllBook();
           model.addAttribute("list", list);
           return "allBook";
       }
   }
   ```

2. 编写首页 **index.jsp**

   ```html
   <%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" %>
   <!DOCTYPE HTML>
   <html>
   <head>
       <title>首页</title>
       <style type="text/css">
           a {
               text-decoration: none;
               color: black;
               font-size: 18px;
           }
           h3 {
               width: 180px;
               height: 38px;
               margin: 100px auto;
               text-align: center;
               line-height: 38px;
               background: deepskyblue;
               border-radius: 4px;
           }
       </style>
   </head>
   <body>
   
   <h3>
       <a href="${pageContext.request.contextPath}/book/allBook">点击进入列表页</a>
   </h3>
   </body>
   </html>
   ```

3. 书籍列表页面 **allbook.jsp**

   ```jsp
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>书籍列表</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>书籍列表 —— 显示所有书籍</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <div class="row">
           <div class="col-md-4 column">
               <a class="btn btn-primary" href="${pageContext.request.contextPath}/book/toAddBook">新增</a>
           </div>
       </div>
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <table class="table table-hover table-striped">
                   <thead>
                   <tr>
                       <th>书籍编号</th>
                       <th>书籍名字</th>
                       <th>书籍数量</th>
                       <th>书籍详情</th>
                       <th>操作</th>
                   </tr>
                   </thead>
   
                   <tbody>
                   <c:forEach var="book" items="${requestScope.get('list')}">
                       <tr>
                           <td>${book.getBookId()}</td>
                           <td>${book.getBookName()}</td>
                           <td>${book.getBookCounts()}</td>
                           <td>${book.getDetail()}</td>
                           <td>
                               <a href="${pageContext.request.contextPath}/book/toUpdateBook?id=${book.getBookId()}">更改</a> |
                               <a href="${pageContext.request.contextPath}/book/del/${book.getBookId()}">删除</a>
                           </td>
                       </tr>
                   </c:forEach>
                   </tbody>
               </table>
           </div>
       </div>
   </div>
   ```

4. BookController 类编写 ， 方法二：添加书籍

   ```java
   @RequestMapping("/toAddBook")
   public String toAddPaper() {
       return "addBook";
   }
   
   @RequestMapping("/addBook")
   public String addPaper(Books books) {
       System.out.println(books);
       bookService.addBook(books);
       return "redirect:/book/allBook";
   }
   ```

5. 添加书籍页面：**addBook.jsp**

   ```jsp
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   
   <html>
   <head>
       <title>新增书籍</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>新增书籍</small>
                   </h1>
               </div>
           </div>
       </div>
       <form action="${pageContext.request.contextPath}/book/addBook" method="post">
           书籍名称：<input type="text" name="bookName"><br><br><br>
           书籍数量：<input type="text" name="bookCounts"><br><br><br>
           书籍详情：<input type="text" name="detail"><br><br><br>
           <input type="submit" value="添加">
       </form>
   
   </div>
   ```

6. BookController 类编写 ， 方法三：修改书籍

   ```java
   @RequestMapping("/toUpdateBook")
   public String toUpdateBook(Model model, int id) {
       Books books = bookService.queryBookById(id);
       System.out.println(books);
       model.addAttribute("book",books );
       return "updateBook";
   }
   
   @RequestMapping("/updateBook")
   public String updateBook(Model model, Books book) {
       bookService.updateBook(book);
       Books books = bookService.queryBookById(book.getBookID());
       model.addAttribute("books", books);
       return "redirect:/book/allBook";
   }
   ```

7. 修改书籍页面 **updateBook.jsp**

   ```jsp
   <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
   <%@ page contentType="text/html;charset=UTF-8" language="java" %>
   <html>
   <head>
       <title>修改信息</title>
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <!-- 引入 Bootstrap -->
       <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body>
   <div class="container">
   
       <div class="row clearfix">
           <div class="col-md-12 column">
               <div class="page-header">
                   <h1>
                       <small>修改信息</small>
                   </h1>
               </div>
           </div>
       </div>
   
       <form action="${pageContext.request.contextPath}/book/updateBook" method="post">
           <input type="hidden" name="bookID" value="${book.getBookId()}"/>
           书籍名称：<input type="text" name="bookName" value="${book.getBookName()}"/>
           书籍数量：<input type="text" name="bookCounts" value="${book.getBookCounts()}"/>
           书籍详情：<input type="text" name="detail" value="${book.getDetail() }"/>
           <input type="submit" value="提交"/>
       </form>
   
   </div>
   ```

8. BookController 类编写 ， 方法四：删除书籍

   ```java
   @RequestMapping("/del/{bookId}")
   public String deleteBook(@PathVariable("bookId") int id) {
       bookService.deleteBookById(id);
       return "redirect:/book/allBook";
   }
   ```

**配置Tomcat，进行运行！**

到目前为止，这个SSM项目整合已经完全的OK了，可以直接运行进行测试！这个练习十分的重要，大家需要保证，不看任何东西，自己也可以完整的实现出来！

## **6、项目结构图**

![1570186854191.png](https://blog.kuangstudy.com/usr/uploads/2019/10/1086489242.png)

![1570186868239.png](https://blog.kuangstudy.com/usr/uploads/2019/10/2326667495.png)

## 7、错误排查

### 1、访问出现404，排查步骤：**

1. 查看控制台输出，看一下是不是缺少了什么jar包。

2. 如果jar包存在，显示无法输出，就在IDEA的项目发布中，添加lib依赖！

   步骤：点击项目结构----->Artifacts----->点击自己的项目(ssm:war exploded)--->(点击工具栏的第一个)在WEB-INF目录下新建一个lib包----->选中lib------>点击工具栏的第三个然后选中第一个---->把里面的包全部选中点击ok---->点击Apply再ok

   ![image-20200128125126368](E:\Java资料\ssm整合.assets\image-20200128125126368.png)

   ![image-20200128125237179](E:\Java资料\ssm整合.assets\image-20200128125237179.png)

3. 重启Tomcat 即可解决！

### 2、其他错误

#### 1、bean不存在

​	步骤：

​		查看bean注入是否成功 

​		junit单元测试，看我们的代码是否能够查询出来

​		问题不在底层，是我们spring出了问题

​		springMVC整合时没有调用到service层的bean

​			applicationContext.xml没有注册bean

​			web.xml也绑定过配置文件要绑定大的applicationContext.xml

​			

## 8、小结及展望

这个是同学们的第一个SSM整合案例，一定要烂熟于心！

SSM框架的重要程度是不言而喻的，学到这里，大家已经可以进行基本网站的单独开发。但是这只是增删改查的基本操作。可以说学到这里，大家才算是真正的步入了后台开发的门。也就是能找一个后台相关工作的底线。

或许很多人，工作就做这些事情，但是对于个人的提高来说，还远远不够！, 2020-03-02 07:06:53.0, 2020-03-23 19:38:47.0, null, 10]
[DEBUG][20-03-27][druid.sql.Statement]{conn-10005, pstmt-20004} executed. 1.039554 millis. select id,type_name typeName
        from `type`
         
            limit ?,?
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50027} open
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50027} Header: [id, type_name]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50027} Result: [3, mybatis]
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20007} executed. 4.572885 millis. select distinct count(*) from comments c
        where c.blog_id=? and
        c.parent_id is null;
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50027} Result: [2, spring]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20007, rs-50028} open
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20007, rs-50028} Header: [count(*)]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50027} Result: [1, springboot]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50027} Result: [4, springMVC]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20007, rs-50028} Result: [3]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10004, pstmt-20006, rs-50026} closed
[DEBUG][20-03-27][druid.sql.Statement]{conn-10004, pstmt-20006} clearParameters. 
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20007, rs-50028} closed
[DEBUG][20-03-27][druid.sql.Connection]{conn-10004} pool-recycle
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20007} clearParameters. 
[DEBUG][20-03-27][druid.sql.Connection]{conn-10003} pool-recycle
[DEBUG][20-03-27][druid.sql.Connection]{conn-10003} pool-connect
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20008} Parameters : [13, 0, 10]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10005, pstmt-20004, rs-50027} closed
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20008} Types : [INTEGER, INTEGER, INTEGER]
[DEBUG][20-03-27][druid.sql.Statement]{conn-10005, pstmt-20004} clearParameters. 
[DEBUG][20-03-27][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-27][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-03-27][druid.sql.Statement]{conn-10005, pstmt-20005} Parameters : []
[DEBUG][20-03-27][druid.sql.Statement]{conn-10005, pstmt-20005} Types : []
[DEBUG][20-03-27][druid.sql.Statement]{conn-10005, pstmt-20005} executed. 0.674222 millis. select count(*) from `type`
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50029} open
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50029} Header: [count(*)]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50029} Result: [4]
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20008} executed. 2.081331 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id  and
        c.parent_id is null limit ?,?;;
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10005, pstmt-20005, rs-50029} closed
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20008, rs-50030} open
[DEBUG][20-03-27][druid.sql.Statement]{conn-10005, pstmt-20005} clearParameters. 
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20008, rs-50030} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-27][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20008, rs-50030} Result: [26, 好好, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:35.0, null]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20008, rs-50030} Result: [29, 太好了, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:13.0, null]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20008, rs-50030} Result: [32, <p>feige</p>, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 01:33:26.0, null]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20008, rs-50030} closed
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20008} clearParameters. 
[DEBUG][20-03-27][druid.sql.Connection]{conn-10003} pool-recycle
[DEBUG][20-03-27][druid.sql.Connection]{conn-10003} pool-connect
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20009} Parameters : [13, 26]
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20009} Types : [INTEGER, INTEGER]
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20009} executed. 12.2671 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20009, rs-50031} open
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20009, rs-50031} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20009, rs-50031} Result: [27, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:56.0, sss]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20009, rs-50031} Result: [28, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:43:03.0, sss]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20009, rs-50031} closed
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20009} clearParameters. 
[DEBUG][20-03-27][druid.sql.Connection]{conn-10003} pool-recycle
[DEBUG][20-03-27][druid.sql.Connection]{conn-10003} pool-connect
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20009} Parameters : [13, 26]
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20009} Types : [INTEGER, INTEGER]
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20009} executed. 14.17421 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20009, rs-50032} open
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20009, rs-50032} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20009, rs-50032} Result: [27, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:42:56.0, sss]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20009, rs-50032} Result: [28, 谢了, 26, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:43:03.0, sss]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20009, rs-50032} closed
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20009} clearParameters. 
[DEBUG][20-03-27][druid.sql.Connection]{conn-10003} pool-recycle
[DEBUG][20-03-27][druid.sql.Connection]{conn-10003} pool-connect
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20009} Parameters : [13, 27]
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20009} Types : [INTEGER, INTEGER]
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20009} executed. 1.518665 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20009, rs-50033} open
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20009, rs-50033} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20009, rs-50033} closed
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20009} clearParameters. 
[DEBUG][20-03-27][druid.sql.Connection]{conn-10003} pool-recycle
[DEBUG][20-03-27][druid.sql.Connection]{conn-10003} pool-connect
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20009} Parameters : [13, 27]
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20009} Types : [INTEGER, INTEGER]
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20009} executed. 3.899997 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20009, rs-50034} open
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20009, rs-50034} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20009, rs-50034} closed
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20009} clearParameters. 
[DEBUG][20-03-27][druid.sql.Connection]{conn-10003} pool-recycle
[DEBUG][20-03-27][druid.sql.Connection]{conn-10003} pool-connect
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20009} Parameters : [13, 29]
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20009} Types : [INTEGER, INTEGER]
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20009} executed. 6.716438 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20009, rs-50035} open
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20009, rs-50035} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20009, rs-50035} Result: [30, 谢谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:43.0, sss]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20009, rs-50035} Result: [31, 不用谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:47:01.0, sss]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20009, rs-50035} closed
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20009} clearParameters. 
[DEBUG][20-03-27][druid.sql.Connection]{conn-10003} pool-recycle
[DEBUG][20-03-27][druid.sql.Connection]{conn-10003} pool-connect
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20009} Parameters : [13, 29]
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20009} Types : [INTEGER, INTEGER]
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20009} executed. 7.419104 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20009, rs-50036} open
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20009, rs-50036} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20009, rs-50036} Result: [30, 谢谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:45:43.0, sss]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20009, rs-50036} Result: [31, 不用谢, 29, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-03-06 00:47:01.0, sss]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20009, rs-50036} closed
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20009} clearParameters. 
[DEBUG][20-03-27][druid.sql.Connection]{conn-10003} pool-recycle
[DEBUG][20-03-27][druid.sql.Connection]{conn-10003} pool-connect
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20009} Parameters : [13, 30]
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20009} Types : [INTEGER, INTEGER]
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20009} executed. 1.146666 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20009, rs-50037} open
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20009, rs-50037} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20009, rs-50037} closed
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20009} clearParameters. 
[DEBUG][20-03-27][druid.sql.Connection]{conn-10003} pool-recycle
[DEBUG][20-03-27][druid.sql.Connection]{conn-10003} pool-connect
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20009} Parameters : [13, 30]
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20009} Types : [INTEGER, INTEGER]
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20009} executed. 1.340888 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20009, rs-50038} open
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20009, rs-50038} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20009, rs-50038} closed
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20009} clearParameters. 
[DEBUG][20-03-27][druid.sql.Connection]{conn-10003} pool-recycle
[DEBUG][20-03-27][druid.sql.Connection]{conn-10003} pool-connect
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20009} Parameters : [13, 32]
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20009} Types : [INTEGER, INTEGER]
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20009} executed. 1.412443 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id and
        c.parent_id =?;
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20009, rs-50039} open
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20009, rs-50039} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-03-27][druid.sql.ResultSet]{conn-10003, pstmt-20009, rs-50039} closed
[DEBUG][20-03-27][druid.sql.Statement]{conn-10003, pstmt-20009} clearParameters. 
[DEBUG][20-03-27][druid.sql.Connection]{conn-10003} pool-recycle
[DEBUG][20-04-07][druid.sql.Connection]{conn-10001} connected
[DEBUG][20-04-07][druid.sql.Connection]{conn-10002} connected
[DEBUG][20-04-07][druid.sql.Connection]{conn-10003} connected
[DEBUG][20-04-07][druid.sql.Connection]{conn-10004} connected
[DEBUG][20-04-07][druid.sql.Connection]{conn-10005} connected
[DEBUG][20-04-07][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-04-07][druid.sql.Statement]{conn-10005, pstmt-20000} created. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id
[DEBUG][20-04-07][druid.sql.Statement]{conn-10005, pstmt-20000} Parameters : [1]
[DEBUG][20-04-07][druid.sql.Statement]{conn-10005, pstmt-20000} Types : [INTEGER]
[DEBUG][20-04-07][druid.sql.Statement]{conn-10005, pstmt-20000} executed. 53.027508 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} open
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [1, aaaaa, null, 22, https://www.pyfeige.com/static/img/bg7.png, feige, 2020-02-24 04:04:34.0, null]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [2, hhh, 1, 122, https://www.pyfeige.com/static/img/4.jpg, dage, 2020-02-24 04:05:59.0, feige]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [3, xx, 2, 122, https://www.pyfeige.com/static/img/bg7.png, dd, 2020-02-24 04:06:56.0, dage]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [4, cc, 1, 122, https://www.pyfeige.com/static/img/bg7.png, feige, 2020-02-24 04:17:34.0, feige]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [5, vv, 2, 122, https://www.pyfeige.com/static/img/bg7.png, dd, 2020-02-24 04:18:31.0, dage]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [6, aa, null, 222, https://www.pyfeige.com/static/img/bg7.png, feige, 2020-02-24 06:22:08.0, null]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [7, feige, 3, 6222, https://www.pyfeige.com/static/img/bg7.png, dd, 2020-02-24 06:22:57.0, dd]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [8, dage, 2, 6222, https://www.pyfeige.com/static/img/bg7.png, feige, 2020-02-24 06:23:39.0, dage]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [11, adddddddddddddddddd, 6, 222, https://www.pyfeige.com/static/img/4.jpg, dage, 2020-02-26 09:24:43.0, hufeige]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [12, hufeigegege, null, 0, https://www.pyfeige.com/static/img/4.jpg, dage, 2020-02-26 09:54:47.0, null]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [13, aaaaaa, 12, 0, https://www.pyfeige.com/static/img/4.jpg, dage, 2020-02-26 09:55:11.0, dage]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [14, qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq, null, 0, https://www.pyfeige.com/static/img/bg7.png, dd, 2020-02-26 10:12:44.0, null]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [15, dffffffffffffffffffffffffffffff, 14, 0, https://www.pyfeige.com/static/img/bg7.png, dd, 2020-02-26 10:13:13.0, dd]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [16, qqqq, null, 0, https://www.pyfeige.com/static/img/3.png, 1, 2020-02-26 21:24:26.0, null]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [17, sssss, null, 0, https://www.pyfeige.com/static/img/3.png, 1, 2020-02-26 21:24:37.0, null]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [18, ssss, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-02-26 21:24:53.0, null]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [19, ssssxxx, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-02-26 21:24:57.0, null]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [20, ssssxxxxxx, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-02-26 21:25:00.0, null]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [21, ssssxxxxxxxxxxx, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-02-26 21:25:03.0, null]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [22, swswww, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-02-26 21:25:08.0, null]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [23, aaaaaaaaaaaaaaaaaaaa, 21, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-02-26 21:26:14.0, sss]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [24, hahahahaah, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-02-27 01:25:46.0, null]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [25, feigefeige, 22, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-02-27 01:26:09.0, sss]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} closed
[DEBUG][20-04-07][druid.sql.Statement]{conn-10005, pstmt-20000} clearParameters. 
[DEBUG][20-04-07][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-04-07][druid.sql.Connection]{conn-10001} closed
[DEBUG][20-04-07][druid.sql.Connection]{conn-10002} closed
[DEBUG][20-04-07][druid.sql.Connection]{conn-10003} closed
[DEBUG][20-04-07][druid.sql.Connection]{conn-10004} closed
[DEBUG][20-04-07][druid.sql.Statement]{conn-10005, pstmt-20000} closed
[DEBUG][20-04-07][druid.sql.Connection]{conn-10005} closed
[DEBUG][20-04-07][druid.sql.Connection]{conn-10001} connected
[DEBUG][20-04-07][druid.sql.Connection]{conn-10002} connected
[DEBUG][20-04-07][druid.sql.Connection]{conn-10003} connected
[DEBUG][20-04-07][druid.sql.Connection]{conn-10004} connected
[DEBUG][20-04-07][druid.sql.Connection]{conn-10005} connected
[DEBUG][20-04-07][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-04-07][druid.sql.Statement]{conn-10005, pstmt-20000} created. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id
[DEBUG][20-04-07][druid.sql.Statement]{conn-10005, pstmt-20000} Parameters : [1]
[DEBUG][20-04-07][druid.sql.Statement]{conn-10005, pstmt-20000} Types : [INTEGER]
[DEBUG][20-04-07][druid.sql.Statement]{conn-10005, pstmt-20000} executed. 21.098648 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} open
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [1, aaaaa, null, 22, https://www.pyfeige.com/static/img/bg7.png, feige, 2020-02-24 04:04:34.0, null]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [2, hhh, 1, 122, https://www.pyfeige.com/static/img/4.jpg, dage, 2020-02-24 04:05:59.0, feige]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [3, xx, 2, 122, https://www.pyfeige.com/static/img/bg7.png, dd, 2020-02-24 04:06:56.0, dage]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [4, cc, 1, 122, https://www.pyfeige.com/static/img/bg7.png, feige, 2020-02-24 04:17:34.0, feige]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [5, vv, 2, 122, https://www.pyfeige.com/static/img/bg7.png, dd, 2020-02-24 04:18:31.0, dage]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [6, aa, null, 222, https://www.pyfeige.com/static/img/bg7.png, feige, 2020-02-24 06:22:08.0, null]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [7, feige, 3, 6222, https://www.pyfeige.com/static/img/bg7.png, dd, 2020-02-24 06:22:57.0, dd]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [8, dage, 2, 6222, https://www.pyfeige.com/static/img/bg7.png, feige, 2020-02-24 06:23:39.0, dage]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [11, adddddddddddddddddd, 6, 222, https://www.pyfeige.com/static/img/4.jpg, dage, 2020-02-26 09:24:43.0, hufeige]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [12, hufeigegege, null, 0, https://www.pyfeige.com/static/img/4.jpg, dage, 2020-02-26 09:54:47.0, null]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [13, aaaaaa, 12, 0, https://www.pyfeige.com/static/img/4.jpg, dage, 2020-02-26 09:55:11.0, dage]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [14, qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq, null, 0, https://www.pyfeige.com/static/img/bg7.png, dd, 2020-02-26 10:12:44.0, null]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [15, dffffffffffffffffffffffffffffff, 14, 0, https://www.pyfeige.com/static/img/bg7.png, dd, 2020-02-26 10:13:13.0, dd]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [16, qqqq, null, 0, https://www.pyfeige.com/static/img/3.png, 1, 2020-02-26 21:24:26.0, null]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [17, sssss, null, 0, https://www.pyfeige.com/static/img/3.png, 1, 2020-02-26 21:24:37.0, null]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [18, ssss, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-02-26 21:24:53.0, null]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [19, ssssxxx, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-02-26 21:24:57.0, null]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [20, ssssxxxxxx, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-02-26 21:25:00.0, null]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [21, ssssxxxxxxxxxxx, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-02-26 21:25:03.0, null]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [22, swswww, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-02-26 21:25:08.0, null]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [23, aaaaaaaaaaaaaaaaaaaa, 21, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-02-26 21:26:14.0, sss]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [24, hahahahaah, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-02-27 01:25:46.0, null]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [25, feigefeige, 22, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-02-27 01:26:09.0, sss]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} closed
[DEBUG][20-04-07][druid.sql.Statement]{conn-10005, pstmt-20000} clearParameters. 
[DEBUG][20-04-07][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-04-07][druid.sql.Connection]{conn-10001} closed
[DEBUG][20-04-07][druid.sql.Connection]{conn-10002} closed
[DEBUG][20-04-07][druid.sql.Connection]{conn-10003} closed
[DEBUG][20-04-07][druid.sql.Connection]{conn-10004} closed
[DEBUG][20-04-07][druid.sql.Statement]{conn-10005, pstmt-20000} closed
[DEBUG][20-04-07][druid.sql.Connection]{conn-10005} closed
[DEBUG][20-04-07][druid.sql.Connection]{conn-10001} connected
[DEBUG][20-04-07][druid.sql.Connection]{conn-10002} connected
[DEBUG][20-04-07][druid.sql.Connection]{conn-10003} connected
[DEBUG][20-04-07][druid.sql.Connection]{conn-10004} connected
[DEBUG][20-04-07][druid.sql.Connection]{conn-10005} connected
[DEBUG][20-04-07][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-04-07][druid.sql.Statement]{conn-10005, pstmt-20000} created. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id
[DEBUG][20-04-07][druid.sql.Statement]{conn-10005, pstmt-20000} Parameters : [1]
[DEBUG][20-04-07][druid.sql.Statement]{conn-10005, pstmt-20000} Types : [INTEGER]
[DEBUG][20-04-07][druid.sql.Statement]{conn-10005, pstmt-20000} executed. 10.721769 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} open
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [1, aaaaa, null, 22, https://www.pyfeige.com/static/img/bg7.png, feige, 2020-02-24 04:04:34.0, null]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [2, hhh, 1, 122, https://www.pyfeige.com/static/img/4.jpg, dage, 2020-02-24 04:05:59.0, feige]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [3, xx, 2, 122, https://www.pyfeige.com/static/img/bg7.png, dd, 2020-02-24 04:06:56.0, dage]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [4, cc, 1, 122, https://www.pyfeige.com/static/img/bg7.png, feige, 2020-02-24 04:17:34.0, feige]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [5, vv, 2, 122, https://www.pyfeige.com/static/img/bg7.png, dd, 2020-02-24 04:18:31.0, dage]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [6, aa, null, 222, https://www.pyfeige.com/static/img/bg7.png, feige, 2020-02-24 06:22:08.0, null]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [7, feige, 3, 6222, https://www.pyfeige.com/static/img/bg7.png, dd, 2020-02-24 06:22:57.0, dd]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [8, dage, 2, 6222, https://www.pyfeige.com/static/img/bg7.png, feige, 2020-02-24 06:23:39.0, dage]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [11, adddddddddddddddddd, 6, 222, https://www.pyfeige.com/static/img/4.jpg, dage, 2020-02-26 09:24:43.0, hufeige]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [12, hufeigegege, null, 0, https://www.pyfeige.com/static/img/4.jpg, dage, 2020-02-26 09:54:47.0, null]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [13, aaaaaa, 12, 0, https://www.pyfeige.com/static/img/4.jpg, dage, 2020-02-26 09:55:11.0, dage]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [14, qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq, null, 0, https://www.pyfeige.com/static/img/bg7.png, dd, 2020-02-26 10:12:44.0, null]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [15, dffffffffffffffffffffffffffffff, 14, 0, https://www.pyfeige.com/static/img/bg7.png, dd, 2020-02-26 10:13:13.0, dd]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [16, qqqq, null, 0, https://www.pyfeige.com/static/img/3.png, 1, 2020-02-26 21:24:26.0, null]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [17, sssss, null, 0, https://www.pyfeige.com/static/img/3.png, 1, 2020-02-26 21:24:37.0, null]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [18, ssss, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-02-26 21:24:53.0, null]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [19, ssssxxx, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-02-26 21:24:57.0, null]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [20, ssssxxxxxx, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-02-26 21:25:00.0, null]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [21, ssssxxxxxxxxxxx, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-02-26 21:25:03.0, null]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [22, swswww, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-02-26 21:25:08.0, null]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [23, aaaaaaaaaaaaaaaaaaaa, 21, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-02-26 21:26:14.0, sss]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [24, hahahahaah, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-02-27 01:25:46.0, null]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [25, feigefeige, 22, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-02-27 01:26:09.0, sss]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} closed
[DEBUG][20-04-07][druid.sql.Statement]{conn-10005, pstmt-20000} clearParameters. 
[DEBUG][20-04-07][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-04-07][druid.sql.Connection]{conn-10001} closed
[DEBUG][20-04-07][druid.sql.Connection]{conn-10002} closed
[DEBUG][20-04-07][druid.sql.Connection]{conn-10003} closed
[DEBUG][20-04-07][druid.sql.Connection]{conn-10004} closed
[DEBUG][20-04-07][druid.sql.Statement]{conn-10005, pstmt-20000} closed
[DEBUG][20-04-07][druid.sql.Connection]{conn-10005} closed
[DEBUG][20-04-07][druid.sql.Connection]{conn-10001} connected
[DEBUG][20-04-07][druid.sql.Connection]{conn-10002} connected
[DEBUG][20-04-07][druid.sql.Connection]{conn-10003} connected
[DEBUG][20-04-07][druid.sql.Connection]{conn-10004} connected
[DEBUG][20-04-07][druid.sql.Connection]{conn-10005} connected
[DEBUG][20-04-07][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-04-07][druid.sql.Statement]{conn-10005, pstmt-20000} created. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id
[DEBUG][20-04-07][druid.sql.Statement]{conn-10005, pstmt-20000} Parameters : [1]
[DEBUG][20-04-07][druid.sql.Statement]{conn-10005, pstmt-20000} Types : [INTEGER]
[DEBUG][20-04-07][druid.sql.Statement]{conn-10005, pstmt-20000} executed. 17.54265 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} open
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [1, aaaaa, null, 22, https://www.pyfeige.com/static/img/bg7.png, feige, 2020-02-24 04:04:34.0, null]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [2, hhh, 1, 122, https://www.pyfeige.com/static/img/4.jpg, dage, 2020-02-24 04:05:59.0, feige]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [3, xx, 2, 122, https://www.pyfeige.com/static/img/bg7.png, dd, 2020-02-24 04:06:56.0, dage]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [4, cc, 1, 122, https://www.pyfeige.com/static/img/bg7.png, feige, 2020-02-24 04:17:34.0, feige]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [5, vv, 2, 122, https://www.pyfeige.com/static/img/bg7.png, dd, 2020-02-24 04:18:31.0, dage]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [6, aa, null, 222, https://www.pyfeige.com/static/img/bg7.png, feige, 2020-02-24 06:22:08.0, null]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [7, feige, 3, 6222, https://www.pyfeige.com/static/img/bg7.png, dd, 2020-02-24 06:22:57.0, dd]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [8, dage, 2, 6222, https://www.pyfeige.com/static/img/bg7.png, feige, 2020-02-24 06:23:39.0, dage]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [11, adddddddddddddddddd, 6, 222, https://www.pyfeige.com/static/img/4.jpg, dage, 2020-02-26 09:24:43.0, hufeige]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [12, hufeigegege, null, 0, https://www.pyfeige.com/static/img/4.jpg, dage, 2020-02-26 09:54:47.0, null]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [13, aaaaaa, 12, 0, https://www.pyfeige.com/static/img/4.jpg, dage, 2020-02-26 09:55:11.0, dage]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [14, qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq, null, 0, https://www.pyfeige.com/static/img/bg7.png, dd, 2020-02-26 10:12:44.0, null]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [15, dffffffffffffffffffffffffffffff, 14, 0, https://www.pyfeige.com/static/img/bg7.png, dd, 2020-02-26 10:13:13.0, dd]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [16, qqqq, null, 0, https://www.pyfeige.com/static/img/3.png, 1, 2020-02-26 21:24:26.0, null]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [17, sssss, null, 0, https://www.pyfeige.com/static/img/3.png, 1, 2020-02-26 21:24:37.0, null]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [18, ssss, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-02-26 21:24:53.0, null]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [19, ssssxxx, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-02-26 21:24:57.0, null]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [20, ssssxxxxxx, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-02-26 21:25:00.0, null]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [21, ssssxxxxxxxxxxx, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-02-26 21:25:03.0, null]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [22, swswww, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-02-26 21:25:08.0, null]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [23, aaaaaaaaaaaaaaaaaaaa, 21, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-02-26 21:26:14.0, sss]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [24, hahahahaah, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-02-27 01:25:46.0, null]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [25, feigefeige, 22, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-02-27 01:26:09.0, sss]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} closed
[DEBUG][20-04-07][druid.sql.Statement]{conn-10005, pstmt-20000} clearParameters. 
[DEBUG][20-04-07][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-04-07][druid.sql.Connection]{conn-10001} closed
[DEBUG][20-04-07][druid.sql.Connection]{conn-10002} closed
[DEBUG][20-04-07][druid.sql.Connection]{conn-10003} closed
[DEBUG][20-04-07][druid.sql.Connection]{conn-10004} closed
[DEBUG][20-04-07][druid.sql.Statement]{conn-10005, pstmt-20000} closed
[DEBUG][20-04-07][druid.sql.Connection]{conn-10005} closed
[DEBUG][20-04-07][druid.sql.Connection]{conn-10001} connected
[DEBUG][20-04-07][druid.sql.Connection]{conn-10002} connected
[DEBUG][20-04-07][druid.sql.Connection]{conn-10003} connected
[DEBUG][20-04-07][druid.sql.Connection]{conn-10004} connected
[DEBUG][20-04-07][druid.sql.Connection]{conn-10005} connected
[DEBUG][20-04-07][druid.sql.Connection]{conn-10005} pool-connect
[DEBUG][20-04-07][druid.sql.Statement]{conn-10005, pstmt-20000} created. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id
[DEBUG][20-04-07][druid.sql.Statement]{conn-10005, pstmt-20000} Parameters : [1]
[DEBUG][20-04-07][druid.sql.Statement]{conn-10005, pstmt-20000} Types : [INTEGER]
[DEBUG][20-04-07][druid.sql.Statement]{conn-10005, pstmt-20000} executed. 14.762209 millis. select distinct c.id id,c.content content,parent_id parentId,good,head_photo headPhoto,
        username,c.create_time createTime,replier from blog b,comments c,user u
        where c.blog_id=? and c.user_id=u.id
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} open
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Header: [id, content, parent_id, good, head_photo, username, create_time, replier]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [1, aaaaa, null, 22, https://www.pyfeige.com/static/img/bg7.png, feige, 2020-02-24 04:04:34.0, null]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [2, hhh, 1, 122, https://www.pyfeige.com/static/img/4.jpg, dage, 2020-02-24 04:05:59.0, feige]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [3, xx, 2, 122, https://www.pyfeige.com/static/img/bg7.png, dd, 2020-02-24 04:06:56.0, dage]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [4, cc, 1, 122, https://www.pyfeige.com/static/img/bg7.png, feige, 2020-02-24 04:17:34.0, feige]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [5, vv, 2, 122, https://www.pyfeige.com/static/img/bg7.png, dd, 2020-02-24 04:18:31.0, dage]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [6, aa, null, 222, https://www.pyfeige.com/static/img/bg7.png, feige, 2020-02-24 06:22:08.0, null]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [7, feige, 3, 6222, https://www.pyfeige.com/static/img/bg7.png, dd, 2020-02-24 06:22:57.0, dd]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [8, dage, 2, 6222, https://www.pyfeige.com/static/img/bg7.png, feige, 2020-02-24 06:23:39.0, dage]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [11, adddddddddddddddddd, 6, 222, https://www.pyfeige.com/static/img/4.jpg, dage, 2020-02-26 09:24:43.0, hufeige]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [12, hufeigegege, null, 0, https://www.pyfeige.com/static/img/4.jpg, dage, 2020-02-26 09:54:47.0, null]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [13, aaaaaa, 12, 0, https://www.pyfeige.com/static/img/4.jpg, dage, 2020-02-26 09:55:11.0, dage]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [14, qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq, null, 0, https://www.pyfeige.com/static/img/bg7.png, dd, 2020-02-26 10:12:44.0, null]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [15, dffffffffffffffffffffffffffffff, 14, 0, https://www.pyfeige.com/static/img/bg7.png, dd, 2020-02-26 10:13:13.0, dd]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [16, qqqq, null, 0, https://www.pyfeige.com/static/img/3.png, 1, 2020-02-26 21:24:26.0, null]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [17, sssss, null, 0, https://www.pyfeige.com/static/img/3.png, 1, 2020-02-26 21:24:37.0, null]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [18, ssss, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-02-26 21:24:53.0, null]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [19, ssssxxx, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-02-26 21:24:57.0, null]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [20, ssssxxxxxx, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-02-26 21:25:00.0, null]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [21, ssssxxxxxxxxxxx, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-02-26 21:25:03.0, null]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [22, swswww, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-02-26 21:25:08.0, null]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [23, aaaaaaaaaaaaaaaaaaaa, 21, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-02-26 21:26:14.0, sss]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [24, hahahahaah, null, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-02-27 01:25:46.0, null]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} Result: [25, feigefeige, 22, 0, https://www.pyfeige.com/static/img/3.png, sss, 2020-02-27 01:26:09.0, sss]
[DEBUG][20-04-07][druid.sql.ResultSet]{conn-10005, pstmt-20000, rs-50000} closed
[DEBUG][20-04-07][druid.sql.Statement]{conn-10005, pstmt-20000} clearParameters. 
[DEBUG][20-04-07][druid.sql.Connection]{conn-10005} pool-recycle
[DEBUG][20-04-07][druid.sql.Connection]{conn-10001} closed
[DEBUG][20-04-07][druid.sql.Connection]{conn-10002} closed
[DEBUG][20-04-07][druid.sql.Connection]{conn-10003} closed
[DEBUG][20-04-07][druid.sql.Connection]{conn-10004} closed
[DEBUG][20-04-07][druid.sql.Statement]{conn-10005, pstmt-20000} closed
[DEBUG][20-04-07][druid.sql.Connection]{conn-10005} closed
